{
	"info": {
		"_postman_id": "ff686dc3-0ed5-439a-9a59-c238379e747b",
		"name": "Consumer Credit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31878079",
		"_collection_link": "https://highnotets.postman.co/workspace/Highnote-Technical-Sales~dca6e8ba-6bac-43b7-b246-385f1134f2aa/collection/17472691-ff686dc3-0ed5-439a-9a59-c238379e747b?action=share&source=collection_link&creator=31878079"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "API Key Management",
					"item": [
						{
							"name": "Get All API Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"first\": 10\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create API Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"secretKey\": {\n      \"name\": \"Test Key\"\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke API Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"apiKeyId\": \"API_KEY_ID\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organization",
					"item": [
						{
							"name": "Get All Organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Organization by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{ _.apiKey }}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetOrganizationByID($id: ID!) {\n  node(id: $id) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n        environment\n        region\n      }\n      financialAccounts {\n        ledgers {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"id\": \"ORGANIZATION_ID\"\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Organization Profile Display Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
										"variables": "{\n\t\"input\": {\n\t\t\"id\": \"ORGANIZATION_ID\",\n\t\t\"displayName\": \"Test\"\n\t}\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consumer Credit Card Product",
					"item": [
						{
							"name": "Create Card Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"cardProductId\", pm.response.json().data.createCardProduct.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"cardProduct\": {\n      \"name\": \"Consumer Credit {{currentTimestampFormatted}}\",\n      \"usage\": \"MULTI_USE\",\n      \"vertical\": \"CONSUMER_CREDIT\"\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable Credit Card Feature",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation EnableCreditCardFeature(\n\t$input: EnableCreditCardFeatureInput!\n) {\n\tenableCreditCardFeature(input: $input) {\n\t\t__typename\t\t\t\n\t\t... on CardProduct {\n\t\t\tid\n\t\t\tfeatures {\n\t\t\t\t__typename\n\t\t\t\tenabled\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}",
										"variables": "{\n  \"input\": {\n    \"cardProductId\": \"{{cardProductId}}\",\n    \"feature\": \"CHARGE\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Card Product Credit Plan Templates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('creditPlanTemplateId', pm.response.json().data.node.creditPlanTemplates.edges[0].node.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetCardProductWithCreditPlanTemplates($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlanTemplates {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              variableAprIndex\n              scraApr\n            }\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            maximumCreditLimit {\n              currencyCode\n              value\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"id\": \"{{cardProductId}}\"\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Credit Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('cardProductCreditPlanId', pm.response.json().data.createCardProductCreditPlan.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateCardProductCreditPlan($input: CreateCardProductCreditPlanInput!) {\n  createCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      name\n      planType\n      status\n      createdAt\n      updatedAt\n      interestPolicy {\n        rateType\n        accrualType\n        accrualMethod\n        assessmentSchedule\n        defaultApr\n        scraApr\n      }\n      percentageOfCreditLimit\n      balanceType\n      effectiveFromDate\n      effectiveThroughDate\n      riskBasedPricingPolicy {\n        isRiskBased\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"productId\": \"{{cardProductId}}\",\n    \"creditPlanTemplateId\": \"{{creditPlanTemplateId}}\",\n    \"name\": \"Default Credit Plan\",\n    \"defaultApr\": 10,\n    \"percentageOfCreditLimit\": 100\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Credit Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ActivateCardProductCreditPlan($input: ActivateCardProductCreditPlanInput!) {\n  activateCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      effectiveFromDate\n      effectiveThroughDate\n      updatedAt\n      createdAt\n      name\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"id\": \"CARD_PLAN_ID\",\n    \"effectiveFromDate\": \"2024-01-31\",\n    \"effectiveThroughDate\": \"2025-01-31\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable Collaborative Application Underwriting Feature",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation EnableCollaborativeApplicationUnderwritingFeature($input: EnableCollaborativeApplicationUnderwritingFeatureInput!) {\n  enableCollaborativeApplicationUnderwritingFeature(input: $input) {\n    ... on CardProduct {\n      id\n      name\n      features {\n        ... on CollaborativeApplicationUnderwritingCardProductFeature {\n          enabled\n          createdAt\n          updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"cardProductId\": \"{{cardProductId}}\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Card Product Credit Configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetCardProductWithCreditConfigs($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditConfiguration {\n        accountAging {\n          delinquentInDays\n          suspendedInDays\n          chargeOffInDays\n          lateFeeGracePeriodInDays\n        }\n        billingCycleConfiguration {\n          billingCycleGracePeriodInDays\n          billingCycleGracePeriodType\n          billingCyclePeriod\n        }\n        interest {\n          includesFees\n          includesPurchase\n        }\n        minimumPayment {\n          includesInterestAmount\n          includesFeesCharged\n          includesPastDueAmount\n          percentage\n          thresholdAmount {\n            currencyCode\n            value\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"id\": \"{{cardProductId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Card Product Credit Plans",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetCardProductCreditPlans($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlans {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            percentageOfCreditLimit\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"id\": \"{{cardProductId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query Ping {\n  ping\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "introspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Onboarding",
			"item": [
				{
					"name": "Person Account Holder",
					"item": [
						{
							"name": "Manual Review",
							"item": [
								{
									"name": "Create Person Account Holder In Review",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('personAccountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"email\": \"foo@example.com\",\n      \"name\": {\n        \"givenName\": \"IN-REVIEW\",\n        \"familyName\": \"IN-REVIEW\"\n      },\n      \"billingAddress\": {\n        \"streetAddress\": \"123 Manual Review St.\",\n        \"postalCode\": \"60654\",\n        \"locality\": \"Chicago\",\n        \"region\": \"IL\",\n        \"countryCodeAlpha3\": \"USA\"\n      },\n      \"phoneNumber\": {\n        \"countryCode\": \"1\",\n        \"number\": \"5555555555\",\n        \"label\": \"MOBILE\",\n        \"extension\": \"312\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"number\": \"111-11-1111\",\n          \"countryCodeAlpha3\": \"USA\"\n        }\n      },\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"employmentStatus\": \"EMPLOYED\",\n        \"totalAnnualIncome\": {\n          \"value\": 1000000,\n          \"currencyCode\": \"USD\"\n        },\n        \"monthlyHousingPayment\": {\n          \"value\": 10000,\n          \"currencyCode\": \"USD\"\n        }\n      },\n      \"dateOfBirth\": \"1980-12-12\",\n      \"externalId\": \"some-id\"\n    }\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Person Account Holder Deny",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('personAccountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"email\": \"foo@example.com\",\n      \"name\": {\n        \"givenName\": \"FORCE-DECLINE\",\n        \"familyName\": \"FORCE-DECLINE\"\n      },\n      \"billingAddress\": {\n        \"streetAddress\": \"123 Manual Review St.\",\n        \"postalCode\": \"60654\",\n        \"locality\": \"Chicago\",\n        \"region\": \"IL\",\n        \"countryCodeAlpha3\": \"USA\"\n      },\n      \"phoneNumber\": {\n        \"countryCode\": \"1\",\n        \"number\": \"5555555555\",\n        \"label\": \"MOBILE\",\n        \"extension\": \"312\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"number\": \"111-11-1111\",\n          \"countryCodeAlpha3\": \"USA\"\n        }\n      },\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"employmentStatus\": \"EMPLOYED\",\n        \"totalAnnualIncome\": {\n          \"value\": 1000000,\n          \"currencyCode\": \"USD\"\n        },\n        \"monthlyHousingPayment\": {\n          \"value\": 10000,\n          \"currencyCode\": \"USD\"\n        }\n      },\n      \"dateOfBirth\": \"1980-12-12\",\n      \"externalId\": \"some-id\"\n    }\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Person Account Credit Freeze",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"name\": {\n        \"givenName\": \"Freeze\",\n        \"familyName\": \"Wisney\"\n      },\n      \"externalId\": \"Freeze,Wisney\",\n      \"email\": \"walt@Freeze.com\",\n      \"dateOfBirth\": \"1991-12-05\",\n      \"billingAddress\": {\n        \"countryCodeAlpha3\": \"USA\",\n        \"region\": \"CA\",\n        \"locality\": \"Anaheim\",\n        \"postalCode\": \"92802\",\n        \"streetAddress\": \"1313 Disneyland Drive\"\n      },\n      \"phoneNumber\": {\n        \"label\": \"HOME\",\n        \"countryCode\": \"1\",\n        \"number\": \"111-111-1111\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"countryCodeAlpha3\": \"USA\",\n          \"number\": \"562-10-0296\"\n        }\n      },\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"employmentStatus\": \"EMPLOYED\",\n        \"totalAnnualIncome\": {\n          \"value\": 1000000,\n          \"currencyCode\": \"USD\"\n        },\n        \"monthlyHousingPayment\": {\n            \"value\": 10000,\n            \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Person Account Credit Fraud Alert",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"name\": {\n        \"givenName\": \"Fraud\",\n        \"familyName\": \"Wisney\"\n      },\n      \"externalId\": \"Fraud,Wisney\",\n      \"email\": \"walt@Fraud.com\",\n      \"dateOfBirth\": \"1991-12-05\",\n      \"billingAddress\": {\n        \"countryCodeAlpha3\": \"USA\",\n        \"region\": \"CA\",\n        \"locality\": \"Anaheim\",\n        \"postalCode\": \"92802\",\n        \"streetAddress\": \"1313 Disneyland Drive\"\n      },\n      \"phoneNumber\": {\n        \"label\": \"HOME\",\n        \"countryCode\": \"2\",\n        \"number\": \"222-222-2222\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"countryCodeAlpha3\": \"USA\",\n          \"number\": \"562-10-0296\"\n        }\n      },\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"employmentStatus\": \"EMPLOYED\",\n        \"totalAnnualIncome\": {\n          \"value\": 1000000,\n          \"currencyCode\": \"USD\"\n        },\n        \"monthlyHousingPayment\": {\n            \"value\": 10000,\n            \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Person Account Holder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('personAccountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const highdomizer = pm.require('@highnotets/highnote-randomizer')"
										],
										"type": "text/javascript",
										"packages": {
											"@highnotets/highnote-randomizer": {
												"id": "01954378-a2d5-78b3-b58b-5e387ceac357"
											}
										}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on AccessDeniedError {\n        message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n        }\n        employmentStatus\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"name\": {\n        \"givenName\": \"Walt\",\n        \"familyName\": \"Disney\"\n      },\n      \"externalId\": \"Disney,Walt\",\n      \"email\": \"walt@disney.com\",\n      \"dateOfBirth\": \"1991-12-05\",\n      \"billingAddress\": {\n        \"countryCodeAlpha3\": \"USA\",\n        \"region\": \"CA\",\n        \"locality\": \"Anaheim\",\n        \"postalCode\": \"92802\",\n        \"streetAddress\": \"1313 Disneyland Drive\"\n      },\n      \"phoneNumber\": {\n        \"label\": \"HOME\",\n        \"countryCode\": \"1\",\n        \"number\": \"714-316-3075\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"countryCodeAlpha3\": \"USA\",\n          \"number\": \"562-10-0296\"\n        }\n      },\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"employmentStatus\": \"EMPLOYED\",\n        \"totalAnnualIncome\": {\n          \"value\": 1400,\n          \"currencyCode\": \"USD\"\n        },\n        \"monthlyHousingPayment\": {\n            \"value\": 100,\n             \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Person Account Holders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query SearchPersonAccountHolders($filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(filterBy: $filterBy) {\n    edges {\n      node {\n        id\n        email\n        dateOfBirth\n        externalId\n        updatedAt\n        createdAt\n        financialAccounts {\n          edges {\n            node {\n              id\n              name\n              owner {\n                __typename\n              }\n            }\n          }\n        }\n        paymentCards {\n          edges {\n            node {\n              last4\n              financialAccounts {\n                id\n                name\n                owner {\n                  __typename\n                }\n              }\n            }\n          }\n        }\n        name {\n          givenName\n          familyName\n          title\n          suffix\n          middleName\n        }\n        billingAddress {\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n        phoneNumbers {\n          countryCode\n          number\n          label\n        }\n        identificationDocument {\n          socialSecurityNumber {\n            numberHash\n            countryCodeAlpha3\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"filterBy\": {\n    \"name\": {\n      \"givenName\": {\n        \"soundsLike\": \"Ian\"\n      },\n      \"familyName\": {\n        \"soundsLike\": \"Somnia\"\n      }\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Person Account Holder Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateUSPersonAccountHolderBillingAddress(\n  $input: UpdateUSPersonAccountHolderBillingAddressInput!\n) {\n  updateUSPersonAccountHolderBillingAddress(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      paymentCards {\n        edges {\n          node {\n            id\n            last4\n            application {\n              accountHolderSnapshot {\n                ... on USPersonAccountHolderSnapshot {\n                  billingAddress {\n                    streetAddress\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"accountHolderId\": \"PERSON_ACCOUNT_HOLDER_ID\",\n    \"billingAddress\": {\n      \"streetAddress\": \"123 Main Street\",\n      \"extendedAddress\": \"\",\n      \"postalCode\": \"60654\",\n      \"region\": \"IL\",\n      \"locality\": \"Chicago\",\n      \"countryCodeAlpha3\": \"USA\"\n    },\n    \"updatePaymentCardBillingAddress\": true\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Person Account Holder Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateUSPersonAccountHolderPhone(\n  $input: UpdateUSPersonAccountHolderPhoneInput!\n) {\n  updateUSPersonAccountHolderPhone(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"accountHolderId\": \"ACCOUNT_HOLDER_ID\",\n    \"phoneNumber\": {\n      \"number\": \"5555555556\",\n      \"countryCode\": \"1\",\n      \"label\": \"MOBILE\"\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Person Account Holder Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateUSPersonAccountHolderEmail(\n  $input: UpdateUSPersonAccountHolderEmailInput!\n) {\n  updateUSPersonAccountHolderEmail(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"accountHolderId\": \"ACCOUNT_HOLDER_ID\",\n    \"email\": \"foo+testing-update@email.com\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Person Account Holder Credit Risk Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation UpdateUSPersonAccountHolderCreditRiskAttribute($input: UpdateUSPersonAccountHolderCreditRiskAttributeInput!) {\n  updateUSPersonAccountHolderCreditRiskAttribute(input: $input) {\n    ... on USPersonAccountHolder {\n      id\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        employmentStatus\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"accountHolderId\": \"ps_ah01bb743c1817764c23a0c1dd5d5a5ae88f\",\n    \"personCreditRiskAttributes\": {\n      \"totalAnnualIncome\": [\n        {\n          \"value\": 100000000,\n          \"currencyCode\": \"USD\"\n        }\n      ]\n    }\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Person Account Holders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "fragment accountHolder on USPersonAccountHolder {\n  id\n  email\n  dateOfBirth\n  externalId\n  createdAt\n  updatedAt\n  name {\n    givenName\n    familyName\n    middleName\n    suffix\n    title\n  }\n  externalFinancialAccounts {\n    edges {\n      node {\n        __typename\n        ... on ExternalFinancialBankAccount {\n          id\n        }\n      }\n    }\n  }\n  identificationDocument {\n    socialSecurityNumber {\n      numberHash\n      countryCodeAlpha3\n    }\n  }\n  billingAddress {\n    streetAddress\n    extendedAddress\n    postalCode\n    region\n    locality\n    countryCodeAlpha3\n  }\n  phoneNumbers {\n    number\n    countryCode\n    label\n  }\n  financialAccounts {\n    edges {\n      node {\n        name\n        owner {\n          __typename\n        }\n      }\n    }\n  }\n  paymentCards {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        last4\n        formFactor\n        financialAccounts {\n          __typename\n          id\n          name\n        }\n      }\n    }\n  }\n  cardProductApplications {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        applicationState {\n          status\n        }\n      }\n    }\n  }\n}\n\nquery ListAccountHolders($first: Int, $filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(first: $first, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...accountHolder\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"first\": 20,\n  \"filterBy\": {}\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Person Account Holder by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetUSPersonAccountHolderByID($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      cardProductApplications {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      externalFinancialAccounts {\n        edges {\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n            }\n          }\n        }\n      }\n      financialAccounts {\n        edges {\n          node {\n            directDepositDetails {\n              id\n            }\n          }\n        }\n      }\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"id\": \"PERSON_ACCOUNT_HOLDER_ID\"\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Application",
					"item": [
						{
							"name": "Secure Document Upload",
							"item": [
								{
									"name": "Simulation",
									"item": [
										{
											"name": "Simulate Application Document Review",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
														"variables": "{\n  \"input\": {\n    \"applicationId\": \"PERSON_APPLICATION_ID\",\n    \"documentUploadLinkId\": \"DOCUMENT_UPLOAD_LINK_ID\",\n    \"documentUploadSessionId\": \"DOCUMENT_UPLOAD_SESSION_ID\",\n    \"newReviewStatus\": \"REVIEW_STATUS_ENUM\"\n  }\n}\n"
													}
												},
												"url": {
													"raw": "{{apiUrl}}",
													"host": [
														"{{apiUrl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simulate Application Verification Status Change",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
														"variables": "{\n  \"input\": {\n    \"applicantId\": \"{{personAccountHolderId}}\",\n    \"applicationId\": \"{{personAccountHolderCardProductApplicationId}}\",\n    \"newVerificationStatus\": \"PASSED\"\n  }\n}\n"
													}
												},
												"url": {
													"raw": "{{apiUrl}}",
													"host": [
														"{{apiUrl}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Simulate Application Status Change",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": true,
												"disableUrlEncoding": false,
												"disableCookies": false
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
														"variables": "{\n  \"input\": {\n    \"applicationId\": \"APPLICATION_ID\",\n    \"newApplicationStatus\": \"STATUS_ENUM\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{apiUrl}}",
													"host": [
														"{{apiUrl}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Document Upload Session By Application ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        primaryDocumentTypes\n        secondaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
												"variables": "{\n    \"id\": \"APPLICATION_ID\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Document Upload Session By Session ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetDocumentUpload_via_SessionID($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on USAccountHolderApplicationDocumentUploadSession {\n\t\t\t__typename\n\t\t\tid\n\t\t\tstatus\n\t\t\tprimaryDocumentTypes\n\t\t\tsecondaryDocumentTypes\n\t\t\tsupportingDocumentTypes\n\t\t\tuploadRequirements {\n\t\t\t\tconstraints {\n\t\t\t\t\t... on DocumentUploadRequirementConstraint {\n\t\t\t\t\t\tdocumentType\n\t\t\t\t\t\tnumberOfDocuments\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdocuments {\n\t\t\t\t... on DocumentUploadLink {\n\t\t\t\t\tid\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentCategoryType\n\t\t\t\t\tdocumentType\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentUploadSession {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
												"variables": "{\n    \"id\": \"DOCUMENT_UPLOAD_SESSION_ID\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Document Upload Client Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('documentUploadSessionClientToken', pm.response.json().data.generateDocumentUploadClientToken.value);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"documentUploadSessionId\": \"{{documentUploadSessionId}}\",\n    \"permissions\": [\n      \"MANAGE_DOCUMENT_UPLOAD_SESSION\"\n    ]\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Start Document Upload Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"documentUploadSessionId\": \"DOCUMENT_UPLOAD_SESSION_ID\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Document Upload Secure Link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"documentUploadSessionId\": \"DOCUMENT_UPLOAD_SESSION_ID\",\n    \"documentType\": \"BANK_STATEMENT\" // Provide correct enum\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "End Document Upload Session",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"documentUploadSessionId\": \"DOCUMENT_UPLOAD_SESSION_ID\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Person Account Holder Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('personAccountHolderCardProductApplicationId', pm.response.json().data.createAccountHolderCardProductApplication.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n      ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }  \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            region\n            countryCodeAlpha3\n            postalCode\n          }\n          currentVerification {\n            reason\n            status\n          }\n        }\n      }    \n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
										"variables": "{\n    \"input\": {\n        \"accountHolderId\": \"{{personAccountHolderId}}\",\n        \"cardProductId\": \"{{cardProductId}}\", \n        \"cardHolderAgreementConsent\": {\n            \"consentTimestamp\": \"2022-01-01T23:59:59Z\",\n            \"primaryAuthorizedPersonId\": \"{{personAccountHolderId}}\"\n        }\n    }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Person Account Holder Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPersonAccountHolderByApplicationID($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      createdAt\n      applicationState {\n        status\n      }\n      adverseActionReasons {\n        code\n        description\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          email\n          dateOfBirth\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          billingAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          currentVerification {\n            status\n            riskStatus\n            results {\n                code\n                description\n            }\n            adverseActionReasons {\n                code\n                description\n            }\n            reason\n          }\n          currentCreditUnderwritingVerification {\n            status\n          }\n          personCreditRiskAttributes {\n            employmentStatus\n            currentDebtObligations {\n              currencyCode\n              value\n            }\n            totalAnnualIncome {\n              currencyCode\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"id\": \"{{personAccountHolderCardProductApplicationId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Person Account Holder Credit / Application Results by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetCreditApplication($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      cardProduct {\n        id\n      }\n      applicationState {\n        status\n      }\n      applicationDenialReason\n      adverseActionReasons {\n        code\n        description\n      }\n      creditReportFraudAlertVerificationResult {\n        accountHolderInitiatedApplication\n        address\n        dateOfBirth\n        name\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          currentVerification {\n            status\n            riskStatus\n            reason\n            results {\n              code\n              description\n            }\n            adverseActionReasons {\n              code\n              description\n            }\n          }\n          currentCreditUnderwritingVerification {\n            creditScoreDetails {\n                creditBureau\n                creditScoreModels\n                    {\n                        creditScore\n                        creditScoreType\n                        creditScoreReasons\n                    }\n            }\n            status\n            reviewReasonDetails {\n              memo\n              reviewReason\n            }\n            decision {\n              ... on UnderwriterPositiveDecision {\n                creditLine {\n                  currencyCode\n                  decimalPlaces\n                  value\n                }\n                creditPlanTerms {\n                  creditPlan {\n                    id\n                  }\n                  interest {\n                    apr\n                  }\n                }\n              }\n            }\n            decisionDate\n            decisionResults\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"id\": \"{{AppId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Application Underwriting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ApproveCreditProductApplicationUnderwriting($input: ApproveCreditProductApplicationUnderwritingInput!) {\n  approveCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n        name\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"applicationId\": \"APPLICATION_ID\",\n    \"decisionDate\": \"2023-01-01T23:59:59Z\",\n    \"standardPurchaseCreditLimit\": {\n      \"currencyCode\": \"USD\",\n      \"value\": 100000\n    }\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deny Application Underwriting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation DenyCreditProductApplicationUnderwriting($input: DenyCreditProductApplicationUnderwritingInput!) {\n  denyCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      applicationDenialReason\n      adverseActionReasons {\n        code\n        description\n      }\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"applicationId\": \"APPLICATION_ID\",\n    \"adverseActionReasons\": [\n      {\n        \"code\": \"INSUFFICIENT_INCOME\"\n      }\n    ],\n    \"decisionDate\": \"2023-01-01T23:59:59Z\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Underwriting",
					"item": [
						{
							"name": "Adverse Actions",
							"item": [
								{
									"name": "Create Person Account Holder With Insufficient Income",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('accountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"email\": \"bob@example.com\",\n      \"name\": {\n        \"givenName\": \"Bob\",\n        \"familyName\": \"Insufficient-Income\"\n      },\n      \"billingAddress\": {\n        \"streetAddress\": \"123 Green St.\",\n        \"postalCode\": \"60654\",\n        \"locality\": \"Chicago\",\n        \"region\": \"IL\",\n        \"countryCodeAlpha3\": \"USA\"\n      },\n      \"phoneNumber\": {\n        \"countryCode\": \"1\",\n        \"number\": \"5555555555\",\n        \"label\": \"MOBILE\",\n        \"extension\": \"312\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"number\": \"111-11-1111\",\n          \"countryCodeAlpha3\": \"USA\"\n        }\n      },\n      \"dateOfBirth\": \"1980-12-12\",\n      \"externalId\": \"some-id\",\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"totalAnnualIncome\": {\n          \"value\": 100,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Person Account Holder With Delinquent Credit Obligations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('accountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"email\": \"bob@example.com\",\n      \"name\": {\n        \"givenName\": \"Bob\",\n        \"familyName\": \"Delinquent-Credit\"\n      },\n      \"billingAddress\": {\n        \"streetAddress\": \"123 Green St.\",\n        \"postalCode\": \"60654\",\n        \"locality\": \"Chicago\",\n        \"region\": \"IL\",\n        \"countryCodeAlpha3\": \"USA\"\n      },\n      \"phoneNumber\": {\n        \"countryCode\": \"1\",\n        \"number\": \"5555555555\",\n        \"label\": \"MOBILE\",\n        \"extension\": \"312\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"number\": \"111-11-1111\",\n          \"countryCodeAlpha3\": \"USA\"\n        }\n      },\n      \"dateOfBirth\": \"1980-12-12\",\n      \"externalId\": \"some-id\",\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"totalAnnualIncome\": {\n          \"value\": 200,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Person Account Holder With Insufficient Income and Delinquent Credit Obligations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('accountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"email\": \"bob@example.com\",\n      \"name\": {\n        \"givenName\": \"Bob\",\n        \"familyName\": \"Insufficient-Income-Delinquent-Credit\"\n      },\n      \"billingAddress\": {\n        \"streetAddress\": \"123 Green St.\",\n        \"postalCode\": \"60654\",\n        \"locality\": \"Chicago\",\n        \"region\": \"IL\",\n        \"countryCodeAlpha3\": \"USA\"\n      },\n      \"phoneNumber\": {\n        \"countryCode\": \"1\",\n        \"number\": \"5555555555\",\n        \"label\": \"MOBILE\",\n        \"extension\": \"312\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"number\": \"111-11-1111\",\n          \"countryCodeAlpha3\": \"USA\"\n        }\n      },\n      \"dateOfBirth\": \"1980-12-12\",\n      \"externalId\": \"some-id\",\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"totalAnnualIncome\": {\n          \"value\": 200,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Person Account Holder With Credit Freeze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('accountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"email\": \"bob@example.com\",\n      \"name\": {\n        \"givenName\": \"Bob\",\n        \"familyName\": \"Credit-Freeze\"\n      },\n      \"billingAddress\": {\n        \"streetAddress\": \"123 Green St.\",\n        \"postalCode\": \"60654\",\n        \"locality\": \"Chicago\",\n        \"region\": \"IL\",\n        \"countryCodeAlpha3\": \"USA\"\n      },\n      \"phoneNumber\": {\n        \"countryCode\": \"1\",\n        \"number\": \"1111111111\",\n        \"label\": \"MOBILE\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"number\": \"111-11-1111\",\n          \"countryCodeAlpha3\": \"USA\"\n        }\n      },\n      \"dateOfBirth\": \"1980-12-12\",\n      \"externalId\": \"some-id\",\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"totalAnnualIncome\": {\n          \"value\": 200,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Person Account Holder With Fraud Alert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('accountHolderId', pm.response.json().data.createUSPersonAccountHolder.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"personAccountHolder\": {\n      \"email\": \"bob@example.com\",\n      \"name\": {\n        \"givenName\": \"Bob\",\n        \"familyName\": \"Fraud-Alert\"\n      },\n      \"billingAddress\": {\n        \"streetAddress\": \"123 Green St.\",\n        \"postalCode\": \"60654\",\n        \"locality\": \"Chicago\",\n        \"region\": \"IL\",\n        \"countryCodeAlpha3\": \"USA\"\n      },\n      \"phoneNumber\": {\n        \"countryCode\": \"1\",\n        \"number\": \"2222222222\",\n        \"label\": \"MOBILE\",\n        \"extension\": \"312\"\n      },\n      \"identificationDocument\": {\n        \"socialSecurityNumber\": {\n          \"number\": \"111-11-1111\",\n          \"countryCodeAlpha3\": \"USA\"\n        }\n      },\n      \"dateOfBirth\": \"1980-12-12\",\n      \"externalId\": \"some-id\",\n      \"personCreditRiskAttributes\": {\n        \"currentDebtObligations\": {\n          \"value\": 0,\n          \"currencyCode\": \"USD\"\n        },\n        \"totalAnnualIncome\": {\n          \"value\": 200,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Issuance",
			"item": [
				{
					"name": "Financial Accounts",
					"item": [
						{
							"name": "Issue Financial Account For Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('financialAccountId', pm.response.json().data.issueFinancialAccountForApplication.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"applicationId\": \"{{personAccountHolderCardProductApplicationId}}\",\n    \"name\": \"Credit Account 1\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Financial Account By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n    \"id\": \"FINANCIAL_ACCOUNT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Financial Account Credit Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query LookupFinancialAccountCreditPlanConfigurations(\n  $id: ID!\n) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      id\n      creditConfiguration {\n        servicemembersCivilReliefAct {\n          status\n          effectiveFrom\n          effectiveThrough\n          activeDutyFrom\n          activeDutyThrough\n          updatedAt\n          createdAt\n        }\n        militaryLendingAct {\n          effectiveFrom\n          effectiveThrough\n          updatedAt\n          createdAt\n        }\n        interestRates {\n          balanceType\n          interest {\n            apr\n          }\n          creditPlan {\n            id\n            name\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            balanceType\n            interestPolicy {\n              rateType\n              index {\n                type\n                value\n                effectiveDate\n              }\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            percentageOfCreditLimit\n            planType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            status\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"id\": \"FINANCIAL_ACCOUNT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Credit Limit",
					"item": [
						{
							"name": "Set Credit Limit For Financial Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.6.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"financialAccountId\": \"{{financialAccountId}}\",\n    \"amount\": {\n      \"value\": 100000,\n      \"currencyCode\": \"USD\"\n    },\n    \"memo\": \"Set Credit Limit $1000\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Financial Account Credit Limit Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.6.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
										"variables": "{\n    \"id\": \"FINANCIAL_ACCOUNT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment Cards",
					"item": [
						{
							"name": "Issue Payment Card For Financial Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('paymentCardId', pm.response.json().data.issuePaymentCardForFinancialAccount.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"financialAccountId\": \"{{financialAccountId}}\",\n    \"options\": {\n      \"activateOnCreate\": false,\n      \"expirationDate\": \"2028-01-01T23:59:59Z\"\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Client Token To Set PIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"paymentCardId\": \"PAYMENT_CARD_ID\",\n    \"permissions\": \"SET_PAYMENT_CARD_PIN\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Client Token For Restricted Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"paymentCardId\": \"PAYMENT_CARD_ID\",\n    \"permissions\": \"READ_RESTRICTED_DETAILS\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "View Payment Card Restricted Details",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n            id\n            expirationDate\n            restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n                    cvv\n                }\n            }\n            originalPaymentCard {\n                id\n            }\n        }\n    }\n}",
										"variables": "{\n    \"id\": \"{{paymentCardId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Activate Payment Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"paymentCardId\": \"{{paymentCardId}}\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Pin For Payment Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n    }\nreq_06f2e9d7416d41eeaa473efa19375e48    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"paymentCardId\": \"PAYMENT_CARD_ID\",\n    \"newPin\": \"1234\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Suspend Payment Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"paymentCardId\": \"PAYMENT_CARD_ID\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reissue Payment Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"options\": {\n      \"reissueFeatures\": {\n        \"copyNumber\": true,\n        \"copyPin\": true\n      },\n      \"expirationDate\": \"2024-12-29T23:12:30Z\",\n      \"activateOnCreate\": false\n    },\n    \"originalPaymentCardId\": \"ORIGINAL_PAYMENT_CARD_ID\"\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close Payment Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"paymentCardId\": \"PAYMENT_CARD_ID\"\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Simulation",
							"item": [
								{
									"name": "Simulate Authorization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transaction {\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"input\": {\n        \"amount\": {\n            \"value\": 1000,\n            \"currencyCode\": \"USD\"\n        },\n        \"cardId\":\"PAYMENT_CARD_ID\"\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Clearing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"input\": {\n        \"transactionId\": \"TRANSACTION_ID\" \n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Reversal",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"input\": {\n        \"transactionId\": \"TRANSACTION_ID\" \n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Refund",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
												"variables": "{\n    \"input\": {\n        \"transactionId\":\"TRANSACTION_ID\",\n        \"amount\": {\n            \"value\":10000,\n            \"currencyCode\":\"USD\"\n        }\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Single Step Auth And Clear",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
												"variables": "{ \n    \"input\":{\n        \"cardId\":\"PAYMENT_CARD_ID\",\n        \"amount\": {\n            \"currencyCode\":\"USD\",\n            \"value\":1000\n        },\n        \"merchantDetails\": {\n            \"description\":\"Test Merchant\",\n            \"name\":\"Test Merchant Name\"\n        }\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Transaction Event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
										"variables": "{\n    \"id\": \"TRANSACTION_EVENT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction Events By Payment Card And TransactionId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n    \"id\":\"PAYMENT_CARD_ID\",\n    \"filterBy\": {\n        \"transactionId\": {\n            \"equals\":\"TRANSACTION_ID\"\n        }\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Financial Account Activitities By Financial Account ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ListFinancialActivitiesByFinancialAccountID($id: ID!, $first: Int, $after: String ) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      externalId\n      name\n      createdAt\n      updatedAt\n      financialAccountActivities(first: $first, after: $after) {\n        edges {\n          cursor\n          node {\n            __typename\n            pendingAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            postedAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            sign\n            updatedAt\n            isComplete\n            createdAt\n            source {\n              ... SourceFragment\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n}\n\nfragment SourceFragment on FinancialAccountActivitySource {\n    ... on DebitTransaction {\n      id\n      transactionEvents {\n        ... TransactionEventFragment\n      }\n    }\n    ... on CreditTransaction {\n      id\n      transactionEvents {\n        ... TransactionEventFragment\n      }\n    }\n  }\n}\n\nfragment TransactionEventFragment on TransactionEvent {                    \n    __typename\n    id\n    createdAt\n    approvedAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n      cardDataInputCapability\n    }\n    transactionProcessingType\n    responseCode\n    currentFinancialAccountAvailableToSpendAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    currentFinancialAccountMaximumBalanceAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    paymentCard {\n      id\n    }\n  }\n}",
										"variables": "{\n  \"id\": \"FINANCIAL_ACCOUNT_ID\",\n  \"first\": 20,\n  \"after\": \"LAST_CURSOR_FROM_CURRENT_RESULT\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authorization Controls",
					"item": [
						{
							"name": "Spend Rules",
							"item": [
								{
									"name": "Attach Spend Rule To Card Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input: $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
												"variables": "{\n    \"input\": {\n        \"cardProductId\": \"CARD_PRODUCT_ID\",\n        \"spendRule\": { \n            \"id\":\"SPEND_RULE_ID\",\n            \"version\":\"0\"\n        }\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Merchant Category Spend Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n    \"input\": {\n        \"name\":\"Fuel Rule\",\n        \"allowed\": [\"AUTOMATED_FUEL_DISPENSERS\"],\n        \"blocked\":[\"AIRLINES_AIR_CARRIERS\"]\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Merchant Category Spend Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n    \"input\": {\n        \"spendRuleId\": \"SPEND_RULE_ID\",\n        \"allowed\":[\"AUTOMATED_FUEL_DISPENSERS\"],\n        \"blocked\":[]\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Spend Rule To Payment Card",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
												"variables": "{\n   \"input\":{\n      \"paymentCardId\":\"PAYMENT_CARD_ID\",\n      \"spendRule\":{\n         \"id\":\"SPEND_RULE_ID\",\n         \"version\":\"0\"\n      }\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detach Spend Rule From Card Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input: $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n   \"input\":{\n      \"cardProductId\": \"CARD_PRODUCT_ID\",\n      \"spendRule\": {\n         \"id\": \"SPEND_RULE_ID\"\n      }\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detach Spend Rule From Payment Card",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input: $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n   \"input\":{\n      \"paymentCardId\": \"PAYMENT_CARD_ID\",\n      \"spendRule\": {\n         \"id\": \"SPEND_RULE_ID\"\n      }\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Velocity Rules",
							"item": [
								{
									"name": "Create Velocity Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n    ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              version\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"name\": \"Test Velocity Control - Max $1000 per month\",\n      \"cumulativeRule\": {\n         \"id\": \"AMOUNT_SPEND_RULE_ID\",\n         \"version\": \"0\"\n      },\n      \"spendRules\": [\n         {\n            \"id\": \"ADDITIONAL_SPEND_RULE_ID\",\n            \"version\": \"O\"\n         }\n      ],\n      \"velocityRuleWindow\": \"MONTHLY\"\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Amount Limit Spend Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input: $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n        currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"name\": \"Test Amount Limit Rule\",\n      \"maximumAmount\": {\n         \"value\": 100000,\n         \"currencyCode\": \"USD\"\n      }\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Payment Card Velocity Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"paymentCardId\": \"PAYMENT_CARD_ID\",\n    \"velocityRule\": {\n      \"velocityRuleId\": \"VELOCITY_RULE_ID\",\n      \"version\": \"0\"\n    }\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detach Payment Card Velocity Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"paymentCardId\":\"PAYMENT_CARD_ID\",\n    \"velocityRule\": {\n      \"velocityRuleId\":\"VELOCITY_RULE_ID\",\n      \"version\":\"VELOCITY_RULE_VERSION\"\n    }\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Velocity Rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n          updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n              name\n              maximumAmount {\n                value\n                currencyCode\n              }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n          spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Payment Card Velocity Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n  \t}\n\t}\n}",
												"variables": "{\n  \"id\": \"PAYMENT_CARD_ID\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Financial Account With Velocity Balance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n            version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n",
												"variables": "{\n  \"id\":\"FINANCIAL_ACCOUNT_ID\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Attach Card Product Velocity Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"cardProductId\": \"CARD_PRODUCT_ID\",\n    \"velocityRule\": { \n      \"velocityRuleId\": \"VELOCITY_RULE_ID\",\n      \"version\": \"VELOCITY_RULE_VERSION\"\n    }\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Detach Card Product Velocity Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"cardProductId\": \"CARD_PRODUCT_ID\",\n    \"velocityRule\": {\n      \"velocityRuleId\": \"VELOCITY_RULE_ID\",\n      \"version\": \"VELOCITY_RULE_VERSION\"\n    }\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Collaborative Authorization",
							"item": [
								{
									"name": "Add Collaborative Authorization Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"collabAuthEndpointId\", pm.response.json().data.addCollaborativeAuthorizationEndpoint.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AddCollaborativeAuthorizationEndpoint($input: AddCollaborativeAuthorizationEndpointInput!) {\n  addCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on  CollaborativeAuthorizationEndpoint{\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"name\": \"Test Collaborative Auth Endpoint\",\n    \"uri\": \"https://example.com\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Collaborative Authorization Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ActivateCollaborativeAuthorizationEndpoint($input: ActivateCollaborativeAuthorizationEndpointInput!) {\n  activateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": { \n    \"endpointId\": \"{{collabAuthEndpointId}}\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Collaborative Authorization Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query FindCollaborativeAuthorizationEndpoint($id: ID!) {\n  node(id: $id) {\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n  }\n}",
												"variables": "{\n  \"id\": \"{{collabAuthEndpointId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deactivate Collaborative Authorization Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DeactivateCollaborativeAuthorizationEndpoint($input: DeactivateCollaborativeAuthorizationEndpointInput!) {\n  deactivateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on  CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"endpointId\": \"{{collabAuthEndpointId}}\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Collaborative Authorization Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation RemoveCollaborativeAuthorizationEndpoint($input: RemoveCollaborativeAuthorizationEndpointInput!) {\n  removeCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"endpointId\": \"{{collabAuthEndpointId}}\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Collaborative Authorization Endpoints",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query CollaborativeAuthorizationEndpoints($after: String, $first: Int) {\n\torganizations{\n\t\tid\n\t\tcollaborativeAuthorizationEndpoints(first: $first, after: $after) {\n\t\t\t__typename\n\n\t\t\tedges {\n\t\t\t\t__typename\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tsigningKeys {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tsecret\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t}\n\t\t}\n\t}\n}\n",
												"variables": "{}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rename Collaborative Authorization Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation RenameCollaborativeAuthorizationEndpoint($input: RenameCollaborativeAuthorizationEndpointInput!) {\n  renameCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"endpointId\": \"{{collabAuthEndpointId}}\",\n    \"name\": \"Renamed Collaborative Auth Endpoint\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Add Collaborative Auth operations"
						}
					]
				}
			]
		},
		{
			"name": "Funding",
			"item": [
				{
					"name": "Product Funding Account",
					"item": [
						{
							"name": "Generate Direct Deposit Detail Client Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation GenerateDirectDepositDetailClientToken($input: GenerateDirectDepositDetailClientTokenInput!) {\n  generateDirectDepositDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"directDepositDetailId\": \"DIRECT_DEPOSIT_DETAIL_ID\",\n        \"permissions\": [\"READ_RESTRICTED_DETAILS\"]\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Direct Deposit Details By ID With Client Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetDirectDepositDetailsByIDWithClientToken($id: ID!) {\n  node(id: $id) {\n    ... on DirectDepositDetail {\n      id\n      restrictedDetails {\n        ... on DirectDepositDetailRestrictedDetails {\n          number\n          routingNumber\n          bank {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\n    \"id\": \"DIRECT_DEPOSIT_DETAIL_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product Funding Account Direct Deposit ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{ _.apiKey }}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.6.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetProductFundingAccountByCardProductID($id: ID!, $filterBy: AccountHolderFinancialAccountsFilterInput!) {\n  node(id: $id) {\n    ... on CardProduct {\n      accounts(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            name\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            directDepositDetails {\n              id\n              createdAt\n              updatedAt\n              restrictedDetails {\n                ... on DirectDepositDetailRestrictedDetails {\n                  number\n                  routingNumber\n                  bank {\n                    name\n                    address {\n                      streetAddress\n                      extendedAddress\n                      postalCode\n                      region\n                      locality\n                      countryCodeAlpha3\n                    }\n                  }\n                  type\n                }\n                ... on AccessDeniedError {\n                  message\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"id\": \"{{cardProductId}}\",\n  \"filterBy\": {\n    \"features\": {\n      \"equals\": \"PRODUCT_FUNDING\"\n    }\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
										"variables": "{\n  \"input\": {\n    \"toFinancialAccountId\": \"{{financialAccountId}}\",\n    \"source\": \"WIRE\",\n    \"memo\": \"Initial Card Funding\",\n    \"amount\": {\n      \"value\": 50000000,\n      \"currencyCode\": \"USD\"\n    }\n  }\n}\n"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ACH Transfer (& Simulation)",
					"item": [
						{
							"name": "Integrator Initiated (Originated) ACH",
							"item": [
								{
									"name": "Add External Bank Account Verified Through Plaid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"accountHolderId\": \"ACCOUNT_HOLDER_ID\",\n      \"externalToken\": {\n         \"value\": \"processor-token-success\"\n      }\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add External Bank Account Verified Through Finicity",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{ _.apiKey }}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AddExternalBankAccountVerifiedThroughFinicity($input: AddExternalBankAccountVerifiedThroughFinicityInput!) {\n  addExternalBankAccountVerifiedThroughFinicity(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      owner {\n        ... on USPersonAccountHolder {\n          id\n          externalId\n        }\n        ... on USBusinessAccountHolder {\n          id\n          externalId\n        }\n      }\n      name\n      provider\n      accountStatus\n      createdAt\n      updatedAt\n      externalBankAccountDetails {\n        id\n        last4\n        type\n        routingNumber\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"accountHolderId\": \"{{accountHolderId}}\",\n      \"name\": \"Finicity Checking\",\n      \"bankAccountType\": \"CHECKING\",\n      \"externalToken\": {\n         \"receiptId\": \"processor-token-success\",\n         \"customerId\": \"5543088633794259024\",\n         \"products\": [\n            {\n               \"productType\": \"ACH_DETAILS\",\n               \"accountId\": \"8977412844634022494\",\n               \"callLimit\": 1000,\n               \"expirationDetail\": {\n                  \"start\": \"2022-03-10T06:06:20Z\",\n                  \"expiry\": \"2023-03-10T06:06:20Z\"\n               }\n            },\n            {\n               \"productType\": \"CURRENT_BALANCE\",\n               \"accountId\": \"1045023535892401594\",\n               \"callLimit\": 1000,\n               \"expirationDetail\": {\n                  \"start\": \"2022-03-10T06:06:20Z\",\n                  \"expiry\": \"2023-03-10T06:06:20Z\"\n               }\n            },\n            {\n               \"productType\": \"APPROXIMATE_BALANCE\",\n               \"accountId\": \"7895597441790621692\",\n               \"callLimit\": 1000,\n               \"expirationDetail\": {\n                  \"start\": \"2022-03-10T06:06:20Z\",\n                  \"expiry\": \"2023-03-10T06:06:20Z\"\n               }\n            },\n            {\n               \"productType\": \"ACH_OWNER_DETAILS\",\n               \"accountId\": \"5200183909259568542\",\n               \"callLimit\": 1000,\n               \"expirationDetail\": {\n                  \"start\": \"2022-03-10T06:06:20Z\",\n                  \"expiry\": \"2023-03-10T06:06:20Z\"\n               }\n            }\n         ]\n      }\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get External Financial Accounts By Account Holder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
												"variables": "{\n   \"id\": \"{{organizationId}}\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiate Funds Deposit ACH Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"amount\": {\n         \"value\": 1000,\n         \"currencyCode\": \"USD\"\n      },\n      \"toFinancialAccountId\": \"TO_FINANCIAL_ACCOUNT_ID\",\n      \"fromFinancialAccountId\": \"FROM_FINANCIAL_ACCOUNT_ID\",\n      \"descriptor\": {\n         \"companyEntryDescription\": \"Company\",\n         \"individualIdentificationNumber\": \"\",\n         \"individualName\": \"Baja ABC\"\n      },\n      \"transferAgreementConsent\": {\n         \"authorizedPersonId\": \"AUTHORIZED_PERSON_ID\",\n         \"consentTimestamp\": \"2022-12-07T14:42:52.453Z\",\n         \"template\": {\n            \"consentTemplateId\": \"consent\",\n            \"consentTemplateVersion\": \"0\"\n         }\n      }\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiate Funds Withdrawal ACH Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"fromFinancialAccountId\": \"FROM_FINANCIAL_ACCOUNT_ID\",\n      \"toFinancialAccountId\": \"TO_FINANCIAL_ACCOUNT_ID\",\n      \"amount\": {\n         \"value\": 10000,\n         \"currencyCode\": \"USD\"\n      },\n      \"descriptor\": {\n         \"companyEntryDescription\": \"Test Entry\",\n         \"individualName\": \"Test\",\n         \"individualIdentificationNumber\": \"1234\"\n      },\n      \"transferAgreementConsent\": {\n         \"consentTimestamp\": \"2023-12-07T14:42:52.453Z\",\n         \"authorizedPersonId\": \"AUTHORIZED_PERSON_ID\",\n         \"template\": {\n            \"consentTemplateId\": \"consent\",\n            \"consentTemplateVersion\": \"0\"\n         }\n      },\n      \"idempotencyKey\": \"abcde123\",\n      \"cancellationPeriodMillis\": 0,\n      \"sameDay\": false\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Processing Integrator Initiated Status Change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{ _.apiKey }}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"id\": \"TRANSFER_ID\"\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Processed Integrator Initiated Status Change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"id\": \"TRANSFER_ID\"\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Returned Integrator Initiated Status Change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{ _.apiKey }}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n   \"input\": {\n      \"id\": \"ID\",\n      \"reasonCode\": \"INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT\"\n   }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Externally Initiated (Non-Originated) ACH",
							"item": [
								{
									"name": "Simulate Externally Initiated ACH Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"amount\": {\n      \"value\": 200000,\n      \"currencyCode\": \"USD\"\n    },\n    \"companyEntryDescription\": \"TestDesc\",\n    \"companyIdentifier\": \"TestID\",\n    \"companyName\": \"TestName\",\n    \"financialAccountId\": \"FINANCIAL_ACCOUNT_ID\",\n    \"individualIdentificationNumber\": \"TestInDID\",\n    \"individualName\": \"TestIndName\",\n    \"settlementDate\": \"2022-07-28\",\n    \"transferType\": \"CREDIT\"\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Processing Externally Initiated Status Change",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "User-Agent",
												"value": "insomnia/8.4.2"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"id\": \"TRANSFER_ID\"\n  }\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Initiate Transfer From Funding Financial Account To Payment Card Financial Account",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(\n  $input: InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput!\n) {\n  initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(\n    input: $input\n  ) {\n    ... on InterFinancialAccountTransfer {\n      id\n      status\n      statusReason\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}\n",
								"variables": "{\n  \"input\": {\n    \"fromFinancialAccountId\": \"{{fromFinancialAccountId}}\",\n    \"toFinancialAccountId\": \"{{toFinancialAccountId}}\",\n    \"amount\": {\n      \"value\": 10000,\n      \"currencyCode\": \"USD\"\n    },\n    \"memo\": \"repayment\",\n    \"idempotencyKey\": \"{{currentTimestampFormatted}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate Transfer Between Financial Accounts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation InitiateTransferBetweenFinancialAccounts($input: InitiateTransferBetweenFinancialAccountsInput!) {\n  initiateTransferBetweenFinancialAccounts(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      amount {\n        currencyCode\n        value\n      }\n      createdAt\n      id\n      memo\n      purpose\n      status\n      statusReason\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"amount\": {\n      \"currencyCode\": \"USD\",\n      \"value\": 1100\n    },\n    \"fromFinancialAccountId\": \"{{fromFinancialAccountId}}\",\n    \"toFinancialAccountId\": \"{{toFinancialAccountId}}\",\n    \"memo\": \"JLK to XYZ Corp\",\n    \"purpose\": \"GENERAL\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Physical Card",
			"item": [
				{
					"name": "Simulation",
					"item": [
						{
							"name": "Simulate Send To Printer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"physicalPaymentCardOrderId\": \"{{physicalPaymentCardOrderId}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Approval",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"physicalPaymentCardOrderId\": \"{{physicalPaymentCardOrderId}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Shipment Failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"physicalPaymentCardOrderId\": \"{{physicalPaymentCardOrderId}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Simulate Shipped",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"physicalPaymentCardOrderId\": \"{{physicalPaymentCardOrderId}}\",\n    \"trackingNumber\": \"trackingNumber\",\n    \"actualShipDate\": \"YYYY-MM-DD\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Order Physical Payment Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('physicalPaymentCardOrderId', pm.response.json().data.orderPhysicalPaymentCard.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
								"variables": "{\n   \"input\": {\n      \"paymentCardId\": \"PAYMENT_CARD_ID\",\n      \"deliveryDetails\": {\n         \"name\": {\n            \"givenName\": \"John\",\n            \"middleName\": \"D\",\n            \"familyName\": \"Doe\"\n         },\n         \"companyName\": \"Highnote\",\n         \"address\": {\n            \"streetAddress\": \"123 Main St\",\n            \"extendedAddress\": \"\",\n            \"postalCode\": \"60654\",\n            \"locality\": \"Chicago\",\n            \"region\": \"IL\",\n            \"countryCodeAlpha3\": \"USA\"\n         }\n      },\n      \"requestedShipDate\": \"2021-08-20\",\n      \"courier\": {\n         \"method\": \"UPS_GROUND\",\n         \"signatureRequiredOnDelivery\": false\n      },\n      \"cardPersonalization\": {\n         \"textLines\": {\n            \"line1\": \"John Doe\"\n         }\n      }\n   }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Physical Payment Card Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
								"variables": "{\n  \"id\": \"{{physicalPaymentCardOrderId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel Physical Payment Card Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": { \n    \"physicalPaymentCardOrderId\": \"{{physicalPaymentCardOrderId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reporting",
			"item": [
				{
					"name": "Notifications",
					"item": [
						{
							"name": "Notification Targets",
							"item": [
								{
									"name": "Add Webhook Notification Target",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input: $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n    \"input\" : { \n        \"name\":\"My Target\",\n        \"uri\":\"<URI>\",\n        \"subscriptions\":[ \n            \"PAYMENT_CARD_ACTIVATED\",\n            \"AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED\",\n            \"CARD_PRODUCT_APPLICATION_APPROVED\",\n            \"CARD_PRODUCT_APPLICATION_IN_REVIEW\",\n            \"CARD_PRODUCT_APPLICATION_MANUAL_REVIEW\",\n            \"CARD_PRODUCT_APPLICATION_DENIED\",\n            \"CARD_PRODUCT_APPLICATION_CLOSED\",\n            \"PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED\",\n            \"PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED\"\n        ]\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Webhook Notification Targets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\tid\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\tsubscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Deactivate Notification Target",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": true,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input: $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n",
												"variables": "{\n    \"input\": {\n        \"targetId\": \"<ID>\"\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Notification Target",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": true,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input: ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n",
												"variables": "{\n    \"input\": {\n        \"targetId\":\"<ID>\"\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Webhook Notification Target",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\thttpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
												"variables": "{\n    \"id\": \"<ID>\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Notification Target Delivery Attempts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": true,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n            createdAt\n            event {\n              name\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": "{\n    \"id\":  \"WEBHOOK_NOTIFICATION_TARGET_ID\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Subscriptions To Notification Target",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": true,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n    \"input\": {    \n        \"targetId\": \"WEBHOOK_NOTIFICATION_TARGET_ID\",\n        \"subscriptions\": [\n            \"ACCOUNT_STATUS_CLOSED\"\n        ]  \n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Subscriptions From Notification Target",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": true,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!) {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
												"variables": "{\n    \"input\": {    \n        \"targetId\": \"WEBHOOK_NOTIFICATION_TARGET_ID\",\n        \"subscriptions\": [\n            \"ACCOUNT_STATUS_CLOSED\"\n        ]  \n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Notification Events",
							"item": [
								{
									"name": "Get All Notification Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetAllNotificationEvents($after: String, $first: Int) {\n\tnotificationEvents(after: $after, first: $first) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t\tnode {\n            __typename\n\t\t\t\t\t\t... on PaymentCardTransactionDispute {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\tchargebacks {\n                id, \n                status, \n                dispute {\n                  id\n                }, \n                creditStatus\n              }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on PaymentCardTransactionChargeback {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcreditStatus\n\t\t\t\t\t\t\tdispute {\n                id,\n                status,\n                amount { \n                  value\n\t\t\t\t\t\t\t  }\n              }\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
												"variables": "{\n    \"first\": 150\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Notification Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetNotificationEvent($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tcreatedAt\n\t\t\texpiresAt\n\t\t\tname\n\t\t\tnode {\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n}\n",
												"variables": "{\n    \"id\": \"<ID>\"\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Replay Notification Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation ReplayNotificationEvent($input: ReplayNotificationEventInput!) {\n  replayNotificationEvent(input: $input) {\n    __typename\n    ... on NotificationEvent {\n      __typename\n      id\n\t  createdAt\n\t  expiresAt\n      node {\n        ... on AuthorizationEvent {\n          id\n          approvedAmount {\n            value\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n\n",
												"variables": "{\n    \"input\": {\n        \"notificationEventId\":\"<ID>\"\n    }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Delivery Attempts For Notification Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetDeliveryAttemptsForNotificationEvent($id: ID!, $after: String, $first: Int) {\n\tnode(id: $id) {\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tdeliveryAttempts(first: $first, after: $after) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\t__typename\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\t__typename\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t  httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\turi\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
												"variables": "{\n    \"id\": \"<ID>\",\n    \"first\":10\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Notification Events Filtered By Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query GetNotificationEventsFilteredByName($filterBy: NotificationEventsFilterInput!, $first: Int) {\n\tnotificationEvents(filterBy: $filterBy, first: $first) {\n\t\t__typename\n\t\tpageInfo {\n\t\t\tstartCursor\n\t\t\tendCursor\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t}\n\t\tedges {\n\t\t\tcursor\n\t\t\t__typename\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
												"variables": "{\n    \"filterBy\": {\n        \"name\": [\n            \"INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED\"\n        ]\n    },\n    \"first\": 20\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Reports",
					"item": [
						{
							"name": "Initiate Organization Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"reportId\", pm.response.json().data.initiateOrganizationReport.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation InitiateOrganizationReport($input: InitiateOrganizationReportInput!) {\n  initiateOrganizationReport(input: $input) {\n    __typename\n    ... on Report {\n      id\n      download {\n        url\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"reportType\":\"LEDGER_ENTRY\",\n        \"parameters\": {\n            \"between\": { \n                \"start\": \"2023-01-01\",\n                \"end\":\"2024-03-02\"\n            }\n        }\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetReport($id: ID!) {\n  node(id: $id) {\n    ... on Report {\n      download {\n        url\n      }\n    }\n  }\n}",
										"variables": "{\n    \"id\": \"REPORT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Report Usage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ReportUsage {\n  reportUsage {\n    limit\n    limitRemaining\n    periodEnd\n    reportType\n  }\n}",
										"variables": "{}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.4.2"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query Reports($first: Int, $after: String, $input: ReportFilterInput) {\n  reports(first: $first, after: $after, filterBy: $input) {\n    ... on ReportConnection {\n      edges {\n        ... on ReportEdge {\n          node {\n            __typename\n            id\n            status\n            reportType\n            download {\n              url\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}",
										"variables": "{\n    \"input\": {\n        \"status\": {\n            \"includes\": [\n                \"COMPLETED\"\n            ]\n        }\n    }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Statements",
					"item": [
						{
							"name": "Simulation",
							"item": [
								{
									"name": "Simulate Rollover Current Statement Period",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{ _.apiKey }}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateRolloverCurrentFinancialAccountStatementPeriod($input: SimulateRolloverCurrentFinancialAccountStatementPeriodInput!) {\n  simulateRolloverCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"financialAccountId\": \"FINANCIAL_ACCOUNT_ID\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Shift Current Statement Period",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{ _.apiKey }}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateShiftCurrentFinancialAccountStatementPeriod($input: SimulateShiftCurrentFinancialAccountStatementPeriodInput!) {\n  simulateShiftCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
												"variables": "{\n  \"input\": {\n    \"financialAccountId\": \"FINANCIAL_ACCOUNT_ID\",\n    \"periodBoundary\": \"2024-01-30T18:56:35Z\"\n  }\n}"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Simulate Backward Shift And Age Current Financial Account Statement Period",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statements {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
												"variables": "{\n  \"input\": {\n    \"financialAccountId\": \"{{financialAccountId}}\",\n    \"numberOfCyclesToShiftCurrentStatementBackward\": 3\n  }\n}\n\n\n"
											}
										},
										"url": {
											"raw": "{{apiUrl}}",
											"host": [
												"{{apiUrl}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get Current Billing Statement By Financial Account ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{ _.apiKey }}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.6.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
										"variables": "{\n    \"id\": \"FINANCIAL_ACCOUNT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{ _.apiUrl }}",
									"host": [
										"{{ _.apiUrl }}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Latest Closed Billing Statement By Financial Account ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{ _.apiKey }}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.6.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query GetLatestClosedBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... latestClosedConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment latestClosedConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  latestClosedStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
										"variables": "{\n    \"id\": \"FINANCIAL_ACCOUNT_ID\"\n}"
									}
								},
								"url": {
									"raw": "{{ _.apiUrl }}",
									"host": [
										"{{ _.apiUrl }}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Repayment",
			"item": [
				{
					"name": "Delinquency",
					"item": [
						{
							"name": "Simulate Delinquency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "User-Agent",
										"value": "insomnia/8.6.0"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      delinquency {\n        __typename\n        totalAmount {\n          value\n          currencyCode\n        }\n        numberOfCycles\n        totalDaysDelinquent\n        delinquencyStartedOn\n        currentDelinquentCycles {\n          daysDelinquent\n          createdAt\n          updatedAt\n          amount {\n            value\n            currencyCode\n          }\n          totalRepaymentsApplied {\n            value\n            currencyCode\n          }\n          state\n          statement {\n            ... on ConsumerRevolvingCardFinancialAccountStatement {\n              id\n              periodStart\n              periodEnd\n              openedAt\n              closedAt\n              primaryLedger {\n                debitBalance {\n                  value\n                  currencyCode\n                }\n                creditBalance {\n                  value\n                  currencyCode\n                }\n                normalBalance\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n  \"input\": {\n    \"financialAccountId\": \"FINANCIAL_ACCOUNT_ID\",\n    \"numberOfCyclesToShiftCurrentStatementBackward\": 3\n  }\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scheduled Transfers",
					"item": [
						{
							"name": "Schedule Recurring ACH Transfer",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n\t\"input\": {\n\t\t\"transferAmountStrategy\": {\n\t\t\t\"balanceAmountType\": \"OUTSTANDING_BALANCE\"\n\t\t},\n\t\t\"frequency\": \"MONTHLY\",\n\t\t\"transferDayOfMonth\": 3,\n\t\t\"transferAgreementConsent\": {\n\t\t\t\"authorizedPersonId\": \"AUTHORIZED_PERSON_ID\",\n\t\t\t\"consentTimestamp\": \"2021-12-22T17:10:55.662Z\",\n\t\t\t\"template\": {\n\t\t\t\t\"consentTemplateId\": \"1234\",\n\t\t\t\t\"consentTemplateVersion\": \"1\"\n\t\t\t}\n\t\t},\n\t\t\"descriptor\": {\n\t\t\t\"companyEntryDescription\": \"Test 1234\",\n\t\t\t\"individualIdentificationNumber\": \"Test 12345\",\n\t\t\t\"individualName\": \"Test 123456\"\n\t\t},\n\t\t\"fromFinancialAccountId\": \"FINANCIAL_ACCOUNT_ID\",\n\t\t\"toFinancialAccountId\": \"FINANCIAL_ACCOUNT_ID\"\n\t}\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Schedule One Time ACH Transfer",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
										"variables": "{\n\t\"input\": {\n\t\t\"transferAmountStrategy\": {\n\t\t\t\"transferAmount\": {\n\t\t\t\t\"value\": 100000,\n\t\t\t\t\"currencyCode\": \"USD\"\n\t\t\t}\n\t\t},\n    \"transferDate\": \"2025-06-23\",\n    \"transferAgreementConsent\": {\n        \"authorizedPersonId\": \"{{authorizedPersonId}}\",\n\t\t\t\"consentTimestamp\": \"2023-12-22T17:10:55.662Z\",\n        \"template\": {\n            \"consentTemplateId\": \"1\",\n            \"consentTemplateVersion\": \"1\"\n        }\n    },\n    \"descriptor\": {\n        \"companyEntryDescription\": \"CitiBank\",\n        \"individualIdentificationNumber\": \"123456\",\n        \"individualName\": \"Kevin Ruan\"\n    },\n    \"fromFinancialAccountId\": \"{{verifiedExternalBankAccountId}}\",\n    \"toFinancialAccountId\": \"{{financialAccountId}}\"\n\t}\n}"
									}
								},
								"url": {
									"raw": "{{apiUrl}}",
									"host": [
										"{{apiUrl}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Redemption",
			"item": [
				{
					"name": "Create Reward Redemption Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "insomnia/8.6.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation CreateRewardRedemptionConfiguration($input: CreateRewardRedemptionConfigurationInput!) {\n  createRewardRedemptionConfiguration(input: $input) {\n    ... on RewardRedemptionConfiguration {\n      id\n      name\n      createdAt\n      type\n      updatedAt\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        edges {\n          node {\n            ... on RewardRedemptionConfigurationProductAttachment {\n              id\n              cardProduct {\n                id\n                name\n              }\n              effectiveFrom\n              effectiveThrough\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"name\": \"REDEMPTION_RULE_NAME\",\n    \"rewardPointRedemption\": {\n      \"rate\": \"1.0\"\n    }\n  }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Attach Reward Redemption Configuration To Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "insomnia/8.6.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation AttachRewardRedemptionConfigurationToProduct($input: AttachRewardRedemptionConfigurationToProductInput!) {\n  attachRewardRedemptionConfigurationToProduct(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      cardProduct {\n        id\n        name\n      }\n      effectiveFrom\n      effectiveThrough\n      redemptionConfiguration {\n        id\n        name\n        type\n        rewardPointRedemption {\n          rate\n        }\n        updatedAt\n        createdAt\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"cardProductId\": \"CARD_PRODUCT_ID\",\n    // \"effectiveFrom\": null,\n    // \"effectiveThrough\": null,\n    \"redemptionConfiguration\": {\n      \"id\": \"REDEMPTION_RULE_ID\"\n    }\n  }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reward Redemption Configuration Attachment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "insomnia/8.6.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation UpdateRewardRedemptionConfigurationAttachment($input: UpdateRewardRedemptionConfigurationAttachmentInput!) {\n  updateRewardRedemptionConfigurationAttachment(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      effectiveFrom\n      effectiveThrough\n      cardProduct {\n        id\n        name\n      }\n      redemptionConfiguration {\n        id\n        name\n        rewardPointRedemption {\n          rate\n        }\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"attachmentId\": \"REDEMPTION_RULE_CONFIGURATION_ID\",\n    \"effectiveThrough\": \"UPDATED_DATE\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Redeem Rewards For Statement Credit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "insomnia/8.6.0"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation RedeemRewardsForStatementCredit($input: RedeemRewardsForStatementCreditInput!) {\n  redeemRewardsForStatementCredit(input: $input) {\n    ... on RewardPointsTransfer {\n      id\n      memo\n      activity\n      externalTransactionIdentifier\n      redemptionConfiguration {\n        id\n        name\n      }\n      rewardEarnRule {\n        __typename\n        id\n        name\n      }\n      rewardPointsAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      rewardPointsValue {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      source\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"financialAccountId\": \"FINANCIAL_ACCOUNT_ID\",\n    \"memo\": \"MEMO\",\n    \"externalTransactionIdentifier\": \"EXTERNAL_ID\",\n    \"redemption\": {\n      \"pointsToRedeem\": 100,\n      \"redemptionConfigurationId\": \"REDEMPTION_RULE_CONFIGURATION_ID\"\n    }\n  }\n}"
							}
						},
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "{{apiKey}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.environment.set('currentTimestampFormatted', new Date().toISOString().replaceAll(/(-|:|\\.|T|Z)/g, ''));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}