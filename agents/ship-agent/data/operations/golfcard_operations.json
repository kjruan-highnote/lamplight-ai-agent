[
  {
    "name": "GetAllApiKeys",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 10
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "api_key_management",
      "path": "Consumer Credit/Setup/API Key Management/Get All API Keys",
      "description": "",
      "tags": [
        "api_key_management",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.701967",
    "updated_at": "2025-08-04T16:18:34.701972"
  },
  {
    "name": "CreateApiKey",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "secretKey": {
            "name": "Test Key"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "api_key_management",
      "path": "Consumer Credit/Setup/API Key Management/Create API Key",
      "description": "",
      "tags": [
        "api_key_management",
        "creation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.701988",
    "updated_at": "2025-08-04T16:18:34.701989"
  },
  {
    "name": "RevokeApiKey",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "apiKeyId": "API_KEY_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "api_key_management",
      "path": "Consumer Credit/Setup/API Key Management/Revoke API Key",
      "description": "",
      "tags": [
        "api_key_management"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702000",
    "updated_at": "2025-08-04T16:18:34.702001"
  },
  {
    "name": "GetAllOrganizations",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "organization",
      "path": "Consumer Credit/Setup/Organization/Get All Organizations",
      "description": "",
      "tags": [
        "organization",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "edges",
        "creditBalance",
        "pageInfo",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702020",
    "updated_at": "2025-08-04T16:18:34.702021"
  },
  {
    "name": "GetOrganizationById",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetOrganizationByID($id: ID!) {\n  node(id: $id) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n        environment\n        region\n      }\n      financialAccounts {\n        ledgers {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "ORGANIZATION_ID"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "organization",
      "path": "Consumer Credit/Setup/Organization/Get Organization by ID",
      "description": "",
      "tags": [
        "organization",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "ledgers"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702033",
    "updated_at": "2025-08-04T16:18:34.702034"
  },
  {
    "name": "UpdateOrganizationProfileDisplayName",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "id": "ORGANIZATION_ID",
          "displayName": "Test"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "organization",
      "path": "Consumer Credit/Setup/Organization/Update Organization Profile Display Name",
      "description": "",
      "tags": [
        "organization",
        "modification"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702048",
    "updated_at": "2025-08-04T16:18:34.702048"
  },
  {
    "name": "CreateCardProduct",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Consumer Credit {{currentTimestampFormatted}}",
            "usage": "MULTI_USE",
            "vertical": "CONSUMER_CREDIT"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Create Card Product",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "creation"
      ],
      "requires": [
        "currentTimestampFormatted"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702067",
    "updated_at": "2025-08-04T16:18:34.702067"
  },
  {
    "name": "EnableCreditCardFeature",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableCreditCardFeature(\n\t$input: EnableCreditCardFeatureInput!\n) {\n\tenableCreditCardFeature(input: $input) {\n\t\t__typename\t\t\t\n\t\t... on CardProduct {\n\t\t\tid\n\t\t\tfeatures {\n\t\t\t\t__typename\n\t\t\t\tenabled\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "feature": "CHARGE"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Enable Credit Card Feature",
      "description": "",
      "tags": [
        "consumer_credit_card_product"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702113",
    "updated_at": "2025-08-04T16:18:34.702114"
  },
  {
    "name": "GetCardProductCreditPlanTemplates",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductWithCreditPlanTemplates($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlanTemplates {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              variableAprIndex\n              scraApr\n            }\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            maximumCreditLimit {\n              currencyCode\n              value\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Get Card Product Credit Plan Templates",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "retrieval"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702132",
    "updated_at": "2025-08-04T16:18:34.702132"
  },
  {
    "name": "CreateCreditPlan",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProductCreditPlan($input: CreateCardProductCreditPlanInput!) {\n  createCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      name\n      planType\n      status\n      createdAt\n      updatedAt\n      interestPolicy {\n        rateType\n        accrualType\n        accrualMethod\n        assessmentSchedule\n        defaultApr\n        scraApr\n      }\n      percentageOfCreditLimit\n      balanceType\n      effectiveFromDate\n      effectiveThroughDate\n      riskBasedPricingPolicy {\n        isRiskBased\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "productId": "{{cardProductId}}",
          "creditPlanTemplateId": "{{creditPlanTemplateId}}",
          "name": "Default Credit Plan",
          "defaultApr": 10,
          "percentageOfCreditLimit": 100
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Create Credit Plan",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "creation"
      ],
      "requires": [
        "creditPlanTemplateId",
        "cardProductId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702149",
    "updated_at": "2025-08-04T16:18:34.702150"
  },
  {
    "name": "ActivateCreditPlan",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivateCardProductCreditPlan($input: ActivateCardProductCreditPlanInput!) {\n  activateCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      effectiveFromDate\n      effectiveThroughDate\n      updatedAt\n      createdAt\n      name\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "CARD_PLAN_ID",
          "effectiveFromDate": "2024-01-31",
          "effectiveThroughDate": "2025-01-31"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Activate Credit Plan",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "activation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702164",
    "updated_at": "2025-08-04T16:18:34.702164"
  },
  {
    "name": "EnableCollaborativeApplicationUnderwritingFeature",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableCollaborativeApplicationUnderwritingFeature($input: EnableCollaborativeApplicationUnderwritingFeatureInput!) {\n  enableCollaborativeApplicationUnderwritingFeature(input: $input) {\n    ... on CardProduct {\n      id\n      name\n      features {\n        ... on CollaborativeApplicationUnderwritingCardProductFeature {\n          enabled\n          createdAt\n          updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Enable Collaborative Application Underwriting Feature",
      "description": "",
      "tags": [
        "consumer_credit_card_product"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702180",
    "updated_at": "2025-08-04T16:18:34.702181"
  },
  {
    "name": "GetCardProductCreditConfiguration",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductWithCreditConfigs($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditConfiguration {\n        accountAging {\n          delinquentInDays\n          suspendedInDays\n          chargeOffInDays\n          lateFeeGracePeriodInDays\n        }\n        billingCycleConfiguration {\n          billingCycleGracePeriodInDays\n          billingCycleGracePeriodType\n          billingCyclePeriod\n        }\n        interest {\n          includesFees\n          includesPurchase\n        }\n        minimumPayment {\n          includesInterestAmount\n          includesFeesCharged\n          includesPastDueAmount\n          percentage\n          thresholdAmount {\n            currencyCode\n            value\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Get Card Product Credit Configuration",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "retrieval"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "accountAging"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702197",
    "updated_at": "2025-08-04T16:18:34.702198"
  },
  {
    "name": "GetCardProductCreditPlans",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductCreditPlans($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlans {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            percentageOfCreditLimit\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "consumer_credit_card_product",
      "path": "Consumer Credit/Setup/Consumer Credit Card Product/Get Card Product Credit Plans",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "retrieval"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702216",
    "updated_at": "2025-08-04T16:18:34.702217"
  },
  {
    "name": "Ping",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query Ping {\n  ping\n}",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "setup",
      "path": "Consumer Credit/Setup/ping",
      "description": "",
      "tags": [
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702225",
    "updated_at": "2025-08-04T16:18:34.702226"
  },
  {
    "name": "Introspection",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "setup",
      "path": "Consumer Credit/Setup/introspection",
      "description": "",
      "tags": [
        "setup"
      ],
      "requires": [],
      "produces": [
        "__schema"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702246",
    "updated_at": "2025-08-04T16:18:34.702246"
  },
  {
    "name": "CreatePersonAccountHolderInReview",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "IN-REVIEW",
              "familyName": "IN-REVIEW"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Manual Review/Create Person Account Holder In Review",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702296",
    "updated_at": "2025-08-04T16:18:34.702296"
  },
  {
    "name": "CreatePersonAccountCreditFreeze",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Freeze",
              "familyName": "Wisney"
            },
            "externalId": "Freeze,Wisney",
            "email": "walt@Freeze.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "1",
              "number": "111-111-1111"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Manual Review/Create Person Account Credit Freeze",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702333",
    "updated_at": "2025-08-04T16:18:34.702333"
  },
  {
    "name": "CreatePersonAccountCreditFraudAlert",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Fraud",
              "familyName": "Wisney"
            },
            "externalId": "Fraud,Wisney",
            "email": "walt@Fraud.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "2",
              "number": "222-222-2222"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Manual Review/Create Person Account Credit Fraud Alert",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702366",
    "updated_at": "2025-08-04T16:18:34.702366"
  },
  {
    "name": "CreatePersonAccountHolder",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on AccessDeniedError {\n        message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n        }\n        employmentStatus\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Walt",
              "familyName": "Disney"
            },
            "externalId": "Disney,Walt",
            "email": "walt@disney.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "1",
              "number": "714-316-3075"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "person_account_holder",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Create Person Account Holder",
      "description": "",
      "tags": [
        "person_account_holder",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber",
        "totalAnnualIncome"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702399",
    "updated_at": "2025-08-04T16:18:34.702400"
  },
  {
    "name": "SearchPersonAccountHolders",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query SearchPersonAccountHolders($filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(filterBy: $filterBy) {\n    edges {\n      node {\n        id\n        email\n        dateOfBirth\n        externalId\n        updatedAt\n        createdAt\n        financialAccounts {\n          edges {\n            node {\n              id\n              name\n              owner {\n                __typename\n              }\n            }\n          }\n        }\n        paymentCards {\n          edges {\n            node {\n              last4\n              financialAccounts {\n                id\n                name\n                owner {\n                  __typename\n                }\n              }\n            }\n          }\n        }\n        name {\n          givenName\n          familyName\n          title\n          suffix\n          middleName\n        }\n        billingAddress {\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n        phoneNumbers {\n          countryCode\n          number\n          label\n        }\n        identificationDocument {\n          socialSecurityNumber {\n            numberHash\n            countryCodeAlpha3\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "filterBy": {
          "name": {
            "givenName": {
              "soundsLike": "Ian"
            },
            "familyName": {
              "soundsLike": "Somnia"
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "person_account_holder",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Search Person Account Holders",
      "description": "",
      "tags": [
        "person_account_holder",
        "search"
      ],
      "requires": [],
      "produces": [
        "edges",
        "edges",
        "edges",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702422",
    "updated_at": "2025-08-04T16:18:34.702423"
  },
  {
    "name": "UpdatePersonAccountHolderAddress",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderBillingAddress(\n  $input: UpdateUSPersonAccountHolderBillingAddressInput!\n) {\n  updateUSPersonAccountHolderBillingAddress(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      paymentCards {\n        edges {\n          node {\n            id\n            last4\n            application {\n              accountHolderSnapshot {\n                ... on USPersonAccountHolderSnapshot {\n                  billingAddress {\n                    streetAddress\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "PERSON_ACCOUNT_HOLDER_ID",
          "billingAddress": {
            "streetAddress": "123 Main Street",
            "extendedAddress": "",
            "postalCode": "60654",
            "region": "IL",
            "locality": "Chicago",
            "countryCodeAlpha3": "USA"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "person_account_holder",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Update Person Account Holder Address",
      "description": "",
      "tags": [
        "person_account_holder",
        "modification"
      ],
      "requires": [],
      "produces": [
        "errors",
        "edges",
        "accountHolderSnapshot",
        "billingAddress"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702446",
    "updated_at": "2025-08-04T16:18:34.702447"
  },
  {
    "name": "UpdatePersonAccountHolderPhone",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderPhone(\n  $input: UpdateUSPersonAccountHolderPhoneInput!\n) {\n  updateUSPersonAccountHolderPhone(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "phoneNumber": {
            "number": "5555555556",
            "countryCode": "1",
            "label": "MOBILE"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "person_account_holder",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Update Person Account Holder Phone",
      "description": "",
      "tags": [
        "person_account_holder",
        "modification"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702465",
    "updated_at": "2025-08-04T16:18:34.702466"
  },
  {
    "name": "UpdatePersonAccountHolderEmail",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderEmail(\n  $input: UpdateUSPersonAccountHolderEmailInput!\n) {\n  updateUSPersonAccountHolderEmail(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "email": "foo+testing-update@email.com"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "person_account_holder",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Update Person Account Holder Email",
      "description": "",
      "tags": [
        "person_account_holder",
        "modification"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702482",
    "updated_at": "2025-08-04T16:18:34.702483"
  },
  {
    "name": "GetAllPersonAccountHolders",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "fragment accountHolder on USPersonAccountHolder {\n  id\n  email\n  dateOfBirth\n  externalId\n  createdAt\n  updatedAt\n  name {\n    givenName\n    familyName\n    middleName\n    suffix\n    title\n  }\n  externalFinancialAccounts {\n    edges {\n      node {\n        __typename\n        ... on ExternalFinancialBankAccount {\n          id\n        }\n      }\n    }\n  }\n  identificationDocument {\n    socialSecurityNumber {\n      numberHash\n      countryCodeAlpha3\n    }\n  }\n  billingAddress {\n    streetAddress\n    extendedAddress\n    postalCode\n    region\n    locality\n    countryCodeAlpha3\n  }\n  phoneNumbers {\n    number\n    countryCode\n    label\n  }\n  financialAccounts {\n    edges {\n      node {\n        name\n        owner {\n          __typename\n        }\n      }\n    }\n  }\n  paymentCards {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        last4\n        formFactor\n        financialAccounts {\n          __typename\n          id\n          name\n        }\n      }\n    }\n  }\n  cardProductApplications {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        applicationState {\n          status\n        }\n      }\n    }\n  }\n}\n\nquery ListAccountHolders($first: Int, $filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(first: $first, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...accountHolder\n      }\n    }\n  }\n}\n",
      "variables": {
        "first": 20,
        "filterBy": {}
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "person_account_holder",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Get All Person Account Holders",
      "description": "",
      "tags": [
        "person_account_holder",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "socialSecurityNumber",
        "edges",
        "pageInfo",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702504",
    "updated_at": "2025-08-04T16:18:34.702505"
  },
  {
    "name": "GetPersonAccountHolderById",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSPersonAccountHolderByID($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      cardProductApplications {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      externalFinancialAccounts {\n        edges {\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n            }\n          }\n        }\n      }\n      financialAccounts {\n        edges {\n          node {\n            directDepositDetails {\n              id\n            }\n          }\n        }\n      }\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "PERSON_ACCOUNT_HOLDER_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "person_account_holder",
      "path": "Consumer Credit/Onboarding/Person Account Holder/Get Person Account Holder by ID",
      "description": "",
      "tags": [
        "person_account_holder",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "edges",
        "edges",
        "directDepositDetails",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702523",
    "updated_at": "2025-08-04T16:18:34.702524"
  },
  {
    "name": "SimulateApplicationDocumentReview",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "PERSON_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Simulation/Simulate Application Document Review",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702546",
    "updated_at": "2025-08-04T16:18:34.702547"
  },
  {
    "name": "SimulateApplicationVerificationStatusChange",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "{{personAccountHolderId}}",
          "applicationId": "{{personAccountHolderCardProductApplicationId}}",
          "newVerificationStatus": "PASSED"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Simulation/Simulate Application Verification Status Change",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "personAccountHolderId",
        "personAccountHolderCardProductApplicationId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702564",
    "updated_at": "2025-08-04T16:18:34.702564"
  },
  {
    "name": "SimulateApplicationStatusChange",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Simulation/Simulate Application Status Change",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702578",
    "updated_at": "2025-08-04T16:18:34.702579"
  },
  {
    "name": "GetDocumentUploadSessionByApplicationId",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        primaryDocumentTypes\n        secondaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
      "variables": {
        "id": "APPLICATION_ID"
      }
    },
    "headers": {},
    "metadata": {
      "category": "secure_document_upload",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Get Document Upload Session By Application ID",
      "description": "",
      "tags": [
        "secure_document_upload",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "node",
        "constraints"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702601",
    "updated_at": "2025-08-04T16:18:34.702601"
  },
  {
    "name": "GetDocumentUploadSessionBySessionId",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDocumentUpload_via_SessionID($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on USAccountHolderApplicationDocumentUploadSession {\n\t\t\t__typename\n\t\t\tid\n\t\t\tstatus\n\t\t\tprimaryDocumentTypes\n\t\t\tsecondaryDocumentTypes\n\t\t\tsupportingDocumentTypes\n\t\t\tuploadRequirements {\n\t\t\t\tconstraints {\n\t\t\t\t\t... on DocumentUploadRequirementConstraint {\n\t\t\t\t\t\tdocumentType\n\t\t\t\t\t\tnumberOfDocuments\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdocuments {\n\t\t\t\t... on DocumentUploadLink {\n\t\t\t\t\tid\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentCategoryType\n\t\t\t\t\tdocumentType\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentUploadSession {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "DOCUMENT_UPLOAD_SESSION_ID"
      }
    },
    "headers": {},
    "metadata": {
      "category": "secure_document_upload",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Get Document Upload Session By Session ID",
      "description": "",
      "tags": [
        "secure_document_upload",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "constraints"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702616",
    "updated_at": "2025-08-04T16:18:34.702617"
  },
  {
    "name": "GenerateDocumentUploadClientToken",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{documentUploadSessionId}}",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "secure_document_upload",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Generate Document Upload Client Token",
      "description": "",
      "tags": [
        "secure_document_upload"
      ],
      "requires": [
        "documentUploadSessionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702631",
    "updated_at": "2025-08-04T16:18:34.702631"
  },
  {
    "name": "StartDocumentUploadSession",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "secure_document_upload",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Start Document Upload Session",
      "description": "",
      "tags": [
        "secure_document_upload"
      ],
      "requires": [],
      "produces": [
        "constraints",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702645",
    "updated_at": "2025-08-04T16:18:34.702646"
  },
  {
    "name": "CreateDocumentUploadSecureLink",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {},
    "metadata": {
      "category": "secure_document_upload",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/Create Document Upload Secure Link",
      "description": "",
      "tags": [
        "secure_document_upload",
        "creation"
      ],
      "requires": [],
      "produces": [
        "uploadRequirements",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702680",
    "updated_at": "2025-08-04T16:18:34.702681"
  },
  {
    "name": "EndDocumentUploadSession",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "secure_document_upload",
      "path": "Consumer Credit/Onboarding/Application/Secure Document Upload/End Document Upload Session",
      "description": "",
      "tags": [
        "secure_document_upload"
      ],
      "requires": [],
      "produces": [
        "constraints",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702696",
    "updated_at": "2025-08-04T16:18:34.702696"
  },
  {
    "name": "CreatePersonAccountHolderApplication",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n      ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }  \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            region\n            countryCodeAlpha3\n            postalCode\n          }\n          currentVerification {\n            reason\n            status\n          }\n        }\n      }    \n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "{{personAccountHolderId}}",
          "cardProductId": "{{cardProductId}}",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "2022-01-01T23:59:59Z",
            "primaryAuthorizedPersonId": "{{personAccountHolderId}}"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "application",
      "path": "Consumer Credit/Onboarding/Application/Create Person Account Holder Application",
      "description": "",
      "tags": [
        "application",
        "creation"
      ],
      "requires": [
        "personAccountHolderId",
        "cardProductId"
      ],
      "produces": [
        "accountHolderCurrent",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702719",
    "updated_at": "2025-08-04T16:18:34.702720"
  },
  {
    "name": "GetPersonAccountHolderApplication",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPersonAccountHolderByApplicationID($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      createdAt\n      applicationState {\n        status\n      }\n      adverseActionReasons {\n        code\n        description\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          email\n          dateOfBirth\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          billingAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          currentVerification {\n            status\n            riskStatus\n            results {\n                code\n                description\n            }\n            adverseActionReasons {\n                code\n                description\n            }\n            reason\n          }\n          currentCreditUnderwritingVerification {\n            status\n          }\n          personCreditRiskAttributes {\n            employmentStatus\n            currentDebtObligations {\n              currencyCode\n              value\n            }\n            totalAnnualIncome {\n              currencyCode\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{personAccountHolderCardProductApplicationId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "application",
      "path": "Consumer Credit/Onboarding/Application/Get Person Account Holder Application",
      "description": "",
      "tags": [
        "application",
        "retrieval"
      ],
      "requires": [
        "personAccountHolderCardProductApplicationId"
      ],
      "produces": [
        "name"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702743",
    "updated_at": "2025-08-04T16:18:34.702743"
  },
  {
    "name": "GetPersonAccountHolderCreditApplicationResultsById",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetApplication($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      cardProduct {\n        id\n      }\n      applicationState {\n        status\n      }\n      applicationDenialReason\n      adverseActionReasons {\n        code\n        description\n      }\n      creditReportFraudAlertVerificationResult {\n        accountHolderInitiatedApplication\n        address\n        dateOfBirth\n        name\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          currentVerification {\n            status\n            riskStatus\n            reason\n            results {\n              code\n              description\n            }\n            adverseActionReasons {\n              code\n              description\n            }\n          }\n          currentCreditUnderwritingVerification {\n            status\n            reviewReasonDetails {\n              memo\n              reviewReason\n            }\n            decision {\n              ... on UnderwriterPositiveDecision {\n                creditLine {\n                  currencyCode\n                  decimalPlaces\n                  value\n                }\n                creditPlanTerms {\n                  creditPlan {\n                    id\n                  }\n                  interest {\n                    apr\n                  }\n                }\n              }\n            }\n            decisionDate\n            decisionResults\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "APPLICATION_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "application",
      "path": "Consumer Credit/Onboarding/Application/Get Person Account Holder Credit / Application Results by ID",
      "description": "",
      "tags": [
        "application",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "currentVerification",
        "creditLine",
        "creditPlan"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702766",
    "updated_at": "2025-08-04T16:18:34.702766"
  },
  {
    "name": "ApproveApplicationUnderwriting",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ApproveCreditProductApplicationUnderwriting($input: ApproveCreditProductApplicationUnderwritingInput!) {\n  approveCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n        name\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "decisionDate": "2023-01-01T23:59:59Z",
          "standardPurchaseCreditLimit": {
            "currencyCode": "USD",
            "value": 100000
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "application",
      "path": "Consumer Credit/Onboarding/Application/Approve Application Underwriting",
      "description": "",
      "tags": [
        "application"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702783",
    "updated_at": "2025-08-04T16:18:34.702784"
  },
  {
    "name": "DenyApplicationUnderwriting",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DenyCreditProductApplicationUnderwriting($input: DenyCreditProductApplicationUnderwritingInput!) {\n  denyCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      applicationDenialReason\n      adverseActionReasons {\n        code\n        description\n      }\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "adverseActionReasons": [
            {
              "code": "INSUFFICIENT_INCOME"
            }
          ],
          "decisionDate": "2023-01-01T23:59:59Z"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "application",
      "path": "Consumer Credit/Onboarding/Application/Deny Application Underwriting",
      "description": "",
      "tags": [
        "application"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702800",
    "updated_at": "2025-08-04T16:18:34.702801"
  },
  {
    "name": "CreatePersonAccountHolderWithInsufficientIncome",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Insufficient-Income"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 100,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "adverse_actions",
      "path": "Consumer Credit/Onboarding/Underwriting/Adverse Actions/Create Person Account Holder With Insufficient Income",
      "description": "",
      "tags": [
        "adverse_actions",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702839",
    "updated_at": "2025-08-04T16:18:34.702840"
  },
  {
    "name": "CreatePersonAccountHolderWithDelinquentCreditObligations",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Delinquent-Credit"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "adverse_actions",
      "path": "Consumer Credit/Onboarding/Underwriting/Adverse Actions/Create Person Account Holder With Delinquent Credit Obligations",
      "description": "",
      "tags": [
        "adverse_actions",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702872",
    "updated_at": "2025-08-04T16:18:34.702873"
  },
  {
    "name": "CreatePersonAccountHolderWithInsufficientIncomeAndDelinquentCreditObligations",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Insufficient-Income-Delinquent-Credit"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "adverse_actions",
      "path": "Consumer Credit/Onboarding/Underwriting/Adverse Actions/Create Person Account Holder With Insufficient Income and Delinquent Credit Obligations",
      "description": "",
      "tags": [
        "adverse_actions",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702906",
    "updated_at": "2025-08-04T16:18:34.702907"
  },
  {
    "name": "CreatePersonAccountHolderWithCreditFreeze",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Credit-Freeze"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "1111111111",
              "label": "MOBILE"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "underwriting",
      "path": "Consumer Credit/Onboarding/Underwriting/Create Person Account Holder With Credit Freeze",
      "description": "",
      "tags": [
        "underwriting",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702938",
    "updated_at": "2025-08-04T16:18:34.702939"
  },
  {
    "name": "CreatePersonAccountHolderWithFraudAlert",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Fraud-Alert"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "2222222222",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "underwriting",
      "path": "Consumer Credit/Onboarding/Underwriting/Create Person Account Holder With Fraud Alert",
      "description": "",
      "tags": [
        "underwriting",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702970",
    "updated_at": "2025-08-04T16:18:34.702971"
  },
  {
    "name": "IssueFinancialAccountForApplication",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "name": "Credit Account 1"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Consumer Credit/Issuance/Financial Accounts/Issue Financial Account For Application",
      "description": "",
      "tags": [
        "financial_accounts",
        "issuance"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.702998",
    "updated_at": "2025-08-04T16:18:34.702999"
  },
  {
    "name": "GetFinancialAccountById",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Consumer Credit/Issuance/Financial Accounts/Get Financial Account By ID",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703022",
    "updated_at": "2025-08-04T16:18:34.703022"
  },
  {
    "name": "GetFinancialAccountCreditPlan",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query LookupFinancialAccountCreditPlanConfigurations(\n  $id: ID!\n) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      id\n      creditConfiguration {\n        servicemembersCivilReliefAct {\n          status\n          effectiveFrom\n          effectiveThrough\n          activeDutyFrom\n          activeDutyThrough\n          updatedAt\n          createdAt\n        }\n        militaryLendingAct {\n          effectiveFrom\n          effectiveThrough\n          updatedAt\n          createdAt\n        }\n        interestRates {\n          balanceType\n          interest {\n            apr\n          }\n          creditPlan {\n            id\n            name\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            balanceType\n            interestPolicy {\n              rateType\n              index {\n                type\n                value\n                effectiveDate\n              }\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            percentageOfCreditLimit\n            planType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            status\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Consumer Credit/Issuance/Financial Accounts/Get Financial Account Credit Plan",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "servicemembersCivilReliefAct"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703041",
    "updated_at": "2025-08-04T16:18:34.703041"
  },
  {
    "name": "SetCreditLimitForFinancialAccount",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "memo": "Set Credit Limit $1000"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "credit_limit",
      "path": "Consumer Credit/Issuance/Credit Limit/Set Credit Limit For Financial Account",
      "description": "",
      "tags": [
        "credit_limit"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703062",
    "updated_at": "2025-08-04T16:18:34.703062"
  },
  {
    "name": "GetFinancialAccountCreditLimitUpdate",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "credit_limit",
      "path": "Consumer Credit/Issuance/Credit Limit/Get Financial Account Credit Limit Update",
      "description": "",
      "tags": [
        "credit_limit",
        "modification",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703077",
    "updated_at": "2025-08-04T16:18:34.703078"
  },
  {
    "name": "IssuePaymentCardForFinancialAccount",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": false,
            "expirationDate": "2026-01-01T23:59:59Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Issue Payment Card For Financial Account",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "ledgers",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703105",
    "updated_at": "2025-08-04T16:18:34.703106"
  },
  {
    "name": "GenerateClientTokenToSetPin",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "SET_PAYMENT_CARD_PIN"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Generate Client Token To Set PIN",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703123",
    "updated_at": "2025-08-04T16:18:34.703123"
  },
  {
    "name": "GenerateClientTokenForRestrictedDetail",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Generate Client Token For Restricted Detail",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703138",
    "updated_at": "2025-08-04T16:18:34.703139"
  },
  {
    "name": "ViewPaymentCardRestrictedDetails",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n            restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n                    cvv\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": ""
      }
    },
    "headers": {},
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/View Payment Card Restricted Details",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [],
      "produces": [
        "restrictedDetails"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703151",
    "updated_at": "2025-08-04T16:18:34.703152"
  },
  {
    "name": "ActivatePaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Activate Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "activation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703164",
    "updated_at": "2025-08-04T16:18:34.703164"
  },
  {
    "name": "SetPinForPaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n    }\nreq_06f2e9d7416d41eeaa473efa19375e48    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "newPin": "1234"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Set Pin For Payment Card",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703217",
    "updated_at": "2025-08-04T16:18:34.703218"
  },
  {
    "name": "SuspendPaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Suspend Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "suspension"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703230",
    "updated_at": "2025-08-04T16:18:34.703230"
  },
  {
    "name": "ReissuePaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "options": {
            "reissueFeatures": {
              "copyNumber": true,
              "copyPin": true
            },
            "expirationDate": "2024-12-29T23:12:30Z",
            "activateOnCreate": false
          },
          "originalPaymentCardId": "ORIGINAL_PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Reissue Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703246",
    "updated_at": "2025-08-04T16:18:34.703247"
  },
  {
    "name": "ClosePaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Consumer Credit/Issuance/Payment Cards/Close Payment Card",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703259",
    "updated_at": "2025-08-04T16:18:34.703259"
  },
  {
    "name": "SimulateAuthorization",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transaction {\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "cardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Issuance/Transactions/Simulation/Simulate Authorization",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703280",
    "updated_at": "2025-08-04T16:18:34.703281"
  },
  {
    "name": "SimulateClearing",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Issuance/Transactions/Simulation/Simulate Clearing",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703294",
    "updated_at": "2025-08-04T16:18:34.703295"
  },
  {
    "name": "SimulateReversal",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Issuance/Transactions/Simulation/Simulate Reversal",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703307",
    "updated_at": "2025-08-04T16:18:34.703308"
  },
  {
    "name": "SimulateRefund",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Issuance/Transactions/Simulation/Simulate Refund",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703321",
    "updated_at": "2025-08-04T16:18:34.703322"
  },
  {
    "name": "SimulateSingleStepAuthAndClear",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "PAYMENT_CARD_ID",
          "amount": {
            "currencyCode": "USD",
            "value": 1000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Issuance/Transactions/Simulation/Simulate Single Step Auth And Clear",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703340",
    "updated_at": "2025-08-04T16:18:34.703341"
  },
  {
    "name": "GetTransactionEvent",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
      "variables": {
        "id": "TRANSACTION_EVENT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Consumer Credit/Issuance/Transactions/Get Transaction Event",
      "description": "",
      "tags": [
        "transactions",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703355",
    "updated_at": "2025-08-04T16:18:34.703356"
  },
  {
    "name": "GetTransactionEventByTransactionIdAndFinancialAccount",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetTransactionEvent($id: ID!, $filterBy: TransactionEventsFilterInput!) {\n    node(id: $id) {\n        ... on FinancialAccount {\n            transactionEvents(filterBy: $filterBy) {\n                pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                    startCursor\n                    endCursor\n                }\n                edges {\n                    node {\n                        __typename\n                        id\n                        approvedAmount {\n                            currencyCode\n                            value\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "ac_c0221ac889f75a5945aebf8bb4041dd7a662",
        "filterBy": {
          "transactionId": {
            "equals": "tx_2349g649e2exxwmp374jg1a9mix1sb7log"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Consumer Credit/Issuance/Transactions/Get Transaction Event By Transaction ID and Financial Account",
      "description": "",
      "tags": [
        "transactions",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703373",
    "updated_at": "2025-08-04T16:18:34.703374"
  },
  {
    "name": "TransactionEventsByPaymentCardAndTransactionid",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID",
        "filterBy": {
          "transactionId": {
            "equals": "TRANSACTION_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Consumer Credit/Issuance/Transactions/Transaction Events By Payment Card And TransactionId",
      "description": "",
      "tags": [
        "transactions"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703392",
    "updated_at": "2025-08-04T16:18:34.703393"
  },
  {
    "name": "GetFinancialAccountActivititiesByFinancialAccountId",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query ListFinancialActivitiesByFinancialAccountID($id: ID!, $first: Int, $after: String ) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      externalId\n      name\n      createdAt\n      updatedAt\n      financialAccountActivities(first: $first, after: $after) {\n        edges {\n          cursor\n          node {\n            __typename\n            pendingAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            postedAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            sign\n            updatedAt\n            isComplete\n            createdAt\n            source {\n              ... SourceFragment\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n}\n\nfragment SourceFragment on FinancialAccountActivitySource {\n    ... on DebitTransaction {\n      id\n      transactionEvents {\n        ... TransactionEventFragment\n      }\n    }\n    ... on CreditTransaction {\n      id\n      transactionEvents {\n        ... TransactionEventFragment\n      }\n    }\n  }\n}\n\nfragment TransactionEventFragment on TransactionEvent {                    \n    __typename\n    id\n    createdAt\n    approvedAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n      cardDataInputCapability\n    }\n    transactionProcessingType\n    responseCode\n    currentFinancialAccountAvailableToSpendAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    currentFinancialAccountMaximumBalanceAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    paymentCard {\n      id\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID",
        "first": 20,
        "after": "LAST_CURSOR_FROM_CURRENT_RESULT"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Consumer Credit/Issuance/Transactions/Get Financial Account Activitities By Financial Account ID",
      "description": "",
      "tags": [
        "transactions",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703416",
    "updated_at": "2025-08-04T16:18:34.703417"
  },
  {
    "name": "AttachSpendRuleToCardProduct",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input: $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Spend Rules/Attach Spend Rule To Card Product",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703439",
    "updated_at": "2025-08-04T16:18:34.703439"
  },
  {
    "name": "CreateMerchantCategorySpendRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Fuel Rule",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": [
            "AIRLINES_AIR_CARRIERS"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Spend Rules/Create Merchant Category Spend Rule",
      "description": "",
      "tags": [
        "spend_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703455",
    "updated_at": "2025-08-04T16:18:34.703456"
  },
  {
    "name": "UpdateMerchantCategorySpendRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "spendRuleId": "SPEND_RULE_ID",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": []
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Spend Rules/Update Merchant Category Spend Rule",
      "description": "",
      "tags": [
        "spend_rules",
        "modification"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703471",
    "updated_at": "2025-08-04T16:18:34.703471"
  },
  {
    "name": "AttachSpendRuleToPaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Spend Rules/Attach Spend Rule To Payment Card",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703488",
    "updated_at": "2025-08-04T16:18:34.703488"
  },
  {
    "name": "DetachSpendRuleFromCardProduct",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input: $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Spend Rules/Detach Spend Rule From Card Product",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703502",
    "updated_at": "2025-08-04T16:18:34.703503"
  },
  {
    "name": "DetachSpendRuleFromPaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input: $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Spend Rules/Detach Spend Rule From Payment Card",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703517",
    "updated_at": "2025-08-04T16:18:34.703517"
  },
  {
    "name": "CreateVelocityRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n    ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              version\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Velocity Control - Max $1000 per month",
          "cumulativeRule": {
            "id": "AMOUNT_SPEND_RULE_ID",
            "version": "0"
          },
          "spendRules": [
            {
              "id": "ADDITIONAL_SPEND_RULE_ID",
              "version": "O"
            }
          ],
          "velocityRuleWindow": "MONTHLY"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Create Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703541",
    "updated_at": "2025-08-04T16:18:34.703541"
  },
  {
    "name": "CreateAmountLimitSpendRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input: $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n        currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Amount Limit Rule",
          "maximumAmount": {
            "value": 100000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Create Amount Limit Spend Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703558",
    "updated_at": "2025-08-04T16:18:34.703559"
  },
  {
    "name": "AttachPaymentCardVelocityRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Attach Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703578",
    "updated_at": "2025-08-04T16:18:34.703579"
  },
  {
    "name": "DetachPaymentCardVelocityRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Detach Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703599",
    "updated_at": "2025-08-04T16:18:34.703599"
  },
  {
    "name": "GetAllVelocityRules",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n          updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n              name\n              maximumAmount {\n                value\n                currencyCode\n              }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n          spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Get All Velocity Rules",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703614",
    "updated_at": "2025-08-04T16:18:34.703614"
  },
  {
    "name": "GetPaymentCardVelocityRule",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n  \t}\n\t}\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Get Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "currentBalance",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703629",
    "updated_at": "2025-08-04T16:18:34.703630"
  },
  {
    "name": "GetFinancialAccountWithVelocityBalance",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n            version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Get Financial Account With Velocity Balance",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703647",
    "updated_at": "2025-08-04T16:18:34.703647"
  },
  {
    "name": "AttachCardProductVelocityRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Attach Card Product Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703666",
    "updated_at": "2025-08-04T16:18:34.703666"
  },
  {
    "name": "DetachCardProductVelocityRule",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Consumer Credit/Issuance/Authorization Controls/Velocity Rules/Detach Card Product Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703685",
    "updated_at": "2025-08-04T16:18:34.703685"
  },
  {
    "name": "AddCollaborativeAuthorizationEndpoint",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddCollaborativeAuthorizationEndpoint($input: AddCollaborativeAuthorizationEndpointInput!) {\n  addCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on  CollaborativeAuthorizationEndpoint{\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Collaborative Auth Endpoint",
          "uri": "https://example.com"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Consumer Credit/Issuance/Authorization Controls/Collaborative Authorization/Add Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703703",
    "updated_at": "2025-08-04T16:18:34.703703"
  },
  {
    "name": "ActivateCollaborativeAuthorizationEndpoint",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivateCollaborativeAuthorizationEndpoint($input: ActivateCollaborativeAuthorizationEndpointInput!) {\n  activateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Consumer Credit/Issuance/Authorization Controls/Collaborative Authorization/Activate Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "activation"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703718",
    "updated_at": "2025-08-04T16:18:34.703718"
  },
  {
    "name": "GetCollaborativeAuthorizationEndpoint",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query FindCollaborativeAuthorizationEndpoint($id: ID!) {\n  node(id: $id) {\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{collabAuthEndpointId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Consumer Credit/Issuance/Authorization Controls/Collaborative Authorization/Get Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "retrieval"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703730",
    "updated_at": "2025-08-04T16:18:34.703731"
  },
  {
    "name": "DeactivateCollaborativeAuthorizationEndpoint",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateCollaborativeAuthorizationEndpoint($input: DeactivateCollaborativeAuthorizationEndpointInput!) {\n  deactivateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on  CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Consumer Credit/Issuance/Authorization Controls/Collaborative Authorization/Deactivate Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "activation"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703745",
    "updated_at": "2025-08-04T16:18:34.703745"
  },
  {
    "name": "RemoveCollaborativeAuthorizationEndpoint",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveCollaborativeAuthorizationEndpoint($input: RemoveCollaborativeAuthorizationEndpointInput!) {\n  removeCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Consumer Credit/Issuance/Authorization Controls/Collaborative Authorization/Remove Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703759",
    "updated_at": "2025-08-04T16:18:34.703760"
  },
  {
    "name": "GetCollaborativeAuthorizationEndpoints",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query CollaborativeAuthorizationEndpoints($after: String, $first: Int) {\n\torganizations{\n\t\tid\n\t\tcollaborativeAuthorizationEndpoints(first: $first, after: $after) {\n\t\t\t__typename\n\n\t\t\tedges {\n\t\t\t\t__typename\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tsigningKeys {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tsecret\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Consumer Credit/Issuance/Authorization Controls/Collaborative Authorization/Get Collaborative Authorization Endpoints",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703773",
    "updated_at": "2025-08-04T16:18:34.703773"
  },
  {
    "name": "RenameCollaborativeAuthorizationEndpoint",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RenameCollaborativeAuthorizationEndpoint($input: RenameCollaborativeAuthorizationEndpointInput!) {\n  renameCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}",
          "name": "Renamed Collaborative Auth Endpoint"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Consumer Credit/Issuance/Authorization Controls/Collaborative Authorization/Rename Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703787",
    "updated_at": "2025-08-04T16:18:34.703788"
  },
  {
    "name": "GenerateDirectDepositDetailClientToken",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateDirectDepositDetailClientToken($input: GenerateDirectDepositDetailClientTokenInput!) {\n  generateDirectDepositDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "directDepositDetailId": "DIRECT_DEPOSIT_DETAIL_ID",
          "permissions": [
            "READ_RESTRICTED_DETAILS"
          ]
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "product_funding_account",
      "path": "Consumer Credit/Funding/Product Funding Account/Generate Direct Deposit Detail Client Token",
      "description": "",
      "tags": [
        "product_funding_account"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703808",
    "updated_at": "2025-08-04T16:18:34.703809"
  },
  {
    "name": "GetDirectDepositDetailsByIdWithClientToken",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDirectDepositDetailsByIDWithClientToken($id: ID!) {\n  node(id: $id) {\n    ... on DirectDepositDetail {\n      id\n      restrictedDetails {\n        ... on DirectDepositDetailRestrictedDetails {\n          number\n          routingNumber\n          bank {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DIRECT_DEPOSIT_DETAIL_ID"
      }
    },
    "headers": {},
    "metadata": {
      "category": "product_funding_account",
      "path": "Consumer Credit/Funding/Product Funding Account/Get Direct Deposit Details By ID With Client Token",
      "description": "",
      "tags": [
        "product_funding_account",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703823",
    "updated_at": "2025-08-04T16:18:34.703824"
  },
  {
    "name": "GetProductFundingAccountDirectDepositId",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetProductFundingAccountByCardProductID($id: ID!, $filterBy: AccountHolderFinancialAccountsFilterInput!) {\n  node(id: $id) {\n    ... on CardProduct {\n      accounts(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            name\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            directDepositDetails {\n              id\n              createdAt\n              updatedAt\n              restrictedDetails {\n                ... on DirectDepositDetailRestrictedDetails {\n                  number\n                  routingNumber\n                  bank {\n                    name\n                    address {\n                      streetAddress\n                      extendedAddress\n                      postalCode\n                      region\n                      locality\n                      countryCodeAlpha3\n                    }\n                  }\n                  type\n                }\n                ... on AccessDeniedError {\n                  message\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}",
        "filterBy": {
          "features": {
            "equals": "PRODUCT_FUNDING"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "product_funding_account",
      "path": "Consumer Credit/Funding/Product Funding Account/Get Product Funding Account Direct Deposit ID",
      "description": "",
      "tags": [
        "product_funding_account",
        "retrieval"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703846",
    "updated_at": "2025-08-04T16:18:34.703847"
  },
  {
    "name": "SimulateDeposit",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "toFinancialAccountId": "{{financialAccountId}}",
          "source": "WIRE",
          "memo": "Initial Card Funding",
          "amount": {
            "value": 50000000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "product_funding_account",
      "path": "Consumer Credit/Funding/Product Funding Account/Simulate Deposit",
      "description": "",
      "tags": [
        "product_funding_account",
        "simulation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "edges",
        "financialEvent",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703868",
    "updated_at": "2025-08-04T16:18:34.703869"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughPlaid",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Add External Bank Account Verified Through Plaid",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703893",
    "updated_at": "2025-08-04T16:18:34.703893"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughFinicity",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughFinicity($input: AddExternalBankAccountVerifiedThroughFinicityInput!) {\n  addExternalBankAccountVerifiedThroughFinicity(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      owner {\n        ... on USPersonAccountHolder {\n          id\n          externalId\n        }\n        ... on USBusinessAccountHolder {\n          id\n          externalId\n        }\n      }\n      name\n      provider\n      accountStatus\n      createdAt\n      updatedAt\n      externalBankAccountDetails {\n        id\n        last4\n        type\n        routingNumber\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "name": "Finicity Checking",
          "bankAccountType": "CHECKING",
          "externalToken": {
            "receiptId": "processor-token-success",
            "customerId": "5543088633794259024",
            "products": [
              {
                "productType": "ACH_DETAILS",
                "accountId": "8977412844634022494",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "CURRENT_BALANCE",
                "accountId": "1045023535892401594",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "APPROXIMATE_BALANCE",
                "accountId": "7895597441790621692",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "ACH_OWNER_DETAILS",
                "accountId": "5200183909259568542",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              }
            ]
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Add External Bank Account Verified Through Finicity",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [
        "accountHolderId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703929",
    "updated_at": "2025-08-04T16:18:34.703930"
  },
  {
    "name": "GetExternalFinancialAccountsByAccountHolder",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{organizationId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Get External Financial Accounts By Account Holder",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "retrieval"
      ],
      "requires": [
        "organizationId"
      ],
      "produces": [
        "externalFinancialAccounts",
        "externalFinancialAccounts"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703954",
    "updated_at": "2025-08-04T16:18:34.703955"
  },
  {
    "name": "InitiateFundsDepositAchTransfer",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "descriptor": {
            "companyEntryDescription": "Company",
            "individualIdentificationNumber": "",
            "individualName": "Baja ABC"
          },
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2022-12-07T14:42:52.453Z",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Initiate Funds Deposit ACH Transfer",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.703977",
    "updated_at": "2025-08-04T16:18:34.703978"
  },
  {
    "name": "InitiateFundsWithdrawalAchTransfer",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "descriptor": {
            "companyEntryDescription": "Test Entry",
            "individualName": "Test",
            "individualIdentificationNumber": "1234"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-07T14:42:52.453Z",
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          },
          "idempotencyKey": "abcde123",
          "cancellationPeriodMillis": 0,
          "sameDay": false
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Initiate Funds Withdrawal ACH Transfer",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704002",
    "updated_at": "2025-08-04T16:18:34.704003"
  },
  {
    "name": "SimulateProcessingIntegratorInitiatedStatusChange",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Simulate Processing Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704027",
    "updated_at": "2025-08-04T16:18:34.704027"
  },
  {
    "name": "SimulateProcessedIntegratorInitiatedStatusChange",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Simulate Processed Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "edges",
        "financialEvent",
        "edges",
        "financialEvent"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704058",
    "updated_at": "2025-08-04T16:18:34.704058"
  },
  {
    "name": "SimulateReturnedIntegratorInitiatedStatusChange",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "ID",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH/Simulate Returned Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704080",
    "updated_at": "2025-08-04T16:18:34.704080"
  },
  {
    "name": "SimulateExternallyInitiatedAchTransfer",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          },
          "companyEntryDescription": "TestDesc",
          "companyIdentifier": "TestID",
          "companyName": "TestName",
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "individualIdentificationNumber": "TestInDID",
          "individualName": "TestIndName",
          "settlementDate": "2022-07-28",
          "transferType": "CREDIT"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Externally Initiated (Non-Originated) ACH/Simulate Externally Initiated ACH Transfer",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704108",
    "updated_at": "2025-08-04T16:18:34.704108"
  },
  {
    "name": "SimulateProcessingExternallyInitiatedStatusChange",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Consumer Credit/Funding/ACH Transfer (& Simulation)/Externally Initiated (Non-Originated) ACH/Simulate Processing Externally Initiated Status Change",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "amount",
        "amount",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704126",
    "updated_at": "2025-08-04T16:18:34.704126"
  },
  {
    "name": "SimulateSendToPrinter",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Physical Card/Simulation/Simulate Send To Printer",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704152",
    "updated_at": "2025-08-04T16:18:34.704152"
  },
  {
    "name": "SimulateApproval",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Physical Card/Simulation/Simulate Approval",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704171",
    "updated_at": "2025-08-04T16:18:34.704172"
  },
  {
    "name": "SimulateShipmentFailed",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Physical Card/Simulation/Simulate Shipment Failed",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704188",
    "updated_at": "2025-08-04T16:18:34.704189"
  },
  {
    "name": "SimulateShipped",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}",
          "trackingNumber": "trackingNumber",
          "actualShipDate": "YYYY-MM-DD"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Physical Card/Simulation/Simulate Shipped",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704206",
    "updated_at": "2025-08-04T16:18:34.704206"
  },
  {
    "name": "OrderPhysicalPaymentCard",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "requestedShipDate": "2021-08-20",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "John Doe"
            }
          }
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card",
      "path": "Consumer Credit/Physical Card/Order Physical Payment Card",
      "description": "",
      "tags": [
        "physical_card"
      ],
      "requires": [],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704238",
    "updated_at": "2025-08-04T16:18:34.704239"
  },
  {
    "name": "FindPhysicalPaymentCardOrder",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalPaymentCardOrderId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card",
      "path": "Consumer Credit/Physical Card/Find Physical Payment Card Order",
      "description": "",
      "tags": [
        "physical_card"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704300",
    "updated_at": "2025-08-04T16:18:34.704301"
  },
  {
    "name": "CancelPhysicalPaymentCardOrder",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card",
      "path": "Consumer Credit/Physical Card/Cancel Physical Payment Card Order",
      "description": "",
      "tags": [
        "physical_card"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704317",
    "updated_at": "2025-08-04T16:18:34.704317"
  },
  {
    "name": "AddWebhookNotificationTarget",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input: $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "My Target",
          "uri": "<URI>",
          "subscriptions": [
            "PAYMENT_CARD_ACTIVATED",
            "AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_IN_REVIEW",
            "CARD_PRODUCT_APPLICATION_MANUAL_REVIEW",
            "CARD_PRODUCT_APPLICATION_DENIED",
            "CARD_PRODUCT_APPLICATION_CLOSED",
            "PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED",
            "PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Add Webhook Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704345",
    "updated_at": "2025-08-04T16:18:34.704345"
  },
  {
    "name": "GetAllWebhookNotificationTargets",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\tid\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\tsubscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Get All Webhook Notification Targets",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704366",
    "updated_at": "2025-08-04T16:18:34.704366"
  },
  {
    "name": "DeactivateNotificationTarget",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input: $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Deactivate Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval",
        "activation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704378",
    "updated_at": "2025-08-04T16:18:34.704379"
  },
  {
    "name": "ActivateNotificationTarget",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input: ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Activate Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval",
        "activation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704391",
    "updated_at": "2025-08-04T16:18:34.704391"
  },
  {
    "name": "GetWebhookNotificationTarget",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\thttpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Get Webhook Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704409",
    "updated_at": "2025-08-04T16:18:34.704410"
  },
  {
    "name": "GetNotificationTargetDeliveryAttempts",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n            createdAt\n            event {\n              name\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "WEBHOOK_NOTIFICATION_TARGET_ID"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Get Notification Target Delivery Attempts",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704427",
    "updated_at": "2025-08-04T16:18:34.704427"
  },
  {
    "name": "AddSubscriptionsToNotificationTarget",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Add Subscriptions To Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704441",
    "updated_at": "2025-08-04T16:18:34.704442"
  },
  {
    "name": "RemoveSubscriptionsFromNotificationTarget",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!) {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Consumer Credit/Reporting/Notifications/Notification Targets/Remove Subscriptions From Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704456",
    "updated_at": "2025-08-04T16:18:34.704456"
  },
  {
    "name": "GetAllNotificationEvents",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllNotificationEvents($after: String, $first: Int) {\n\tnotificationEvents(after: $after, first: $first) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t\tnode {\n            __typename\n\t\t\t\t\t\t... on PaymentCardTransactionDispute {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\tchargebacks {\n                id, \n                status, \n                dispute {\n                  id\n                }, \n                creditStatus\n              }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on PaymentCardTransactionChargeback {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcreditStatus\n\t\t\t\t\t\t\tdispute {\n                id,\n                status,\n                amount { \n                  value\n\t\t\t\t\t\t\t  }\n              }\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "first": 150
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Consumer Credit/Reporting/Notifications/Notification Events/Get All Notification Events",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704475",
    "updated_at": "2025-08-04T16:18:34.704476"
  },
  {
    "name": "GetNotificationEvent",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEvent($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tcreatedAt\n\t\t\texpiresAt\n\t\t\tname\n\t\t\tnode {\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Consumer Credit/Reporting/Notifications/Notification Events/Get Notification Event",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704487",
    "updated_at": "2025-08-04T16:18:34.704488"
  },
  {
    "name": "ReplayNotificationEvent",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReplayNotificationEvent($input: ReplayNotificationEventInput!) {\n  replayNotificationEvent(input: $input) {\n    __typename\n    ... on NotificationEvent {\n      __typename\n      id\n\t  createdAt\n\t  expiresAt\n      node {\n        ... on AuthorizationEvent {\n          id\n          approvedAmount {\n            value\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "input": {
          "notificationEventId": "<ID>"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Consumer Credit/Reporting/Notifications/Notification Events/Replay Notification Event",
      "description": "",
      "tags": [
        "notification_events"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704504",
    "updated_at": "2025-08-04T16:18:34.704505"
  },
  {
    "name": "GetDeliveryAttemptsForNotificationEvent",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDeliveryAttemptsForNotificationEvent($id: ID!, $after: String, $first: Int) {\n\tnode(id: $id) {\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tdeliveryAttempts(first: $first, after: $after) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\t__typename\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\t__typename\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t  httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\turi\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "id": "<ID>",
        "first": 10
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Consumer Credit/Reporting/Notifications/Notification Events/Get Delivery Attempts For Notification Event",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704520",
    "updated_at": "2025-08-04T16:18:34.704521"
  },
  {
    "name": "GetNotificationEventsFilteredByName",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEventsFilteredByName($filterBy: NotificationEventsFilterInput!, $first: Int) {\n\tnotificationEvents(filterBy: $filterBy, first: $first) {\n\t\t__typename\n\t\tpageInfo {\n\t\t\tstartCursor\n\t\t\tendCursor\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t}\n\t\tedges {\n\t\t\tcursor\n\t\t\t__typename\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "filterBy": {
          "name": [
            "INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED"
          ]
        },
        "first": 20
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Consumer Credit/Reporting/Notifications/Notification Events/Get Notification Events Filtered By Name",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704536",
    "updated_at": "2025-08-04T16:18:34.704537"
  },
  {
    "name": "InitiateOrganizationReport",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateOrganizationReport($input: InitiateOrganizationReportInput!) {\n  initiateOrganizationReport(input: $input) {\n    __typename\n    ... on Report {\n      id\n      download {\n        url\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "reportType": "LEDGER_ENTRY",
          "parameters": {
            "between": {
              "start": "2023-01-01",
              "end": "2024-03-02"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Consumer Credit/Reporting/Reports/Initiate Organization Report",
      "description": "",
      "tags": [
        "reports"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704555",
    "updated_at": "2025-08-04T16:18:34.704556"
  },
  {
    "name": "GetReport",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetReport($id: ID!) {\n  node(id: $id) {\n    ... on Report {\n      download {\n        url\n      }\n    }\n  }\n}",
      "variables": {
        "id": "REPORT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Consumer Credit/Reporting/Reports/Get Report",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "download"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704565",
    "updated_at": "2025-08-04T16:18:34.704566"
  },
  {
    "name": "GetReportUsage",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query ReportUsage {\n  reportUsage {\n    limit\n    limitRemaining\n    periodEnd\n    reportType\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Consumer Credit/Reporting/Reports/Get Report Usage",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "reportUsage"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704574",
    "updated_at": "2025-08-04T16:18:34.704575"
  },
  {
    "name": "GetReports",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query Reports($first: Int, $after: String, $input: ReportFilterInput) {\n  reports(first: $first, after: $after, filterBy: $input) {\n    ... on ReportConnection {\n      edges {\n        ... on ReportEdge {\n          node {\n            __typename\n            id\n            status\n            reportType\n            download {\n              url\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "status": {
            "includes": [
              "COMPLETED"
            ]
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Consumer Credit/Reporting/Reports/Get Reports",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704588",
    "updated_at": "2025-08-04T16:18:34.704589"
  },
  {
    "name": "SimulateRolloverCurrentStatementPeriod",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateRolloverCurrentFinancialAccountStatementPeriod($input: SimulateRolloverCurrentFinancialAccountStatementPeriodInput!) {\n  simulateRolloverCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Reporting/Statements/Simulation/Simulate Rollover Current Statement Period",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704620",
    "updated_at": "2025-08-04T16:18:34.704621"
  },
  {
    "name": "SimulateShiftCurrentStatementPeriod",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateShiftCurrentFinancialAccountStatementPeriod($input: SimulateShiftCurrentFinancialAccountStatementPeriodInput!) {\n  simulateShiftCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "periodBoundary": "2024-01-30T18:56:35Z"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "simulation",
      "path": "Consumer Credit/Reporting/Statements/Simulation/Simulate Shift Current Statement Period",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704649",
    "updated_at": "2025-08-04T16:18:34.704649"
  },
  {
    "name": "GetCurrentBillingStatementByFinancialAccountId",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "statements",
      "path": "Consumer Credit/Reporting/Statements/Get Current Billing Statement By Financial Account ID",
      "description": "",
      "tags": [
        "statements",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704674",
    "updated_at": "2025-08-04T16:18:34.704675"
  },
  {
    "name": "GetLatestClosedBillingStatementByFinancialAccountId",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query GetLatestClosedBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... latestClosedConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment latestClosedConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  latestClosedStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "statements",
      "path": "Consumer Credit/Reporting/Statements/Get Latest Closed Billing Statement By Financial Account ID",
      "description": "",
      "tags": [
        "statements",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "latestClosedStatement"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704709",
    "updated_at": "2025-08-04T16:18:34.704710"
  },
  {
    "name": "GetScheduledOriginatingAchPayments",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccountTransfers($id: ID!, $firstScheduledTransfers: Int, $scheduledTransfersAfterCursor: String, $firstIntegratorTransfers: Int, $integratorTransfersAfterCursor: String, $firstExternalTransfers: Int, $externalTransfersAfterCursor: String) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      incomingScheduledTransfers(\n        first: $firstScheduledTransfers\n        after: $scheduledTransfersAfterCursor\n      ) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          __typename\n        }\n        edges {\n          cursor\n          __typename\n          node {\n            id\n            __typename\n            ... on OneTimeACHTransfer {\n              descriptor {\n                companyEntryDescription\n                __typename\n              }\n              scheduledTransferDate\n              status\n              transferAmount {\n                __typename\n                ... on ManualTransferAmount {\n                  amount {\n                    value\n                    currencyCode\n                    decimalPlaces\n                    __typename\n                  }\n                  __typename\n                }\n                ... on TransferAmountCalculation {\n                  calculatedType\n                  __typename\n                }\n              }\n              __typename\n            }\n            ... on RecurringACHTransfer {\n              descriptor {\n                companyEntryDescription\n                __typename\n              }\n              frequency\n              nextScheduledTransferDate\n              status\n              transferAmount {\n                __typename\n                ... on ManualTransferAmount {\n                  amount {\n                    value\n                    currencyCode\n                    decimalPlaces\n                    __typename\n                  }\n                  __typename\n                }\n                ... on TransferAmountCalculation {\n                  calculatedType\n                  __typename\n                }\n              }\n              __typename\n            }\n          }\n        }\n        __typename\n      }\n      integratorACHTransfers(\n        first: $firstIntegratorTransfers\n        after: $integratorTransfersAfterCursor\n      ) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          __typename\n        }\n        edges {\n          node {\n            __typename\n            ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n              id\n              amount {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              companyIdentifier\n              companyName\n              descriptor {\n                companyEntryDescription\n                individualName\n                __typename\n              }\n              createdAt\n              settlementDate\n              status {\n                ... on NonFailureIntegratorInitiatedACHStatus {\n                  status\n                  __typename\n                }\n                ... on FailureIntegratorInitiatedACHStatus {\n                  status\n                  statusReasonCode\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            ... on IntegratorInitiatedFundsDepositACHTransfer {\n              id\n              amount {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              companyIdentifier\n              companyName\n              descriptor {\n                companyEntryDescription\n                individualName\n                __typename\n              }\n              createdAt\n              settlementDate\n              status {\n                ... on NonFailureIntegratorInitiatedACHStatus {\n                  status\n                  __typename\n                }\n                ... on FailureIntegratorInitiatedACHStatus {\n                  status\n                  statusReasonCode\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}",
        "firstScheduledTransfers": 20,
        "firstIntegratorTransfers": 20,
        "firstExternalTransfers": 20
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payments",
      "path": "Consumer Credit/Reporting/Payments/Get Scheduled Originating ACH Payments",
      "description": "",
      "tags": [
        "payments",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "pageInfo",
        "descriptor",
        "amount",
        "descriptor",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704748",
    "updated_at": "2025-08-04T16:18:34.704749"
  },
  {
    "name": "GetPendingA2aAndAchPayments",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccountActivities($id: ID!, $firstActivities: Int, $filterBy: FinancialAccountActivitiesFilterInput, $activitiesAfterCursor: String) {\n  node(id: $id) {\n    __typename\n    id\n    ... on FinancialAccount {\n      __typename\n      id\n      financialAccountActivities(\n        first: $firstActivities\n        filterBy: $filterBy\n        after: $activitiesAfterCursor\n      ) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          __typename\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            sign\n            isComplete\n            pendingAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            postedAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            createdAt\n            source {\n              __typename\n              ... on InterFinancialAccountTransfer {\n                id\n                fromFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                transferActivityType\n                __typename\n              }\n              ... on IntegratorInitiatedFundsDepositACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}",
        "firstActivities": 20,
        "filterBy": {
          "isComplete": {
            "equals": false
          }
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payments",
      "path": "Consumer Credit/Reporting/Payments/Get Pending A2A and ACH Payments",
      "description": "",
      "tags": [
        "payments",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704779",
    "updated_at": "2025-08-04T16:18:34.704779"
  },
  {
    "name": "GetPostedA2aAndAchPayments",
    "program_type": "golfcard",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccountLedgerActivity($id: ID!, $first: Int, $filterBy: LedgerEntriesFilterInput, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      __typename\n      id\n      ledgers(ledgerNames: [CASH, OUTSTANDING_BALANCE_PAYABLE]) {\n        id\n        normalBalance\n        asOf\n        name\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        ledgerEntries(first: $first, filterBy: $filterBy, after: $after) {\n          ... on LedgerEntryConnection {\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n              hasPreviousPage\n              __typename\n            }\n            edges {\n              cursor\n              __typename\n              node {\n                ...LedgerEntryNodeSelection\n                __typename\n              }\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}\n\nfragment LedgerEntryNodeSelection on LedgerEntry {\n  __typename\n  id\n  memo\n  createdAt\n  creditBalanceAtLedgerEntry {\n    value\n    currencyCode\n    decimalPlaces\n    __typename\n  }\n  debitBalanceAtLedgerEntry {\n    value\n    currencyCode\n    decimalPlaces\n    __typename\n  }\n  amount {\n    value\n    currencyCode\n    decimalPlaces\n    __typename\n  }\n  financialEvent {\n    __typename\n    ... on Node {\n      id\n      __typename\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n      integratorInitiatedACHStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on InterFinancialAccountTransfer {\n      fromFinancialAccount {\n        id\n        name\n        __typename\n      }\n      purpose\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      transferActivityType\n      __typename\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}",
        "first": 20,
        "filterBy": {}
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payments",
      "path": "Consumer Credit/Reporting/Payments/Get Posted A2A and ACH Payments",
      "description": "",
      "tags": [
        "payments",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "pageInfo",
        "integratorInitiatedACHStatus",
        "fromFinancialAccount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704803",
    "updated_at": "2025-08-04T16:18:34.704804"
  },
  {
    "name": "SimulateDelinquency",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      delinquency {\n        __typename\n        totalAmount {\n          value\n          currencyCode\n        }\n        numberOfCycles\n        totalDaysDelinquent\n        delinquencyStartedOn\n        currentDelinquentCycles {\n          daysDelinquent\n          createdAt\n          updatedAt\n          amount {\n            value\n            currencyCode\n          }\n          totalRepaymentsApplied {\n            value\n            currencyCode\n          }\n          state\n          statement {\n            ... on ConsumerRevolvingCardFinancialAccountStatement {\n              id\n              periodStart\n              periodEnd\n              openedAt\n              closedAt\n              primaryLedger {\n                debitBalance {\n                  value\n                  currencyCode\n                }\n                creditBalance {\n                  value\n                  currencyCode\n                }\n                normalBalance\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "delinquency",
      "path": "Consumer Credit/Repayment/Delinquency/Simulate Delinquency",
      "description": "",
      "tags": [
        "delinquency",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "debitBalance"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704829",
    "updated_at": "2025-08-04T16:18:34.704829"
  },
  {
    "name": "ScheduleRecurringAchTransfer",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "OUTSTANDING_BALANCE"
          },
          "frequency": "MONTHLY",
          "transferDayOfMonth": 3,
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2021-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "Test 1234",
            "individualIdentificationNumber": "Test 12345",
            "individualName": "Test 123456"
          },
          "fromFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "scheduled_transfers",
      "path": "Consumer Credit/Repayment/Scheduled Transfers/Schedule Recurring ACH Transfer",
      "description": "",
      "tags": [
        "scheduled_transfers"
      ],
      "requires": [],
      "produces": [
        "errors",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704861",
    "updated_at": "2025-08-04T16:18:34.704862"
  },
  {
    "name": "ScheduleOneTimeAchTransfer",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "transferAmount": {
              "value": 100000,
              "currencyCode": "USD"
            }
          },
          "transferDate": "2023-12-22",
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Kevin Ruan"
          },
          "fromFinancialAccountId": "EXTERNAL_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "CARD_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "scheduled_transfers",
      "path": "Consumer Credit/Repayment/Scheduled Transfers/Schedule One Time ACH Transfer",
      "description": "",
      "tags": [
        "scheduled_transfers"
      ],
      "requires": [],
      "produces": [
        "errors",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704893",
    "updated_at": "2025-08-04T16:18:34.704894"
  },
  {
    "name": "CreateRewardRedemptionConfiguration",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRewardRedemptionConfiguration($input: CreateRewardRedemptionConfigurationInput!) {\n  createRewardRedemptionConfiguration(input: $input) {\n    ... on RewardRedemptionConfiguration {\n      id\n      name\n      createdAt\n      type\n      updatedAt\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        edges {\n          node {\n            ... on RewardRedemptionConfigurationProductAttachment {\n              id\n              cardProduct {\n                id\n                name\n              }\n              effectiveFrom\n              effectiveThrough\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "REDEMPTION_RULE_NAME",
          "rewardPointRedemption": {
            "rate": "1.0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Consumer Credit/Redemption/Create Reward Redemption Configuration",
      "description": "",
      "tags": [
        "redemption",
        "creation"
      ],
      "requires": [],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704914",
    "updated_at": "2025-08-04T16:18:34.704915"
  },
  {
    "name": "AttachRewardRedemptionConfigurationToProduct",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachRewardRedemptionConfigurationToProduct($input: AttachRewardRedemptionConfigurationToProductInput!) {\n  attachRewardRedemptionConfigurationToProduct(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      cardProduct {\n        id\n        name\n      }\n      effectiveFrom\n      effectiveThrough\n      redemptionConfiguration {\n        id\n        name\n        type\n        rewardPointRedemption {\n          rate\n        }\n        updatedAt\n        createdAt\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Consumer Credit/Redemption/Attach Reward Redemption Configuration To Product",
      "description": "",
      "tags": [
        "redemption"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704936",
    "updated_at": "2025-08-04T16:18:34.704936"
  },
  {
    "name": "UpdateRewardRedemptionConfigurationAttachment",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateRewardRedemptionConfigurationAttachment($input: UpdateRewardRedemptionConfigurationAttachmentInput!) {\n  updateRewardRedemptionConfigurationAttachment(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      effectiveFrom\n      effectiveThrough\n      cardProduct {\n        id\n        name\n      }\n      redemptionConfiguration {\n        id\n        name\n        rewardPointRedemption {\n          rate\n        }\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "attachmentId": "REDEMPTION_RULE_CONFIGURATION_ID",
          "effectiveThrough": "UPDATED_DATE"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Consumer Credit/Redemption/Update Reward Redemption Configuration Attachment",
      "description": "",
      "tags": [
        "redemption",
        "modification"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704955",
    "updated_at": "2025-08-04T16:18:34.704956"
  },
  {
    "name": "RedeemRewardsForStatementCredit",
    "program_type": "golfcard",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RedeemRewardsForStatementCredit($input: RedeemRewardsForStatementCreditInput!) {\n  redeemRewardsForStatementCredit(input: $input) {\n    ... on RewardPointsTransfer {\n      id\n      memo\n      activity\n      externalTransactionIdentifier\n      redemptionConfiguration {\n        id\n        name\n      }\n      rewardEarnRule {\n        __typename\n        id\n        name\n      }\n      rewardPointsAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      rewardPointsValue {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      source\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "memo": "MEMO",
          "externalTransactionIdentifier": "EXTERNAL_ID",
          "redemption": {
            "pointsToRedeem": 100,
            "redemptionConfigurationId": "REDEMPTION_RULE_CONFIGURATION_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Consumer Credit/Redemption/Redeem Rewards For Statement Credit",
      "description": "",
      "tags": [
        "redemption"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.704976",
    "updated_at": "2025-08-04T16:18:34.704977"
  }
]