[
  {
    "name": "Get All API Keys",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 10
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "API Key Management",
      "path": "Setup/API Key Management",
      "description": "",
      "tags": [
        "query",
        "get",
        "api_key_management",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546812",
    "updated_at": "2025-08-06T16:32:06.546817"
  },
  {
    "name": "Create API Key",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "secretKey": {
            "name": "Test Key"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "API Key Management",
      "path": "Setup/API Key Management",
      "description": "",
      "tags": [
        "create",
        "mutation",
        "api_key_management",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546832",
    "updated_at": "2025-08-06T16:32:06.546834"
  },
  {
    "name": "Revoke API Key",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "apiKeyId": "API_KEY_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "API Key Management",
      "path": "Setup/API Key Management",
      "description": "",
      "tags": [
        "mutation",
        "api_key_management",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546842",
    "updated_at": "2025-08-06T16:32:06.546843"
  },
  {
    "name": "Get All Organizations",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Organization",
      "path": "Setup/Organization",
      "description": "",
      "tags": [
        "query",
        "organization",
        "get",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546853",
    "updated_at": "2025-08-06T16:32:06.546855"
  },
  {
    "name": "Get Organization by ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetOrganizationByID($id: ID!) {\n  node(id: $id) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n        environment\n        region\n      }\n      financialAccounts {\n        ledgers {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "ORGANIZATION_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Organization",
      "path": "Setup/Organization",
      "description": "",
      "tags": [
        "query",
        "organization",
        "get",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546883",
    "updated_at": "2025-08-06T16:32:06.546885"
  },
  {
    "name": "Update Organization Profile Display Name",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "id": "ORGANIZATION_ID",
          "displayName": "Test"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Organization",
      "path": "Setup/Organization",
      "description": "",
      "tags": [
        "update",
        "organization",
        "mutation",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546895",
    "updated_at": "2025-08-06T16:32:06.546896"
  },
  {
    "name": "Create Card Product",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Consumer Credit {{currentTimestampFormatted}}",
            "usage": "MULTI_USE",
            "vertical": "CONSUMER_CREDIT"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "mutation",
        "create",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546906",
    "updated_at": "2025-08-06T16:32:06.546908"
  },
  {
    "name": "Enable Credit Card Feature",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableCreditCardFeature(\n\t$input: EnableCreditCardFeatureInput!\n) {\n\tenableCreditCardFeature(input: $input) {\n\t\t__typename\t\t\t\n\t\t... on CardProduct {\n\t\t\tid\n\t\t\tfeatures {\n\t\t\t\t__typename\n\t\t\t\tenabled\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "feature": "CHARGE"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "mutation",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546916",
    "updated_at": "2025-08-06T16:32:06.546917"
  },
  {
    "name": "Get Card Product Credit Plan Templates",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductWithCreditPlanTemplates($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlanTemplates {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              variableAprIndex\n              scraApr\n            }\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            maximumCreditLimit {\n              currencyCode\n              value\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "query",
        "consumer_credit_card_product",
        "get",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546924",
    "updated_at": "2025-08-06T16:32:06.546926"
  },
  {
    "name": "Create Credit Plan",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProductCreditPlan($input: CreateCardProductCreditPlanInput!) {\n  createCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      name\n      planType\n      status\n      createdAt\n      updatedAt\n      interestPolicy {\n        rateType\n        accrualType\n        accrualMethod\n        assessmentSchedule\n        defaultApr\n        scraApr\n      }\n      percentageOfCreditLimit\n      balanceType\n      effectiveFromDate\n      effectiveThroughDate\n      riskBasedPricingPolicy {\n        isRiskBased\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "productId": "{{cardProductId}}",
          "creditPlanTemplateId": "{{creditPlanTemplateId}}",
          "name": "Default Credit Plan",
          "defaultApr": 10,
          "percentageOfCreditLimit": 100
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "mutation",
        "create",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546934",
    "updated_at": "2025-08-06T16:32:06.546936"
  },
  {
    "name": "Activate Credit Plan",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivateCardProductCreditPlan($input: ActivateCardProductCreditPlanInput!) {\n  activateCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      effectiveFromDate\n      effectiveThroughDate\n      updatedAt\n      createdAt\n      name\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "CARD_PLAN_ID",
          "effectiveFromDate": "2024-01-31",
          "effectiveThroughDate": "2025-01-31"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "activate",
        "mutation",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546946",
    "updated_at": "2025-08-06T16:32:06.546947"
  },
  {
    "name": "Enable Collaborative Application Underwriting Feature",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableCollaborativeApplicationUnderwritingFeature($input: EnableCollaborativeApplicationUnderwritingFeatureInput!) {\n  enableCollaborativeApplicationUnderwritingFeature(input: $input) {\n    ... on CardProduct {\n      id\n      name\n      features {\n        ... on CollaborativeApplicationUnderwritingCardProductFeature {\n          enabled\n          createdAt\n          updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "consumer_credit_card_product",
        "mutation",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546956",
    "updated_at": "2025-08-06T16:32:06.546958"
  },
  {
    "name": "Get Card Product Credit Configuration",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductWithCreditConfigs($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditConfiguration {\n        accountAging {\n          delinquentInDays\n          suspendedInDays\n          chargeOffInDays\n          lateFeeGracePeriodInDays\n        }\n        billingCycleConfiguration {\n          billingCycleGracePeriodInDays\n          billingCycleGracePeriodType\n          billingCyclePeriod\n        }\n        interest {\n          includesFees\n          includesPurchase\n        }\n        minimumPayment {\n          includesInterestAmount\n          includesFeesCharged\n          includesPastDueAmount\n          percentage\n          thresholdAmount {\n            currencyCode\n            value\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "query",
        "consumer_credit_card_product",
        "get",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546965",
    "updated_at": "2025-08-06T16:32:06.546966"
  },
  {
    "name": "Get Card Product Credit Plans",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductCreditPlans($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlans {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            percentageOfCreditLimit\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Consumer Credit Card Product",
      "path": "Setup/Consumer Credit Card Product",
      "description": "",
      "tags": [
        "query",
        "consumer_credit_card_product",
        "get",
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546973",
    "updated_at": "2025-08-06T16:32:06.546974"
  },
  {
    "name": "ping",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query Ping {\n  ping\n}",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Setup",
      "path": "Setup",
      "description": "",
      "tags": [
        "query"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546981",
    "updated_at": "2025-08-06T16:32:06.546983"
  },
  {
    "name": "introspection",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Setup",
      "path": "Setup",
      "description": "",
      "tags": [
        "query"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.546988",
    "updated_at": "2025-08-06T16:32:06.546990"
  },
  {
    "name": "Create Person Account Holder In Review",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "IN-REVIEW",
              "familyName": "IN-REVIEW"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              },
              "monthlyHousingPayment": {
                "value": 10000,
                "currencyCode": "USD"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Manual Review",
      "path": "Onboarding/Person Account Holder/Manual Review",
      "description": "",
      "tags": [
        "manual_review",
        "person_account_holder",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547047",
    "updated_at": "2025-08-06T16:32:06.547050"
  },
  {
    "name": "Create Person Account Holder Deny",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "FORCE-DECLINE",
              "familyName": "FORCE-DECLINE"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              },
              "monthlyHousingPayment": {
                "value": 10000,
                "currencyCode": "USD"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Manual Review",
      "path": "Onboarding/Person Account Holder/Manual Review",
      "description": "",
      "tags": [
        "manual_review",
        "person_account_holder",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547074",
    "updated_at": "2025-08-06T16:32:06.547076"
  },
  {
    "name": "Create Person Account Credit Freeze",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Freeze",
              "familyName": "Wisney"
            },
            "externalId": "Freeze,Wisney",
            "email": "walt@Freeze.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "1",
              "number": "111-111-1111"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              },
              "monthlyHousingPayment": {
                "value": 10000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Manual Review",
      "path": "Onboarding/Person Account Holder/Manual Review",
      "description": "",
      "tags": [
        "manual_review",
        "person_account_holder",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547092",
    "updated_at": "2025-08-06T16:32:06.547094"
  },
  {
    "name": "Create Person Account Credit Fraud Alert",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Fraud",
              "familyName": "Wisney"
            },
            "externalId": "Fraud,Wisney",
            "email": "walt@Fraud.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "2",
              "number": "222-222-2222"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              },
              "monthlyHousingPayment": {
                "value": 10000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Manual Review",
      "path": "Onboarding/Person Account Holder/Manual Review",
      "description": "",
      "tags": [
        "manual_review",
        "person_account_holder",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547108",
    "updated_at": "2025-08-06T16:32:06.547110"
  },
  {
    "name": "Create Person Account Holder",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on AccessDeniedError {\n        message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n        }\n        employmentStatus\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Walt",
              "familyName": "Disney"
            },
            "externalId": "Disney,Walt",
            "email": "walt@disney.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "1",
              "number": "714-316-3075"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1400,
                "currencyCode": "USD"
              },
              "monthlyHousingPayment": {
                "value": 100,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "mutation",
        "create",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547126",
    "updated_at": "2025-08-06T16:32:06.547128"
  },
  {
    "name": "Search Person Account Holders",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query SearchPersonAccountHolders($filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(filterBy: $filterBy) {\n    edges {\n      node {\n        id\n        email\n        dateOfBirth\n        externalId\n        updatedAt\n        createdAt\n        financialAccounts {\n          edges {\n            node {\n              id\n              name\n              owner {\n                __typename\n              }\n            }\n          }\n        }\n        paymentCards {\n          edges {\n            node {\n              last4\n              financialAccounts {\n                id\n                name\n                owner {\n                  __typename\n                }\n              }\n            }\n          }\n        }\n        name {\n          givenName\n          familyName\n          title\n          suffix\n          middleName\n        }\n        billingAddress {\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n        phoneNumbers {\n          countryCode\n          number\n          label\n        }\n        identificationDocument {\n          socialSecurityNumber {\n            numberHash\n            countryCodeAlpha3\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "filterBy": {
          "name": {
            "givenName": {
              "soundsLike": "Ian"
            },
            "familyName": {
              "soundsLike": "Somnia"
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "query",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547137",
    "updated_at": "2025-08-06T16:32:06.547139"
  },
  {
    "name": "Update Person Account Holder Address",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderBillingAddress(\n  $input: UpdateUSPersonAccountHolderBillingAddressInput!\n) {\n  updateUSPersonAccountHolderBillingAddress(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      paymentCards {\n        edges {\n          node {\n            id\n            last4\n            application {\n              accountHolderSnapshot {\n                ... on USPersonAccountHolderSnapshot {\n                  billingAddress {\n                    streetAddress\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "PERSON_ACCOUNT_HOLDER_ID",
          "billingAddress": {
            "streetAddress": "123 Main Street",
            "extendedAddress": "",
            "postalCode": "60654",
            "region": "IL",
            "locality": "Chicago",
            "countryCodeAlpha3": "USA"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "update",
        "mutation",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547150",
    "updated_at": "2025-08-06T16:32:06.547152"
  },
  {
    "name": "Update Person Account Holder Phone",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderPhone(\n  $input: UpdateUSPersonAccountHolderPhoneInput!\n) {\n  updateUSPersonAccountHolderPhone(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "phoneNumber": {
            "number": "5555555556",
            "countryCode": "1",
            "label": "MOBILE"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "update",
        "mutation",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547162",
    "updated_at": "2025-08-06T16:32:06.547164"
  },
  {
    "name": "Update Person Account Holder Email",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderEmail(\n  $input: UpdateUSPersonAccountHolderEmailInput!\n) {\n  updateUSPersonAccountHolderEmail(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "email": "foo+testing-update@email.com"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "update",
        "mutation",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547172",
    "updated_at": "2025-08-06T16:32:06.547173"
  },
  {
    "name": "Update Person Account Holder Credit Risk Attributes",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderCreditRiskAttribute($input: UpdateUSPersonAccountHolderCreditRiskAttributeInput!) {\n  updateUSPersonAccountHolderCreditRiskAttribute(input: $input) {\n    ... on USPersonAccountHolder {\n      id\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        employmentStatus\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ps_ah01bb743c1817764c23a0c1dd5d5a5ae88f",
          "personCreditRiskAttributes": {
            "totalAnnualIncome": [
              {
                "value": 100000000,
                "currencyCode": "USD"
              }
            ]
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "update",
        "mutation",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547182",
    "updated_at": "2025-08-06T16:32:06.547183"
  },
  {
    "name": "Get All Person Account Holders",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "unknown",
    "graphql": {
      "query": "fragment accountHolder on USPersonAccountHolder {\n  id\n  email\n  dateOfBirth\n  externalId\n  createdAt\n  updatedAt\n  name {\n    givenName\n    familyName\n    middleName\n    suffix\n    title\n  }\n  externalFinancialAccounts {\n    edges {\n      node {\n        __typename\n        ... on ExternalFinancialBankAccount {\n          id\n        }\n      }\n    }\n  }\n  identificationDocument {\n    socialSecurityNumber {\n      numberHash\n      countryCodeAlpha3\n    }\n  }\n  billingAddress {\n    streetAddress\n    extendedAddress\n    postalCode\n    region\n    locality\n    countryCodeAlpha3\n  }\n  phoneNumbers {\n    number\n    countryCode\n    label\n  }\n  financialAccounts {\n    edges {\n      node {\n        name\n        owner {\n          __typename\n        }\n      }\n    }\n  }\n  paymentCards {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        last4\n        formFactor\n        financialAccounts {\n          __typename\n          id\n          name\n        }\n      }\n    }\n  }\n  cardProductApplications {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        applicationState {\n          status\n        }\n      }\n    }\n  }\n}\n\nquery ListAccountHolders($first: Int, $filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(first: $first, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...accountHolder\n      }\n    }\n  }\n}\n",
      "variables": {
        "first": 20,
        "filterBy": {}
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "get",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547193",
    "updated_at": "2025-08-06T16:32:06.547195"
  },
  {
    "name": "Get Person Account Holder by ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSPersonAccountHolderByID($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      cardProductApplications {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      externalFinancialAccounts {\n        edges {\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n            }\n          }\n        }\n      }\n      financialAccounts {\n        edges {\n          node {\n            directDepositDetails {\n              id\n            }\n          }\n        }\n      }\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "PERSON_ACCOUNT_HOLDER_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Person Account Holder",
      "path": "Onboarding/Person Account Holder",
      "description": "",
      "tags": [
        "query",
        "get",
        "person_account_holder",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547204",
    "updated_at": "2025-08-06T16:32:06.547206"
  },
  {
    "name": "Simulate Application Document Review",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "PERSON_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Onboarding/Application/Secure Document Upload/Simulation",
      "description": "",
      "tags": [
        "application",
        "simulation",
        "mutation",
        "secure_document_upload",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547215",
    "updated_at": "2025-08-06T16:32:06.547218"
  },
  {
    "name": "Simulate Application Verification Status Change",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "{{personAccountHolderId}}",
          "applicationId": "{{personAccountHolderCardProductApplicationId}}",
          "newVerificationStatus": "PASSED"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Onboarding/Application/Secure Document Upload/Simulation",
      "description": "",
      "tags": [
        "application",
        "simulation",
        "mutation",
        "secure_document_upload",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547231",
    "updated_at": "2025-08-06T16:32:06.547233"
  },
  {
    "name": "Simulate Application Status Change",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Onboarding/Application/Secure Document Upload/Simulation",
      "description": "",
      "tags": [
        "application",
        "simulation",
        "mutation",
        "secure_document_upload",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547242",
    "updated_at": "2025-08-06T16:32:06.547244"
  },
  {
    "name": "Get Document Upload Session By Application ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        primaryDocumentTypes\n        secondaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
      "variables": {
        "id": "APPLICATION_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Secure Document Upload",
      "path": "Onboarding/Application/Secure Document Upload",
      "description": "",
      "tags": [
        "query",
        "application",
        "get",
        "secure_document_upload",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547251",
    "updated_at": "2025-08-06T16:32:06.547253"
  },
  {
    "name": "Get Document Upload Session By Session ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDocumentUpload_via_SessionID($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on USAccountHolderApplicationDocumentUploadSession {\n\t\t\t__typename\n\t\t\tid\n\t\t\tstatus\n\t\t\tprimaryDocumentTypes\n\t\t\tsecondaryDocumentTypes\n\t\t\tsupportingDocumentTypes\n\t\t\tuploadRequirements {\n\t\t\t\tconstraints {\n\t\t\t\t\t... on DocumentUploadRequirementConstraint {\n\t\t\t\t\t\tdocumentType\n\t\t\t\t\t\tnumberOfDocuments\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdocuments {\n\t\t\t\t... on DocumentUploadLink {\n\t\t\t\t\tid\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentCategoryType\n\t\t\t\t\tdocumentType\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentUploadSession {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "DOCUMENT_UPLOAD_SESSION_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Secure Document Upload",
      "path": "Onboarding/Application/Secure Document Upload",
      "description": "",
      "tags": [
        "query",
        "application",
        "get",
        "secure_document_upload",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547261",
    "updated_at": "2025-08-06T16:32:06.547263"
  },
  {
    "name": "Generate Document Upload Client Token",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{documentUploadSessionId}}",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Secure Document Upload",
      "path": "Onboarding/Application/Secure Document Upload",
      "description": "",
      "tags": [
        "application",
        "secure_document_upload",
        "mutation",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547270",
    "updated_at": "2025-08-06T16:32:06.547272"
  },
  {
    "name": "Start Document Upload Session",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Secure Document Upload",
      "path": "Onboarding/Application/Secure Document Upload",
      "description": "",
      "tags": [
        "application",
        "secure_document_upload",
        "mutation",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547281",
    "updated_at": "2025-08-06T16:32:06.547283"
  },
  {
    "name": "Create Document Upload Secure Link",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Secure Document Upload",
      "path": "Onboarding/Application/Secure Document Upload",
      "description": "",
      "tags": [
        "application",
        "create",
        "mutation",
        "secure_document_upload",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547308",
    "updated_at": "2025-08-06T16:32:06.547310"
  },
  {
    "name": "End Document Upload Session",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Secure Document Upload",
      "path": "Onboarding/Application/Secure Document Upload",
      "description": "",
      "tags": [
        "application",
        "secure_document_upload",
        "mutation",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547321",
    "updated_at": "2025-08-06T16:32:06.547323"
  },
  {
    "name": "Create Person Account Holder Application",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n      ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }  \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            region\n            countryCodeAlpha3\n            postalCode\n          }\n          currentVerification {\n            reason\n            status\n          }\n        }\n      }    \n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "{{personAccountHolderId}}",
          "cardProductId": "{{cardProductId}}",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "2022-01-01T23:59:59Z",
            "primaryAuthorizedPersonId": "{{personAccountHolderId}}"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Application",
      "path": "Onboarding/Application",
      "description": "",
      "tags": [
        "application",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547333",
    "updated_at": "2025-08-06T16:32:06.547335"
  },
  {
    "name": "Get Person Account Holder Application",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPersonAccountHolderByApplicationID($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      createdAt\n      applicationState {\n        status\n      }\n      adverseActionReasons {\n        code\n        description\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          email\n          dateOfBirth\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          billingAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          currentVerification {\n            status\n            riskStatus\n            results {\n                code\n                description\n            }\n            adverseActionReasons {\n                code\n                description\n            }\n            reason\n          }\n          currentCreditUnderwritingVerification {\n            status\n          }\n          personCreditRiskAttributes {\n            employmentStatus\n            currentDebtObligations {\n              currencyCode\n              value\n            }\n            totalAnnualIncome {\n              currencyCode\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{personAccountHolderCardProductApplicationId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Application",
      "path": "Onboarding/Application",
      "description": "",
      "tags": [
        "query",
        "application",
        "get",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547342",
    "updated_at": "2025-08-06T16:32:06.547344"
  },
  {
    "name": "Get Person Account Holder Credit / Application Results by ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCreditApplication($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      cardProduct {\n        id\n      }\n      applicationState {\n        status\n      }\n      applicationDenialReason\n      adverseActionReasons {\n        code\n        description\n      }\n      creditReportFraudAlertVerificationResult {\n        accountHolderInitiatedApplication\n        address\n        dateOfBirth\n        name\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          currentVerification {\n            status\n            riskStatus\n            reason\n            results {\n              code\n              description\n            }\n            adverseActionReasons {\n              code\n              description\n            }\n          }\n          currentCreditUnderwritingVerification {\n            creditScoreDetails {\n                creditBureau\n                creditScoreModels\n                    {\n                        creditScore\n                        creditScoreType\n                        creditScoreReasons\n                    }\n            }\n            status\n            reviewReasonDetails {\n              memo\n              reviewReason\n            }\n            decision {\n              ... on UnderwriterPositiveDecision {\n                creditLine {\n                  currencyCode\n                  decimalPlaces\n                  value\n                }\n                creditPlanTerms {\n                  creditPlan {\n                    id\n                  }\n                  interest {\n                    apr\n                  }\n                }\n              }\n            }\n            decisionDate\n            decisionResults\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{AppId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Application",
      "path": "Onboarding/Application",
      "description": "",
      "tags": [
        "query",
        "application",
        "get",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547351",
    "updated_at": "2025-08-06T16:32:06.547353"
  },
  {
    "name": "Approve Application Underwriting",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ApproveCreditProductApplicationUnderwriting($input: ApproveCreditProductApplicationUnderwritingInput!) {\n  approveCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n        name\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "decisionDate": "2023-01-01T23:59:59Z",
          "standardPurchaseCreditLimit": {
            "currencyCode": "USD",
            "value": 100000
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Application",
      "path": "Onboarding/Application",
      "description": "",
      "tags": [
        "application",
        "mutation",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547363",
    "updated_at": "2025-08-06T16:32:06.547365"
  },
  {
    "name": "Deny Application Underwriting",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DenyCreditProductApplicationUnderwriting($input: DenyCreditProductApplicationUnderwritingInput!) {\n  denyCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      applicationDenialReason\n      adverseActionReasons {\n        code\n        description\n      }\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "adverseActionReasons": [
            {
              "code": "INSUFFICIENT_INCOME"
            }
          ],
          "decisionDate": "2023-01-01T23:59:59Z"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Application",
      "path": "Onboarding/Application",
      "description": "",
      "tags": [
        "application",
        "mutation",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547374",
    "updated_at": "2025-08-06T16:32:06.547375"
  },
  {
    "name": "Create Person Account Holder With Insufficient Income",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Insufficient-Income"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 100,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Adverse Actions",
      "path": "Onboarding/Underwriting/Adverse Actions",
      "description": "",
      "tags": [
        "underwriting",
        "adverse_actions",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547390",
    "updated_at": "2025-08-06T16:32:06.547392"
  },
  {
    "name": "Create Person Account Holder With Delinquent Credit Obligations",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Delinquent-Credit"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Adverse Actions",
      "path": "Onboarding/Underwriting/Adverse Actions",
      "description": "",
      "tags": [
        "underwriting",
        "adverse_actions",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547407",
    "updated_at": "2025-08-06T16:32:06.547409"
  },
  {
    "name": "Create Person Account Holder With Insufficient Income and Delinquent Credit Obligations",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Insufficient-Income-Delinquent-Credit"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Adverse Actions",
      "path": "Onboarding/Underwriting/Adverse Actions",
      "description": "",
      "tags": [
        "underwriting",
        "adverse_actions",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547423",
    "updated_at": "2025-08-06T16:32:06.547425"
  },
  {
    "name": "Create Person Account Holder With Credit Freeze",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Credit-Freeze"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "1111111111",
              "label": "MOBILE"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Underwriting",
      "path": "Onboarding/Underwriting",
      "description": "",
      "tags": [
        "underwriting",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547440",
    "updated_at": "2025-08-06T16:32:06.547442"
  },
  {
    "name": "Create Person Account Holder With Fraud Alert",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "bob@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Fraud-Alert"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "2222222222",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Underwriting",
      "path": "Onboarding/Underwriting",
      "description": "",
      "tags": [
        "underwriting",
        "mutation",
        "create",
        "onboarding"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547455",
    "updated_at": "2025-08-06T16:32:06.547457"
  },
  {
    "name": "Issue Financial Account For Application",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{personAccountHolderCardProductApplicationId}}",
          "name": "Credit Account 1"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Financial Accounts",
      "path": "Issuance/Financial Accounts",
      "description": "",
      "tags": [
        "issue",
        "issuance",
        "mutation",
        "financial_accounts"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547467",
    "updated_at": "2025-08-06T16:32:06.547469"
  },
  {
    "name": "Get Financial Account By ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Financial Accounts",
      "path": "Issuance/Financial Accounts",
      "description": "",
      "tags": [
        "query",
        "issuance",
        "get",
        "financial_accounts"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547476",
    "updated_at": "2025-08-06T16:32:06.547478"
  },
  {
    "name": "Get Financial Account Credit Plan",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query LookupFinancialAccountCreditPlanConfigurations(\n  $id: ID!\n) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      id\n      creditConfiguration {\n        servicemembersCivilReliefAct {\n          status\n          effectiveFrom\n          effectiveThrough\n          activeDutyFrom\n          activeDutyThrough\n          updatedAt\n          createdAt\n        }\n        militaryLendingAct {\n          effectiveFrom\n          effectiveThrough\n          updatedAt\n          createdAt\n        }\n        interestRates {\n          balanceType\n          interest {\n            apr\n          }\n          creditPlan {\n            id\n            name\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            balanceType\n            interestPolicy {\n              rateType\n              index {\n                type\n                value\n                effectiveDate\n              }\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            percentageOfCreditLimit\n            planType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            status\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Financial Accounts",
      "path": "Issuance/Financial Accounts",
      "description": "",
      "tags": [
        "query",
        "issuance",
        "get",
        "financial_accounts"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547486",
    "updated_at": "2025-08-06T16:32:06.547487"
  },
  {
    "name": "Set Credit Limit For Financial Account",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "memo": "Set Credit Limit $1000"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Credit Limit",
      "path": "Issuance/Credit Limit",
      "description": "",
      "tags": [
        "credit_limit",
        "issuance",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547496",
    "updated_at": "2025-08-06T16:32:06.547498"
  },
  {
    "name": "Get Financial Account Credit Limit Update",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Credit Limit",
      "path": "Issuance/Credit Limit",
      "description": "",
      "tags": [
        "query",
        "update",
        "issuance",
        "get",
        "credit_limit"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547506",
    "updated_at": "2025-08-06T16:32:06.547508"
  },
  {
    "name": "Issue Payment Card For Financial Account",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": false,
            "expirationDate": "2028-01-01T23:59:59Z"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "issue",
        "issuance",
        "mutation",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547518",
    "updated_at": "2025-08-06T16:32:06.547520"
  },
  {
    "name": "Generate Client Token To Set PIN",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "SET_PAYMENT_CARD_PIN"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "issuance",
        "mutation",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547527",
    "updated_at": "2025-08-06T16:32:06.547529"
  },
  {
    "name": "Generate Client Token For Restricted Detail",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "issuance",
        "mutation",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547537",
    "updated_at": "2025-08-06T16:32:06.547538"
  },
  {
    "name": "View Payment Card Restricted Details",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n            id\n            expirationDate\n            restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n                    cvv\n                }\n            }\n            originalPaymentCard {\n                id\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{paymentCardId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "query",
        "issuance",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547546",
    "updated_at": "2025-08-06T16:32:06.547547"
  },
  {
    "name": "Activate Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "activate",
        "issuance",
        "mutation",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547556",
    "updated_at": "2025-08-06T16:32:06.547558"
  },
  {
    "name": "Set Pin For Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n    }\nreq_06f2e9d7416d41eeaa473efa19375e48    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "newPin": "1234"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "issuance",
        "mutation",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547566",
    "updated_at": "2025-08-06T16:32:06.547568"
  },
  {
    "name": "Suspend Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "suspend",
        "issuance",
        "mutation",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547575",
    "updated_at": "2025-08-06T16:32:06.547577"
  },
  {
    "name": "Reissue Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "options": {
            "reissueFeatures": {
              "copyNumber": true,
              "copyPin": true
            },
            "expirationDate": "2024-12-29T23:12:30Z",
            "activateOnCreate": false
          },
          "originalPaymentCardId": "ORIGINAL_PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "issue",
        "issuance",
        "mutation",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547585",
    "updated_at": "2025-08-06T16:32:06.547586"
  },
  {
    "name": "Close Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Payment Cards",
      "path": "Issuance/Payment Cards",
      "description": "",
      "tags": [
        "issuance",
        "mutation",
        "close",
        "payment_cards"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547596",
    "updated_at": "2025-08-06T16:32:06.547598"
  },
  {
    "name": "Simulate Authorization",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transaction {\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "cardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Issuance/Transactions/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "issuance",
        "mutation",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547607",
    "updated_at": "2025-08-06T16:32:06.547609"
  },
  {
    "name": "Simulate Clearing",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Issuance/Transactions/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "issuance",
        "mutation",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547616",
    "updated_at": "2025-08-06T16:32:06.547617"
  },
  {
    "name": "Simulate Reversal",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Issuance/Transactions/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "issuance",
        "mutation",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547624",
    "updated_at": "2025-08-06T16:32:06.547626"
  },
  {
    "name": "Simulate Refund",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Issuance/Transactions/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "issuance",
        "mutation",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547635",
    "updated_at": "2025-08-06T16:32:06.547637"
  },
  {
    "name": "Simulate Single Step Auth And Clear",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "PAYMENT_CARD_ID",
          "amount": {
            "currencyCode": "USD",
            "value": 1000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Issuance/Transactions/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "issuance",
        "mutation",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547646",
    "updated_at": "2025-08-06T16:32:06.547648"
  },
  {
    "name": "Get Transaction Event",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
      "variables": {
        "id": "TRANSACTION_EVENT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Transactions",
      "path": "Issuance/Transactions",
      "description": "",
      "tags": [
        "query",
        "issuance",
        "get",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547656",
    "updated_at": "2025-08-06T16:32:06.547657"
  },
  {
    "name": "Transaction Events By Payment Card And TransactionId",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID",
        "filterBy": {
          "transactionId": {
            "equals": "TRANSACTION_ID"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Transactions",
      "path": "Issuance/Transactions",
      "description": "",
      "tags": [
        "query",
        "issuance",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547666",
    "updated_at": "2025-08-06T16:32:06.547667"
  },
  {
    "name": "Get Financial Account Activitities By Financial Account ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query ListFinancialActivitiesByFinancialAccountID($id: ID!, $first: Int, $after: String ) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      externalId\n      name\n      createdAt\n      updatedAt\n      financialAccountActivities(first: $first, after: $after) {\n        edges {\n          cursor\n          node {\n            __typename\n            pendingAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            postedAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            sign\n            updatedAt\n            isComplete\n            createdAt\n            source {\n              ... SourceFragment\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n}\n\nfragment SourceFragment on FinancialAccountActivitySource {\n    ... on DebitTransaction {\n      id\n      transactionEvents {\n        ... TransactionEventFragment\n      }\n    }\n    ... on CreditTransaction {\n      id\n      transactionEvents {\n        ... TransactionEventFragment\n      }\n    }\n  }\n}\n\nfragment TransactionEventFragment on TransactionEvent {                    \n    __typename\n    id\n    createdAt\n    approvedAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n      cardDataInputCapability\n    }\n    transactionProcessingType\n    responseCode\n    currentFinancialAccountAvailableToSpendAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    currentFinancialAccountMaximumBalanceAmount {\n      value\n      currencyCode\n      decimalPlaces\n    }\n    paymentCard {\n      id\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID",
        "first": 20,
        "after": "LAST_CURSOR_FROM_CURRENT_RESULT"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Transactions",
      "path": "Issuance/Transactions",
      "description": "",
      "tags": [
        "query",
        "issuance",
        "get",
        "transactions"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547675",
    "updated_at": "2025-08-06T16:32:06.547677"
  },
  {
    "name": "Attach Spend Rule To Card Product",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input: $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Spend Rules",
      "path": "Issuance/Authorization Controls/Spend Rules",
      "description": "",
      "tags": [
        "spend_rules",
        "issuance",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547685",
    "updated_at": "2025-08-06T16:32:06.547687"
  },
  {
    "name": "Create Merchant Category Spend Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Fuel Rule",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": [
            "AIRLINES_AIR_CARRIERS"
          ]
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Spend Rules",
      "path": "Issuance/Authorization Controls/Spend Rules",
      "description": "",
      "tags": [
        "authorization_controls",
        "issuance",
        "mutation",
        "create",
        "spend_rules"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547723",
    "updated_at": "2025-08-06T16:32:06.547739"
  },
  {
    "name": "Update Merchant Category Spend Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "spendRuleId": "SPEND_RULE_ID",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": []
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Spend Rules",
      "path": "Issuance/Authorization Controls/Spend Rules",
      "description": "",
      "tags": [
        "update",
        "authorization_controls",
        "issuance",
        "mutation",
        "spend_rules"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547755",
    "updated_at": "2025-08-06T16:32:06.547758"
  },
  {
    "name": "Attach Spend Rule To Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Spend Rules",
      "path": "Issuance/Authorization Controls/Spend Rules",
      "description": "",
      "tags": [
        "spend_rules",
        "issuance",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547767",
    "updated_at": "2025-08-06T16:32:06.547770"
  },
  {
    "name": "Detach Spend Rule From Card Product",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input: $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Spend Rules",
      "path": "Issuance/Authorization Controls/Spend Rules",
      "description": "",
      "tags": [
        "spend_rules",
        "issuance",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547777",
    "updated_at": "2025-08-06T16:32:06.547779"
  },
  {
    "name": "Detach Spend Rule From Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input: $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Spend Rules",
      "path": "Issuance/Authorization Controls/Spend Rules",
      "description": "",
      "tags": [
        "spend_rules",
        "issuance",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547788",
    "updated_at": "2025-08-06T16:32:06.547789"
  },
  {
    "name": "Create Velocity Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n    ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              version\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Velocity Control - Max $1000 per month",
          "cumulativeRule": {
            "id": "AMOUNT_SPEND_RULE_ID",
            "version": "0"
          },
          "spendRules": [
            {
              "id": "ADDITIONAL_SPEND_RULE_ID",
              "version": "O"
            }
          ],
          "velocityRuleWindow": "MONTHLY"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "authorization_controls",
        "issuance",
        "velocity_rules",
        "create",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547800",
    "updated_at": "2025-08-06T16:32:06.547802"
  },
  {
    "name": "Create Amount Limit Spend Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input: $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n        currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Amount Limit Rule",
          "maximumAmount": {
            "value": 100000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "authorization_controls",
        "issuance",
        "velocity_rules",
        "create",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547810",
    "updated_at": "2025-08-06T16:32:06.547812"
  },
  {
    "name": "Attach Payment Card Velocity Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "issuance",
        "velocity_rules",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547821",
    "updated_at": "2025-08-06T16:32:06.547823"
  },
  {
    "name": "Detach Payment Card Velocity Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "issuance",
        "velocity_rules",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547833",
    "updated_at": "2025-08-06T16:32:06.547835"
  },
  {
    "name": "Get All Velocity Rules",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n          updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n              name\n              maximumAmount {\n                value\n                currencyCode\n              }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n          spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "query",
        "authorization_controls",
        "issuance",
        "velocity_rules",
        "get"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547841",
    "updated_at": "2025-08-06T16:32:06.547843"
  },
  {
    "name": "Get Payment Card Velocity Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n  \t}\n\t}\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "query",
        "authorization_controls",
        "issuance",
        "velocity_rules",
        "get"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547850",
    "updated_at": "2025-08-06T16:32:06.547852"
  },
  {
    "name": "Get Financial Account With Velocity Balance",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n            version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "query",
        "authorization_controls",
        "issuance",
        "velocity_rules",
        "get"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547861",
    "updated_at": "2025-08-06T16:32:06.547863"
  },
  {
    "name": "Attach Card Product Velocity Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "issuance",
        "velocity_rules",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547872",
    "updated_at": "2025-08-06T16:32:06.547874"
  },
  {
    "name": "Detach Card Product Velocity Rule",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Velocity Rules",
      "path": "Issuance/Authorization Controls/Velocity Rules",
      "description": "",
      "tags": [
        "issuance",
        "velocity_rules",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547881",
    "updated_at": "2025-08-06T16:32:06.547883"
  },
  {
    "name": "Add Collaborative Authorization Endpoint",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddCollaborativeAuthorizationEndpoint($input: AddCollaborativeAuthorizationEndpointInput!) {\n  addCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on  CollaborativeAuthorizationEndpoint{\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Collaborative Auth Endpoint",
          "uri": "https://example.com"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Collaborative Authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization",
      "description": "",
      "tags": [
        "issuance",
        "collaborative_authorization",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547892",
    "updated_at": "2025-08-06T16:32:06.547894"
  },
  {
    "name": "Activate Collaborative Authorization Endpoint",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivateCollaborativeAuthorizationEndpoint($input: ActivateCollaborativeAuthorizationEndpointInput!) {\n  activateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Collaborative Authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization",
      "description": "",
      "tags": [
        "activate",
        "authorization_controls",
        "issuance",
        "collaborative_authorization",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547902",
    "updated_at": "2025-08-06T16:32:06.547904"
  },
  {
    "name": "Get Collaborative Authorization Endpoint",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query FindCollaborativeAuthorizationEndpoint($id: ID!) {\n  node(id: $id) {\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{collabAuthEndpointId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Collaborative Authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization",
      "description": "",
      "tags": [
        "query",
        "authorization_controls",
        "issuance",
        "collaborative_authorization",
        "get"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547913",
    "updated_at": "2025-08-06T16:32:06.547915"
  },
  {
    "name": "Deactivate Collaborative Authorization Endpoint",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateCollaborativeAuthorizationEndpoint($input: DeactivateCollaborativeAuthorizationEndpointInput!) {\n  deactivateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on  CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Collaborative Authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization",
      "description": "",
      "tags": [
        "activate",
        "authorization_controls",
        "issuance",
        "collaborative_authorization",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547922",
    "updated_at": "2025-08-06T16:32:06.547924"
  },
  {
    "name": "Remove Collaborative Authorization Endpoint",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveCollaborativeAuthorizationEndpoint($input: RemoveCollaborativeAuthorizationEndpointInput!) {\n  removeCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Collaborative Authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization",
      "description": "",
      "tags": [
        "issuance",
        "collaborative_authorization",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547931",
    "updated_at": "2025-08-06T16:32:06.547933"
  },
  {
    "name": "Get Collaborative Authorization Endpoints",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query CollaborativeAuthorizationEndpoints($after: String, $first: Int) {\n\torganizations{\n\t\tid\n\t\tcollaborativeAuthorizationEndpoints(first: $first, after: $after) {\n\t\t\t__typename\n\n\t\t\tedges {\n\t\t\t\t__typename\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tsigningKeys {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tsecret\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Collaborative Authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization",
      "description": "",
      "tags": [
        "query",
        "authorization_controls",
        "issuance",
        "collaborative_authorization",
        "get"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547941",
    "updated_at": "2025-08-06T16:32:06.547942"
  },
  {
    "name": "Rename Collaborative Authorization Endpoint",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RenameCollaborativeAuthorizationEndpoint($input: RenameCollaborativeAuthorizationEndpointInput!) {\n  renameCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}",
          "name": "Renamed Collaborative Auth Endpoint"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Collaborative Authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization",
      "description": "",
      "tags": [
        "issuance",
        "collaborative_authorization",
        "mutation",
        "authorization_controls"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547950",
    "updated_at": "2025-08-06T16:32:06.547951"
  },
  {
    "name": "Generate Direct Deposit Detail Client Token",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateDirectDepositDetailClientToken($input: GenerateDirectDepositDetailClientTokenInput!) {\n  generateDirectDepositDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "directDepositDetailId": "DIRECT_DEPOSIT_DETAIL_ID",
          "permissions": [
            "READ_RESTRICTED_DETAILS"
          ]
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Product Funding Account",
      "path": "Funding/Product Funding Account",
      "description": "",
      "tags": [
        "funding",
        "mutation",
        "product_funding_account"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547961",
    "updated_at": "2025-08-06T16:32:06.547963"
  },
  {
    "name": "Get Direct Deposit Details By ID With Client Token",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDirectDepositDetailsByIDWithClientToken($id: ID!) {\n  node(id: $id) {\n    ... on DirectDepositDetail {\n      id\n      restrictedDetails {\n        ... on DirectDepositDetailRestrictedDetails {\n          number\n          routingNumber\n          bank {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DIRECT_DEPOSIT_DETAIL_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Product Funding Account",
      "path": "Funding/Product Funding Account",
      "description": "",
      "tags": [
        "query",
        "funding",
        "get",
        "product_funding_account"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547973",
    "updated_at": "2025-08-06T16:32:06.547975"
  },
  {
    "name": "Get Product Funding Account Direct Deposit ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetProductFundingAccountByCardProductID($id: ID!, $filterBy: AccountHolderFinancialAccountsFilterInput!) {\n  node(id: $id) {\n    ... on CardProduct {\n      accounts(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            name\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            directDepositDetails {\n              id\n              createdAt\n              updatedAt\n              restrictedDetails {\n                ... on DirectDepositDetailRestrictedDetails {\n                  number\n                  routingNumber\n                  bank {\n                    name\n                    address {\n                      streetAddress\n                      extendedAddress\n                      postalCode\n                      region\n                      locality\n                      countryCodeAlpha3\n                    }\n                  }\n                  type\n                }\n                ... on AccessDeniedError {\n                  message\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}",
        "filterBy": {
          "features": {
            "equals": "PRODUCT_FUNDING"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Product Funding Account",
      "path": "Funding/Product Funding Account",
      "description": "",
      "tags": [
        "query",
        "funding",
        "get",
        "product_funding_account"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547984",
    "updated_at": "2025-08-06T16:32:06.547986"
  },
  {
    "name": "Simulate Deposit",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "toFinancialAccountId": "{{financialAccountId}}",
          "source": "WIRE",
          "memo": "Initial Card Funding",
          "amount": {
            "value": 50000000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Product Funding Account",
      "path": "Funding/Product Funding Account",
      "description": "",
      "tags": [
        "funding",
        "mutation",
        "product_funding_account"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.547995",
    "updated_at": "2025-08-06T16:32:06.547997"
  },
  {
    "name": "Add External Bank Account Verified Through Plaid",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "integrator_initiated_(originated)_ach",
        "funding",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548006",
    "updated_at": "2025-08-06T16:32:06.548007"
  },
  {
    "name": "Add External Bank Account Verified Through Finicity",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughFinicity($input: AddExternalBankAccountVerifiedThroughFinicityInput!) {\n  addExternalBankAccountVerifiedThroughFinicity(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      owner {\n        ... on USPersonAccountHolder {\n          id\n          externalId\n        }\n        ... on USBusinessAccountHolder {\n          id\n          externalId\n        }\n      }\n      name\n      provider\n      accountStatus\n      createdAt\n      updatedAt\n      externalBankAccountDetails {\n        id\n        last4\n        type\n        routingNumber\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "name": "Finicity Checking",
          "bankAccountType": "CHECKING",
          "externalToken": {
            "receiptId": "processor-token-success",
            "customerId": "5543088633794259024",
            "products": [
              {
                "productType": "ACH_DETAILS",
                "accountId": "8977412844634022494",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "CURRENT_BALANCE",
                "accountId": "1045023535892401594",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "APPROXIMATE_BALANCE",
                "accountId": "7895597441790621692",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "ACH_OWNER_DETAILS",
                "accountId": "5200183909259568542",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              }
            ]
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "integrator_initiated_(originated)_ach",
        "funding",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548024",
    "updated_at": "2025-08-06T16:32:06.548026"
  },
  {
    "name": "Get External Financial Accounts By Account Holder",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{organizationId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "query",
        "ach_transfer_(&_simulation)",
        "get",
        "funding",
        "integrator_initiated_(originated)_ach"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548034",
    "updated_at": "2025-08-06T16:32:06.548036"
  },
  {
    "name": "Initiate Funds Deposit ACH Transfer",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "descriptor": {
            "companyEntryDescription": "Company",
            "individualIdentificationNumber": "",
            "individualName": "Baja ABC"
          },
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2022-12-07T14:42:52.453Z",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "integrator_initiated_(originated)_ach",
        "funding",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548051",
    "updated_at": "2025-08-06T16:32:06.548053"
  },
  {
    "name": "Initiate Funds Withdrawal ACH Transfer",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "descriptor": {
            "companyEntryDescription": "Test Entry",
            "individualName": "Test",
            "individualIdentificationNumber": "1234"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-07T14:42:52.453Z",
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          },
          "idempotencyKey": "abcde123",
          "cancellationPeriodMillis": 0,
          "sameDay": false
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "integrator_initiated_(originated)_ach",
        "funding",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548064",
    "updated_at": "2025-08-06T16:32:06.548066"
  },
  {
    "name": "Simulate Processing Integrator Initiated Status Change",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "integrator_initiated_(originated)_ach",
        "funding",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548074",
    "updated_at": "2025-08-06T16:32:06.548076"
  },
  {
    "name": "Simulate Processed Integrator Initiated Status Change",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "integrator_initiated_(originated)_ach",
        "funding",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548084",
    "updated_at": "2025-08-06T16:32:06.548086"
  },
  {
    "name": "Simulate Returned Integrator Initiated Status Change",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "ID",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Integrator Initiated (Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Integrator Initiated (Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "integrator_initiated_(originated)_ach",
        "funding",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548095",
    "updated_at": "2025-08-06T16:32:06.548096"
  },
  {
    "name": "Simulate Externally Initiated ACH Transfer",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          },
          "companyEntryDescription": "TestDesc",
          "companyIdentifier": "TestID",
          "companyName": "TestName",
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "individualIdentificationNumber": "TestInDID",
          "individualName": "TestIndName",
          "settlementDate": "2022-07-28",
          "transferType": "CREDIT"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Externally Initiated (Non-Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Externally Initiated (Non-Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "funding",
        "externally_initiated_(non-originated)_ach",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548109",
    "updated_at": "2025-08-06T16:32:06.548111"
  },
  {
    "name": "Simulate Processing Externally Initiated Status Change",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Externally Initiated (Non-Originated) ACH",
      "path": "Funding/ACH Transfer (& Simulation)/Externally Initiated (Non-Originated) ACH",
      "description": "",
      "tags": [
        "mutation",
        "funding",
        "externally_initiated_(non-originated)_ach",
        "ach_transfer_(&_simulation)"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548119",
    "updated_at": "2025-08-06T16:32:06.548120"
  },
  {
    "name": "Initiate Transfer From Funding Financial Account To Payment Card Financial Account",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(\n  $input: InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput!\n) {\n  initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(\n    input: $input\n  ) {\n    ... on InterFinancialAccountTransfer {\n      id\n      status\n      statusReason\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "fromFinancialAccountId": "{{fromFinancialAccountId}}",
          "toFinancialAccountId": "{{toFinancialAccountId}}",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "memo": "repayment",
          "idempotencyKey": "{{currentTimestampFormatted}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Funding",
      "path": "Funding",
      "description": "",
      "tags": [
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548133",
    "updated_at": "2025-08-06T16:32:06.548135"
  },
  {
    "name": "Initiate Transfer Between Financial Accounts",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateTransferBetweenFinancialAccounts($input: InitiateTransferBetweenFinancialAccountsInput!) {\n  initiateTransferBetweenFinancialAccounts(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      amount {\n        currencyCode\n        value\n      }\n      createdAt\n      id\n      memo\n      purpose\n      status\n      statusReason\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "currencyCode": "USD",
            "value": 1100
          },
          "fromFinancialAccountId": "{{fromFinancialAccountId}}",
          "toFinancialAccountId": "{{toFinancialAccountId}}",
          "memo": "JLK to XYZ Corp",
          "purpose": "GENERAL"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Funding",
      "path": "Funding",
      "description": "",
      "tags": [
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548144",
    "updated_at": "2025-08-06T16:32:06.548146"
  },
  {
    "name": "Simulate Send To Printer",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Physical Card/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "physical_card",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548154",
    "updated_at": "2025-08-06T16:32:06.548156"
  },
  {
    "name": "Simulate Approval",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Physical Card/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "physical_card",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548163",
    "updated_at": "2025-08-06T16:32:06.548165"
  },
  {
    "name": "Simulate Shipment Failed",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Physical Card/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "physical_card",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548172",
    "updated_at": "2025-08-06T16:32:06.548174"
  },
  {
    "name": "Simulate Shipped",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}",
          "trackingNumber": "trackingNumber",
          "actualShipDate": "YYYY-MM-DD"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Physical Card/Simulation",
      "description": "",
      "tags": [
        "simulation",
        "physical_card",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548183",
    "updated_at": "2025-08-06T16:32:06.548185"
  },
  {
    "name": "Order Physical Payment Card",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "requestedShipDate": "2021-08-20",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "John Doe"
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Physical Card",
      "path": "Physical Card",
      "description": "",
      "tags": [
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548197",
    "updated_at": "2025-08-06T16:32:06.548199"
  },
  {
    "name": "Find Physical Payment Card Order",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalPaymentCardOrderId}}"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Physical Card",
      "path": "Physical Card",
      "description": "",
      "tags": [
        "query"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548207",
    "updated_at": "2025-08-06T16:32:06.548209"
  },
  {
    "name": "Cancel Physical Payment Card Order",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Physical Card",
      "path": "Physical Card",
      "description": "",
      "tags": [
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548215",
    "updated_at": "2025-08-06T16:32:06.548217"
  },
  {
    "name": "Add Webhook Notification Target",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input: $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "My Target",
          "uri": "<URI>",
          "subscriptions": [
            "PAYMENT_CARD_ACTIVATED",
            "AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_IN_REVIEW",
            "CARD_PRODUCT_APPLICATION_MANUAL_REVIEW",
            "CARD_PRODUCT_APPLICATION_DENIED",
            "CARD_PRODUCT_APPLICATION_CLOSED",
            "PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED",
            "PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED"
          ]
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "notification_targets",
        "mutation",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548244",
    "updated_at": "2025-08-06T16:32:06.548247"
  },
  {
    "name": "Get All Webhook Notification Targets",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\tid\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\tsubscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "query",
        "notification_targets",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548257",
    "updated_at": "2025-08-06T16:32:06.548259"
  },
  {
    "name": "Deactivate Notification Target",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input: $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "activate",
        "notification_targets",
        "mutation",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548269",
    "updated_at": "2025-08-06T16:32:06.548271"
  },
  {
    "name": "Activate Notification Target",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "unknown",
    "graphql": {
      "query": "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input: ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "activate",
        "notification_targets",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548280",
    "updated_at": "2025-08-06T16:32:06.548282"
  },
  {
    "name": "Get Webhook Notification Target",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\thttpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "query",
        "notification_targets",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548289",
    "updated_at": "2025-08-06T16:32:06.548291"
  },
  {
    "name": "Get Notification Target Delivery Attempts",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n            createdAt\n            event {\n              name\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "WEBHOOK_NOTIFICATION_TARGET_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "query",
        "notification_targets",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548298",
    "updated_at": "2025-08-06T16:32:06.548300"
  },
  {
    "name": "Add Subscriptions To Notification Target",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "notification_targets",
        "mutation",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548307",
    "updated_at": "2025-08-06T16:32:06.548309"
  },
  {
    "name": "Remove Subscriptions From Notification Target",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!) {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Targets",
      "path": "Reporting/Notifications/Notification Targets",
      "description": "",
      "tags": [
        "notification_targets",
        "mutation",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548316",
    "updated_at": "2025-08-06T16:32:06.548318"
  },
  {
    "name": "Get All Notification Events",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllNotificationEvents($after: String, $first: Int) {\n\tnotificationEvents(after: $after, first: $first) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t\tnode {\n            __typename\n\t\t\t\t\t\t... on PaymentCardTransactionDispute {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\tchargebacks {\n                id, \n                status, \n                dispute {\n                  id\n                }, \n                creditStatus\n              }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on PaymentCardTransactionChargeback {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcreditStatus\n\t\t\t\t\t\t\tdispute {\n                id,\n                status,\n                amount { \n                  value\n\t\t\t\t\t\t\t  }\n              }\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "first": 150
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Events",
      "path": "Reporting/Notifications/Notification Events",
      "description": "",
      "tags": [
        "query",
        "notification_events",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548331",
    "updated_at": "2025-08-06T16:32:06.548333"
  },
  {
    "name": "Get Notification Event",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEvent($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tcreatedAt\n\t\t\texpiresAt\n\t\t\tname\n\t\t\tnode {\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Events",
      "path": "Reporting/Notifications/Notification Events",
      "description": "",
      "tags": [
        "query",
        "notification_events",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548342",
    "updated_at": "2025-08-06T16:32:06.548344"
  },
  {
    "name": "Replay Notification Event",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReplayNotificationEvent($input: ReplayNotificationEventInput!) {\n  replayNotificationEvent(input: $input) {\n    __typename\n    ... on NotificationEvent {\n      __typename\n      id\n\t  createdAt\n\t  expiresAt\n      node {\n        ... on AuthorizationEvent {\n          id\n          approvedAmount {\n            value\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "input": {
          "notificationEventId": "<ID>"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Events",
      "path": "Reporting/Notifications/Notification Events",
      "description": "",
      "tags": [
        "notification_events",
        "mutation",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548352",
    "updated_at": "2025-08-06T16:32:06.548353"
  },
  {
    "name": "Get Delivery Attempts For Notification Event",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDeliveryAttemptsForNotificationEvent($id: ID!, $after: String, $first: Int) {\n\tnode(id: $id) {\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tdeliveryAttempts(first: $first, after: $after) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\t__typename\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\t__typename\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t  httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\turi\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "id": "<ID>",
        "first": 10
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Events",
      "path": "Reporting/Notifications/Notification Events",
      "description": "",
      "tags": [
        "query",
        "notification_events",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548361",
    "updated_at": "2025-08-06T16:32:06.548362"
  },
  {
    "name": "Get Notification Events Filtered By Name",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEventsFilteredByName($filterBy: NotificationEventsFilterInput!, $first: Int) {\n\tnotificationEvents(filterBy: $filterBy, first: $first) {\n\t\t__typename\n\t\tpageInfo {\n\t\t\tstartCursor\n\t\t\tendCursor\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t}\n\t\tedges {\n\t\t\tcursor\n\t\t\t__typename\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "filterBy": {
          "name": [
            "INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED"
          ]
        },
        "first": 20
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Notification Events",
      "path": "Reporting/Notifications/Notification Events",
      "description": "",
      "tags": [
        "query",
        "notification_events",
        "get",
        "reporting",
        "notifications"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548395",
    "updated_at": "2025-08-06T16:32:06.548398"
  },
  {
    "name": "Initiate Organization Report",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateOrganizationReport($input: InitiateOrganizationReportInput!) {\n  initiateOrganizationReport(input: $input) {\n    __typename\n    ... on Report {\n      id\n      download {\n        url\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "reportType": "LEDGER_ENTRY",
          "parameters": {
            "between": {
              "start": "2023-01-01",
              "end": "2024-03-02"
            }
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Reports",
      "path": "Reporting/Reports",
      "description": "",
      "tags": [
        "mutation",
        "reporting",
        "reports"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548413",
    "updated_at": "2025-08-06T16:32:06.548415"
  },
  {
    "name": "Get Report",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetReport($id: ID!) {\n  node(id: $id) {\n    ... on Report {\n      download {\n        url\n      }\n    }\n  }\n}",
      "variables": {
        "id": "REPORT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Reports",
      "path": "Reporting/Reports",
      "description": "",
      "tags": [
        "query",
        "get",
        "reporting",
        "reports"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548423",
    "updated_at": "2025-08-06T16:32:06.548425"
  },
  {
    "name": "Get Report Usage",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query ReportUsage {\n  reportUsage {\n    limit\n    limitRemaining\n    periodEnd\n    reportType\n  }\n}",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Reports",
      "path": "Reporting/Reports",
      "description": "",
      "tags": [
        "query",
        "get",
        "reporting",
        "reports"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548433",
    "updated_at": "2025-08-06T16:32:06.548436"
  },
  {
    "name": "Get Reports",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query Reports($first: Int, $after: String, $input: ReportFilterInput) {\n  reports(first: $first, after: $after, filterBy: $input) {\n    ... on ReportConnection {\n      edges {\n        ... on ReportEdge {\n          node {\n            __typename\n            id\n            status\n            reportType\n            download {\n              url\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "status": {
            "includes": [
              "COMPLETED"
            ]
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Reports",
      "path": "Reporting/Reports",
      "description": "",
      "tags": [
        "query",
        "get",
        "reporting",
        "reports"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548443",
    "updated_at": "2025-08-06T16:32:06.548445"
  },
  {
    "name": "Simulate Rollover Current Statement Period",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateRolloverCurrentFinancialAccountStatementPeriod($input: SimulateRolloverCurrentFinancialAccountStatementPeriodInput!) {\n  simulateRolloverCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Reporting/Statements/Simulation",
      "description": "",
      "tags": [
        "statements",
        "simulation",
        "mutation",
        "reporting"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548455",
    "updated_at": "2025-08-06T16:32:06.548457"
  },
  {
    "name": "Simulate Shift Current Statement Period",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateShiftCurrentFinancialAccountStatementPeriod($input: SimulateShiftCurrentFinancialAccountStatementPeriodInput!) {\n  simulateShiftCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "periodBoundary": "2024-01-30T18:56:35Z"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Reporting/Statements/Simulation",
      "description": "",
      "tags": [
        "statements",
        "simulation",
        "mutation",
        "reporting"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548465",
    "updated_at": "2025-08-06T16:32:06.548467"
  },
  {
    "name": "Simulate Backward Shift And Age Current Financial Account Statement Period",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statements {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Simulation",
      "path": "Reporting/Statements/Simulation",
      "description": "",
      "tags": [
        "statements",
        "simulation",
        "mutation",
        "reporting"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548476",
    "updated_at": "2025-08-06T16:32:06.548478"
  },
  {
    "name": "Get Current Billing Statement By Financial Account ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Statements",
      "path": "Reporting/Statements",
      "description": "",
      "tags": [
        "statements",
        "query",
        "get",
        "reporting"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548486",
    "updated_at": "2025-08-06T16:32:06.548488"
  },
  {
    "name": "Get Latest Closed Billing Statement By Financial Account ID",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "query",
    "graphql": {
      "query": "query GetLatestClosedBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... latestClosedConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment latestClosedConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  latestClosedStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Statements",
      "path": "Reporting/Statements",
      "description": "",
      "tags": [
        "query",
        "close",
        "get",
        "statements",
        "reporting"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548496",
    "updated_at": "2025-08-06T16:32:06.548498"
  },
  {
    "name": "Simulate Delinquency",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      delinquency {\n        __typename\n        totalAmount {\n          value\n          currencyCode\n        }\n        numberOfCycles\n        totalDaysDelinquent\n        delinquencyStartedOn\n        currentDelinquentCycles {\n          daysDelinquent\n          createdAt\n          updatedAt\n          amount {\n            value\n            currencyCode\n          }\n          totalRepaymentsApplied {\n            value\n            currencyCode\n          }\n          state\n          statement {\n            ... on ConsumerRevolvingCardFinancialAccountStatement {\n              id\n              periodStart\n              periodEnd\n              openedAt\n              closedAt\n              primaryLedger {\n                debitBalance {\n                  value\n                  currencyCode\n                }\n                creditBalance {\n                  value\n                  currencyCode\n                }\n                normalBalance\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Delinquency",
      "path": "Repayment/Delinquency",
      "description": "",
      "tags": [
        "repayment",
        "delinquency",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548510",
    "updated_at": "2025-08-06T16:32:06.548512"
  },
  {
    "name": "Schedule Recurring ACH Transfer",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "OUTSTANDING_BALANCE"
          },
          "frequency": "MONTHLY",
          "transferDayOfMonth": 3,
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2021-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "Test 1234",
            "individualIdentificationNumber": "Test 12345",
            "individualName": "Test 123456"
          },
          "fromFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Scheduled Transfers",
      "path": "Repayment/Scheduled Transfers",
      "description": "",
      "tags": [
        "repayment",
        "scheduled_transfers",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548524",
    "updated_at": "2025-08-06T16:32:06.548526"
  },
  {
    "name": "Schedule One Time ACH Transfer",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "transferAmount": {
              "value": 100000,
              "currencyCode": "USD"
            }
          },
          "transferDate": "2025-06-23",
          "transferAgreementConsent": {
            "authorizedPersonId": "{{authorizedPersonId}}",
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Kevin Ruan"
          },
          "fromFinancialAccountId": "{{verifiedExternalBankAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Scheduled Transfers",
      "path": "Repayment/Scheduled Transfers",
      "description": "",
      "tags": [
        "repayment",
        "scheduled_transfers",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548540",
    "updated_at": "2025-08-06T16:32:06.548542"
  },
  {
    "name": "Create Reward Redemption Configuration",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRewardRedemptionConfiguration($input: CreateRewardRedemptionConfigurationInput!) {\n  createRewardRedemptionConfiguration(input: $input) {\n    ... on RewardRedemptionConfiguration {\n      id\n      name\n      createdAt\n      type\n      updatedAt\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        edges {\n          node {\n            ... on RewardRedemptionConfigurationProductAttachment {\n              id\n              cardProduct {\n                id\n                name\n              }\n              effectiveFrom\n              effectiveThrough\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "REDEMPTION_RULE_NAME",
          "rewardPointRedemption": {
            "rate": "1.0"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Redemption",
      "path": "Redemption",
      "description": "",
      "tags": [
        "mutation",
        "create"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548552",
    "updated_at": "2025-08-06T16:32:06.548554"
  },
  {
    "name": "Attach Reward Redemption Configuration To Product",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachRewardRedemptionConfigurationToProduct($input: AttachRewardRedemptionConfigurationToProductInput!) {\n  attachRewardRedemptionConfigurationToProduct(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      cardProduct {\n        id\n        name\n      }\n      effectiveFrom\n      effectiveThrough\n      redemptionConfiguration {\n        id\n        name\n        type\n        rewardPointRedemption {\n          rate\n        }\n        updatedAt\n        createdAt\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Redemption",
      "path": "Redemption",
      "description": "",
      "tags": [
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548568",
    "updated_at": "2025-08-06T16:32:06.548570"
  },
  {
    "name": "Update Reward Redemption Configuration Attachment",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateRewardRedemptionConfigurationAttachment($input: UpdateRewardRedemptionConfigurationAttachmentInput!) {\n  updateRewardRedemptionConfigurationAttachment(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      effectiveFrom\n      effectiveThrough\n      cardProduct {\n        id\n        name\n      }\n      redemptionConfiguration {\n        id\n        name\n        rewardPointRedemption {\n          rate\n        }\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "attachmentId": "REDEMPTION_RULE_CONFIGURATION_ID",
          "effectiveThrough": "UPDATED_DATE"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Redemption",
      "path": "Redemption",
      "description": "",
      "tags": [
        "update",
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548578",
    "updated_at": "2025-08-06T16:32:06.548580"
  },
  {
    "name": "Redeem Rewards For Statement Credit",
    "program_type": "consumer_credit.postman_collection",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RedeemRewardsForStatementCredit($input: RedeemRewardsForStatementCreditInput!) {\n  redeemRewardsForStatementCredit(input: $input) {\n    ... on RewardPointsTransfer {\n      id\n      memo\n      activity\n      externalTransactionIdentifier\n      redemptionConfiguration {\n        id\n        name\n      }\n      rewardEarnRule {\n        __typename\n        id\n        name\n      }\n      rewardPointsAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      rewardPointsValue {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      source\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "memo": "MEMO",
          "externalTransactionIdentifier": "EXTERNAL_ID",
          "redemption": {
            "pointsToRedeem": 100,
            "redemptionConfigurationId": "REDEMPTION_RULE_CONFIGURATION_ID"
          }
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "Redemption",
      "path": "Redemption",
      "description": "",
      "tags": [
        "mutation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-06T16:32:06.548588",
    "updated_at": "2025-08-06T16:32:06.548590"
  }
]