[
  {
    "name": "GetAllApiKeys",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n          revokedAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 10
      }
    },
    "headers": {},
    "metadata": {
      "category": "api_key_management",
      "path": "Setup/API Key Management/Get All API Keys",
      "description": "",
      "tags": [
        "api_key_management",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684724",
    "updated_at": "2025-08-04T16:18:34.684727"
  },
  {
    "name": "CreateApiKey",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "secretKey": {
            "name": "Key Test"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "api_key_management",
      "path": "Setup/API Key Management/Create API Key",
      "description": "",
      "tags": [
        "api_key_management",
        "creation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684742",
    "updated_at": "2025-08-04T16:18:34.684742"
  },
  {
    "name": "RevokeApiKey",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n      revokedAt\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "apiKeyId": "{{createdApiKeyId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "api_key_management",
      "path": "Setup/API Key Management/Revoke API Key",
      "description": "",
      "tags": [
        "api_key_management"
      ],
      "requires": [
        "createdApiKeyId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684757",
    "updated_at": "2025-08-04T16:18:34.684757"
  },
  {
    "name": "GetAllOrganizations",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    financialAccounts {\n      createdAt\n      updatedAt\n      __typename\n      id\n      name\n      ledgers {\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          financialAccounts {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {},
    "metadata": {
      "category": "organization",
      "path": "Setup/Organization/Get All Organizations",
      "description": "",
      "tags": [
        "organization",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "creditBalance",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684786",
    "updated_at": "2025-08-04T16:18:34.684786"
  },
  {
    "name": "UpdateOrganizationProfileDisplayName",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "id": "{{organizationId}}",
          "displayName": "New Test Name"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "organization",
      "path": "Setup/Organization/Update Organization Profile Display Name",
      "description": "",
      "tags": [
        "organization",
        "modification"
      ],
      "requires": [
        "organizationId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684801",
    "updated_at": "2025-08-04T16:18:34.684802"
  },
  {
    "name": "GetOrganizationById",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetOrganizationByID($id: ID!) {\n  node(id: $id) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n        environment\n        region\n      }\n      financialAccounts {\n        ledgers {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{organizationId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "organization",
      "path": "Setup/Organization/Get Organization by ID",
      "description": "",
      "tags": [
        "organization",
        "retrieval"
      ],
      "requires": [
        "organizationId"
      ],
      "produces": [
        "ledgers"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684817",
    "updated_at": "2025-08-04T16:18:34.684817"
  },
  {
    "name": "CreateCardProduct",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Test Fleet",
            "usage": "MULTI_USE",
            "vertical": "FLEET"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "card_product",
      "path": "Setup/Card Product/Create Card Product",
      "description": "",
      "tags": [
        "card_product",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684833",
    "updated_at": "2025-08-04T16:18:34.684834"
  },
  {
    "name": "GetAllCardProducts",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllCardProducts($first: Int) {\n  cardProducts(first: $first) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        name\n        __typename\n        financialAccounts {\n          id\n          owner {\n            __typename\n          }\n          name\n          features {\n            __typename\n            enabled\n          }\n        }\n        id\n        usage\n        vertical\n      }\n    }\n  }\n}\n",
      "variables": {
        "first": 20
      }
    },
    "headers": {},
    "metadata": {
      "category": "card_product",
      "path": "Setup/Card Product/Get All Card Products",
      "description": "",
      "tags": [
        "card_product",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684847",
    "updated_at": "2025-08-04T16:18:34.684848"
  },
  {
    "name": "UpdateCardProductName",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateCardProductName($input: UpdateCardProductNameInput!) {\n  updateCardProductName(input: $input) {\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "name": "NEW_NAME"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "card_product",
      "path": "Setup/Card Product/Update Card Product Name",
      "description": "",
      "tags": [
        "card_product",
        "modification"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684863",
    "updated_at": "2025-08-04T16:18:34.684864"
  },
  {
    "name": "GetCardProduct",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProduct($id: ID!) {\n    node(id: $id) {\n        ... on CardProduct {\n            id\n            name\n            features {\n                __typename\n                enabled\n            }\n            accounts {\n                edges {\n                    node {\n                        __typename\n                        id\n                        name\n                        features {\n                            __typename\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "card_product",
      "path": "Setup/Card Product/Get Card Product",
      "description": "",
      "tags": [
        "card_product",
        "retrieval"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684880",
    "updated_at": "2025-08-04T16:18:34.684881"
  },
  {
    "name": "GetAccountHolderPaymentCardsByCardProductById",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderPaymentCardsByCardProductID($cardProductId: ID!, $firstPaymentCards: Int, $paymentCardsFilterBy: CardProductPaymentCardsFilterInput) {\n  node(id: $cardProductId) {\n    ... on CardProduct {\n      __typename\n      id\n      name\n      usage\n      paymentCards(first: $firstPaymentCards, filterBy: $paymentCardsFilterBy) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          __typename\n          cursor\n          node {\n            id\n            bin\n            application {\n              accountHolderSnapshot {\n                __typename\n                ... on USPersonAccountHolderSnapshot {\n                  name {\n                    givenName\n                    middleName\n                    familyName\n                  }\n                }\n              }\n            }\n            expirationDate\n            last4\n            status\n          }\n        }\n      }\n      cardProductApplications {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "cardProductId": "CARD_PRODUCT_ID",
        "paymentCardsFilterBy": {
          "accountHolderId": {
            "equals": "ACCOUNT_HOLDER_ID"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "card_product",
      "path": "Setup/Card Product/Get Account Holder Payment Cards by Card Product by ID",
      "description": "",
      "tags": [
        "card_product",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "accountHolderSnapshot",
        "name",
        "pageInfo",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684900",
    "updated_at": "2025-08-04T16:18:34.684900"
  },
  {
    "name": "EnableCollaborativeApplicationUnderwritingFeatureCopy",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableCollaborativeApplicationUnderwritingFeature($input: EnableCollaborativeApplicationUnderwritingFeatureInput!) {\n  enableCollaborativeApplicationUnderwritingFeature(input: $input) {\n    ... on CardProduct {\n      id\n      name\n      features {\n        ... on CollaborativeApplicationUnderwritingCardProductFeature {\n          enabled\n          createdAt\n          updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "card_product",
      "path": "Setup/Card Product/Enable Collaborative Application Underwriting Feature Copy",
      "description": "",
      "tags": [
        "card_product"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684919",
    "updated_at": "2025-08-04T16:18:34.684920"
  },
  {
    "name": "Ping",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query Ping {\n  ping\n}",
      "variables": {}
    },
    "headers": {},
    "metadata": {
      "category": "setup",
      "path": "Setup/ping",
      "description": "",
      "tags": [
        "setup"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684930",
    "updated_at": "2025-08-04T16:18:34.684931"
  },
  {
    "name": "Introspection",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {},
    "metadata": {
      "category": "setup",
      "path": "Setup/introspection",
      "description": "",
      "tags": [
        "setup"
      ],
      "requires": [],
      "produces": [
        "__schema"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684950",
    "updated_at": "2025-08-04T16:18:34.684950"
  },
  {
    "name": "GetAccountHolderCardProductApplicationStatus",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n        ...USBusinessAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        primaryDocumentTypes\n        secondaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\n\nfragment USBusinessAccountHolderSnapshot on USBusinessAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  primaryAuthorizedPerson {\n    name {\n      givenName\n      familyName\n      title\n      suffix\n    }\n    currentVerification {\n      ...Verification\n    }\n  }\n  businessProfile {\n    name {\n      doingBusinessAsName\n      legalBusinessName\n    }\n    currentVerification {\n      ...Verification\n    }\n    ultimateBeneficialOwners {\n      name {\n        givenName\n        familyName\n        title\n        suffix\n      }\n      currentVerification {\n        ...Verification\n      }\n    }\n  }\n  \n}\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
      "variables": {
        "id": "{{personAccountHolderApplicationId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "simulation",
      "path": "Onboarding/Account Holder/Business Account Holder/Manual Review/Secure Document Upload/Simulation/Get Account Holder Card Product Application Status",
      "description": "",
      "tags": [
        "simulation",
        "retrieval"
      ],
      "requires": [
        "personAccountHolderApplicationId"
      ],
      "produces": [
        "pageInfo",
        "node",
        "constraints",
        "name",
        "name"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.684988",
    "updated_at": "2025-08-04T16:18:34.684989"
  },
  {
    "name": "CreateBusinessAccountHolder",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSBusiniessAccountHolder($input: CreateUSBusinessAccountHolderInput!) {\n  createUSBusinessAccountHolder(input: $input) {\n    __typename\n    ... on USBusinessAccountHolder {\n      id\n      externalId\n\t\t\tprimaryAuthorizedPerson {\n\t\t\t\tid\n\t\t\t}\n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "primaryAuthorizedPerson": {
            "name": {
              "givenName": "Ian",
              "familyName": "Somnia"
            },
            "email": "foo@example.com",
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "homeAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-09-01",
            "percentageOwnership": 25,
            "authorizingPersonTitle": "PRESIDENT"
          },
          "businessProfile": {
            "name": {
              "legalBusinessName": "Test",
              "doingBusinessAsName": "D'Souza asdf"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "billingAddress": {
              "streetAddress": "PO Box 123",
              "postalCode": "66666",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "employerIdentificationNumber": {
                "number": "11-1111111",
                "countryCodeAlpha3": "USA"
              }
            },
            "website": "https://www.foowebsite.com",
            "businessType": "PARTNERSHIP",
            "ultimateBeneficialOwners": [
              {
                "email": "foobo@example.com",
                "name": {
                  "givenName": "Scott",
                  "familyName": "Someone"
                },
                "homeAddress": {
                  "streetAddress": "123 Main Street",
                  "postalCode": "60654",
                  "locality": "Chicago",
                  "region": "IL",
                  "countryCodeAlpha3": "USA"
                },
                "phoneNumber": {
                  "countryCode": "1",
                  "number": "5555555555",
                  "label": "MOBILE",
                  "extension": "312"
                },
                "identificationDocument": {
                  "socialSecurityNumber": {
                    "number": "111-11-1111",
                    "countryCodeAlpha3": "USA"
                  }
                },
                "dateOfBirth": "1980-09-01",
                "percentageOwnership": 75
              }
            ]
          },
          "externalId": "user-id-in-your-system"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Create Business Account Holder",
      "description": "",
      "tags": [
        "business_account_holder",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685047",
    "updated_at": "2025-08-04T16:18:34.685048"
  },
  {
    "name": "CreateBusinessAccountHolderApplication",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAccountHolderCardProductApplication(\n  $input: CreateAccountHolderCardProductApplicationInput!\n) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "cardProductId": "{{cardProductId}}",
          "cardHolderAgreementConsent": {
            "primaryAuthorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "consentTimestamp": "2023-12-22T17:10:55.662Z"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Create Business Account Holder Application",
      "description": "",
      "tags": [
        "business_account_holder",
        "creation"
      ],
      "requires": [
        "businessAccountHolderPrimaryAuthorizedPersonId",
        "businessAccountHolderId",
        "cardProductId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685065",
    "updated_at": "2025-08-04T16:18:34.685066"
  },
  {
    "name": "SearchBusinessAccountHolders",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSBusinessAccountHolder($filterBy: BusinessAccountHolderFilterInput) {\n  businessAccountHolders(filterBy: $filterBy) {\n    edges {\n      node {\n        id\n        externalId\n        updatedAt\n        createdAt\n        financialAccounts {\n          edges {\n            node {\n              id\n            }\n          }\n        }\n        externalFinancialAccounts {\n          edges {\n            node {\n              ... on Node {\n                id\n              }\n            }\n          }\n        }\n        businessProfile {\n          id\n          createdAt\n          updatedAt\n          website\n          name {\n            legalBusinessName\n            doingBusinessAsName\n          }\n          billingAddress {\n            streetAddress\n            postalCode\n            region\n            locality\n          }\n          identificationDocument {\n            employerIdentificationNumber {\n              numberHash\n            }\n          }\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          ultimateBeneficialOwners {\n            id\n            createdAt\n            updatedAt\n            name {\n              givenName\n              familyName\n            }\n            dateOfBirth\n            email\n            homeAddress {\n              streetAddress\n              postalCode\n              region\n              locality\n            }\n            identificationDocument {\n              socialSecurityNumber {\n                numberHash\n              }\n            }\n            percentageOwnership\n            phoneNumbers {\n              countryCode\n              number\n              label\n            }\n          }\n        }\n        primaryAuthorizedPerson {\n          id\n          createdAt\n          updatedAt\n          authorizingPersonTitle\n          name {\n            givenName\n            familyName\n          }\n          dateOfBirth\n          email\n          percentageOwnership\n          homeAddress {\n            streetAddress\n            postalCode\n            region\n            locality\n          }\n          identificationDocument {\n            socialSecurityNumber {\n              numberHash\n            }\n          }\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n        }\n        cardProductApplications {\n          edges {\n            node {\n              id\n              applicationState {\n                status\n              }\n            }\n          }\n        }\n        financialAccounts {\n          edges {\n            node {\n              id\n              name\n              owner {\n                __typename\n              }\n            }\n          }\n        }\n        paymentCards {\n          edges {\n            node {\n              last4\n              financialAccounts {\n                id\n                name\n                owner {\n                  __typename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "filterBy": {
          "businessProfile": {
            "employerIdentificationNumber": {
              "equals": ""
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Search Business Account Holders",
      "description": "",
      "tags": [
        "business_account_holder",
        "search"
      ],
      "requires": [],
      "produces": [
        "edges",
        "edges",
        "edges",
        "employerIdentificationNumber",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685100",
    "updated_at": "2025-08-04T16:18:34.685101"
  },
  {
    "name": "GetBusinessAccountHolderById",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "fragment AuthorizationEventFragment on AuthorizationEvent {\n  id\n  createdAt\n  approvedAmount {\n    value\n  }\n  authorizationExpiration\n  merchantDetails {\n    category\n    countryCodeAlpha3\n    description\n    name\n  }\n}\n\nfragment ReversalEventFragment on ReversalEvent {\n  id\n  createdAt\n  approvedAmount {\n    value\n  }\n}\n\nfragment ClearingEventFragment on ClearingEvent {\n  id\n  createdAt\n  approvedAmount {\n    value\n    currencyCode\n  }\n  merchantDetails {\n    category\n    countryCodeAlpha3\n    description\n    name\n  }\n}\n\nquery GetUSBusinessAccountHolderByID($id: ID!) {\n  node(id: $id) {\n    ... on USBusinessAccountHolder {\n      id\n      externalId\n      updatedAt\n      createdAt\n      externalFinancialAccounts {\n        edges {\n          node {\n            ... on ExternalFinancialBankAccount {\n              id\n              externalBankAccountDetails {\n                id\n                last4\n                type\n                routingNumber\n              }\n            }\n          }\n        }\n      }\n      financialAccounts {\n        edges {\n          node {\n            id\n            externallyInitiatedAchTransfers {\n              edges {\n                node {\n                  __typename\n                  ... on SecureDepositACHTransfer {\n                    id\n                    amount {\n                      value\n                      currencyCode\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        statusReasonCode\n                      }\n                    }\n                    settlementDate\n                  }\n                }\n              }\n            }\n            integratorInitiatedAchTransfers {\n              edges {\n                node {\n                  __typename\n                  ... on SecureDepositACHTransfer {\n                    id\n                    amount {\n                      value\n                      currencyCode\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        statusReasonCode\n                      }\n                    }\n                    settlementDate\n                  }\n                }\n              }\n            }\n            incomingScheduledTransfers {\n              edges {\n                node {\n                  id\n                  ... on OneTimeACHTransfer {\n                    scheduledTransferDate\n                    transferEvents {\n                      edges {\n                        node {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  ... on RecurringACHTransfer {\n                    nextScheduledTransferDate\n                    transferAmount {\n                      __typename\n                      ... on TransferAmountCalculation {\n                        calculatedType\n                      }\n                      ... on ManualTransferAmount {\n                        amount {\n                          value\n                          currencyCode\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            ledgers {\n              id\n              name\n              normalBalance\n              creditBalance {\n                value\n                currencyCode\n              }\n              debitBalance {\n                value\n                currencyCode\n              }\n              ledgerEntries {\n                pageInfo {\n                  startCursor\n                  endCursor\n                  hasNextPage\n                  hasPreviousPage\n                }\n                edges {\n                  cursor\n                  node {\n                    __typename\n                    id\n                    amount {\n                      value\n                    }\n                    financialEvent {\n                      __typename\n                      ... on Transfer {\n                        __typename\n                        createdAt\n                        updatedAt\n                        id\n                        status\n                        statusReason\n                        amount {\n                          value\n                          currencyCode\n                        }\n                      }\n                      ... on TransactionEvent {\n                        __typename\n                        paymentCard {\n                          id\n                          last4\n                        }\n                        responseCode\n                      }\n                      ...AuthorizationEventFragment\n                      ...ClearingEventFragment\n                      ...ReversalEventFragment\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      primaryAuthorizedPerson {\n        id\n        createdAt\n        updatedAt\n        authorizingPersonTitle\n        name {\n          givenName\n          familyName\n        }\n        dateOfBirth\n        email\n        percentageOwnership\n        homeAddress {\n          streetAddress\n          postalCode\n          region\n          locality\n        }\n        identificationDocument {\n          socialSecurityNumber {\n            numberHash\n          }\n        }\n        phoneNumbers {\n          countryCode\n          number\n          label\n        }\n      }\n      businessProfile {\n        name {\n          legalBusinessName\n          doingBusinessAsName\n        }\n        businessType\n        phoneNumbers {\n          number\n        }\n      }\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get Business Account Holder By ID",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "edges",
        "edges",
        "edges",
        "edges",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685164",
    "updated_at": "2025-08-04T16:18:34.685165"
  },
  {
    "name": "GetAchTransfersByBusinessAccountHolderId",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSBusinessAccountHolderACHTransfers($id: ID!, $integratorInitiatedAchTransfersFilter: IntegratorInitiatedACHTransferFilterInput, $externallyInitiatedAchTransfersFilter: ExternallyInitiatedACHTransferFilterInput) {\n  node(id: $id) {\n    ... on USBusinessAccountHolder {\n      financialAccounts {\n        edges {\n          node {\n            id\n            externallyInitiatedAchTransfers(filterBy: $externallyInitiatedAchTransfersFilter) {\n              edges {\n                node {\n                  __typename\n                  ... on SecureCardBalanceRepaymentACHTransfer {\n                    id\n                    amount {\n                      value\n                      currencyCode\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        statusReasonCode\n                      }\n                    }\n                    settlementDate\n                  }\n                  ... on SecureDepositACHTransfer {\n                    id\n                    amount {\n                      value\n                      currencyCode\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        statusReasonCode\n                      }\n                    }\n                    settlementDate\n                  }\n                }\n              }\n            }\n            integratorInitiatedAchTransfers(filterBy: $integratorInitiatedAchTransfersFilter) {\n              edges {\n                node {\n                  __typename\n                  ... on SecureCardBalanceRepaymentACHTransfer {\n                    id\n                    amount {\n                      value\n                      currencyCode\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        statusReasonCode\n                      }\n                    }\n                    settlementDate\n                  }\n                  ... on SecureDepositACHTransfer {\n                    id\n                    amount {\n                      value\n                      currencyCode\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        statusReasonCode\n                      }\n                    }\n                    settlementDate\n                  }\n                }\n              }\n            }\n            incomingScheduledTransfers {\n              edges {\n                node {\n                  id\n                  ... on OneTimeACHTransfer {\n                    scheduledTransferDate\n                    transferEvents {\n                      edges {\n                        node {\n                          id\n                        }\n                      }\n                    }\n                  }\n                  ... on RecurringACHTransfer {\n                    nextScheduledTransferDate\n                    transferAmount {\n                      __typename\n                      ... on TransferAmountCalculation {\n                        calculatedType\n                      }\n                      ... on ManualTransferAmount {\n                        amount {\n                          value\n                          currencyCode\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "MC4xMi5vZ19haDAyNDc4MDhjNjg5Mjc0NGMwODk3MDZkNWQ4NWQzYTY4NWY="
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get ACH Transfers by Business Account Holder ID",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "financialAccounts",
        "node",
        "edges",
        "edges",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685214",
    "updated_at": "2025-08-04T16:18:34.685215"
  },
  {
    "name": "GetScheduledTransfersByBusinessAccountHolderId",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "fragment ExternalFinancialBankAccountFragment on ExternalFinancialBankAccount {\n  __typename\n  id\n  owner {\n    __typename\n  }\n  name\n  externalBankAccountDetails {\n    id\n    last4\n  }\n}\n\nfragment FinancialAccountFragment on FinancialAccount {\n  __typename\n  id\n  owner {\n    __typename\n  }\n  name\n}\n\nquery GetUSBusinessAccountHolderScheduledTransfers($id: ID!) {\n  node(id: $id) {\n    ... on USBusinessAccountHolder {\n      id\n      financialAccounts {\n        edges {\n          node {\n            id\n            incomingScheduledTransfers {\n              edges {\n                node {\n                  id\n                  ... on ScheduledTransfer {\n                    id\n                    fromFinancialAccount {\n                      ...ExternalFinancialBankAccountFragment\n                    }\n                    toFinancialAccount {\n                      ...FinancialAccountFragment\n                    }\n                  }\n                  ... on OneTimeACHTransfer {\n                    id\n                    fromFinancialAccount {\n                      ...ExternalFinancialBankAccountFragment\n                    }\n                    toFinancialAccount {\n                      ...FinancialAccountFragment\n                    }\n                    transferAmount {\n                      __typename\n                      ... on TransferAmountCalculation {\n                        calculatedType\n                      }\n                      ... on ManualTransferAmount {\n                        amount {\n                          value\n                          currencyCode\n                        }\n                      }\n                    }\n                    scheduledTransferDate\n                    descriptor {\n                      companyEntryDescription\n                      individualName\n                      individualIdentificationNumber\n                    }\n                    transferEvents {\n                      edges {\n                        node {\n                          __typename\n                          id\n                          createdAt\n                          updatedAt\n                          ... on ScheduledTransferAchEvent {\n                            paymentInitiatedAt\n                            paymentPostedAt\n                            status\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "MC4xMi5vZ19haDAyNmE3MTg1YjQzMTkyNGY2ZTkzNDRlNTFlZTM1ZjUwYTM="
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get Scheduled Transfers by Business Account Holder ID",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "edges",
        "amount",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685246",
    "updated_at": "2025-08-04T16:18:34.685246"
  },
  {
    "name": "GetApplicationsByBusinessAccountHolderId",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSBusinessAccountHolderApplications($id: ID!) {\n  node(id: $id) {\n    ... on USBusinessAccountHolder {\n      id\n      externalId\n      updatedAt\n      createdAt\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n            accountHolderSnapshot {\n              ... on USBusinessAccountHolderSnapshot {\n                accountHolderCurrent {\n                  id\n                  primaryAuthorizedPerson {\n                    id\n                  }\n                }\n                businessProfile {\n                  currentVerification {\n                    status\n                    reason\n                  }\n                }\n                primaryAuthorizedPerson {\n                  name {\n                    givenName\n                    familyName\n                  }\n                  currentVerification {\n                    status\n                    reason\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "MC4xMi5vZ19haDAyMmJmYzU0NWFlMDlkNGFmN2FiOTI4YTJlYWE4ZDg4OTg="
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get Applications by Business Account Holder ID",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "accountHolderCurrent",
        "currentVerification",
        "name"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685265",
    "updated_at": "2025-08-04T16:18:34.685266"
  },
  {
    "name": "GetLedgerEntriesByBusinessAccountHolderIdCopy",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "fragment AuthorizationEventFragment on AuthorizationEvent {\n  id\n  createdAt\n  approvedAmount {\n    value\n  }\n  authorizationExpiration\n  merchantDetails {\n    category\n    countryCodeAlpha3\n    description\n    name\n  }\n}\n\nfragment ReversalEventFragment on ReversalEvent {\n  id\n  createdAt\n  approvedAmount {\n    value\n  }\n}\n\nfragment ClearingEventFragment on ClearingEvent {\n  id\n  createdAt\n  approvedAmount {\n    value\n    currencyCode\n  }\n  merchantDetails {\n    category\n    countryCodeAlpha3\n    description\n    name\n  }\n}\n\nquery GetUSBusinessAccountHolderLedgerEntries($id: ID!) {\n  node(id: $id) {\n    ... on USBusinessAccountHolder {\n      id\n      externalId\n      updatedAt\n      createdAt\n      financialAccounts {\n        edges {\n          node {\n            id\n            ledgers {\n              id\n              name\n              creditBalance {\n                value\n              }\n              debitBalance {\n                value\n              }\n              ledgerEntries {\n                pageInfo {\n                  startCursor\n                  endCursor\n                  hasNextPage\n                  hasPreviousPage\n                }\n                edges {\n                  cursor\n                  node {\n                    __typename\n                    id\n                    amount {\n                      value\n                    }\n                    financialEvent {\n                      __typename\n                      ... on Transfer {\n                        __typename\n                        createdAt\n                        updatedAt\n                        id\n                        status\n                        statusReason\n                        amount {\n                          value\n                          currencyCode\n                        }\n                      }\n                      ... on TransactionEvent {\n                        __typename\n                        paymentCard {\n                          id\n                          last4\n                        }\n                        responseCode\n                        transaction {\n                          __typename\n                          ... on DebitTransaction {\n                            id\n                            transactionEvents {\n                              __typename\n                              approvedAmount {\n                                value\n                                currencyCode\n                              }\n                            }\n                          }\n                          ... on CreditTransaction {\n                            id\n                            transactionEvents {\n                              __typename\n                              approvedAmount {\n                                value\n                                currencyCode\n                              }\n                            }\n                          }\n                        }\n                      }\n                      ...AuthorizationEventFragment\n                      ...ClearingEventFragment\n                      ...ReversalEventFragment\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "ID"
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get Ledger Entries by Business Account Holder ID Copy",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685306",
    "updated_at": "2025-08-04T16:18:34.685306"
  },
  {
    "name": "GetBusinessAccountHolderApplicationById",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderCardProductApplication($id: ID!) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }\n      openOffers: offers(filterBy: {offerStatus: {includes: [OPEN]}}) {\n        edges{\n            node {\n                ... on AccountHolderCardProductApplicationOffer {\n                    id\n                    name\n                    category\n                    status\n                }\n            }\n        }        \n      }\n      rejectedOffers: offers(filterBy: {offerStatus: {includes: [REJECTED]}}) {\n        edges{\n            node {\n                ... on AccountHolderCardProductApplicationOffer {\n                    id\n                    name\n                    category\n                    status\n                }\n            }\n        }        \n      }\n      acceptedOffers: offers(filterBy: {offerStatus: {includes: [ACCEPTED]}}) {\n        edges{\n            node {\n                ... on AccountHolderCardProductApplicationOffer {\n                    id\n                    name\n                    category\n                    status\n                }\n            }\n        }        \n      }\n      accountHolderSnapshot {\n        ... on USBusinessAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n            primaryAuthorizedPerson {\n              id\n            }\n          }\n          businessProfile {\n            currentVerification {\n              status\n              reason\n              requiredDocuments {\n                referenceIdentifier\n                status\n                uploadedDocuments {\n                  __typename\n                  ... on AccountHolderApplicationDocument {\n                    status\n                    createdAt\n                    updatedAt\n                    revisions {\n                      status\n                      type\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n                documentUploadSession {\n                  __typename\n                  ... on USAccountHolderApplicationDocumentUploadSession {\n                    id\n                    status\n                    createdAt\n                    updatedAt\n                    primaryDocumentTypes\n                    secondaryDocumentTypes\n                    supportingDocumentTypes\n                    uploadRequirements {\n                      constraints {\n                        __typename\n                        ... on DocumentUploadRequirementConstraint {\n                          documentType\n                          numberOfDocuments\n                        }\n                      }\n                    }\n                    documents {\n                      __typename\n                      id\n                      status\n                      uploadUrl\n                    }\n                  }\n                }\n              }\n            }\n          }\n          primaryAuthorizedPerson {\n            name {\n              givenName\n              familyName\n            }\n            currentVerification {\n              status\n              reason\n              requiredDocuments {\n                referenceIdentifier\n                status\n                uploadedDocuments {\n                  __typename\n                  ... on AccountHolderApplicationDocument {\n                    status\n                    createdAt\n                    updatedAt\n                    revisions {\n                      status\n                      type\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n                documentUploadSession {\n                  __typename\n                  ... on USAccountHolderApplicationDocumentUploadSession {\n                    id\n                    status\n                    createdAt\n                    updatedAt\n                    primaryDocumentTypes\n                    secondaryDocumentTypes\n                    supportingDocumentTypes\n                    uploadRequirements {\n                      constraints {\n                        __typename\n                        ... on DocumentUploadRequirementConstraint {\n                          documentType\n                          numberOfDocuments\n                        }\n                      }\n                    }\n                    documents {\n                      __typename\n                      id\n                      status\n                      uploadUrl\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      applicationHistory {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          cursor\n          node {\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderApplicationId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get Business Account Holder Application by ID",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderApplicationId"
      ],
      "produces": [
        "offerStatus",
        "includes",
        "edges",
        "offerStatus",
        "includes"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685381",
    "updated_at": "2025-08-04T16:18:34.685383"
  },
  {
    "name": "GetAllBusinessAccountHolders",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "fragment accountHolder on USBusinessAccountHolder {\n  id\n  externalId\n  createdAt\n  updatedAt\n  externalFinancialAccounts {\n    edges {\n      node {\n        __typename\n        ... on Node {\n          id\n        }\n        ... on ExternalFinancialBankAccount {\n          id\n          name\n          externalBankAccountDetails {\n            id\n            last4\n          }\n        }\n      }\n    }\n  }\n  financialAccounts {\n    edges {\n      node {\n        id\n        ledgers {\n          name\n        }\n      }\n    }\n  }\n  primaryAuthorizedPerson {\n    id\n  }\n  businessProfile {\n    id\n    name {\n      legalBusinessName\n      doingBusinessAsName\n    }\n    billingAddress {\n      streetAddress\n      postalCode\n      region\n      locality\n    }\n    ultimateBeneficialOwners {\n      id\n      dateOfBirth\n      email\n      name {\n        givenName\n        familyName\n      }\n    }\n  }\n  paymentCards {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        last4\n      }\n    }\n  }\n  cardProductApplications {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        applicationState {\n          status\n        }\n        cardProduct {\n          name\n        }\n      }\n    }\n  }\n}\n\nquery ListAccountHolders($first: Int, $filterBy: BusinessAccountHolderFilterInput) {\n  businessAccountHolders(first: $first, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...accountHolder\n      }\n    }\n  }\n}\n",
      "variables": {
        "first": 20,
        "filterBy": {}
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get All Business Account Holders",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "edges",
        "pageInfo",
        "node",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685412",
    "updated_at": "2025-08-04T16:18:34.685413"
  },
  {
    "name": "GetAccountHolderCardProductApplication",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderCardProductApplication($id: ID!) {\n    node(id: $id) {\n        ... on AccountHolderCardProductApplication {\n            id\n            applicationState {\n                status\n            }\n            cardProduct {\n                id\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{businessAccountHolderApplicationId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holder",
      "path": "Onboarding/Account Holder/Business Account Holder/Get Account Holder Card Product Application",
      "description": "",
      "tags": [
        "business_account_holder",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderApplicationId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685428",
    "updated_at": "2025-08-04T16:18:34.685428"
  },
  {
    "name": "EnableCollaborativeUnderwritingCardProductFeature",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableCollaborativeApplicationUnderwritingFeature($input: EnableCollaborativeApplicationUnderwritingFeatureInput!) {\n  enableCollaborativeApplicationUnderwritingFeature(input: $input) {\n    ... on CardProduct {\n      id\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "collaborative_underwriting",
      "path": "Onboarding/Account Holder/Collaborative Underwriting/Enable Collaborative Underwriting Card Product Feature",
      "description": "",
      "tags": [
        "collaborative_underwriting"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685448",
    "updated_at": "2025-08-04T16:18:34.685449"
  },
  {
    "name": "ApproveCreditProductApplicationUnderwriting",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ApproveCreditProductApplicationUnderwriting($input: ApproveCreditProductApplicationUnderwritingInput!) {\n  approveCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "{{businessAccountHolderApplicationId}}",
          "decisionDate": "2024-02-15",
          "standardPurchaseCreditLimit": {
            "currencyCode": "USD",
            "value": 4500000
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "collaborative_underwriting",
      "path": "Onboarding/Account Holder/Collaborative Underwriting/Approve Credit Product Application Underwriting",
      "description": "",
      "tags": [
        "collaborative_underwriting"
      ],
      "requires": [
        "businessAccountHolderApplicationId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685469",
    "updated_at": "2025-08-04T16:18:34.685469"
  },
  {
    "name": "DenyCreditProductApplicationUnderwriting",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DenyCreditProductApplicationUnderwriting($input: DenyCreditProductApplicationUnderwritingInput!) {\n  denyCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "adverseActionReasons": [
            {
              "code": "HIGH_UTILIZATION"
            }
          ],
          "applicationId": "{{businessAccountHolderApplicationId}}",
          "decisionDate": "2024-02-15",
          "counterOffer": {
            "consentAgreement": {
              "primaryAuthorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
              "consentTimestamp": "2021-12-22T17:10:55.662Z",
              "consentIpAddress": {
                "v4": "127.0.0.1"
              }
            },
            "offerIdentifier": "prvio_221abb63c271e641758a03c5d8b8bdae98"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "collaborative_underwriting",
      "path": "Onboarding/Account Holder/Collaborative Underwriting/Deny Credit Product Application Underwriting",
      "description": "",
      "tags": [
        "collaborative_underwriting"
      ],
      "requires": [
        "businessAccountHolderApplicationId",
        "businessAccountHolderPrimaryAuthorizedPersonId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685499",
    "updated_at": "2025-08-04T16:18:34.685499"
  },
  {
    "name": "IssueFinancialAccountForApplication",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{businessAccountHolderApplicationId}}",
          "name": "Credit Account 1"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Issue Financial Account For Application",
      "description": "",
      "tags": [
        "financial_accounts",
        "issuance"
      ],
      "requires": [
        "businessAccountHolderApplicationId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685529",
    "updated_at": "2025-08-04T16:18:34.685529"
  },
  {
    "name": "GetFinancialAccount",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Get Financial Account",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "edges",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685553",
    "updated_at": "2025-08-04T16:18:34.685553"
  },
  {
    "name": "SetCreditLimitForFinancialAccount",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          },
          "memo": "Set Credit Limit $2000"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "credit_limit",
      "path": "Issuance/Credit Limit/Set Credit Limit For Financial Account",
      "description": "",
      "tags": [
        "credit_limit"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685578",
    "updated_at": "2025-08-04T16:18:34.685578"
  },
  {
    "name": "GetFinancialAccountCreditLimitUpdate",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountCreditLimitUpdateId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "credit_limit",
      "path": "Issuance/Credit Limit/Get Financial Account Credit Limit Update",
      "description": "",
      "tags": [
        "credit_limit",
        "modification",
        "retrieval"
      ],
      "requires": [
        "financialAccountCreditLimitUpdateId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685594",
    "updated_at": "2025-08-04T16:18:34.685594"
  },
  {
    "name": "IssuePaymentCardForFinancialAccount",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": true,
            "expirationDate": "2026-01-01T23:59:59Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Issue Payment Card For Financial Account",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "ledgers",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685622",
    "updated_at": "2025-08-04T16:18:34.685622"
  },
  {
    "name": "ActivatePaymentCard",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Activate Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "activation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685804",
    "updated_at": "2025-08-04T16:18:34.685805"
  },
  {
    "name": "SuspendPaymentCard",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Suspend Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "suspension"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685818",
    "updated_at": "2025-08-04T16:18:34.685818"
  },
  {
    "name": "ReissuePaymentCard",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "options": {
            "reissueFeatures": {
              "copyNumber": true
            },
            "expirationDate": "2026-12-29T23:12:30Z",
            "activateOnCreate": false
          },
          "originalPaymentCardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Reissue Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685836",
    "updated_at": "2025-08-04T16:18:34.685837"
  },
  {
    "name": "ClosePaymentCard",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Close Payment Card",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685851",
    "updated_at": "2025-08-04T16:18:34.685852"
  },
  {
    "name": "GetPaymentCard",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCard($id: ID!) {\n    node(id: $id) {\n        ... on PaymentCard {\n            id\n            status\n            last4\n            expirationYear\n            expirationMonth\n        }\n    }\n}",
      "variables": {
        "id": "{{paymentCardId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Get Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "retrieval"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685862",
    "updated_at": "2025-08-04T16:18:34.685862"
  },
  {
    "name": "SimulateVisaFleetAuthorization",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateVisaFleetAuthorization(\n  $input: SimulateVisaFleetAuthorizationInput!\n) {\n  simulateVisaFleetAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      createdAt\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n      authorizationExpiration\n      approvedAmount {\n        value\n      }\n      responseCode\n      avsResponseCode\n      postalCodeResponseCode\n      cvvResponseCode\n      networkResponseCode\n      requestedAmount {\n        value\n      }\n      originalAmount {\n        value\n      }\n      spendRuleResults {\n        edges {\n          node {\n            message\n            recommendation\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardId": "{{paymentCardId}}",
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "merchantDetails": {
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "countryCodeAlpha3": "USA",
            "description": "Test desc",
            "name": "Test name"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "visa",
      "path": "Issuance/Transactions/Simulation/Visa/Simulate Visa Fleet Authorization",
      "description": "",
      "tags": [
        "visa",
        "simulation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685897",
    "updated_at": "2025-08-04T16:18:34.685897"
  },
  {
    "name": "SimulateVisaFleetAuthorizationAdvice",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateVisaFleetAuthorizationAdvice($input: SimulateVisaFleetAuthorizationAdviceInput!) {\n  simulateVisaFleetAuthorizationAdvice(input: $input) {\n    ... on TransactionEvent {\n      id\n      createdAt\n      approvedAmount {\n        value\n      }\n      responseCode\n      networkResponseCode\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}",
          "amount": {
            "value": 2000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "visa",
      "path": "Issuance/Transactions/Simulation/Visa/Simulate Visa Fleet Authorization Advice",
      "description": "",
      "tags": [
        "visa",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685917",
    "updated_at": "2025-08-04T16:18:34.685917"
  },
  {
    "name": "SimulateVisaFleetClearing",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateVisaFleetClearing($input: SimulateVisaFleetClearingInput!) {\n  simulateVisaFleetClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      responseCode\n      networkResponseCode\n      approvedAmount {\n        value\n      }\n      requestedAmount {\n        value\n      }\n      originalAmount {\n        value\n      }\n      createdAt\n      merchantDetails {\n        merchantId\n        category\n        categoryCode\n        countryCodeAlpha3\n        description\n        name\n        address {\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n      }\n      additionalTransactionData {\n        id\n        ... on VisaFleetL2TransactionData {\n          id\n          visaFuelPurchaseType\n          visaFuelServiceType\n          visaFuelType\n          visaFuelQuantity\n          visaFuelUnitOfMeasure\n          visaFuelUnitCost\n          visaFuelNetAmount\n          visaFuelGrossAmount\n          visaNonFuelNetAmount\n          visaNonFuelGrossAmount\n          visaTaxRate\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}",
          "amount": {
            "value": 2000,
            "currencyCode": "USD"
          },
          "visaFleetL2TransactionData": {
            "visaFuelPurchaseType": "FUEL_PURCHASE",
            "visaFuelServiceType": "FULL_SERVICE",
            "visaFuelType": "REGULAR",
            "visaFuelQuantity": 100,
            "visaFuelUnitOfMeasure": "GALLON",
            "visaFuelUnitCost": 123,
            "visaFuelNetAmount": 1234,
            "visaFuelGrossAmount": 12345,
            "visaNonFuelNetAmount": 321,
            "visaNonFuelGrossAmount": 4321,
            "visaTaxRate": 1
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "visa",
      "path": "Issuance/Transactions/Simulation/Visa/Simulate Visa Fleet Clearing",
      "description": "",
      "tags": [
        "visa",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685953",
    "updated_at": "2025-08-04T16:18:34.685953"
  },
  {
    "name": "SimulateMastercardFleetClearing",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetClearing(\n  $input: SimulateMastercardFleetClearingInput!\n) {\n  simulateMastercardFleetClearing(input: $input) {\n    __typename\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      approvedAmount {\n        value\n        currencyCode\n      }\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n      currentFinancialAccountMaximumBalanceAmount {\n        value\n        currencyCode\n      }\n      currentFinancialAccountAvailableToSpendAmount {\n        value\n        currencyCode\n      }\n      transactionProcessingType\n      pointOfServiceDetails {\n        category\n        panEntryMode\n        pinEntryMode\n        terminalAttendance\n        isCardHolderPresent\n        isCardPresent\n        isRecurring\n        terminalSupportsPartialApproval\n      }\n      additionalNetworkData {\n        __typename\n        ... on VisaData {\n          transactionIdentifier\n        }\n      }\n      partial\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "merchantDetails": {
            "address": {
              "countryCodeAlpha3": "USA",
              "locality": "San Francisco",
              "postalCode": "94105",
              "region": "CA"
            },
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "countryCodeAlpha3": "USA",
            "name": "My Awesome Fuel",
            "merchantId": "MERCHANT_ID",
            "description": "The most awesome fuel dispensers"
          },
          "pointOfServiceDetails": {
            "category": "AUTOMATED_FUEL_DISPENSER",
            "panEntryMode": "MAGNETIC_STRIPE",
            "pinEntryMode": "PIN_ENTRY_CAPABILITY",
            "terminalAttendance": "ATTENDED",
            "isCardHolderPresent": true,
            "isCardPresent": true,
            "isRecurring": false,
            "terminalSupportsPartialApproval": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/MasterCard/Simulate MasterCard Fleet Clearing",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "address",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.685990",
    "updated_at": "2025-08-04T16:18:34.685991"
  },
  {
    "name": "SimulateMastercardFleetAuthorization",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetAuthorization(\n  $input: SimulateMastercardFleetAuthorizationInput!\n) {\n  simulateMastercardFleetAuthorization(input: $input) {\n    __typename\n    ... on AuthorizationEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      requestedAmount {\n        value\n        currencyCode\n      }\n      approvedAmount {\n        value\n        currencyCode\n      }\n      cvvResponseCode\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        categoryCode\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n      currentFinancialAccountMaximumBalanceAmount {\n        value\n        currencyCode\n      }\n      currentFinancialAccountAvailableToSpendAmount {\n        value\n        currencyCode\n      }\n      transactionProcessingType\n      pointOfServiceDetails {\n        category\n        panEntryMode\n        pinEntryMode\n        terminalAttendance\n        isCardHolderPresent\n        isCardPresent\n        isRecurring\n        terminalSupportsPartialApproval\n      }\n      additionalNetworkData {\n        __typename\n        ... on VisaData {\n          transactionIdentifier\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 100,
            "currencyCode": "USD"
          },
          "cardId": "PAYMENT_CARD_ID",
          "merchantDetails": {
            "address": {
              "countryCodeAlpha3": "USA",
              "locality": "San Francisco",
              "postalCode": "94105",
              "region": "CA"
            },
            "countryCodeAlpha3": "USA",
            "name": "My Awesome Fuel",
            "merchantId": "merchantId",
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "description": "The most awesome fuel dispensers of all time"
          },
          "pointOfServiceDetails": {
            "category": "AUTOMATED_FUEL_DISPENSER",
            "panEntryMode": "MAGNETIC_STRIPE",
            "pinEntryMode": "PIN_ENTRY_CAPABILITY",
            "terminalAttendance": "ATTENDED",
            "isCardHolderPresent": true,
            "isCardPresent": true,
            "isRecurring": false,
            "terminalSupportsPartialApproval": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/MasterCard/Simulate MasterCard Fleet Authorization",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "address",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686028",
    "updated_at": "2025-08-04T16:18:34.686029"
  },
  {
    "name": "SimulateMastercardFleetAuthorizationAdvice",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetAuthorizationAdvice(\n  $input: SimulateMastercardFleetAuthorizationAdviceInput!\n) {\n  simulateMastercardFleetAuthorizationAdvice(input: $input) {\n    __typename\n    ... on ReversalEvent {\n      id\n      responseCode\n      createdAt\n      approvedAmount {\n        value\n        currencyCode\n      }\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      paymentCard {\n        id\n      }\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n      currentFinancialAccountMaximumBalanceAmount {\n        value\n        currencyCode\n      }\n      currentFinancialAccountAvailableToSpendAmount {\n        value\n        currencyCode\n      }\n      transactionProcessingType\n      pointOfServiceDetails {\n        category\n        panEntryMode\n        pinEntryMode\n        terminalAttendance\n        isCardHolderPresent\n        isCardPresent\n        isRecurring\n        terminalSupportsPartialApproval\n      }\n      additionalNetworkData {\n        __typename\n        ... on VisaData {\n          transactionIdentifier\n        }\n      }\n      partial\n      issuerExpiredAuthorization\n    }\n    ... on AuthorizationEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      approvedAmount {\n        value\n        currencyCode\n      }\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "merchantDetails": {
            "address": {
              "countryCodeAlpha3": "USA",
              "locality": "San Francisco",
              "postalCode": "94105",
              "region": "CA"
            },
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "countryCodeAlpha3": "USA",
            "name": "My Awesome Fuel",
            "merchantId": "Merchant Id",
            "description": "The most awesome fuel dispensers"
          },
          "pointOfServiceDetails": {
            "category": "AUTOMATED_FUEL_DISPENSER",
            "panEntryMode": "MAGNETIC_STRIPE",
            "pinEntryMode": "PIN_ENTRY_CAPABILITY",
            "terminalAttendance": "ATTENDED",
            "isCardHolderPresent": true,
            "isCardPresent": true,
            "isRecurring": false,
            "terminalSupportsPartialApproval": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/MasterCard/Simulate MasterCard Fleet Authorization Advice",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "address",
        "address",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686065",
    "updated_at": "2025-08-04T16:18:34.686066"
  },
  {
    "name": "SimulateMastercardFleetEnhancedData",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetEnhancedData(\n  $input: SimulateMastercardFleetEnhancedDataInput!\n) {\n  simulateMastercardFleetEnhancedData(input: $input) {\n    __typename\n    ... on EnhancedDataEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      additionalTransactionData {\n        ... on MastercardFleetEnhancedData {\n          __typename\n          id\n          fuelBrand\n          purchaseTime\n          fuelServiceType\n          fuelType\n          fuelUnitPrice {\n            value\n            currencyCode\n          }\n          fuelUnitOfMeasure\n          fuelQuantity\n          fuelSaleAmount {\n            value\n            currencyCode\n          }\n          odometerReading\n          vehicleNumber\n          driverIdentification\n          productType\n          fuelDiscountAmount {\n            value\n            currencyCode\n          }\n          taxAmount1 {\n            value\n            currencyCode\n          }\n          taxAmount2 {\n            value\n            currencyCode\n          }\n          lineItems {\n            productCode\n            description\n            unitOfMeasure\n            unitPrice {\n              value\n              currencyCode\n            }\n            itemAmount {\n              value\n              currencyCode\n            }\n            creditOrDebit\n          }\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "fuelBrand": "SINCLAIR",
          "purchaseTime": "1234",
          "fuelServiceType": "FULL_SERVICE",
          "fuelType": "PREMIUM",
          "fuelUnitPrice": {
            "value": 100,
            "currencyCode": "USD"
          },
          "fuelUnitOfMeasure": "GALLONS",
          "fuelQuantity": 12.345,
          "fuelSaleAmount": {
            "value": 200,
            "currencyCode": "USD"
          },
          "odometerReading": "123456",
          "vehicleNumber": "vehicleNumber",
          "driverIdentification": "driverIdentification",
          "productType": "PROMPT_FOR_DRIVER_NUMBER_AND_ODOMETER",
          "fuelDiscountAmount": {
            "value": 300,
            "currencyCode": "USD"
          },
          "taxAmount1": {
            "value": 400,
            "currencyCode": "USD"
          },
          "taxAmount2": {
            "value": 500,
            "currencyCode": "USD"
          },
          "fuelLocationDetails": {
            "openTwentyFourHours": true,
            "eighteenWheelerAccess": true,
            "dieselSites": true,
            "interstateAccess": true,
            "convenienceStore": true,
            "restaurant": true,
            "hotel": true,
            "showers": true,
            "repairBays": true,
            "vehicleWash": true,
            "aviationLocation": true,
            "marinaLocation": true,
            "alternativeFuel": true,
            "payAtPump": true
          },
          "lineItems": [
            {
              "productCode": "BATTERIES",
              "description": "Really good batteries",
              "unitOfMeasure": "EACH",
              "unitPrice": {
                "value": 600,
                "currencyCode": "USD"
              },
              "itemAmount": {
                "value": 700,
                "currencyCode": "USD"
              },
              "creditOrDebit": "CREDIT"
            }
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/MasterCard/Simulate MasterCard Fleet Enhanced Data",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686117",
    "updated_at": "2025-08-04T16:18:34.686118"
  },
  {
    "name": "SimulateAuthorization",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transaction {\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "cardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Authorization",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686133",
    "updated_at": "2025-08-04T16:18:34.686134"
  },
  {
    "name": "SimulateClearing",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Clearing",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686147",
    "updated_at": "2025-08-04T16:18:34.686148"
  },
  {
    "name": "SimulateReversal",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Reversal",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686160",
    "updated_at": "2025-08-04T16:18:34.686161"
  },
  {
    "name": "SimulateRefund",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Refund",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686174",
    "updated_at": "2025-08-04T16:18:34.686175"
  },
  {
    "name": "SimulateSingleStepAuthAndClear",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "{{paymentCardId}}",
          "amount": {
            "currencyCode": "USD",
            "value": 1000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Single Step Auth And Clear",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686194",
    "updated_at": "2025-08-04T16:18:34.686194"
  },
  {
    "name": "GetTransactionEvent",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
      "variables": {
        "id": "{{authorizationEventId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Issuance/Transactions/Get Transaction Event",
      "description": "",
      "tags": [
        "transactions",
        "retrieval"
      ],
      "requires": [
        "authorizationEventId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686208",
    "updated_at": "2025-08-04T16:18:34.686209"
  },
  {
    "name": "TransactionEventsByPaymentCardAndTransactionid",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{paymentCardId}}",
        "filterBy": {
          "transactionId": {
            "equals": "{{transactionId}}"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Issuance/Transactions/Transaction Events By Payment Card And TransactionId",
      "description": "",
      "tags": [
        "transactions"
      ],
      "requires": [
        "paymentCardId",
        "transactionId"
      ],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686232",
    "updated_at": "2025-08-04T16:18:34.686233"
  },
  {
    "name": "CreateMerchantCategorySpendRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Fuel Rule",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": [
            "AIRLINES_AIR_CARRIERS"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Create Merchant Category Spend Rule",
      "description": "",
      "tags": [
        "spend_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686255",
    "updated_at": "2025-08-04T16:18:34.686255"
  },
  {
    "name": "AttachSpendRuleToCardProduct",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input: $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "spendRule": {
            "id": "{{merchantCategorySpendRuleId}}",
            "version": "LATEST"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Attach Spend Rule To Card Product",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [
        "merchantCategorySpendRuleId",
        "cardProductId"
      ],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686272",
    "updated_at": "2025-08-04T16:18:34.686272"
  },
  {
    "name": "UpdateMerchantCategorySpendRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "spendRuleId": "{{merchantCategorySpendRuleId}}",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": []
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Update Merchant Category Spend Rule",
      "description": "",
      "tags": [
        "spend_rules",
        "modification"
      ],
      "requires": [
        "merchantCategorySpendRuleId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686291",
    "updated_at": "2025-08-04T16:18:34.686291"
  },
  {
    "name": "AttachSpendRuleToPaymentCard",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "spendRule": {
            "id": "{{merchantCategorySpendRuleId}}",
            "version": "LATEST"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Attach Spend Rule To Payment Card",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [
        "paymentCardId",
        "merchantCategorySpendRuleId"
      ],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686307",
    "updated_at": "2025-08-04T16:18:34.686308"
  },
  {
    "name": "DetachSpendRuleFromCardProduct",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input: $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "spendRule": {
            "id": "{{merchantCategorySpendRuleId}}"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Detach Spend Rule From Card Product",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [
        "merchantCategorySpendRuleId",
        "cardProductId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686322",
    "updated_at": "2025-08-04T16:18:34.686323"
  },
  {
    "name": "DetachSpendRuleFromPaymentCard",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input: $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "spendRule": {
            "id": "{{merchantCategorySpendRuleId}}"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Detach Spend Rule From Payment Card",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [
        "paymentCardId",
        "merchantCategorySpendRuleId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686338",
    "updated_at": "2025-08-04T16:18:34.686339"
  },
  {
    "name": "GetAllVelocityRules",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n          updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n              name\n              maximumAmount {\n                value\n                currencyCode\n              }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n          spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Get All Velocity Rules",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686360",
    "updated_at": "2025-08-04T16:18:34.686360"
  },
  {
    "name": "GetPaymentCardVelocityRule",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\u00cf\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n  \t}\n\t}\n}",
      "variables": {
        "id": "{{paymentCardId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Get Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "currentBalance",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686376",
    "updated_at": "2025-08-04T16:18:34.686377"
  },
  {
    "name": "GetFinancialAccountWithVelocityBalance",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n            version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Get Financial Account With Velocity Balance",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686396",
    "updated_at": "2025-08-04T16:18:34.686397"
  },
  {
    "name": "CreateVelocityRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n    ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              version\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Velocity Control - Max $1000 per month",
          "cumulativeRule": {
            "id": "{{amountLimitSpendRuleId}}",
            "version": "0"
          },
          "velocityRuleWindow": "MONTHLY"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Create Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "creation"
      ],
      "requires": [
        "amountLimitSpendRuleId"
      ],
      "produces": [
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686422",
    "updated_at": "2025-08-04T16:18:34.686422"
  },
  {
    "name": "CreateAmountLimitSpendRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input: $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n        currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Amount Limit Rule",
          "maximumAmount": {
            "value": 100000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Create Amount Limit Spend Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686439",
    "updated_at": "2025-08-04T16:18:34.686440"
  },
  {
    "name": "AttachPaymentCardVelocityRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "velocityRule": {
            "velocityRuleId": "{{monthlyAmountLimitVelocityRuleId}}",
            "version": "LATEST"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Attach Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [
        "paymentCardId",
        "monthlyAmountLimitVelocityRuleId"
      ],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686462",
    "updated_at": "2025-08-04T16:18:34.686463"
  },
  {
    "name": "DetachPaymentCardVelocityRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "velocityRule": {
            "velocityRuleId": "{{monthlyAmountLimitVelocityRuleId}}",
            "version": "LATEST"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Detach Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [
        "paymentCardId",
        "monthlyAmountLimitVelocityRuleId"
      ],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686485",
    "updated_at": "2025-08-04T16:18:34.686486"
  },
  {
    "name": "AttachCardProductVelocityRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "velocityRule": {
            "velocityRuleId": "{{monthlyAmountLimitVelocityRuleId}}",
            "version": "LATEST"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Attach Card Product Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [
        "cardProductId",
        "monthlyAmountLimitVelocityRuleId"
      ],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686505",
    "updated_at": "2025-08-04T16:18:34.686506"
  },
  {
    "name": "DetachCardProductVelocityRule",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "velocityRule": {
            "velocityRuleId": "{{monthlyAmountLimitVelocityRuleId}}",
            "version": "LATEST"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Detach Card Product Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [
        "cardProductId",
        "monthlyAmountLimitVelocityRuleId"
      ],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686524",
    "updated_at": "2025-08-04T16:18:34.686525"
  },
  {
    "name": "AddCollaborativeAuthorizationEndpoint",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddCollaborativeAuthorizationEndpoint($input: AddCollaborativeAuthorizationEndpointInput!) {\n  addCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on  CollaborativeAuthorizationEndpoint{\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Collaborative Auth Endpoint",
          "uri": "https://example.com"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Add Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686544",
    "updated_at": "2025-08-04T16:18:34.686544"
  },
  {
    "name": "ActivateCollaborativeAuthorizationEndpoint",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivateCollaborativeAuthorizationEndpoint($input: ActivateCollaborativeAuthorizationEndpointInput!) {\n  activateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Activate Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "activation"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686558",
    "updated_at": "2025-08-04T16:18:34.686559"
  },
  {
    "name": "GetCollaborativeAuthorizationEndpoint",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query FindCollaborativeAuthorizationEndpoint($id: ID!) {\n  node(id: $id) {\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{collabAuthEndpointId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Get Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "retrieval"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686570",
    "updated_at": "2025-08-04T16:18:34.686571"
  },
  {
    "name": "DeactivateCollaborativeAuthorizationEndpoint",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateCollaborativeAuthorizationEndpoint($input: DeactivateCollaborativeAuthorizationEndpointInput!) {\n  deactivateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on  CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Deactivate Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "activation"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686585",
    "updated_at": "2025-08-04T16:18:34.686585"
  },
  {
    "name": "RemoveCollaborativeAuthorizationEndpoint",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveCollaborativeAuthorizationEndpoint($input: RemoveCollaborativeAuthorizationEndpointInput!) {\n  removeCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Remove Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686599",
    "updated_at": "2025-08-04T16:18:34.686599"
  },
  {
    "name": "GetCollaborativeAuthorizationEndpoints",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query CollaborativeAuthorizationEndpoints($after: String, $first: Int) {\n\torganizations{\n\t\tid\n\t\tcollaborativeAuthorizationEndpoints(first: $first, after: $after) {\n\t\t\t__typename\n\n\t\t\tedges {\n\t\t\t\t__typename\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tsigningKeys {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tsecret\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Get Collaborative Authorization Endpoints",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686615",
    "updated_at": "2025-08-04T16:18:34.686616"
  },
  {
    "name": "RenameCollaborativeAuthorizationEndpoint",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RenameCollaborativeAuthorizationEndpoint($input: RenameCollaborativeAuthorizationEndpointInput!) {\n  renameCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}",
          "name": "Renamed Collaborative Auth Endpoint"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Rename Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686631",
    "updated_at": "2025-08-04T16:18:34.686632"
  },
  {
    "name": "SimulateSendToPrinter",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card/Simulation/Simulate Send To Printer",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686658",
    "updated_at": "2025-08-04T16:18:34.686658"
  },
  {
    "name": "SimulateApproval",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card/Simulation/Simulate Approval",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686675",
    "updated_at": "2025-08-04T16:18:34.686675"
  },
  {
    "name": "SimulateShipmentFailed",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card/Simulation/Simulate Shipment Failed",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686695",
    "updated_at": "2025-08-04T16:18:34.686696"
  },
  {
    "name": "SimulateShipped",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}",
          "trackingNumber": "{{$guid}}",
          "actualShipDate": "2024-02-12"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card/Simulation/Simulate Shipped",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686713",
    "updated_at": "2025-08-04T16:18:34.686714"
  },
  {
    "name": "OrderPhysicalPaymentCard",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "requestedShipDate": "2023-08-20",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "John Doe"
            }
          }
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card",
      "path": "Physical Card/Order Physical Payment Card",
      "description": "",
      "tags": [
        "physical_card"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686748",
    "updated_at": "2025-08-04T16:18:34.686749"
  },
  {
    "name": "FindPhysicalPaymentCardOrder",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalPaymentCardOrderId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card",
      "path": "Physical Card/ Find Physical Payment Card Order",
      "description": "",
      "tags": [
        "physical_card"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686763",
    "updated_at": "2025-08-04T16:18:34.686764"
  },
  {
    "name": "CancelPhysicalPaymentCardOrder",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card",
      "path": "Physical Card/Cancel Physical Payment Card Order",
      "description": "",
      "tags": [
        "physical_card"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686779",
    "updated_at": "2025-08-04T16:18:34.686779"
  },
  {
    "name": "InitiateFundsDepositAchTransfer",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "{{financialAccountId}}",
          "fromFinancialAccountId": "{{externalBankAccountVerifiedThroughPlaidId}}",
          "descriptor": {
            "companyEntryDescription": "Company",
            "individualIdentificationNumber": "",
            "individualName": "Baja ABC"
          },
          "transferAgreementConsent": {
            "authorizedPersonId": "{{personAccountHolderId}}",
            "consentTimestamp": "2022-12-07T14:42:52.453Z",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_deposit_ach_transfer",
      "path": "Funding/Originated ACH/Funds Deposit ACH Transfer/Initiate Funds Deposit ACH Transfer",
      "description": "",
      "tags": [
        "funds_deposit_ach_transfer"
      ],
      "requires": [
        "personAccountHolderId",
        "externalBankAccountVerifiedThroughPlaidId",
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686815",
    "updated_at": "2025-08-04T16:18:34.686815"
  },
  {
    "name": "SimulateProcessingIntegratorInitiatedStatusChange",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{fundsDepositAchTransferId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_deposit_ach_transfer",
      "path": "Funding/Originated ACH/Funds Deposit ACH Transfer/Simulate Processing Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "funds_deposit_ach_transfer",
        "simulation"
      ],
      "requires": [
        "fundsDepositAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686838",
    "updated_at": "2025-08-04T16:18:34.686839"
  },
  {
    "name": "SimulateProcessedIntegratorInitiatedStatusChange",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      integratorInitiatedFundsDepositACHTransferStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n            status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n            status\n            statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{fundsDepositAchTransferId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_deposit_ach_transfer",
      "path": "Funding/Originated ACH/Funds Deposit ACH Transfer/Simulate Processed Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "funds_deposit_ach_transfer",
        "simulation"
      ],
      "requires": [
        "fundsDepositAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686859",
    "updated_at": "2025-08-04T16:18:34.686859"
  },
  {
    "name": "SimulateReturnedIntegratorInitiatedStatusChange",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{fundsDepositAchTransferId}}",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_deposit_ach_transfer",
      "path": "Funding/Originated ACH/Funds Deposit ACH Transfer/Simulate Returned Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "funds_deposit_ach_transfer",
        "simulation"
      ],
      "requires": [
        "fundsDepositAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686875",
    "updated_at": "2025-08-04T16:18:34.686876"
  },
  {
    "name": "InitiateFundsWithdrawalAchTransfer",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "{{financialAccountId}}",
          "toFinancialAccountId": "{{externalBankAccountVerifiedThroughPlaidId}}",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "descriptor": {
            "companyEntryDescription": "Test Entry",
            "individualName": "Test",
            "individualIdentificationNumber": "1234"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-07T14:42:52.453Z",
            "authorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          },
          "idempotencyKey": "{{$guid}}",
          "cancellationPeriodMillis": 0,
          "sameDay": false
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_withdrawal_ach_transfer",
      "path": "Funding/Originated ACH/Funds Withdrawal ACH Transfer/Initiate Funds Withdrawal ACH Transfer",
      "description": "",
      "tags": [
        "funds_withdrawal_ach_transfer"
      ],
      "requires": [
        "externalBankAccountVerifiedThroughPlaidId",
        "businessAccountHolderPrimaryAuthorizedPersonId",
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686957",
    "updated_at": "2025-08-04T16:18:34.686958"
  },
  {
    "name": "SimulateProcessingIntegratorInitiatedStatusChange",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{fundsWithdrawalAchTransferId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_withdrawal_ach_transfer",
      "path": "Funding/Originated ACH/Funds Withdrawal ACH Transfer/Simulate Processing Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "funds_withdrawal_ach_transfer",
        "simulation"
      ],
      "requires": [
        "fundsWithdrawalAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.686983",
    "updated_at": "2025-08-04T16:18:34.686984"
  },
  {
    "name": "SimulateProcessedIntegratorInitiatedStatusChange",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      integratorInitiatedFundsWithdrawalACHTransferStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n            status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n            status\n            statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{fundsWithdrawalAchTransferId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_withdrawal_ach_transfer",
      "path": "Funding/Originated ACH/Funds Withdrawal ACH Transfer/Simulate Processed Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "funds_withdrawal_ach_transfer",
        "simulation"
      ],
      "requires": [
        "fundsWithdrawalAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687003",
    "updated_at": "2025-08-04T16:18:34.687004"
  },
  {
    "name": "SimulateReturnedIntegratorInitiatedStatusChange",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      integratorInitiatedFundsWithdrawalACHTransferStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n            status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n            status\n            statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{fundsWithdrawalAchTransferId}}",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funds_withdrawal_ach_transfer",
      "path": "Funding/Originated ACH/Funds Withdrawal ACH Transfer/Simulate Returned Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "funds_withdrawal_ach_transfer",
        "simulation"
      ],
      "requires": [
        "fundsWithdrawalAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687021",
    "updated_at": "2025-08-04T16:18:34.687021"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughPlaid",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "originated_ach",
      "path": "Funding/Originated ACH/Add External Bank Account Verified Through Plaid",
      "description": "",
      "tags": [
        "originated_ach"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687038",
    "updated_at": "2025-08-04T16:18:34.687038"
  },
  {
    "name": "GetExternalFinancialAccountsByAccountHolder",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "originated_ach",
      "path": "Funding/Originated ACH/Get External Financial Accounts By Account Holder",
      "description": "",
      "tags": [
        "originated_ach",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "externalFinancialAccounts",
        "externalFinancialAccounts"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687061",
    "updated_at": "2025-08-04T16:18:34.687062"
  },
  {
    "name": "SimulateExternallyInitiatedAchTransfer",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          },
          "companyEntryDescription": "TestDesc",
          "companyIdentifier": "TestID",
          "companyName": "TestName",
          "financialAccountId": "{{financialAccountId}}",
          "individualIdentificationNumber": "TestInDID",
          "individualName": "TestIndName",
          "settlementDate": "2024-02-16",
          "transferType": "SECURE_DEPOSIT"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonoriginated_ach",
      "path": "Funding/Non-Originated ACH/Simulate Externally Initiated ACH Transfer",
      "description": "",
      "tags": [
        "nonoriginated_ach",
        "simulation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687088",
    "updated_at": "2025-08-04T16:18:34.687088"
  },
  {
    "name": "SimulateProcessingExternallyInitiatedStatusChange",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{nonOriginatedAchTransferId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonoriginated_ach",
      "path": "Funding/Non-Originated ACH/Simulate Processing Externally Initiated Status Change",
      "description": "",
      "tags": [
        "nonoriginated_ach",
        "simulation"
      ],
      "requires": [
        "nonOriginatedAchTransferId"
      ],
      "produces": [
        "amount",
        "amount",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687106",
    "updated_at": "2025-08-04T16:18:34.687107"
  },
  {
    "name": "InitiateTransferBetweenFinancialAccounts",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateTransferBetweenFinancialAccounts($input: InitiateTransferBetweenFinancialAccountsInput!) {\n  initiateTransferBetweenFinancialAccounts(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      amount {\n        currencyCode\n        value\n      }\n      createdAt\n      id\n      memo\n      purpose\n      status\n      statusReason\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "currencyCode": "USD",
            "value": 100000
          },
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "memo": "Secured Deposit Transfer",
          "purpose": "SECURED_DEPOSIT",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "internal_transfer",
      "path": "Funding/Internal Transfer/Initiate Transfer Between Financial Accounts",
      "description": "",
      "tags": [
        "internal_transfer"
      ],
      "requires": [],
      "produces": [
        "amount",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687126",
    "updated_at": "2025-08-04T16:18:34.687126"
  },
  {
    "name": "GetTransferById",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetTransferByID($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n      }\n      secureCardBalanceRepaymentAchTransferStatus: status {\n        __typename\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      settlementDate\n    }\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      secureDepositAchTransferStatus: status {\n        __typename\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      amount {\n        value\n        currencyCode\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          owner {\n            __typename\n          }\n          application {\n            id\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          owner {\n            __typename\n          }\n          application {\n            id\n          }\n        }\n      }\n      ledgers {\n        id\n        name\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                __typename\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on Transfer {\n      id\n      statusReason\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        financialAccount {\n          name\n          owner {\n            __typename\n          }\n        }\n      }      \n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "ID"
      }
    },
    "headers": {},
    "metadata": {
      "category": "funding",
      "path": "Funding/Get Transfer by ID",
      "description": "",
      "tags": [
        "funding",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "amount",
        "edges",
        "financialEvent"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687162",
    "updated_at": "2025-08-04T16:18:34.687163"
  },
  {
    "name": "GetOneTimeAchTransferById",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetOneTimeACHTransferByID($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on OneTimeACHTransfer {\n      id\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      transferEvents(first: 10) {\n        __typename\n        pageInfo {\n          endCursor\n          startCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          __typename\n          cursor\n          node {\n            ... on ScheduledTransferAchEvent {\n              id\n              paymentInitiatedAt\n              fromFinancialAccount {\n                ... on FinancialAccount {\n                  id\n                }\n              }\n              toFinancialAccount {\n                ... on FinancialAccount {\n                  id\n                }\n              }\n              transferAmount {\n                value\n                currencyCode\n              }\n              transfers {\n                ... on SecureCardBalanceRepaymentACHTransfer {\n                  __typename\n                  id\n                  amount {\n                    currencyCode\n                    value\n                  }\n                  status {\n                    ... on NonFailureIntegratorInitiatedACHStatus {\n                      status\n                    }\n                    ... on FailureIntegratorInitiatedACHStatus {\n                      status\n                      statusReasonCode\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n        ... on TransferAmountCalculation {\n          calculatedType\n        }\n      }\n      status\n      scheduledTransferDate\n      createdAt\n      updatedAt\n    }\n  }\n}\n",
      "variables": {
        "id": "ID"
      }
    },
    "headers": {},
    "metadata": {
      "category": "funding",
      "path": "Funding/Get One-Time ACH Transfer by ID",
      "description": "",
      "tags": [
        "funding",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687195",
    "updated_at": "2025-08-04T16:18:34.687195"
  },
  {
    "name": "SimulateDeposit",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "toFinancialAccountId": "{{cardProductFundingAccountId}}",
          "source": "WIRE",
          "memo": "Initial Card Funding",
          "amount": {
            "value": 50000000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funding",
      "path": "Funding/Simulate Deposit",
      "description": "",
      "tags": [
        "funding",
        "simulation"
      ],
      "requires": [
        "cardProductFundingAccountId"
      ],
      "produces": [
        "edges",
        "financialEvent",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687216",
    "updated_at": "2025-08-04T16:18:34.687217"
  },
  {
    "name": "SimulateDelinquency",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      delinquency {\n        __typename\n        totalAmount {\n          value\n          currencyCode\n        }\n        numberOfCycles\n        totalDaysDelinquent\n        delinquencyStartedOn\n        currentDelinquentCycles {\n          daysDelinquent\n          createdAt\n          updatedAt\n          amount {\n            value\n            currencyCode\n          }\n          totalRepaymentsApplied {\n            value\n            currencyCode\n          }\n          state\n          statement {\n            ... on ConsumerRevolvingCardFinancialAccountStatement {\n              id\n              periodStart\n              periodEnd\n              openedAt\n              closedAt\n              primaryLedger {\n                debitBalance {\n                  value\n                  currencyCode\n                }\n                creditBalance {\n                  value\n                  currencyCode\n                }\n                normalBalance\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "delinquency",
      "path": "Repayment/Delinquency/Simulate Delinquency",
      "description": "",
      "tags": [
        "delinquency",
        "simulation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "debitBalance"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687242",
    "updated_at": "2025-08-04T16:18:34.687243"
  },
  {
    "name": "ScheduleRecurringAchTransfer",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "OUTSTANDING_BALANCE"
          },
          "frequency": "MONTHLY",
          "transferDayOfMonth": 3,
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2021-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "Test 1234",
            "individualIdentificationNumber": "Test 12345",
            "individualName": "Test 123456"
          },
          "fromFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "scheduled_transfers",
      "path": "Repayment/Scheduled Transfers/Schedule Recurring ACH Transfer",
      "description": "",
      "tags": [
        "scheduled_transfers"
      ],
      "requires": [],
      "produces": [
        "errors",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687295",
    "updated_at": "2025-08-04T16:18:34.687297"
  },
  {
    "name": "ScheduleOneTimeAchTransfer",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "transferAmount": {
              "value": 100000,
              "currencyCode": "USD"
            }
          },
          "transferDate": "2023-12-22",
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Kevin Ruan"
          },
          "fromFinancialAccountId": "EXTERNAL_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "CARD_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "scheduled_transfers",
      "path": "Repayment/Scheduled Transfers/Schedule One Time ACH Transfer",
      "description": "",
      "tags": [
        "scheduled_transfers"
      ],
      "requires": [],
      "produces": [
        "errors",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687326",
    "updated_at": "2025-08-04T16:18:34.687326"
  },
  {
    "name": "AddWebhookNotificationTarget",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input: $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "My Target",
          "uri": "<URI>",
          "subscriptions": [
            "PAYMENT_CARD_ACTIVATED",
            "AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_IN_REVIEW",
            "CARD_PRODUCT_APPLICATION_MANUAL_REVIEW",
            "CARD_PRODUCT_APPLICATION_DENIED",
            "CARD_PRODUCT_APPLICATION_CLOSED",
            "PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED",
            "PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Add Webhook Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687355",
    "updated_at": "2025-08-04T16:18:34.687355"
  },
  {
    "name": "GetAllWebhookNotificationTargets",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\tid\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\tsubscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Get All Webhook Notification Targets",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687379",
    "updated_at": "2025-08-04T16:18:34.687380"
  },
  {
    "name": "DeactivateNotificationTarget",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input: $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Deactivate Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval",
        "activation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687393",
    "updated_at": "2025-08-04T16:18:34.687393"
  },
  {
    "name": "ActivateNotificationTarget",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input: ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Activate Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval",
        "activation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687406",
    "updated_at": "2025-08-04T16:18:34.687406"
  },
  {
    "name": "GetWebhookNotificationTarget",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\thttpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Get Webhook Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687425",
    "updated_at": "2025-08-04T16:18:34.687425"
  },
  {
    "name": "GetNotificationTargetDeliveryAttempts",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n            createdAt\n            event {\n              name\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "WEBHOOK_NOTIFICATION_TARGET_ID"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Get Notification Target Delivery Attempts",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687442",
    "updated_at": "2025-08-04T16:18:34.687443"
  },
  {
    "name": "AddSubscriptionsToNotificationTarget",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Add Subscriptions To Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687457",
    "updated_at": "2025-08-04T16:18:34.687457"
  },
  {
    "name": "RemoveSubscriptionsFromNotificationTarget",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!) {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Remove Subscriptions From Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687472",
    "updated_at": "2025-08-04T16:18:34.687472"
  },
  {
    "name": "GetAllNotificationEvents",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllNotificationEvents($after: String, $first: Int) {\n\tnotificationEvents(after: $after, first: $first) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t\tnode {\n                        __typename\n\t\t\t\t\t\t... on PaymentCardTransactionDispute {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\tchargebacks {\n                                id, \n                                status, \n                                dispute {\n                                    id\n                                }, \n                                creditStatus\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on PaymentCardTransactionChargeback {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcreditStatus\n\t\t\t\t\t\t\tdispute {\n                                id,\n                                status,\n                                amount { \n                                    value\n\t\t\t\t\t\t\t    }\n                            }\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "first": 150
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get All Notification Events",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687498",
    "updated_at": "2025-08-04T16:18:34.687499"
  },
  {
    "name": "GetNotificationEvent",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEvent($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tcreatedAt\n\t\t\texpiresAt\n\t\t\tname\n\t\t\tnode {\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get Notification Event",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687511",
    "updated_at": "2025-08-04T16:18:34.687511"
  },
  {
    "name": "ReplayNotificationEvent",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReplayNotificationEvent($input: ReplayNotificationEventInput!) {\n  replayNotificationEvent(input: $input) {\n    __typename\n    ... on NotificationEvent {\n      __typename\n      id\n\t  createdAt\n\t  expiresAt\n      node {\n        ... on AuthorizationEvent {\n          id\n          approvedAmount {\n            value\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "input": {
          "notificationEventId": "<ID>"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Replay Notification Event",
      "description": "",
      "tags": [
        "notification_events"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687525",
    "updated_at": "2025-08-04T16:18:34.687525"
  },
  {
    "name": "GetDeliveryAttemptsForNotificationEvent",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDeliveryAttemptsForNotificationEvent($id: ID!, $after: String, $first: Int) {\n\tnode(id: $id) {\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tdeliveryAttempts(first: $first, after: $after) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\t__typename\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\t__typename\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t  httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\turi\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "id": "<ID>",
        "first": 10
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get Delivery Attempts For Notification Event",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687541",
    "updated_at": "2025-08-04T16:18:34.687542"
  },
  {
    "name": "GetNotificationEventsFilteredByName",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEventsFilteredByName($filterBy: NotificationEventsFilterInput!, $first: Int) {\n\tnotificationEvents(filterBy: $filterBy, first: $first) {\n\t\t__typename\n\t\tpageInfo {\n\t\t\tstartCursor\n\t\t\tendCursor\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t}\n\t\tedges {\n\t\t\tcursor\n\t\t\t__typename\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "filterBy": {
          "name": [
            "INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED"
          ]
        },
        "first": 20
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get Notification Events Filtered By Name",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687557",
    "updated_at": "2025-08-04T16:18:34.687557"
  },
  {
    "name": "InitiateOrganizationReport",
    "program_type": "fleet",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateOrganizationReport($input: InitiateOrganizationReportInput!) {\n  initiateOrganizationReport(input: $input) {\n    __typename\n    ... on Report {\n      id\n      download {\n        url\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "reportType": "EXPERIAN_CREDIT_REPORT",
          "parameters": {
            "between": {
              "start": "YYYY-MM-DD",
              "end": "YYYY-MM-DD"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Initiate Organization Report",
      "description": "",
      "tags": [
        "reports"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687591",
    "updated_at": "2025-08-04T16:18:34.687592"
  },
  {
    "name": "GetReport",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetReport($id: ID!) {\n  node(id: $id) {\n    ... on Report {\n      download {\n        url\n      }\n    }\n  }\n}",
      "variables": {
        "id": "REPORT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Get Report",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "download"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687615",
    "updated_at": "2025-08-04T16:18:34.687619"
  },
  {
    "name": "GetReportUsage",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query ReportUsage {\n  reportUsage {\n    limit\n    limitRemaining\n    periodEnd\n    reportType\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Get Report Usage",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "reportUsage"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687639",
    "updated_at": "2025-08-04T16:18:34.687640"
  },
  {
    "name": "GetReports",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query Reports($first: Int, $after: String, $input: ReportFilterInput) {\n  reports(first: $first, after: $after, filterBy: $input) {\n    ... on ReportConnection {\n      edges {\n        ... on ReportEdge {\n          node {\n            __typename\n            id\n            status\n            reportType\n            download {\n              url\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "status": {
            "includes": [
              "COMPLETED"
            ]
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Get Reports",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687653",
    "updated_at": "2025-08-04T16:18:34.687654"
  },
  {
    "name": "GetCurrentBillingStatementByFinancialAccountId",
    "program_type": "fleet",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerChargeCardStatement\n        ... currentConsumerReolvingStatement\n        ... currentCreditPayInFullStatement\n        ... currentSecuredDepositCommercialCreditStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n\n\nfragment currentConsumerChargeCardStatement on ConsumerChargeCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerChargeCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n\nfragment currentCreditPayInFullStatement on CreditPayInFullCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on CreditPayInFullCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n\n\nfragment currentSecuredDepositCommercialCreditStatement on SecuredDepositCommercialCreditCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on SecuredDepositCommercialCreditCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "statements",
      "path": "Reporting/Statements/Get Current Billing Statement By Financial Account ID",
      "description": "",
      "tags": [
        "statements",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.687723",
    "updated_at": "2025-08-04T16:18:34.687725"
  }
]