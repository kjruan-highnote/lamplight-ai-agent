{
  "collection": "Secure Document Upload",
  "program_type": "secure_document_upload",
  "extraction_date": "2025-08-12T17:46:30.937Z",
  "total_operations": 9,
  "categories": [
    {
      "name": "simulation",
      "operations": [
        {
          "name": "SimulateApplicationDocumentReview",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationVerificationStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationStatusChange",
          "type": "mutation",
          "required": false
        }
      ]
    },
    {
      "name": "uncategorized",
      "operations": [
        {
          "name": "GetAccountHolderCardProductApplicationStatus",
          "type": "query",
          "required": true
        },
        {
          "name": "GetDocumentUpload_via_SessionID",
          "type": "query",
          "required": true
        },
        {
          "name": "GenerateDocumentUploadClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "StartDocumentUploadSession",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateDocumentUploadSecureLink",
          "type": "mutation",
          "required": true
        },
        {
          "name": "EndDocumentUploadSession",
          "type": "mutation",
          "required": false
        }
      ]
    }
  ],
  "operations": [
    {
      "name": "SimulateApplicationDocumentReview",
      "type": "mutation",
      "required": false,
      "category": "simulation",
      "graphql": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "PERSON_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    {
      "name": "SimulateApplicationVerificationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "simulation",
      "graphql": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "PERSON_ACCOUNT_HOLDER_ID",
          "applicationId": "APPLICATION_ID",
          "newVerificationStatus": "VERIFICATION_STATUS_ENUM"
        }
      }
    },
    {
      "name": "SimulateApplicationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "simulation",
      "graphql": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM"
        }
      }
    },
    {
      "name": "GetAccountHolderCardProductApplicationStatus",
      "type": "query",
      "required": true,
      "graphql": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        primaryDocumentTypes\n        secondaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
      "variables": {
        "id": "APPLICATION_ID"
      }
    },
    {
      "name": "GetDocumentUpload_via_SessionID",
      "type": "query",
      "required": true,
      "graphql": "query GetDocumentUpload_via_SessionID($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on USAccountHolderApplicationDocumentUploadSession {\n\t\t\t__typename\n\t\t\tid\n\t\t\tstatus\n\t\t\tprimaryDocumentTypes\n\t\t\tsecondaryDocumentTypes\n\t\t\tsupportingDocumentTypes\n\t\t\tuploadRequirements {\n\t\t\t\tconstraints {\n\t\t\t\t\t... on DocumentUploadRequirementConstraint {\n\t\t\t\t\t\tdocumentType\n\t\t\t\t\t\tnumberOfDocuments\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdocuments {\n\t\t\t\t... on DocumentUploadLink {\n\t\t\t\t\tid\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentCategoryType\n\t\t\t\t\tdocumentType\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentUploadSession {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "DOCUMENT_UPLOAD_SESSION_ID"
      }
    },
    {
      "name": "GenerateDocumentUploadClientToken",
      "type": "mutation",
      "required": false,
      "graphql": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    {
      "name": "StartDocumentUploadSession",
      "type": "mutation",
      "required": false,
      "graphql": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    {
      "name": "CreateDocumentUploadSecureLink",
      "type": "mutation",
      "required": true,
      "graphql": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": "{\n  \"input\": {\n    \"documentUploadSessionId\": \"DOCUMENT_UPLOAD_SESSION_ID\",\n    \"documentType\": \"BANK_STATEMENT\" // Provide correct enum\n  }\n}\n"
    },
    {
      "name": "EndDocumentUploadSession",
      "type": "mutation",
      "required": false,
      "graphql": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    }
  ]
}