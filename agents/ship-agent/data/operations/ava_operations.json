{
  "collection": "Ava",
  "program_type": "ava",
  "extraction_date": "2025-08-12T17:46:30.938Z",
  "total_operations": 103,
  "categories": [
    {
      "name": "consumer_charge",
      "operations": [
        {
          "name": "GetAllAPIKeys",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateSecretAPIKey",
          "type": "mutation",
          "required": true
        },
        {
          "name": "RevokeAPIKey",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAllOrganizations",
          "type": "query",
          "required": true
        },
        {
          "name": "GetOrganizationByID",
          "type": "query",
          "required": true
        },
        {
          "name": "UpdateOrganizationProfileDisplayName",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateCardProduct",
          "type": "mutation",
          "required": true
        },
        {
          "name": "EnableCreditCardFeature",
          "type": "mutation",
          "required": true
        },
        {
          "name": "EnableCollaborativeApplicationUnderwritingFeature",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetCardProductWithCreditConfigs",
          "type": "query",
          "required": true
        },
        {
          "name": "Ping",
          "type": "query",
          "required": false
        },
        {
          "name": "IntrospectionQuery",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SearchPersonAccountHolders",
          "type": "query",
          "required": false
        },
        {
          "name": "UpdateUSPersonAccountHolderBillingAddress",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateUSPersonAccountHolderPhone",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateUSPersonAccountHolderEmail",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ListAccountHolders",
          "type": "query",
          "required": false
        },
        {
          "name": "GetUSPersonAccountHolderByID",
          "type": "query",
          "required": true
        },
        {
          "name": "SimulateApplicationDocumentReview",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationVerificationStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAccountHolderCardProductApplicationStatus",
          "type": "query",
          "required": true
        },
        {
          "name": "GetDocumentUpload_via_SessionID",
          "type": "query",
          "required": true
        },
        {
          "name": "GenerateDocumentUploadClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "StartDocumentUploadSession",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateDocumentUploadSecureLink",
          "type": "mutation",
          "required": true
        },
        {
          "name": "EndDocumentUploadSession",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateAccountHolderCardProductApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetPersonAccountHolderByApplicationID",
          "type": "query",
          "required": true
        },
        {
          "name": "ApproveCreditProductApplicationUnderwriting",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DenyCreditProductApplicationUnderwriting",
          "type": "mutation",
          "required": false
        },
        {
          "name": "InitiateFinancialAccountCreditLimitUpdateFromProductFunding",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetFinancialAccountCreditLimitUpdate",
          "type": "query",
          "required": false
        },
        {
          "name": "IssuePaymentCardForFinancialAccount",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GeneratePaymentCardClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GeneratePaymentCardClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetPaymentCardRestrictedDetails",
          "type": "query",
          "required": true
        },
        {
          "name": "ActivatePaymentCard",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SetPinForPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SuspendPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ReissuePaymentCard",
          "type": "mutation",
          "required": true
        },
        {
          "name": "ClosePaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "IssueFinancialAccountForApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetFinancialAccountByID",
          "type": "query",
          "required": true
        },
        {
          "name": "SimulateAuthorization",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateClearing",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateReversal",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateRefund",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateSingleStepAuthAndClear",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetTransactionEvent",
          "type": "query",
          "required": true
        },
        {
          "name": "TransactionEventsByPaymentCardAndTransactionId",
          "type": "query",
          "required": false
        },
        {
          "name": "AttachSpendRuleToCardProduct",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateMerchantCategorySpendRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "UpdateMerchantCategorySpendRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AttachSpendRuleToPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachSpendRuleFromCardProduct",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachSpendRuleFromPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAllVelocityRules",
          "type": "query",
          "required": true
        },
        {
          "name": "GetPaymentCardVelocityRule",
          "type": "query",
          "required": true
        },
        {
          "name": "GetFinancialAccountWithVelocityBalance",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateVelocityRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateAmountLimitSpendRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "AttachPaymentCardVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachPaymentCardVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AttachCardProductVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachCardProductVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindCollaborativeAuthorizationEndpoint",
          "type": "query",
          "required": false
        },
        {
          "name": "CollaborativeAuthorizationEndpoints",
          "type": "query",
          "required": false
        },
        {
          "name": "AddCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ActivateCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": true
        },
        {
          "name": "DeactivateCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "RemoveCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "RenameCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderSendToPrinter",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderApproval",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderShipmentFailed",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderShipped",
          "type": "mutation",
          "required": false
        },
        {
          "name": "OrderPhysicalPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindPhysicalPaymentCardOrder",
          "type": "query",
          "required": false
        },
        {
          "name": "CancelPhysicalPaymentCardOrder",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GenerateDirectDepositDetailClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetDirectDepositDetailsByIDWithClientToken",
          "type": "query",
          "required": true
        },
        {
          "name": "GetProductFundingAccountByCardProductID",
          "type": "query",
          "required": true
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughPlaid",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughFinicity",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetExternalFinancialAccountsByAccountHolder",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateFundsDepositACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "InitiateFundsWithdrawalACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessingIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateReturnedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateExternallyInitiatedACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessingExternallyInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateDeposit",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateRecurringACHTransfer",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateOneTimeACHTransfer",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SimulateRolloverCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateShiftCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetCurrentBillingStatementByFinancialAccountID",
          "type": "query",
          "required": true
        },
        {
          "name": "GetLatestClosedBillingStatementByFinancialAccountID",
          "type": "query",
          "required": false
        }
      ]
    }
  ],
  "operations": [
    {
      "name": "GetAllAPIKeys",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 10
      }
    },
    {
      "name": "CreateSecretAPIKey",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "secretKey": {
            "name": "Test Key"
          }
        }
      }
    },
    {
      "name": "RevokeAPIKey",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "apiKeyId": "API_KEY_ID"
        }
      }
    },
    {
      "name": "GetAllOrganizations",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    {
      "name": "GetOrganizationByID",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetOrganizationByID($id: ID!) {\n  node(id: $id) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n        environment\n        region\n      }\n      financialAccounts {\n        ledgers {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "ORGANIZATION_ID"
      }
    },
    {
      "name": "UpdateOrganizationProfileDisplayName",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "id": "ORGANIZATION_ID",
          "displayName": "Test"
        }
      }
    },
    {
      "name": "CreateCardProduct",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Consumer Credit Card",
            "usage": "MULTI_USE",
            "vertical": "CONSUMER_CREDIT"
          }
        }
      }
    },
    {
      "name": "EnableCreditCardFeature",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation EnableCreditCardFeature(\n\t$input: EnableCreditCardFeatureInput!\n) {\n\tenableCreditCardFeature(input: $input) {\n\t\t__typename\t\t\t\n\t\t... on CardProduct {\n\t\t\tid\n\t\t\tfeatures {\n\t\t\t\t__typename\n\t\t\t\tenabled\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "feature": "CHARGE"
        }
      }
    },
    {
      "name": "EnableCollaborativeApplicationUnderwritingFeature",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation EnableCollaborativeApplicationUnderwritingFeature($input: EnableCollaborativeApplicationUnderwritingFeatureInput!) {\n  enableCollaborativeApplicationUnderwritingFeature(input: $input) {\n    ... on CardProduct {\n      id\n      name\n      features {\n        ... on CollaborativeApplicationUnderwritingCardProductFeature {\n          enabled\n          createdAt\n          updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID"
        }
      }
    },
    {
      "name": "GetCardProductWithCreditConfigs",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetCardProductWithCreditConfigs($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditConfiguration {\n        accountAging {\n          delinquentInDays\n          suspendedInDays\n          chargeOffInDays\n          lateFeeGracePeriodInDays\n        }\n        billingCycleConfiguration {\n          billingCycleGracePeriodInDays\n          billingCycleGracePeriodType\n          billingCyclePeriod\n        }\n        interest {\n          includesFees\n          includesPurchase\n        }\n        minimumPayment {\n          includesInterestAmount\n          includesFeesCharged\n          includesPastDueAmount\n          percentage\n          thresholdAmount {\n            currencyCode\n            value\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "CARD_PRODUCT_ID"
      }
    },
    {
      "name": "Ping",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query Ping {\n  ping\n}",
      "variables": {}
    },
    {
      "name": "IntrospectionQuery",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "IN-REVIEW",
              "familyName": "IN-REVIEW"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on AccessDeniedError {\n        message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n        }\n        employmentStatus\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Walt",
              "familyName": "Disney"
            },
            "externalId": "Disney,Walt",
            "email": "walt@disney.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "1",
              "number": "714-316-3075"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "SearchPersonAccountHolders",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query SearchPersonAccountHolders($filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(filterBy: $filterBy) {\n    edges {\n      node {\n        id\n        email\n        dateOfBirth\n        externalId\n        updatedAt\n        createdAt\n        financialAccounts {\n          edges {\n            node {\n              id\n              name\n              owner {\n                __typename\n              }\n            }\n          }\n        }\n        paymentCards {\n          edges {\n            node {\n              last4\n              financialAccounts {\n                id\n                name\n                owner {\n                  __typename\n                }\n              }\n            }\n          }\n        }\n        name {\n          givenName\n          familyName\n          title\n          suffix\n          middleName\n        }\n        billingAddress {\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n        phoneNumbers {\n          countryCode\n          number\n          label\n        }\n        identificationDocument {\n          socialSecurityNumber {\n            numberHash\n            countryCodeAlpha3\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "filterBy": {
          "name": {
            "givenName": {
              "soundsLike": "Ian"
            },
            "familyName": {
              "soundsLike": "Somnia"
            }
          }
        }
      }
    },
    {
      "name": "UpdateUSPersonAccountHolderBillingAddress",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation UpdateUSPersonAccountHolderBillingAddress(\n  $input: UpdateUSPersonAccountHolderBillingAddressInput!\n) {\n  updateUSPersonAccountHolderBillingAddress(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      paymentCards {\n        edges {\n          node {\n            id\n            last4\n            application {\n              accountHolderSnapshot {\n                ... on USPersonAccountHolderSnapshot {\n                  billingAddress {\n                    streetAddress\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "PERSON_ACCOUNT_HOLDER_ID",
          "billingAddress": {
            "streetAddress": "123 Main Street",
            "extendedAddress": "",
            "postalCode": "60654",
            "region": "IL",
            "locality": "Chicago",
            "countryCodeAlpha3": "USA"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    {
      "name": "UpdateUSPersonAccountHolderPhone",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation UpdateUSPersonAccountHolderPhone(\n  $input: UpdateUSPersonAccountHolderPhoneInput!\n) {\n  updateUSPersonAccountHolderPhone(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "phoneNumber": {
            "number": "5555555556",
            "countryCode": "1",
            "label": "MOBILE"
          }
        }
      }
    },
    {
      "name": "UpdateUSPersonAccountHolderEmail",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation UpdateUSPersonAccountHolderEmail(\n  $input: UpdateUSPersonAccountHolderEmailInput!\n) {\n  updateUSPersonAccountHolderEmail(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "email": "foo+testing-update@email.com"
        }
      }
    },
    {
      "name": "ListAccountHolders",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "fragment accountHolder on USPersonAccountHolder {\n  id\n  email\n  dateOfBirth\n  externalId\n  createdAt\n  updatedAt\n  name {\n    givenName\n    familyName\n    middleName\n    suffix\n    title\n  }\n  externalFinancialAccounts {\n    edges {\n      node {\n        __typename\n        ... on ExternalFinancialBankAccount {\n          id\n        }\n      }\n    }\n  }\n  identificationDocument {\n    socialSecurityNumber {\n      numberHash\n      countryCodeAlpha3\n    }\n  }\n  billingAddress {\n    streetAddress\n    extendedAddress\n    postalCode\n    region\n    locality\n    countryCodeAlpha3\n  }\n  phoneNumbers {\n    number\n    countryCode\n    label\n  }\n  financialAccounts {\n    edges {\n      node {\n        name\n        owner {\n          __typename\n        }\n      }\n    }\n  }\n  paymentCards {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        last4\n        formFactor\n        financialAccounts {\n          __typename\n          id\n          name\n        }\n      }\n    }\n  }\n  cardProductApplications {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        applicationState {\n          status\n        }\n      }\n    }\n  }\n}\n\nquery ListAccountHolders($first: Int, $filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(first: $first, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...accountHolder\n      }\n    }\n  }\n}\n",
      "variables": {
        "first": 20,
        "filterBy": {}
      }
    },
    {
      "name": "GetUSPersonAccountHolderByID",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetUSPersonAccountHolderByID($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      cardProductApplications {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      externalFinancialAccounts {\n        edges {\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n            }\n          }\n        }\n      }\n      financialAccounts {\n        edges {\n          node {\n            directDepositDetails {\n              id\n            }\n          }\n        }\n      }\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "PERSON_ACCOUNT_HOLDER_ID"
      }
    },
    {
      "name": "SimulateApplicationDocumentReview",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "PERSON_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    {
      "name": "SimulateApplicationVerificationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "PERSON_ACCOUNT_HOLDER_ID",
          "applicationId": "APPLICATION_ID",
          "newVerificationStatus": "VERIFICATION_STATUS_ENUM"
        }
      }
    },
    {
      "name": "SimulateApplicationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM"
        }
      }
    },
    {
      "name": "GetAccountHolderCardProductApplicationStatus",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        primaryDocumentTypes\n        secondaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
      "variables": {
        "id": "APPLICATION_ID"
      }
    },
    {
      "name": "GetDocumentUpload_via_SessionID",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetDocumentUpload_via_SessionID($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on USAccountHolderApplicationDocumentUploadSession {\n\t\t\t__typename\n\t\t\tid\n\t\t\tstatus\n\t\t\tprimaryDocumentTypes\n\t\t\tsecondaryDocumentTypes\n\t\t\tsupportingDocumentTypes\n\t\t\tuploadRequirements {\n\t\t\t\tconstraints {\n\t\t\t\t\t... on DocumentUploadRequirementConstraint {\n\t\t\t\t\t\tdocumentType\n\t\t\t\t\t\tnumberOfDocuments\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdocuments {\n\t\t\t\t... on DocumentUploadLink {\n\t\t\t\t\tid\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentCategoryType\n\t\t\t\t\tdocumentType\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentUploadSession {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "DOCUMENT_UPLOAD_SESSION_ID"
      }
    },
    {
      "name": "GenerateDocumentUploadClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    {
      "name": "StartDocumentUploadSession",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    {
      "name": "CreateDocumentUploadSecureLink",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": "{\n  \"input\": {\n    \"documentUploadSessionId\": \"DOCUMENT_UPLOAD_SESSION_ID\",\n    \"documentType\": \"BANK_STATEMENT\" // Provide correct enum\n  }\n}\n"
    },
    {
      "name": "EndDocumentUploadSession",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    {
      "name": "CreateAccountHolderCardProductApplication",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n      ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }  \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            region\n            countryCodeAlpha3\n            postalCode\n          }\n          currentVerification {\n            reason\n            status\n          }\n        }\n      }    \n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "PERSON_ACCOUNT_HOLDER_ID",
          "cardProductId": "CARD_PRODUCT_ID",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "2022-01-01T23:59:59Z",
            "primaryAuthorizedPersonId": "PERSON_ACCOUNT_HOLDER_ID"
          }
        }
      }
    },
    {
      "name": "GetPersonAccountHolderByApplicationID",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetPersonAccountHolderByApplicationID($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      createdAt\n      applicationState {\n        status\n      }\n      \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          email\n          dateOfBirth\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          billingAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          personCreditRiskAttributes {\n            employmentStatus\n            currentDebtObligations {\n              currencyCode\n              value\n            }\n            totalAnnualIncome {\n              currencyCode\n              value\n            }\n          }\n          currentVerification {\n            status\n          }\n          currentCreditUnderwritingVerification {\n            status\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "APPLICATION_ID"
      }
    },
    {
      "name": "ApproveCreditProductApplicationUnderwriting",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation ApproveCreditProductApplicationUnderwriting($input: ApproveCreditProductApplicationUnderwritingInput!) {\n  approveCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n        name\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "decisionDate": "2023-01-01T23:59:59Z",
          "standardPurchaseCreditLimit": {
            "currencyCode": "USD",
            "value": 100000
          }
        }
      }
    },
    {
      "name": "DenyCreditProductApplicationUnderwriting",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation DenyCreditProductApplicationUnderwriting($input: DenyCreditProductApplicationUnderwritingInput!) {\n  denyCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      cardProduct {\n        id\n        name\n      }\n      applicationDenialReason\n      adverseActionReasons {\n        code\n        description\n      }\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "adverseActionReasons": [
            {
              "code": "INSUFFICIENT_INCOME"
            }
          ],
          "decisionDate": "2023-01-01T23:59:59Z"
        }
      }
    },
    {
      "name": "InitiateFinancialAccountCreditLimitUpdateFromProductFunding",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "memo": "Set Credit Limit $1000"
        }
      }
    },
    {
      "name": "GetFinancialAccountCreditLimitUpdate",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "IssuePaymentCardForFinancialAccount",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "options": {
            "activateOnCreate": false,
            "expirationDate": "2026-01-01T23:59:59Z"
          }
        }
      }
    },
    {
      "name": "GeneratePaymentCardClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "SET_PAYMENT_CARD_PIN"
        }
      }
    },
    {
      "name": "GeneratePaymentCardClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    {
      "name": "GetPaymentCardRestrictedDetails",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n            restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n                    cvv\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID"
      }
    },
    {
      "name": "ActivatePaymentCard",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "SetPinForPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n    }\nreq_06f2e9d7416d41eeaa473efa19375e48    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "newPin": "1234"
        }
      }
    },
    {
      "name": "SuspendPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "ReissuePaymentCard",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "options": {
            "reissueFeatures": {
              "copyNumber": true,
              "copyPin": true
            },
            "expirationDate": "2024-12-29T23:12:30Z",
            "activateOnCreate": false
          },
          "originalPaymentCardId": "ORIGINAL_PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "ClosePaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "IssueFinancialAccountForApplication",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "name": "Credit Account 1"
        }
      }
    },
    {
      "name": "GetFinancialAccountByID",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "SimulateAuthorization",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transaction {\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "cardId": "PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "SimulateClearing",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    {
      "name": "SimulateReversal",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    {
      "name": "SimulateRefund",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "SimulateSingleStepAuthAndClear",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "PAYMENT_CARD_ID",
          "amount": {
            "currencyCode": "USD",
            "value": 1000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    {
      "name": "GetTransactionEvent",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
      "variables": {
        "id": "TRANSACTION_EVENT_ID"
      }
    },
    {
      "name": "TransactionEventsByPaymentCardAndTransactionId",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID",
        "filterBy": {
          "transactionId": {
            "equals": "TRANSACTION_ID"
          }
        }
      }
    },
    {
      "name": "AttachSpendRuleToCardProduct",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input: $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    {
      "name": "CreateMerchantCategorySpendRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Fuel Rule",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": [
            "AIRLINES_AIR_CARRIERS"
          ]
        }
      }
    },
    {
      "name": "UpdateMerchantCategorySpendRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "spendRuleId": "SPEND_RULE_ID",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": []
        }
      }
    },
    {
      "name": "AttachSpendRuleToPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    {
      "name": "DetachSpendRuleFromCardProduct",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input: $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    {
      "name": "DetachSpendRuleFromPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input: $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    {
      "name": "GetAllVelocityRules",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n          updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n              name\n              maximumAmount {\n                value\n                currencyCode\n              }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n          spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {}
    },
    {
      "name": "GetPaymentCardVelocityRule",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n  \t}\n\t}\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID"
      }
    },
    {
      "name": "GetFinancialAccountWithVelocityBalance",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n            version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "CreateVelocityRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n    ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              version\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Velocity Control - Max $1000 per month",
          "cumulativeRule": {
            "id": "AMOUNT_SPEND_RULE_ID",
            "version": "0"
          },
          "spendRules": [
            {
              "id": "ADDITIONAL_SPEND_RULE_ID",
              "version": "O"
            }
          ],
          "velocityRuleWindow": "MONTHLY"
        }
      }
    },
    {
      "name": "CreateAmountLimitSpendRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input: $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n        currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Amount Limit Rule",
          "maximumAmount": {
            "value": 100000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "AttachPaymentCardVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    {
      "name": "DetachPaymentCardVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    {
      "name": "AttachCardProductVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    {
      "name": "DetachCardProductVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    {
      "name": "FindCollaborativeAuthorizationEndpoint",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query FindCollaborativeAuthorizationEndpoint($id: ID!) {\n  node(id: $id) {\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n  }\n}",
      "variables": {
        "id": "COLLABORATIVE_AUTH_ENDPOINT_ID"
      }
    },
    {
      "name": "CollaborativeAuthorizationEndpoints",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query CollaborativeAuthorizationEndpoints($after: String, $first: Int) {\n\torganizations{\n\t\tid\n\t\tcollaborativeAuthorizationEndpoints(first: $first, after: $after) {\n\t\t\t__typename\n\n\t\t\tedges {\n\t\t\t\t__typename\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tsigningKeys {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tsecret\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    {
      "name": "AddCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation AddCollaborativeAuthorizationEndpoint($input: AddCollaborativeAuthorizationEndpointInput!) {\n  addCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on  CollaborativeAuthorizationEndpoint{\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Collaborative Auth Endpoint",
          "uri": "COLLABORATIVE_AUTH_ENDPOINT_URI"
        }
      }
    },
    {
      "name": "ActivateCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation ActivateCollaborativeAuthorizationEndpoint($input: ActivateCollaborativeAuthorizationEndpointInput!) {\n  activateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "COLLABORATIVE_AUTH_ENDPOINT_ID"
        }
      }
    },
    {
      "name": "DeactivateCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation DeactivateCollaborativeAuthorizationEndpoint($input: DeactivateCollaborativeAuthorizationEndpointInput!) {\n  deactivateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on  CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "COLLABORATIVE_AUTH_ENDPOINT_ID"
        }
      }
    },
    {
      "name": "RemoveCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation RemoveCollaborativeAuthorizationEndpoint($input: RemoveCollaborativeAuthorizationEndpointInput!) {\n  removeCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "COLLABORATIVE_AUTH_ENDPOINT_ID"
        }
      }
    },
    {
      "name": "RenameCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation RenameCollaborativeAuthorizationEndpoint($input: RenameCollaborativeAuthorizationEndpointInput!) {\n  renameCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "COLLABORATIVE_AUTH_ENDPOINT_ID",
          "name": "Renamed Collaborative Auth Endpoint"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderSendToPrinter",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "PHYSICAL_PAYMENT_CARD_ORDER_ID"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderApproval",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "PHYSICAL_PAYMENT_CARD_ORDER_ID"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderShipmentFailed",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "PHYSICAL_PAYMENT_CARD_ORDER_ID"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderShipped",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "PHYSICAL_PAYMENT_CARD_ORDER_ID",
          "trackingNumber": "trackingNumber",
          "actualShipDate": "YYYY-MM-DD"
        }
      }
    },
    {
      "name": "OrderPhysicalPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "requestedShipDate": "2021-08-20",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "John Doe"
            }
          }
        }
      }
    },
    {
      "name": "FindPhysicalPaymentCardOrder",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "PHYSICAL_PAYMENT_CARD_ORDER_ID"
      }
    },
    {
      "name": "CancelPhysicalPaymentCardOrder",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "PHYSICAL_PAYMENT_CARD_ORDER_ID"
        }
      }
    },
    {
      "name": "GenerateDirectDepositDetailClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation GenerateDirectDepositDetailClientToken($input: GenerateDirectDepositDetailClientTokenInput!) {\n  generateDirectDepositDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "directDepositDetailId": "DIRECT_DEPOSIT_DETAIL_ID",
          "permissions": [
            "READ_RESTRICTED_DETAILS"
          ]
        }
      }
    },
    {
      "name": "GetDirectDepositDetailsByIDWithClientToken",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetDirectDepositDetailsByIDWithClientToken($id: ID!) {\n  node(id: $id) {\n    ... on DirectDepositDetail {\n      id\n      restrictedDetails {\n        ... on DirectDepositDetailRestrictedDetails {\n          number\n          routingNumber\n          bank {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DIRECT_DEPOSIT_DETAIL_ID"
      }
    },
    {
      "name": "GetProductFundingAccountByCardProductID",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetProductFundingAccountByCardProductID($id: ID!, $filterBy: AccountHolderFinancialAccountsFilterInput!) {\n  node(id: $id) {\n    ... on CardProduct {\n      accounts(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            name\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            directDepositDetails {\n              id\n              createdAt\n              updatedAt\n              restrictedDetails {\n                ... on DirectDepositDetailRestrictedDetails {\n                  number\n                  routingNumber\n                  bank {\n                    name\n                    address {\n                      streetAddress\n                      extendedAddress\n                      postalCode\n                      region\n                      locality\n                      countryCodeAlpha3\n                    }\n                  }\n                  type\n                }\n                ... on AccessDeniedError {\n                  message\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "CARD_PRODUCT_ID",
        "filterBy": {
          "features": {
            "equals": "PRODUCT_FUNDING"
          }
        }
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughPlaid",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughFinicity",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughFinicity($input: AddExternalBankAccountVerifiedThroughFinicityInput!) {\n  addExternalBankAccountVerifiedThroughFinicity(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      owner {\n        ... on USPersonAccountHolder {\n          id\n          externalId\n        }\n        ... on USBusinessAccountHolder {\n          id\n          externalId\n        }\n      }\n      name\n      provider\n      accountStatus\n      createdAt\n      updatedAt\n      externalBankAccountDetails {\n        id\n        last4\n        type\n        routingNumber\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "name": "Finicity Checking",
          "bankAccountType": "CHECKING",
          "externalToken": {
            "receiptId": "processor-token-success",
            "customerId": "5543088633794259024",
            "products": [
              {
                "productType": "ACH_DETAILS",
                "accountId": "8977412844634022494",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "CURRENT_BALANCE",
                "accountId": "1045023535892401594",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "APPROXIMATE_BALANCE",
                "accountId": "7895597441790621692",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "ACH_OWNER_DETAILS",
                "accountId": "5200183909259568542",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "GetExternalFinancialAccountsByAccountHolder",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\nreq_95bd9fd8e3e749e6911044aa7c73ca6a                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "ORGANIZATION_ID"
      }
    },
    {
      "name": "InitiateFundsDepositACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "descriptor": {
            "companyEntryDescription": "Company",
            "individualIdentificationNumber": "",
            "individualName": "Baja ABC"
          },
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2022-12-07T14:42:52.453Z",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          }
        }
      }
    },
    {
      "name": "InitiateFundsWithdrawalACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "descriptor": {
            "companyEntryDescription": "Test Entry",
            "individualName": "Test",
            "individualIdentificationNumber": "1234"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-07T14:42:52.453Z",
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          },
          "idempotencyKey": "abcde123",
          "cancellationPeriodMillis": 0,
          "sameDay": false
        }
      }
    },
    {
      "name": "SimulateProcessingIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateProcessedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateReturnedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "ID",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    {
      "name": "SimulateExternallyInitiatedACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          },
          "companyEntryDescription": "TestDesc",
          "companyIdentifier": "TestID",
          "companyName": "TestName",
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "individualIdentificationNumber": "TestInDID",
          "individualName": "TestIndName",
          "settlementDate": "2022-07-28",
          "transferType": "CREDIT"
        }
      }
    },
    {
      "name": "SimulateProcessingExternallyInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateDeposit",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "source": "WIRE",
          "memo": "Initial Card Funding",
          "amount": {
            "value": 50000000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      delinquency {\n        __typename\n        totalAmount {\n          value\n          currencyCode\n        }\n        numberOfCycles\n        totalDaysDelinquent\n        delinquencyStartedOn\n        currentDelinquentCycles {\n          daysDelinquent\n          createdAt\n          updatedAt\n          amount {\n            value\n            currencyCode\n          }\n          totalRepaymentsApplied {\n            value\n            currencyCode\n          }\n          state\n          statement {\n            ... on ConsumerRevolvingCardFinancialAccountStatement {\n              id\n              periodStart\n              periodEnd\n              openedAt\n              closedAt\n              primaryLedger {\n                debitBalance {\n                  value\n                  currencyCode\n                }\n                creditBalance {\n                  value\n                  currencyCode\n                }\n                normalBalance\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "numberOfCyclesToShiftCurrentStatementBackward": 5
        }
      }
    },
    {
      "name": "CreateRecurringACHTransfer",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "OUTSTANDING_BALANCE"
          },
          "frequency": "MONTHLY",
          "transferDayOfMonth": 3,
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2021-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "Test 1234",
            "individualIdentificationNumber": "Test 12345",
            "individualName": "Test 123456"
          },
          "fromFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    {
      "name": "CreateOneTimeACHTransfer",
      "type": "mutation",
      "required": true,
      "category": "consumer_charge",
      "graphql": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "transferAmount": {
              "value": 100000,
              "currencyCode": "USD"
            }
          },
          "transferDate": "2023-12-22",
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Kevin Ruan"
          },
          "fromFinancialAccountId": "EXTERNAL_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "CARD_ACCOUNT_ID"
        }
      }
    },
    {
      "name": "SimulateRolloverCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateRolloverCurrentFinancialAccountStatementPeriod($input: SimulateRolloverCurrentFinancialAccountStatementPeriodInput!) {\n  simulateRolloverCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerChargeStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\n\nfragment currentConsumerChargeStatement on ConsumerChargeCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerChargeCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    {
      "name": "SimulateShiftCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "consumer_charge",
      "graphql": "mutation SimulateShiftCurrentFinancialAccountStatementPeriod($input: SimulateShiftCurrentFinancialAccountStatementPeriodInput!) {\n  simulateShiftCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerChargeStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\nfragment currentConsumerChargeStatement on ConsumerChargeCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerChargeCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "periodBoundary": "2024-02-10T18:56:35Z"
        }
      }
    },
    {
      "name": "GetCurrentBillingStatementByFinancialAccountID",
      "type": "query",
      "required": true,
      "category": "consumer_charge",
      "graphql": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerChargeStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerChargeStatement on ConsumerChargeCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerChargeCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "GetLatestClosedBillingStatementByFinancialAccountID",
      "type": "query",
      "required": false,
      "category": "consumer_charge",
      "graphql": "query GetLatestClosedBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... latestClosedConsumerChargeStatement\n      }\n    }\n  }\n}\n\nfragment latestClosedConsumerChargeStatement on ConsumerChargeCardFinancialAccountStatementSnapshot {\n  latestClosedStatement {\n    ... on ConsumerChargeCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    }
  ]
}