[
  {
    "name": "GetAllApiKeys",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 10
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "api_keys",
      "path": "Initialization/API Keys/Get All API Keys",
      "description": "",
      "tags": [
        "api_keys",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715802",
    "updated_at": "2025-08-04T16:18:34.715806"
  },
  {
    "name": "CreateSecretApiKey",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "secretKey": {
            "name": "My Secret API Key"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "api_keys",
      "path": "Initialization/API Keys/Create Secret API Key",
      "description": "",
      "tags": [
        "api_keys",
        "creation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715822",
    "updated_at": "2025-08-04T16:18:34.715822"
  },
  {
    "name": "RevokeApiKey",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "apiKeyId": "API_KEY_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "api_keys",
      "path": "Initialization/API Keys/Revoke API Key",
      "description": "",
      "tags": [
        "api_keys"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715836",
    "updated_at": "2025-08-04T16:18:34.715836"
  },
  {
    "name": "Getallorganizations",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "organizations",
      "path": "Initialization/Organizations/GetAllOrganizations",
      "description": "",
      "tags": [
        "organizations",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "edges",
        "creditBalance",
        "pageInfo",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715857",
    "updated_at": "2025-08-04T16:18:34.715858"
  },
  {
    "name": "GetallorganizationsCopy",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "organizations",
      "path": "Initialization/Organizations/GetAllOrganizations Copy",
      "description": "",
      "tags": [
        "organizations",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "edges",
        "creditBalance",
        "pageInfo",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715875",
    "updated_at": "2025-08-04T16:18:34.715876"
  },
  {
    "name": "Updateorganizationprofiledisplayname",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "id": "ORGANIZATION_ID",
          "displayName": "Test"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "organizations",
      "path": "Initialization/Organizations/UpdateOrganizationProfileDisplayName",
      "description": "",
      "tags": [
        "organizations",
        "modification"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715890",
    "updated_at": "2025-08-04T16:18:34.715890"
  },
  {
    "name": "EnableCreditCardFeature",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableCreditCardFeature($input: EnableCreditCardFeatureInput!) {\n  enableCreditCardFeature(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      features {\n        __typename\n        enabled\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}}}",
          "feature": "CHARGE"
        }
      }
    },
    "headers": {
      "content-type": "application/json"
    },
    "metadata": {
      "category": "credit",
      "path": "Initialization/Card Product/Credit/Enable Credit Card Feature",
      "description": "",
      "tags": [
        "credit"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715910",
    "updated_at": "2025-08-04T16:18:34.715911"
  },
  {
    "name": "CreateCardProduct",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Commercial Prepaid {{currentTimestampFormatted}}",
            "usage": "MULTI_USE",
            "vertical": "COMMERCIAL_PREPAID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "card_product",
      "path": "Initialization/Card Product/Create Card Product",
      "description": "",
      "tags": [
        "card_product",
        "creation"
      ],
      "requires": [
        "currentTimestampFormatted"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715925",
    "updated_at": "2025-08-04T16:18:34.715926"
  },
  {
    "name": "CreateCardProductWithTemplate",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Commercial Prepaid {{currentTimestampFormatted}}",
            "usage": "MULTI_USE",
            "vertical": "COMMERCIAL_PREPAID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "card_product",
      "path": "Initialization/Card Product/Create Card Product With Template",
      "description": "",
      "tags": [
        "card_product",
        "creation"
      ],
      "requires": [
        "currentTimestampFormatted"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715942",
    "updated_at": "2025-08-04T16:18:34.715943"
  },
  {
    "name": "GetCardProductAccounts",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProduct($id: ID!) {\n  node (id: $id) {\n    ... on CardProduct {\n      accounts {\n        edges {\n          node {\n            id\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "card_product",
      "path": "Initialization/Card Product/Get Card Product Accounts",
      "description": "",
      "tags": [
        "card_product",
        "retrieval"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "accounts",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715956",
    "updated_at": "2025-08-04T16:18:34.715957"
  },
  {
    "name": "GetAllCardProductDetails",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    cardProducts(first: 20) {\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n                features {\n                  ... on DirectDepositFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PrePaidPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on DebitPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on CreditPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PayrollAdvanceFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PayrollEmployerAdvanceFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on NegativeBalanceReserveFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on ProductReserveFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on JustInTimeFundingFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on ProductFundingFinancialAccountFeature {\n                    enabled\n                  }\n                  ... on SecuredCreditPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on FleetCardAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on CommercialCreditPayInFullCardAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on VendorProvidedBankFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on AchCapableFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on NonVerifiedFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PointRewardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on CardFundingFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "card_product",
      "path": "Initialization/Card Product/Get All Card Product Details",
      "description": "",
      "tags": [
        "card_product",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "edges",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.715998",
    "updated_at": "2025-08-04T16:18:34.715999"
  },
  {
    "name": "SimulateDeposit",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on Transfer {\n      id\n      status\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 99999999999,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "{{productFundingFinancialAccountId}}",
          "memo": "Initial Funding",
          "source": "WIRE"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "card_product",
      "path": "Initialization/Card Product/Simulate Deposit",
      "description": "",
      "tags": [
        "card_product",
        "simulation"
      ],
      "requires": [
        "productFundingFinancialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716016",
    "updated_at": "2025-08-04T16:18:34.716017"
  },
  {
    "name": "Ping",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query Ping {\n  ping\n  organizations {\n    id\n    profile {\n      displayName\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "initialization",
      "path": "Initialization/Ping",
      "description": "",
      "tags": [
        "initialization"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716037",
    "updated_at": "2025-08-04T16:18:34.716038"
  },
  {
    "name": "IntrospectionQuery",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "initialization",
      "path": "Initialization/Introspection Query",
      "description": "",
      "tags": [
        "initialization"
      ],
      "requires": [],
      "produces": [
        "__schema"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716060",
    "updated_at": "2025-08-04T16:18:34.716060"
  },
  {
    "name": "CreatePersonAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder($input: CreateUSPersonAccountHolderInput!) {\n    createUSPersonAccountHolder(input: $input) {\n        ... on USPersonAccountHolder {\n            id\n            externalId\n        }\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tcode\n\t\t\t\tpath\n\t\t\t}\n\t\t}\n    }\n}",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Auth",
              "familyName": "User"
            },
            "email": "au@email.com",
            "dateOfBirth": "2008-03-30",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "San Francisco",
              "postalCode": "12345",
              "streetAddress": "123 Test St"
            },
            "phoneNumber": {
              "label": "MOBILE",
              "countryCode": "1",
              "number": "123-123-1234"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "new_solution",
      "path": "Onboarding/Authorized Users/New Solution/Create Person Account Holder",
      "description": "",
      "tags": [
        "new_solution",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716094",
    "updated_at": "2025-08-04T16:18:34.716095"
  },
  {
    "name": "CreateAuthorizedUserCardProductApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAuthorizedUserCardProductApplication($input: CreateAuthorizedUserCardProductApplicationInput!) {\n  createAuthorizedUserCardProductApplication(input: $input) {\n    ... on AuthorizedUserCardProductApplication {\n      id\n      authorizedUserSnapshot {\n        ... on USPersonAuthorizedUserSnapshot {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          authorizedUserCurrent {\n            id\n          }\n        }\n      }\n      accountHolderCardProductApplication {\n        id\n        cardProduct {\n          id\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "authorizedUserId": "ps_ah01fa31bc8314244ae6812d76f2ad8141d4",
          "accountHolderCardProductApplicationId": "ap_22pcgmedae08a74a53468d9a6d74fdb1382ba2",
          "financialAccountId": "ac_c0228b5f53f6f3d24bc8a38f21be6c655d07",
          "cardHolderAgreementConsent": {
            "primaryAuthorizedPersonId": "ps_ah01fa31bc8314244ae6812d76f2ad8141d4",
            "consentTimestamp": "2024-01-31T01:01:01.000Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "new_solution",
      "path": "Onboarding/Authorized Users/New Solution/Create Authorized User Card Product Application",
      "description": "",
      "tags": [
        "new_solution",
        "creation"
      ],
      "requires": [],
      "produces": [
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716133",
    "updated_at": "2025-08-04T16:18:34.716133"
  },
  {
    "name": "IssuePaymentCardForAuthorizedUserApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForAuthorizedUserApplication($input: IssuePaymentCardForAuthorizedUserApplicationInput!) {\n  issuePaymentCardForAuthorizedUserApplication(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      network\n      expirationYear\n      expirationMonth\n      expirationDate\n      status\n      formFactor\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "{{authorizedUserApplicationId}}",
          "options": {
            "expirationDate": "2027-01-01T23:59:59Z",
            "activateOnCreate": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "new_solution",
      "path": "Onboarding/Authorized Users/New Solution/Issue Payment Card For Authorized User Application",
      "description": "",
      "tags": [
        "new_solution",
        "issuance"
      ],
      "requires": [
        "authorizedUserApplicationId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716150",
    "updated_at": "2025-08-04T16:18:34.716151"
  },
  {
    "name": "CreatePersonAuthorizedUser",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAuthorizedUser(\n  $input: CreateUSPersonAuthorizedUserInput!\n) {\n  createUSPersonAuthorizedUser(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      name {\n        givenName\n        familyName\n      }\n      email\n      phoneNumbers {\n        label\n        countryCode\n        number\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        locality\n        region\n        postalCode\n        countryCodeAlpha3\n      }\n      dateOfBirth\n      externalId\n      associatedAccountHolders {\n        ... on AccountHolderConnection {\n          edges {\n            node {\n              ... on USBusinessAccountHolder {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "personAuthorizedUser": {
            "email": "foo@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Barker"
            },
            "billingAddress": {
              "streetAddress": "123 Main Street",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "dateOfBirth": "1940-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Create Person Authorized User",
      "description": "",
      "tags": [
        "authorized_users",
        "creation"
      ],
      "requires": [],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716185",
    "updated_at": "2025-08-04T16:18:34.716185"
  },
  {
    "name": "CreatePersonAuthorizedUserCopy",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAuthorizedUser(\n  $input: CreateUSPersonAuthorizedUserInput!\n) {\n  createUSPersonAuthorizedUser(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      name {\n        givenName\n        familyName\n      }\n      email\n      phoneNumbers {\n        label\n        countryCode\n        number\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        locality\n        region\n        postalCode\n        countryCodeAlpha3\n      }\n      dateOfBirth\n      externalId\n      associatedAccountHolders {\n        ... on AccountHolderConnection {\n          edges {\n            node {\n              ... on USBusinessAccountHolder {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "personAuthorizedUser": {
            "email": "foo@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Barker"
            },
            "billingAddress": {
              "streetAddress": "123 Main Street",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "dateOfBirth": "1940-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Create Person Authorized User Copy",
      "description": "",
      "tags": [
        "authorized_users",
        "creation"
      ],
      "requires": [],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716214",
    "updated_at": "2025-08-04T16:18:34.716215"
  },
  {
    "name": "CreateAuthorizedUserCardProductApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAuthorizedUserCardProductApplication($input: CreateAuthorizedUserCardProductApplicationInput!) {\n  createAuthorizedUserCardProductApplication(input: $input) {\n    ... on AuthorizedUserCardProductApplication {\n      id\n      authorizedUserSnapshot {\n        ... on USPersonAuthorizedUserSnapshot {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          authorizedUserCurrent {\n            id\n          }\n        }\n      }\n      accountHolderCardProductApplication {\n        id\n        cardProduct {\n          id\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "authorizedUserId": "{{authorizedUserId}}",
          "accountHolderCardProductApplicationId": "APPLICATION_ID",
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "cardHolderAgreementConsent": {
            "primaryAuthorizedPersonId": "{{authorizedUserId}}",
            "consentTimestamp": "2024-01-31T01:01:01.000Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Create Authorized User Card Product Application",
      "description": "",
      "tags": [
        "authorized_users",
        "creation"
      ],
      "requires": [
        "authorizedUserId"
      ],
      "produces": [
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716237",
    "updated_at": "2025-08-04T16:18:34.716238"
  },
  {
    "name": "IssuePaymentCardForAuthorizedUserApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForAuthorizedUserApplication($input: IssuePaymentCardForAuthorizedUserApplicationInput!) {\n  issuePaymentCardForAuthorizedUserApplication(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      network\n      expirationYear\n      expirationMonth\n      expirationDate\n      status\n      formFactor\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "{{authorizedUserApplicationId}}",
          "options": {
            "expirationDate": "2027-01-01T23:59:59Z",
            "activateOnCreate": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Issue Payment Card For Authorized User Application",
      "description": "",
      "tags": [
        "authorized_users",
        "issuance"
      ],
      "requires": [
        "authorizedUserApplicationId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716254",
    "updated_at": "2025-08-04T16:18:34.716255"
  },
  {
    "name": "GetAuthorizedPersonCardProductApplication",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAuthorizedPersonCardProductApplication($id: ID!) {\n  node(id: $id) {\n    ... on AuthorizedUserCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      accountHolderCardProductApplication {\n        id\n      }\n      financialAccount {\n        id\n      }\n      authorizedUserSnapshot {\n        ... on USPersonAuthorizedUserSnapshot {\n          authorizedUserCurrent {\n            id\n            name {\n              givenName\n              familyName\n            }\n            billingAddress {\n              streetAddress\n              locality\n              region\n              countryCodeAlpha3\n              postalCode\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{authorizedUserApplicationId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Get Authorized Person Card Product Application",
      "description": "",
      "tags": [
        "authorized_users",
        "retrieval"
      ],
      "requires": [
        "authorizedUserApplicationId"
      ],
      "produces": [
        "authorizedUserCurrent"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716273",
    "updated_at": "2025-08-04T16:18:34.716274"
  },
  {
    "name": "GetAccountHolderAuthorizedUsers",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderAuthorizedUsers($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    ... on USBusinessAccountHolder {\n      businessProfile {\n        authorizedUsers(first: $first, after: $after) {\n          pageInfo {\n            startCursor\n            endCursor\n            hasNextPage\n          }\n          edges {\n            node {\n              id\n              createdAt\n              name {\n                givenName\n                familyName\n              }\n              email\n              externalId\n              cardProductApplications {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "ACCOUNT_HOLDER_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Get Account Holder Authorized Users",
      "description": "",
      "tags": [
        "authorized_users",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "businessProfile",
        "pageInfo",
        "node",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716288",
    "updated_at": "2025-08-04T16:18:34.716289"
  },
  {
    "name": "UpdatePersonAuthorizedUserBillingAddress",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAuthorizedUserBillingAddress($input: UpdateUSPersonAuthorizedUserBillingAddressInput!) {\n  updateUSPersonAuthorizedUserBillingAddress(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "authorizedUserId": "{{authorizedUserId}}",
          "billingAddress": {
            "countryCodeAlpha3": "USA",
            "streetAddress": "123 Test St",
            "locality": "Test",
            "region": "CA",
            "postalCode": "12345"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Update Person Authorized User Billing Address",
      "description": "",
      "tags": [
        "authorized_users",
        "modification"
      ],
      "requires": [
        "authorizedUserId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716309",
    "updated_at": "2025-08-04T16:18:34.716310"
  },
  {
    "name": "UpdatePersonAuthorizedUserPhone",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAuthorizedUserPhone($input: UpdateUSPersonAuthorizedUserPhoneInput!) {\n  updateUSPersonAuthorizedUserPhone(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "authorizedUserId": "{{authorizedUserId}}",
          "phoneNumber": {
            "label": "MOBILE",
            "countryCode": "1",
            "number": "1231231234"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Update Person Authorized User Phone",
      "description": "",
      "tags": [
        "authorized_users",
        "modification"
      ],
      "requires": [
        "authorizedUserId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716327",
    "updated_at": "2025-08-04T16:18:34.716327"
  },
  {
    "name": "UpdatePersonAuthorizedUserEmail",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAuthorizedUserEmail($input: UpdateUSPersonAuthorizedUserEmailInput!) {\n  updateUSPersonAuthorizedUserEmail(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      email\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "authorizedUserId": "{{authorizedUserId}}",
          "email": "test@test.com"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "authorized_users",
      "path": "Onboarding/Authorized Users/Update Person Authorized User Email",
      "description": "",
      "tags": [
        "authorized_users",
        "modification"
      ],
      "requires": [
        "authorizedUserId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716342",
    "updated_at": "2025-08-04T16:18:34.716343"
  },
  {
    "name": "GenerateTokenizeAccountHolderClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateTokenizeAccountHolderClientToken {\n  generateTokenizeAccountHolderClientToken {\n    ... on ClientToken {\n      expirationDate\n      usage\n      value\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "tokenization",
      "path": "Onboarding/Account Holders/Person Account Holders/Tokenization/Generate Tokenize Account Holder Client Token",
      "description": "",
      "tags": [
        "tokenization"
      ],
      "requires": [],
      "produces": [
        "generateTokenizeAccountHolderClientToken",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716365",
    "updated_at": "2025-08-04T16:18:34.716366"
  },
  {
    "name": "TokenizePersonAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation TokenizeUSPersonAccountHolder($input: CreateUSPersonAccountHolderInput!) {\n  tokenizeUSPersonAccountHolder(input: $input) {\n    ... on USPersonAccountHolderToken {\n      token\n    }\n  }\n}",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "some@email.com",
            "name": {
              "givenName": "John",
              "familyName": "Smith"
            },
            "billingAddress": {
              "streetAddress": "123 Test",
              "locality": "San Francisco",
              "region": "CA",
              "postalCode": "12345",
              "countryCodeAlpha3": "USA"
            },
            "dateOfBirth": "1969-01-01",
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "111-11-1111"
              }
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "tokenization",
      "path": "Onboarding/Account Holders/Person Account Holders/Tokenization/Tokenize Person Account Holder",
      "description": "",
      "tags": [
        "tokenization"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716389",
    "updated_at": "2025-08-04T16:18:34.716390"
  },
  {
    "name": "CreatePersonAccountHolderFromToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolderFromToken(\n\t$input:  CreateUSPersonAccountHolderFromTokenInput!\n) {\n\tcreateUSPersonAccountHolderFromToken(input: $input) {\n\t  __typename\n\t\t      ... on USPersonAccountHolder {\n        id\n\t\t\t\texternalId\n\t\t\t\tname {\n\t\t\t\t\tgivenName\n\t\t\t\t\tfamilyName\n\t\t\t\t}\t\t\n        createdAt\n        updatedAt\n      }\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t\t... on AccessDeniedError {\n\t\t\tmessage\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "token": "CLIENT_TOKEN"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "tokenization",
      "path": "Onboarding/Account Holders/Person Account Holders/Tokenization/Create Person Account Holder From Token",
      "description": "",
      "tags": [
        "tokenization",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716406",
    "updated_at": "2025-08-04T16:18:34.716406"
  },
  {
    "name": "CreatePersonAccountHolderForManualReview",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolderInManualReview(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "IN-REVIEW",
              "familyName": "IN-REVIEW"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Create Person Account Holder For Manual Review",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "socialSecurityNumber",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716442",
    "updated_at": "2025-08-04T16:18:34.716442"
  },
  {
    "name": "CreatePersonAccountHolderDenied",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolderForManualReview(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "IN-REVIEW",
              "familyName": "IN-REVIEW"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Create Person Account Holder Denied",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716472",
    "updated_at": "2025-08-04T16:18:34.716473"
  },
  {
    "name": "CreatePersonAccountHolderCardProductApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n      ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }  \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            region\n            countryCodeAlpha3\n            postalCode\n          }\n          currentVerification {\n            reason\n            status\n          }\n        }\n      }    \n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "cardProductId": "CARD_PRODUCT_ID",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "2023-01-01T23:59:59Z",
            "primaryAuthorizedPersonId": "ACCOUNT_HOLDER_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Create Person Account Holder Card Product Application",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "accountHolderCurrent",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716495",
    "updated_at": "2025-08-04T16:18:34.716496"
  },
  {
    "name": "StartDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Start Document Upload Session",
      "description": "",
      "tags": [
        "manual_review"
      ],
      "requires": [],
      "produces": [
        "constraints",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716511",
    "updated_at": "2025-08-04T16:18:34.716512"
  },
  {
    "name": "GenerateDocumentUploadClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Generate Document Upload Client Token",
      "description": "",
      "tags": [
        "manual_review"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716528",
    "updated_at": "2025-08-04T16:18:34.716528"
  },
  {
    "name": "CreateDocumentUploadLink",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Create Document Upload Link",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "constraints"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716543",
    "updated_at": "2025-08-04T16:18:34.716543"
  },
  {
    "name": "GetDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDocumentUploadSession($id: ID!) {\n  node(id: $id) {\n    ... on DocumentUploadSession {\n      id\n      createdAt\n      updatedAt\n      status\n      documents {\n        ... on DocumentUploadLink {\n          id\n          status\n          uploadUrl\n          documentType\n          documentCategoryType\n        }\n      }\n    }\n    ... on AccountHolderCardProductApplication {\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          currentVerification {\n            requiredDocuments {\n              documentUploadSession {\n                ... on USAccountHolderApplicationDocumentUploadSession {\n                  id\n                  status\n                  primaryDocumentTypes\n                  secondaryDocumentTypes\n                  supportingDocumentTypes\n                  uploadRequirements {\n                    constraints {\n                      ... on DocumentUploadRequirementConstraint {\n                        documentType\n                        numberOfDocuments\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on USBusinessAccountHolderSnapshot {\n          currentVerification {\n            requiredDocuments {\n              documentUploadSession {\n                ... on USAccountHolderApplicationDocumentUploadSession {\n                  id\n                  status\n                  primaryDocumentTypes\n                  secondaryDocumentTypes\n                  supportingDocumentTypes\n                  uploadRequirements {\n                    constraints {\n                      ... on DocumentUploadRequirementConstraint {\n                        documentType\n                        numberOfDocuments\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DOCUMENT_UPLOAD_SESSION_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Get Document Upload Session",
      "description": "",
      "tags": [
        "manual_review",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "accountHolderSnapshot",
        "currentVerification",
        "documentUploadSession",
        "constraints",
        "currentVerification"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716563",
    "updated_at": "2025-08-04T16:18:34.716564"
  },
  {
    "name": "GetDocumentUploadSessionsViaApplicationId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDocumentUploadSessionsViaApplicationID($id: ID!) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n        ...USBusinessAccountHolderSnapshot\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  currentVerification {\n    status\n    reason\n    results {\n      code\n      description\n    }\n    requiredDocuments {\n      \n      createdAt\n      referenceIdentifier\n      updatedAt\n      status\n          documentUploadSession {\n            ... on USAccountHolderApplicationDocumentUploadSession {\n              status\n              id\n              primaryDocumentTypes\n              recommendedDocumentTypes\n            }\n          }\n      uploadedDocuments {\n        ... on AccountHolderApplicationDocument {\n          status\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}\n\nfragment USBusinessAccountHolderSnapshot on USBusinessAccountHolderSnapshot {\n  __typename\n  primaryAuthorizedPerson {\n    currentVerification {\n      status\n      reason\n      requiredDocuments {\n        createdAt\n        referenceIdentifier\n        updatedAt\n        status\n          documentUploadSession {\n            ... on USAccountHolderApplicationDocumentUploadSession {\n              status\n              id\n              primaryDocumentTypes\n              recommendedDocumentTypes\n            }\n          }\n        uploadedDocuments {\n          ... on AccountHolderApplicationDocument {\n            status\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n  businessProfile {\n    currentVerification {\n      status\n      reason\n      requiredDocuments {\n        createdAt\n        referenceIdentifier\n        updatedAt\n        status\n          documentUploadSession {\n            ... on USAccountHolderApplicationDocumentUploadSession {\n              status\n              id\n              primaryDocumentTypes\n              recommendedDocumentTypes\n            }\n          }\n        uploadedDocuments {\n          ... on AccountHolderApplicationDocument {\n            status\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    ultimateBeneficialOwners {\n      currentVerification {\n        status\n        reason\n        requiredDocuments {\n          createdAt\n          referenceIdentifier\n          updatedAt\n          status\n          documentUploadSession {\n            ... on USAccountHolderApplicationDocumentUploadSession {\n              status\n              id\n              primaryDocumentTypes\n              recommendedDocumentTypes\n            }\n          }\n          uploadedDocuments {\n            ... on AccountHolderApplicationDocument {\n              status\n              type\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "ap_22bcgmd163cf291aaf43209bada5ac99d4f228"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Get Document Upload Sessions Via Application ID",
      "description": "",
      "tags": [
        "manual_review",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "currentVerification",
        "currentVerification",
        "currentVerification"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716594",
    "updated_at": "2025-08-04T16:18:34.716595"
  },
  {
    "name": "SimulateApplicationDocumentReview",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "ap_CARD_PRODUCT_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "du_DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Simulate Application Document Review",
      "description": "",
      "tags": [
        "manual_review",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716611",
    "updated_at": "2025-08-04T16:18:34.716611"
  },
  {
    "name": "SimulateCreateApplicationDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateCreateApplicationDocumentsUploadSessions($input: SimulateCreateApplicationDocumentsUploadSessionsInput!) {\n  simulateCreateApplicationDocumentsUploadSessions(input: $input) {\n    __typename\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n        __typename\n      }\n      __typename\n    }\n    ... on UserError {\n      errors {\n        description\n        code\n        path\n        __typename\n      }\n      __typename\n    }\n    ... on AccessDeniedError {\n      message\n      __typename\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "ap_CARD_PRODUCT_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "du_DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Simulate Create Application Document Upload Session",
      "description": "",
      "tags": [
        "manual_review",
        "creation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716632",
    "updated_at": "2025-08-04T16:18:34.716633"
  },
  {
    "name": "SimulateApplicationVerificationStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "ACCOUNT_HOLDER_ID",
          "applicationId": "APPLICATION_ID",
          "newVerificationStatus": "STATUS_ENUM_VALUE"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Simulate Application Verification Status Change",
      "description": "",
      "tags": [
        "manual_review",
        "simulation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716648",
    "updated_at": "2025-08-04T16:18:34.716648"
  },
  {
    "name": "SimulateApplicationStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM_VALUE"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Person Account Holders/Manual Review/Simulate Application Status Change",
      "description": "",
      "tags": [
        "manual_review",
        "simulation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716663",
    "updated_at": "2025-08-04T16:18:34.716664"
  },
  {
    "name": "ProvisionAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation provisionAccountHolder($input: ProvisionAccountHolderInput!) {\n\tprovisionAccountHolder(input: $input) {\n\t\t__typename\n\t\t... on AccountHolderProvisioning {\n\t\t\tid\n\t\t\tidempotencyKey\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\toutcome {\n\t\t\t\tstatus\n\t\t\t}\n\t\t\taccountHolder {\n\t\t\t\t... on USBusinessAccountHolder {\n\t\t\t\t\tid\n\t\t\t\t\tbusinessProfile {\n\t\t\t\t\t\tname {\n\t\t\t\t\t\t\tlegalBusinessName\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tnextAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tworkflowActions {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t\tactionInput {\n\t\t\t\t\tcreateAccountHolderCardProductApplicationInput {\n\t\t\t\t\t\tcardHolderAgreementConsent {\n\t\t\t\t\t\t\tconsentTimestamp\n\t\t\t\t\t\t\tprimaryAuthorizedPerson {\n\t\t\t\t\t\t\t\t... on USBusinessAuthorizedPerson {\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on USPersonAuthorizedUser {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tissueFinancialAccountForApplicationInput {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tissuePaymentCardForFinancialAccountInput {\n\t\t\t\t\t\toptions {\n\t\t\t\t\t\t\tactivateOnCreate\n\t\t\t\t\t\t\tcardProfileSet {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texpirationDate\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinitiateFinancialAccountCreditLimitUpdateFromProductFundingInput {\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\tdecimalPlaces\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmemo\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcome {\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t\texecutionOrder\n\t\t\t\tnode {\n\t\t\t\t\t... on UserError {\n\t\t\t\t\t\terrors {\n\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tapplicationState {\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FinancialAccount {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\t... on PaymentCard {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\t... on WorkflowActionResultOutcome {\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\tresult {\n\t\t\t\t\t\t\t... on WorkflowActionEmailNotificationResult {\n\t\t\t\t\t\t\t\tfrom\n\t\t\t\t\t\t\t\tto\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on WorkflowActionVisaPayableAutomationResult {\n\t\t\t\t\t\t\t\tbuyerIdentifier\n\t\t\t\t\t\t\t\tproxyPoolAccountIdentifier\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\terrorPath\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "accountHolderId": "{{personAccountHolderId}}",
          "actions": [
            "CREATE_APPLICATION",
            "ISSUE_FINANCIAL_ACCOUNT",
            "ISSUE_PAYMENT_CARD"
          ],
          "actionInput": {
            "createAccountHolderCardProductApplicationInput": {
              "cardProductId": "{{cardProductId}}",
              "cardHolderAgreementConsent": {
                "primaryAuthorizedPersonId": "{{personAccountHolderId}}",
                "consentTimestamp": "{{consentTimestamp}}"
              }
            },
            "issueFinancialAccountForApplicationInput": {
              "name": "Fianancial Account {{currentTimestampFormatted}}"
            },
            "issuePaymentCardForFinancialAccountInput": {
              "options": {
                "activateOnCreate": true,
                "expirationDate": "2026-01-01T23:59:59Z"
              }
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "provisioning",
      "path": "Onboarding/Account Holders/Person Account Holders/Provisioning/Provision Account Holder",
      "description": "",
      "tags": [
        "provisioning"
      ],
      "requires": [
        "personAccountHolderId",
        "cardProductId",
        "currentTimestampFormatted",
        "consentTimestamp"
      ],
      "produces": [
        "name",
        "createAccountHolderCardProductApplicationInput",
        "name",
        "options",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716707",
    "updated_at": "2025-08-04T16:18:34.716707"
  },
  {
    "name": "GetAccountHolderProvisioning",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderProvisioning($id: ID!) {\n\tnode(id: $id) {\n\t\t... on AccountHolderProvisioning {\n\t\t\tid\n\t\t\tidempotencyKey\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\toutcome {\n\t\t\t\tstatus\n\t\t\t}\n\t\t\taccountHolder {\n\t\t\t\t__typename\n                ... on USPersonAccountHolder {\n                    id\n                    name {\n                        givenName\n                        familyName\n                    }\n                }\n\t\t\t}\n\t\t\tcurrentAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tnextAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tworkflowActions {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t\tactionInput {\n\t\t\t\t\tcreateAccountHolderCardProductApplicationInput {\n\t\t\t\t\t\tcardHolderAgreementConsent {\n\t\t\t\t\t\t\tconsentTimestamp\n\t\t\t\t\t\t\tprimaryAuthorizedPerson {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on USPersonAuthorizedUser {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on USBusinessAuthorizedPerson {\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tissueFinancialAccountForApplicationInput {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tissuePaymentCardForFinancialAccountInput {\n\t\t\t\t\t\toptions {\n\t\t\t\t\t\t\tactivateOnCreate\n\t\t\t\t\t\t\tcardProfileSet {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texpirationDate\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinitiateFinancialAccountCreditLimitUpdateFromProductFundingInput {\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\tdecimalPlaces\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmemo\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcome {\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t\texecutionOrder\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\t... on UserError {\n\t\t\t\t\t\terrors {\n\t\t\t\t\t\t\terrorPath\n\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\tapplicationState {\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t}\n\t\t\t\t\t\taccountHolderSnapshot {\n                            ... on USPersonAccountHolderSnapshot {\n                                accountHolderCurrent {\n                                    __typename\n                                    id\n                                }\n                                name {\n                                    givenName\n                                    familyName\n                                }\n                            }\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FinancialAccount {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\texternalId\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\t... on PaymentCard {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\t... on WorkflowActionResultOutcome {\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\tresult {\n\t\t\t\t\t\t\t... on WorkflowActionEmailNotificationResult {\n\t\t\t\t\t\t\t\tfrom\n\t\t\t\t\t\t\t\tto\n\t\t\t\t\t\t\t\tdeliveredAt\n\t\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on WorkflowActionVisaPayableAutomationResult {\n\t\t\t\t\t\t\t\tbuyerIdentifier\n\t\t\t\t\t\t\t\tproxyPoolAccountIdentifier\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on InterFinancialAccountTransfer {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus1: status\n\t\t\t\t\t\tstatusReason\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\tdecimalPlaces\n\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "{{accountHolderProvisioningId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "provisioning",
      "path": "Onboarding/Account Holders/Person Account Holders/Provisioning/Get Account Holder Provisioning",
      "description": "",
      "tags": [
        "provisioning",
        "retrieval"
      ],
      "requires": [
        "accountHolderProvisioningId"
      ],
      "produces": [
        "createAccountHolderCardProductApplicationInput",
        "name",
        "options",
        "amount",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716740",
    "updated_at": "2025-08-04T16:18:34.716740"
  },
  {
    "name": "CreatePersonAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder($input: CreateUSPersonAccountHolderInput!) {\n    createUSPersonAccountHolder(input: $input) {\n        ... on USPersonAccountHolder {\n            id\n            externalId\n        }\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tcode\n\t\t\t\tpath\n\t\t\t}\n\t\t}\n    }\n}",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "TS",
              "familyName": "Spotlight"
            },
            "email": "test@email.com",
            "dateOfBirth": "1976-03-30",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "San Francisco",
              "postalCode": "12345",
              "streetAddress": "123 Test St"
            },
            "phoneNumber": {
              "label": "MOBILE",
              "countryCode": "1",
              "number": "123-123-1234"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "person_account_holders",
      "path": "Onboarding/Account Holders/Person Account Holders/Create Person Account Holder",
      "description": "",
      "tags": [
        "person_account_holders",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716804",
    "updated_at": "2025-08-04T16:18:34.716805"
  },
  {
    "name": "GetPersonAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSPersonAccountHolder(\n  $id: ID!\n) {\n   node(id: $id){\n    ...on USPersonAccountHolder {\n      id\n      billingAddress {\n        streetAddress\n        postalCode\n        locality\n        region\n        countryCodeAlpha3\n      }\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n      name {\n        givenName\n        middleName\n        familyName\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{personAccountHolderId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "person_account_holders",
      "path": "Onboarding/Account Holders/Person Account Holders/Get Person Account Holder",
      "description": "",
      "tags": [
        "person_account_holders",
        "retrieval"
      ],
      "requires": [
        "personAccountHolderId"
      ],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716820",
    "updated_at": "2025-08-04T16:18:34.716820"
  },
  {
    "name": "UpdatePersonAccountHolderBillingAddress",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSPersonAccountHolderBillingAddress($input: UpdateUSPersonAccountHolderBillingAddressInput!) {\n  updateUSPersonAccountHolderBillingAddress(input: $input) {\n    ... on USPersonAccountHolder {\n      id\n      billingAddress {\n        streetAddress\n      }\n      name {\n        givenName\n        familyName\n      }\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{personAccountHolderId}}",
          "billingAddress": {
            "streetAddress": "123 Manual Review St.",
            "postalCode": "77777",
            "locality": "Seatlle",
            "region": "WA",
            "countryCodeAlpha3": "USA"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "person_account_holders",
      "path": "Onboarding/Account Holders/Person Account Holders/Update Person Account Holder Billing Address",
      "description": "",
      "tags": [
        "person_account_holders",
        "modification"
      ],
      "requires": [
        "personAccountHolderId"
      ],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716841",
    "updated_at": "2025-08-04T16:18:34.716842"
  },
  {
    "name": "GetPersonAccountHolderCardProductApplications",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSPersonAccountHolderCardProductApplications (\n  $id: ID!\n) {\n  node(id: $id){\n    ...on USPersonAccountHolder {\n      id\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n            cardProduct {\n              id\n              name\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "US_PERSON_ACCOUNT_HOLDER_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "person_account_holders",
      "path": "Onboarding/Account Holders/Person Account Holders/Get Person Account Holder Card Product Applications",
      "description": "",
      "tags": [
        "person_account_holders",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716857",
    "updated_at": "2025-08-04T16:18:34.716858"
  },
  {
    "name": "CreatePersonAccountHolderApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "yyyy-MM-ddTHH:mm:ss.kkkZ",
            "primaryAuthorizedPersonId": "ACCOUNT_HOLDER_ID"
          },
          "cardProductId": "CARD_PRODUCT_ID",
          "ipAddress": {
            "v4": "CLIENT_IP_ADDRESS"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "person_account_holders",
      "path": "Onboarding/Account Holders/Person Account Holders/Create Person Account Holder Application",
      "description": "",
      "tags": [
        "person_account_holders",
        "creation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716875",
    "updated_at": "2025-08-04T16:18:34.716876"
  },
  {
    "name": "CreateBusinessAccountHolderInReview",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSBusiniessAccountHolderInReview($input: CreateUSBusinessAccountHolderInput!) {\n  createUSBusinessAccountHolder(input: $input) {\n    __typename\n      ... on USBusinessAccountHolder {\n      id\n      externalId\n\t    primaryAuthorizedPerson {\n\t    \tid\n\t    }\n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "primaryAuthorizedPerson": {
            "name": {
              "givenName": "Ian",
              "familyName": "Somnia"
            },
            "email": "irev@email.com",
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "homeAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1112",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1970-12-12",
            "percentageOwnership": 25,
            "authorizingPersonTitle": "PRESIDENT"
          },
          "businessProfile": {
            "name": {
              "legalBusinessName": "Test",
              "doingBusinessAsName": "Test"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "95111",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "employerIdentificationNumber": {
                "number": "11-1111112",
                "countryCodeAlpha3": "USA"
              }
            },
            "website": "https://www.foowebsite.com",
            "businessType": "PARTNERSHIP",
            "businessCreditRiskAttributes": {
              "annualRevenue": {
                "value": "1000000000",
                "currencyCode": "USD"
              }
            },
            "ultimateBeneficialOwners": [
              {
                "email": "foobo@example.com",
                "name": {
                  "givenName": "Ian",
                  "familyName": "Somnia"
                },
                "homeAddress": {
                  "streetAddress": "123 Manual Review St.",
                  "postalCode": "60654",
                  "locality": "Chicago",
                  "region": "IL",
                  "countryCodeAlpha3": "USA"
                },
                "phoneNumber": {
                  "countryCode": "1",
                  "number": "5555555555",
                  "label": "MOBILE",
                  "extension": "312"
                },
                "identificationDocument": {
                  "socialSecurityNumber": {
                    "number": "111-11-1112",
                    "countryCodeAlpha3": "USA"
                  }
                },
                "dateOfBirth": "1980-09-01",
                "percentageOwnership": 75
              }
            ]
          },
          "externalId": "user-id-in-your-system"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Create Business Account Holder In Review",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716943",
    "updated_at": "2025-08-04T16:18:34.716944"
  },
  {
    "name": "CreateBusinessAccountHolderApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSBusinessAccountHolderCardProductApplication(\n  $input: CreateAccountHolderCardProductApplicationInput!\n) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "cardProductId": "{{cardProductId}}",
          "cardHolderAgreementConsent": {
            "primaryAuthorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "consentTimestamp": "2023-12-12T17:10:55.662Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Create Business Account Holder Application",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [
        "businessAccountHolderPrimaryAuthorizedPersonId",
        "businessAccountHolderId",
        "cardProductId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.716964",
    "updated_at": "2025-08-04T16:18:34.716964"
  },
  {
    "name": "StartDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Start Document Upload Session",
      "description": "",
      "tags": [
        "manual_review"
      ],
      "requires": [],
      "produces": [
        "constraints",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717011",
    "updated_at": "2025-08-04T16:18:34.717013"
  },
  {
    "name": "GenerateDocumentUploadClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Generate Document Upload Client Token",
      "description": "",
      "tags": [
        "manual_review"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717034",
    "updated_at": "2025-08-04T16:18:34.717035"
  },
  {
    "name": "CreateDocumentUploadLink",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Create Document Upload Link",
      "description": "",
      "tags": [
        "manual_review",
        "creation"
      ],
      "requires": [],
      "produces": [
        "uploadRequirements",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717063",
    "updated_at": "2025-08-04T16:18:34.717064"
  },
  {
    "name": "GetDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDocumentUploadSession($id: ID!) {\n  node(id: $id) {\n    ... on DocumentUploadSession {\n      id\n      createdAt\n      updatedAt\n      status\n      documents {\n        ... on DocumentUploadLink {\n          id\n          status\n          uploadUrl\n          documentType\n          documentCategoryType\n        }\n      }\n    }\n    ... on AccountHolderCardProductApplication {\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          currentVerification {\n            requiredDocuments {\n              documentUploadSession {\n                ... on USAccountHolderApplicationDocumentUploadSession {\n                  id\n                  status\n                  primaryDocumentTypes\n                  secondaryDocumentTypes\n                  supportingDocumentTypes\n                  uploadRequirements {\n                    constraints {\n                      ... on DocumentUploadRequirementConstraint {\n                        documentType\n                        numberOfDocuments\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on USBusinessAccountHolderSnapshot {\n          currentVerification {\n            requiredDocuments {\n              documentUploadSession {\n                ... on USAccountHolderApplicationDocumentUploadSession {\n                  id\n                  status\n                  primaryDocumentTypes\n                  secondaryDocumentTypes\n                  supportingDocumentTypes\n                  uploadRequirements {\n                    constraints {\n                      ... on DocumentUploadRequirementConstraint {\n                        documentType\n                        numberOfDocuments\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DOCUMENT_UPLOAD_SESSION_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Get Document Upload Session",
      "description": "",
      "tags": [
        "manual_review",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "accountHolderSnapshot",
        "currentVerification",
        "documentUploadSession",
        "constraints",
        "currentVerification"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717086",
    "updated_at": "2025-08-04T16:18:34.717086"
  },
  {
    "name": "GetDocumentUploadSessionsViaApplicationId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetApplicationDocumentUploadSessions($id: ID!) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USBusinessAccountHolderSnapshot\n      }\n    }\n  }\n}\n\nfragment CurrentVerificationFragment on AccountHolderVerification {\n  status\n  reason\n  requiredDocuments {\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        recommendedDocumentTypes\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USBusinessAccountHolderSnapshot on USBusinessAccountHolderSnapshot {\n  __typename\n  primaryAuthorizedPerson {\n    currentVerification {\n      ...CurrentVerificationFragment\n    }\n  }\n  businessProfile {\n    currentVerification {\n      ...CurrentVerificationFragment\n    }\n    ultimateBeneficialOwners {\n      currentVerification {\n        ...CurrentVerificationFragment\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderApplicationId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Get Document Upload Sessions Via Application ID",
      "description": "",
      "tags": [
        "manual_review",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderApplicationId"
      ],
      "produces": [
        "currentVerification",
        "currentVerification",
        "currentVerification"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717106",
    "updated_at": "2025-08-04T16:18:34.717107"
  },
  {
    "name": "SimulateApplicationDocumentReview",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "ap_CARD_PRODUCT_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "du_DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Simulate Application Document Review",
      "description": "",
      "tags": [
        "manual_review",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717123",
    "updated_at": "2025-08-04T16:18:34.717123"
  },
  {
    "name": "SimulateApplicationVerificationStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "ACCOUNT_HOLDER_ID",
          "applicationId": "APPLICATION_ID",
          "newVerificationStatus": "STATUS_ENUM_VALUE"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Simulate Application Verification Status Change",
      "description": "",
      "tags": [
        "manual_review",
        "simulation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717140",
    "updated_at": "2025-08-04T16:18:34.717141"
  },
  {
    "name": "SimulateApplicationStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM_VALUE"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/Simulate Application Status Change",
      "description": "",
      "tags": [
        "manual_review",
        "simulation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717155",
    "updated_at": "2025-08-04T16:18:34.717155"
  },
  {
    "name": "EndDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    ... on DocumentUploadSession {\n      status\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "du_22aspapb4a99093be484d9ca2207546bc1129e9"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "manual_review",
      "path": "Onboarding/Account Holders/Business Account Holders/Manual Review/End Document Upload Session",
      "description": "",
      "tags": [
        "manual_review"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717169",
    "updated_at": "2025-08-04T16:18:34.717170"
  },
  {
    "name": "CreateBusinessAccountHolderFromToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSBusinessAccountHolderFromToken(\n\t$input:  CreateUSBusinessAccountHolderFromTokenInput!\n) {\n\tcreateUSBusinessAccountHolderFromToken(input: $input) {\n\t  __typename\n\t\t      ... on USBusinessAccountHolder {\n        externalId\n        id\n        createdAt\n        updatedAt\n        primaryAuthorizedPerson {\n          id\n          email\n          dateOfBirth\n          percentageOwnership\n          authorizingPersonTitle\n          createdAt\n          updatedAt\n          name {\n            givenName\n            familyName\n            title\n            suffix\n            middleName\n          }\n          homeAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          identificationDocument {\n            socialSecurityNumber {\n              numberHash\n              countryCodeAlpha3\n            }\n          }\n        }\n        businessProfile {\n          id\n          website\n          businessType\n          createdAt\n          updatedAt\n          name {\n            legalBusinessName\n            doingBusinessAsName\n          }\n          billingAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          identificationDocument {\n            employerIdentificationNumber {\n              numberHash\n              countryCodeAlpha3\n            }\n          }\n          ultimateBeneficialOwners {\n            id\n            percentageOwnership\n            dateOfBirth\n            email\n            createdAt\n            updatedAt\n            name {\n              givenName\n              familyName\n              title\n              suffix\n              middleName\n            }\n            homeAddress {\n              streetAddress\n              extendedAddress\n              postalCode\n              region\n              locality\n              countryCodeAlpha3\n            }\n            phoneNumbers {\n              countryCode\n              number\n              label\n            }\n            identificationDocument {\n              socialSecurityNumber {\n                numberHash\n                countryCodeAlpha3\n              }\n            }\n          }\n        }\n      }\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t\t... on AccessDeniedError {\n\t\t\tmessage\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "token": "CLIENT_TOKEN"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "tokenization",
      "path": "Onboarding/Account Holders/Business Account Holders/Tokenization/Create Business Account Holder From Token",
      "description": "",
      "tags": [
        "tokenization",
        "creation"
      ],
      "requires": [],
      "produces": [
        "socialSecurityNumber",
        "employerIdentificationNumber",
        "socialSecurityNumber",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717205",
    "updated_at": "2025-08-04T16:18:34.717205"
  },
  {
    "name": "GenerateTokenizeAccountHolderClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateTokenizeAccountHolderClientToken {\n  generateTokenizeAccountHolderClientToken {\n    ... on ClientToken {\n      expirationDate\n      usage\n      value\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "tokenization",
      "path": "Onboarding/Account Holders/Business Account Holders/Tokenization/Generate Tokenize Account Holder Client Token",
      "description": "",
      "tags": [
        "tokenization"
      ],
      "requires": [],
      "produces": [
        "generateTokenizeAccountHolderClientToken",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717218",
    "updated_at": "2025-08-04T16:18:34.717218"
  },
  {
    "name": "TokenizeBusinessAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation TokenizeUSBusinessAccountHolder($input: CreateUSBusinessAccountHolderInput) {\n\ttokenizeUSBusinessAccountHolder(input: $input) {\n\t\t... on USBusinessAccountHolderToken {\n\t\t\ttoken\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t\t... on AccessDeniedError {\n\t\t\tmessage\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "externalId": "bluejay",
          "primaryAuthorizedPerson": {
            "name": {
              "givenName": "Ian",
              "familyName": "Somnia"
            },
            "email": "foo@example.com",
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "homeAddress": {
              "streetAddress": "123 Main Street",
              "postalCode": "95121",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-67-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-09-01",
            "authorizingPersonTitle": "PRESIDENT"
          },
          "businessProfile": {
            "name": {
              "legalBusinessName": "MyTest",
              "doingBusinessAsName": "BlueJay Inc"
            },
            "billingAddress": {
              "streetAddress": "123 Main Street",
              "postalCode": "95121",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "employerIdentificationNumber": {
                "number": "11-2343256",
                "countryCodeAlpha3": "USA"
              }
            },
            "website": "http://www.foowebsite.com",
            "businessType": "SOLE_PROPRIETORSHIP",
            "ultimateBeneficialOwners": [
              {
                "name": {
                  "givenName": "James",
                  "familyName": "Smith"
                },
                "email": "james@example.com",
                "phoneNumber": {
                  "countryCode": "1",
                  "number": "5555555555",
                  "label": "MOBILE",
                  "extension": "312"
                },
                "homeAddress": {
                  "streetAddress": "123 Main Street",
                  "postalCode": "95121",
                  "locality": "San Jose",
                  "region": "CA",
                  "countryCodeAlpha3": "USA"
                },
                "identificationDocument": {
                  "socialSecurityNumber": {
                    "number": "111-67-1325",
                    "countryCodeAlpha3": "USA"
                  }
                },
                "dateOfBirth": "1982-09-01",
                "percentageOwnership": 25
              }
            ]
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "tokenization",
      "path": "Onboarding/Account Holders/Business Account Holders/Tokenization/Tokenize Business Account Holder",
      "description": "",
      "tags": [
        "tokenization"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717274",
    "updated_at": "2025-08-04T16:18:34.717275"
  },
  {
    "name": "ProvisionAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation provisionAccountHolder($input: ProvisionAccountHolderInput!) {\n  provisionAccountHolder(input: $input) {\n    __typename\n    ... on AccountHolderProvisioning {\n      id\n      idempotencyKey\n      createdAt\n      updatedAt\n      outcome {\n        status\n      }\n      accountHolder {\n        ... on USBusinessAccountHolder {\n          id\n          businessProfile {\n            name {\n              legalBusinessName\n            }\n          }\n        }\n      }\n      currentAction {\n        id\n        action\n      }\n      nextAction {\n        id\n        action\n      }\n      workflowActions {\n        id\n        action\n        actionInput {\n          createAccountHolderCardProductApplicationInput {\n            cardHolderAgreementConsent {\n              consentTimestamp\n              primaryAuthorizedPerson {\n                ... on USBusinessAuthorizedPerson {\n                  name {\n                    familyName\n                  }\n                  id\n                }\n                ... on USPersonAuthorizedUser {\n                  id\n                  name {\n                    familyName\n                  }\n                }\n              }\n            }\n          }\n          issueFinancialAccountForApplicationInput {\n            name\n          }\n          issuePaymentCardForFinancialAccountInput {\n            options {\n              activateOnCreate\n              cardProfileSet {\n                id\n                description\n              }\n              expirationDate\n            }\n          }\n          initiateFinancialAccountCreditLimitUpdateFromProductFundingInput {\n            amount {\n              currencyCode\n              value\n              decimalPlaces\n            }\n            memo\n          }\n        }\n        outcome {\n          status\n        }\n        executionOrder\n        node {\n          ... on UserError {\n            errors {\n              path\n              code\n              description\n            }\n          }\n          ... on AccountHolderCardProductApplication {\n            id\n            applicationState {\n              status\n            }\n          }\n          ... on FinancialAccount {\n            id\n            name\n          }\n          ... on PaymentCard {\n            id\n            status\n          }\n          ... on WorkflowActionResultOutcome {\n            createdAt\n            updatedAt\n            result {\n              ... on WorkflowActionEmailNotificationResult {\n                from\n                to\n              }\n              ... on WorkflowActionVisaPayableAutomationResult {\n                buyerIdentifier\n                proxyPoolAccountIdentifier\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "accountHolderId": "{{businessAccountHolderId}}",
          "actions": [
            "ISSUE_FINANCIAL_ACCOUNT",
            "ISSUE_PAYMENT_CARD"
          ],
          "actionInput": {
            "issueFinancialAccountForApplicationInput": {
              "name": "Fianancial Account {{currentTimestampFormatted}}"
            },
            "issuePaymentCardForFinancialAccountInput": {
              "options": {
                "activateOnCreate": true,
                "expirationDate": "2028-01-01T23:59:59Z"
              }
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "provisioning",
      "path": "Onboarding/Account Holders/Business Account Holders/Provisioning/Provision Account Holder",
      "description": "",
      "tags": [
        "provisioning"
      ],
      "requires": [
        "businessAccountHolderId",
        "currentTimestampFormatted"
      ],
      "produces": [
        "name",
        "createAccountHolderCardProductApplicationInput",
        "name",
        "options",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717320",
    "updated_at": "2025-08-04T16:18:34.717321"
  },
  {
    "name": "GetAccountHolderProvisioning",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderProvisioning($id: ID!) {\n\tnode(id: $id) {\n\t\t... on AccountHolderProvisioning {\n\t\t\tid\n\t\t\tidempotencyKey\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\toutcome {\n\t\t\t\tstatus\n\t\t\t}\n\t\t\taccountHolder {\n\t\t\t\t__typename\n\t\t\t\t... on USBusinessAccountHolder {\n\t\t\t\t\tid\n\t\t\t\t\tbusinessProfile {\n\t\t\t\t\t\tname {\n\t\t\t\t\t\t\tlegalBusinessName\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tnextAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tworkflowActions {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t\tactionInput {\n\t\t\t\t\tcreateAccountHolderCardProductApplicationInput {\n\t\t\t\t\t\tcardHolderAgreementConsent {\n\t\t\t\t\t\t\tconsentTimestamp\n\t\t\t\t\t\t\tprimaryAuthorizedPerson {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on USPersonAuthorizedUser {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on USBusinessAuthorizedPerson {\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tissueFinancialAccountForApplicationInput {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tissuePaymentCardForFinancialAccountInput {\n\t\t\t\t\t\toptions {\n\t\t\t\t\t\t\tactivateOnCreate\n\t\t\t\t\t\t\tcardProfileSet {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texpirationDate\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tinitiateFinancialAccountCreditLimitUpdateFromProductFundingInput {\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\tdecimalPlaces\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmemo\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcome {\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t\texecutionOrder\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\t... on UserError {\n\t\t\t\t\t\terrors {\n\t\t\t\t\t\t\terrorPath\n\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\tapplicationState {\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t}\n\t\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t\t... on USBusinessAccountHolderSnapshot {\n\t\t\t\t\t\t\t\taccountHolderCurrent {\n\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbusinessProfile {\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tlegalBusinessName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FinancialAccount {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\texternalId\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\t... on PaymentCard {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\t... on WorkflowActionResultOutcome {\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\tresult {\n\t\t\t\t\t\t\t... on WorkflowActionEmailNotificationResult {\n\t\t\t\t\t\t\t\tfrom\n\t\t\t\t\t\t\t\tto\n\t\t\t\t\t\t\t\tdeliveredAt\n\t\t\t\t\t\t\t\tprovider\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t... on WorkflowActionVisaPayableAutomationResult {\n\t\t\t\t\t\t\t\tbuyerIdentifier\n\t\t\t\t\t\t\t\tproxyPoolAccountIdentifier\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on InterFinancialAccountTransfer {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus1: status\n\t\t\t\t\t\tstatusReason\n\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\tdecimalPlaces\n\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "{{accountHolderProvisioningId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "provisioning",
      "path": "Onboarding/Account Holders/Business Account Holders/Provisioning/Get Account Holder Provisioning",
      "description": "",
      "tags": [
        "provisioning",
        "retrieval"
      ],
      "requires": [
        "accountHolderProvisioningId"
      ],
      "produces": [
        "name",
        "createAccountHolderCardProductApplicationInput",
        "name",
        "options",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717356",
    "updated_at": "2025-08-04T16:18:34.717357"
  },
  {
    "name": "GetCardProductApplicationRequestedIdentityUpdates",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderCardProductApplicationRequestedUpdates($id: ID!) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }\n      accountHolderSnapshot {\n        ... on USBusinessAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          primaryAuthorizedPerson {\n            currentVerification {\n              status\n              reason\n              results {\n                code\n              }\n              requestedUpdates {\n                ... on RequestedIdentityUpdate {\n                  id\n                  status\n                  referredBy {\n                    __typename\n                    ... on Node {\n                        id\n                    }\n                  }\n                  requestedFor {\n                    __typename\n                    ... on Node {\n                        id\n                    }\n                  }\n                  changesRequested\n                  createdAt\n                  updatedAt\n                  appliedUpdates {\n                    ... on RequestedIdentityAppliedUpdate {\n                      appliedChanges\n                      requestedChange {\n                        __typename\n                        ... on Node {\n                            id\n                        }\n                      }\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n            }\n          }\n          businessProfile {\n            name {\n              legalBusinessName\n              doingBusinessAsName\n            }\n            updatedAt\n            createdAt\n            ultimateBeneficialOwners {\n                currentVerification {\n                status\n                reason\n                results {\n                  code\n                }\n                requestedUpdates {\n                  ... on RequestedIdentityUpdate {\n                    id\n                    status\n                    referredBy {\n                      __typename\n                      ... on Node {\n                          id\n                      }\n                    }\n                    requestedFor {\n                      __typename\n                      ... on Node {\n                          id\n                      }\n                    }\n                    changesRequested\n                    createdAt\n                    appliedUpdates {\n                      ... on RequestedIdentityAppliedUpdate {\n                        appliedChanges\n                        requestedChange {\n                          __typename\n                          ... on Node {\n                              id\n                          }\n                        }\n                        createdAt\n                        updatedAt\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            currentVerification {\n              status\n              reason\n              results {\n                code\n              }\n              requestedUpdates {\n                ... on RequestedIdentityUpdate {\n                  id\n                  status\n                  referredBy {\n                    __typename\n                    ... on Node {\n                        id\n                    }\n                  }\n                  requestedFor {\n                    __typename\n                    ... on Node {\n                        id\n                    }\n                  }\n                  changesRequested\n                  createdAt\n                  appliedUpdates {\n                    ... on RequestedIdentityAppliedUpdate {\n                      appliedChanges\n                      requestedChange {\n                        __typename\n                        ... on Node {\n                            id\n                        }\n                      }\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}",
      "variables": {
        "id": "{{businessAccountHolderApplicationId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "requested_identity_updates",
      "path": "Onboarding/Account Holders/Business Account Holders/Requested Identity Updates/Get Card Product Application Requested Identity Updates",
      "description": "",
      "tags": [
        "requested_identity_updates",
        "modification",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderApplicationId"
      ],
      "produces": [
        "accountHolderCurrent",
        "currentVerification",
        "name",
        "currentVerification"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717422",
    "updated_at": "2025-08-04T16:18:34.717422"
  },
  {
    "name": "InitiateBusinessProfileRequestedIdentityUpdate",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateUSBusinessProfileRequestedIdentityUpdate(\n  $input: InitiateUSBusinessProfileRequestedIdentityUpdateInput!\n) {\n  initiateUSBusinessProfileRequestedIdentityUpdate(input: $input) {\n    ... on RequestedIdentityUpdate {\n      id\n      status\n      referredBy {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      requestedFor {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      changesRequested\n      createdAt\n      updatedAt\n      appliedUpdates {\n        ... on RequestedIdentityAppliedUpdate {\n          appliedChanges\n          requestedChange {\n            __typename\n            ... on USBusinessProfile {\n              id\n              identificationDocument {\n                employerIdentificationNumber {\n                  countryCodeAlpha3\n                  numberHash\n                }\n              }\n              name {\n                legalBusinessName\n              }\n            }\n            ... on Node {\n                id\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "requestedIdentityUpdateId": "idtus_223a50102543004bd5b25c6a88cf076cd8",
          "businessProfile": {
            "billingAddress": {
              "streetAddress": "123 Test St",
              "extendedAddress": "",
              "locality": "San Francisco",
              "region": "CA",
              "postalCode": "12345",
              "countryCodeAlpha3": "USA"
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "requested_identity_updates",
      "path": "Onboarding/Account Holders/Business Account Holders/Requested Identity Updates/Initiate Business Profile Requested Identity Update",
      "description": "",
      "tags": [
        "requested_identity_updates",
        "modification"
      ],
      "requires": [],
      "produces": [
        "employerIdentificationNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717452",
    "updated_at": "2025-08-04T16:18:34.717452"
  },
  {
    "name": "InitiatePrimaryAuthorizedPersonRequestedIdentityUpdate",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateUSBusinessProfileRequestedIdentityUpdate(\n  $input: InitiateUSBusinessProfileRequestedIdentityUpdateInput!\n) {\n  initiateUSBusinessProfileRequestedIdentityUpdate(input: $input) {\n    ... on RequestedIdentityUpdate {\n      id\n      status\n      referredBy {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      requestedFor {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      changesRequested\n      createdAt\n      updatedAt\n      appliedUpdates {\n        ... on RequestedIdentityAppliedUpdate {\n          appliedChanges\n          requestedChange {\n            __typename\n            ... on USBusinessProfile {\n              id\n              identificationDocument {\n                employerIdentificationNumber {\n                  countryCodeAlpha3\n                  numberHash\n                }\n              }\n              name {\n                legalBusinessName\n              }\n            }\n            ... on Node {\n                id\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "requestedIdentityUpdateId": "idtus_22fe052850212b4ff19a80f641fd95222e",
          "primaryAuthorizedPerson": {
            "billingAddress": {
              "streetAddress": "123 Test St",
              "extendedAddress": "",
              "locality": "San Francisco",
              "region": "CA",
              "postalCode": "12345"
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "requested_identity_updates",
      "path": "Onboarding/Account Holders/Business Account Holders/Requested Identity Updates/Initiate Primary Authorized Person Requested Identity Update",
      "description": "",
      "tags": [
        "requested_identity_updates",
        "modification"
      ],
      "requires": [],
      "produces": [
        "employerIdentificationNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717482",
    "updated_at": "2025-08-04T16:18:34.717483"
  },
  {
    "name": "InitiateUltimateBeneficialOwnerRequestedIdentityUpdate",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation initiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdate(\n  $input: InitiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdateInput!\n) {\n  initiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdate(input: $input) {\n    ... on RequestedIdentityUpdate {\n      id\n      status\n      referredBy {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      requestedFor {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      changesRequested\n      createdAt\n      updatedAt\n      appliedUpdates {\n        ... on RequestedIdentityAppliedUpdate {\n          appliedChanges\n          requestedChange {\n            __typename\n            ... on USBusinessProfile {\n              id\n              identificationDocument {\n                employerIdentificationNumber {\n                  countryCodeAlpha3\n                  numberHash\n                }\n              }\n              name {\n                legalBusinessName\n              }\n            }\n            ... on Node {\n                id\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "requestedIdentityUpdateId": "idtus_2217580659d908491aaaef40e80686c2a4",
          "ultimateBeneficialOwner": {
            "name": {
              "givenName": "John"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "123-12-1234",
                "countryCodeAlpha3": "USA"
              }
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "requested_identity_updates",
      "path": "Onboarding/Account Holders/Business Account Holders/Requested Identity Updates/Initiate Ultimate Beneficial Owner Requested Identity Update",
      "description": "",
      "tags": [
        "requested_identity_updates",
        "modification"
      ],
      "requires": [],
      "produces": [
        "employerIdentificationNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717509",
    "updated_at": "2025-08-04T16:18:34.717510"
  },
  {
    "name": "ConfirmRequestedIdentityUpdate",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ConfirmRequestedIdentityUpdate($input: ConfirmRequestedIdentityUpdateInput!) {\n  confirmRequestedIdentityUpdate(input: $input) {\n    ... on RequestedIdentityUpdate {\n      id\n      status\n      referredBy {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      requestedFor {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      changesRequested\n      createdAt\n      updatedAt\n      appliedUpdates {\n        ... on RequestedIdentityAppliedUpdate {\n          appliedChanges\n          requestedChange {\n            __typename\n            ... on USBusinessProfile {\n              id\n              identificationDocument {\n                employerIdentificationNumber {\n                  countryCodeAlpha3\n                  numberHash\n                }\n              }\n              name {\n                legalBusinessName\n              }\n            }\n            ... on Node {\n                id\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "idtus_22a24ae6d48d664185909843ad24bae8d4"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "requested_identity_updates",
      "path": "Onboarding/Account Holders/Business Account Holders/Requested Identity Updates/Confirm Requested Identity Update",
      "description": "",
      "tags": [
        "requested_identity_updates",
        "modification"
      ],
      "requires": [],
      "produces": [
        "employerIdentificationNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717538",
    "updated_at": "2025-08-04T16:18:34.717538"
  },
  {
    "name": "CancelRequestedIdentityUpdate",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CancelRequestedIdentityUpdate($input: CancelRequestedIdentityUpdateInput!) {\n  cancelRequestedIdentityUpdate(input: $input) {\n    ... on RequestedIdentityUpdate {\n      id\n      status\n      referredBy {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      requestedFor {\n        __typename\n        ... on Node {\n            id\n        }\n      }\n      changesRequested\n      createdAt\n      updatedAt\n      appliedUpdates {\n        ... on RequestedIdentityAppliedUpdate {\n          appliedChanges\n          requestedChange {\n            __typename\n            ... on USBusinessProfile {\n              id\n              identificationDocument {\n                employerIdentificationNumber {\n                  countryCodeAlpha3\n                  numberHash\n                }\n              }\n              name {\n                legalBusinessName\n              }\n            }\n            ... on Node {\n                id\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "idtus_2207480659d908491aaaef40e80685e9e3"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "requested_identity_updates",
      "path": "Onboarding/Account Holders/Business Account Holders/Requested Identity Updates/Cancel Requested Identity Update",
      "description": "",
      "tags": [
        "requested_identity_updates",
        "modification"
      ],
      "requires": [],
      "produces": [
        "employerIdentificationNumber"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717566",
    "updated_at": "2025-08-04T16:18:34.717567"
  },
  {
    "name": "CreateBusinessAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSBusiniessAccountHolder($input: CreateUSBusinessAccountHolderInput!) {\n  createUSBusinessAccountHolder(input: $input) {\n    __typename\n    ... on USBusinessAccountHolder {\n      id\n      externalId\n\t\t\tprimaryAuthorizedPerson {\n\t\t\t\tid\n\t\t\t}\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "primaryAuthorizedPerson": {
            "name": {
              "givenName": "Ian",
              "familyName": "Provision"
            },
            "email": "foo@example.com",
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "homeAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-09-01",
            "percentageOwnership": 25,
            "authorizingPersonTitle": "PRESIDENT"
          },
          "businessProfile": {
            "name": {
              "legalBusinessName": "The World's Best Ice Cream",
              "doingBusinessAsName": "TWBIC"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "billingAddress": {
              "streetAddress": "123 Decline St.",
              "postalCode": "66666",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "employerIdentificationNumber": {
                "number": "11-1111111",
                "countryCodeAlpha3": "USA"
              }
            },
            "website": "https://www.foowebsite.com",
            "businessType": "PARTNERSHIP",
            "ultimateBeneficialOwners": [
              {
                "email": "foobo@example.com",
                "name": {
                  "givenName": "Scott",
                  "familyName": "Someone"
                },
                "homeAddress": {
                  "streetAddress": "123 Main Street",
                  "postalCode": "60654",
                  "locality": "Chicago",
                  "region": "IL",
                  "countryCodeAlpha3": "USA"
                },
                "phoneNumber": {
                  "countryCode": "1",
                  "number": "5555555555",
                  "label": "MOBILE",
                  "extension": "312"
                },
                "identificationDocument": {
                  "socialSecurityNumber": {
                    "number": "111-11-1111",
                    "countryCodeAlpha3": "USA"
                  }
                },
                "dateOfBirth": "1980-09-01",
                "percentageOwnership": 75
              }
            ]
          },
          "externalId": "user-id-in-your-system"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "business_account_holders",
      "path": "Onboarding/Account Holders/Business Account Holders/Create Business Account Holder",
      "description": "",
      "tags": [
        "business_account_holders",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717626",
    "updated_at": "2025-08-04T16:18:34.717626"
  },
  {
    "name": "GetBusinessAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "  query GetUSBusinessAccountHolder($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on USBusinessAccountHolder {\n      __typename\n      id\n      businessProfile {\n        businessType\n        name {\n          doingBusinessAsName\n          legalBusinessName\n        }\n        billingAddress {\n          streetAddress\n          postalCode\n        }\n      }\n      primaryAuthorizedPerson {\n        id\n        name {\n          givenName\n          middleName\n          familyName\n        }\n        authorizingPersonTitle\n        homeAddress {\n          streetAddress\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{businessAccountHolderId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "business_account_holders",
      "path": "Onboarding/Account Holders/Business Account Holders/Get Business Account Holder",
      "description": "",
      "tags": [
        "business_account_holders",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717645",
    "updated_at": "2025-08-04T16:18:34.717645"
  },
  {
    "name": "UpdateBusinessAccountHolderBillingAddress",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateUSBusinessAccountHolderBillingAddress($input: UpdateUSBusinessAccountHolderBillingAddressInput!) {\n  updateUSBusinessAccountHolderBillingAddress(input: $input) {\n    ... on USBusinessAccountHolder {\n      id\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n      businessProfile {\n        billingAddress {\n          streetAddress\n        }\n      }\n      primaryAuthorizedPerson {\n        id\n        homeAddress {\n          streetAddress\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "billingAddress": {
            "streetAddress": "123 Manual Review St.",
            "postalCode": "77777",
            "locality": "Seatlle",
            "region": "WA",
            "countryCodeAlpha3": "USA"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "business_account_holders",
      "path": "Onboarding/Account Holders/Business Account Holders/Update Business Account Holder Billing Address",
      "description": "",
      "tags": [
        "business_account_holders",
        "modification"
      ],
      "requires": [],
      "produces": [
        "edges",
        "billingAddress"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717672",
    "updated_at": "2025-08-04T16:18:34.717673"
  },
  {
    "name": "CreateBusinessAccountHolderApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "cardProductId": "{{cardProductId}}",
          "cardHolderAgreementConsent": {
            "primaryAuthorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "consentTimestamp": "2024-02-22T17:10:55.662Z"
          },
          "ipAddress": {
            "v4": "IP_ADDRESS"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "business_account_holders",
      "path": "Onboarding/Account Holders/Business Account Holders/Create Business Account Holder Application",
      "description": "",
      "tags": [
        "business_account_holders",
        "creation"
      ],
      "requires": [
        "businessAccountHolderPrimaryAuthorizedPersonId",
        "businessAccountHolderId",
        "cardProductId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717692",
    "updated_at": "2025-08-04T16:18:34.717692"
  },
  {
    "name": "GetBusinessAccountHolderApplications",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSBusinessAccountHolderCardProductApplications (\n  $id: ID!\n) {\n  node(id: $id){\n    ...on USBusinessAccountHolder {\n      id\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n            cardProduct {\n              id\n              name\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "business_account_holders",
      "path": "Onboarding/Account Holders/Business Account Holders/Get Business Account Holder Applications",
      "description": "",
      "tags": [
        "business_account_holders",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717708",
    "updated_at": "2025-08-04T16:18:34.717709"
  },
  {
    "name": "GetAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetUSAccountHolder($nodeId: ID!) {\n  node(id: $nodeId) {\n    ... on USBusinessAccountHolder {\n      __typename\n      businessProfile {\n        name {\n          legalBusinessName\n        }\n      }\n    }\n    ... on USPersonAccountHolder {\n      __typename\n      id\n      name {\n        familyName\n        givenName\n      }\n    }\n  }\n}",
      "variables": {
        "nodeId": "ACCOUNT_HOLDER_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "account_holders",
      "path": "Onboarding/Account Holders/Get Account Holder",
      "description": "",
      "tags": [
        "account_holders",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "name"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717723",
    "updated_at": "2025-08-04T16:18:34.717724"
  },
  {
    "name": "GetCardProductApplication",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductApplication($after: String) {\n  cardProducts(after: $after) {\n    edges {\n      node {\n        cardProductApplications {\n          edges {\n            node {\n              id\n              cardProduct {\n                name\n              }\n              applicationState {\n                status\n              }\n              accountHolderSnapshot {\n                ...on USPersonAccountHolderSnapshot {\n                __typename\n                billingAddress {\n                  postalCode\n                }\n                name {\n                  givenName\n                  middleName\n                  familyName\n                }\n              }\n              ... on USBusinessAccountHolderSnapshot {\n                __typename\n\n                businessProfile {\n                  businessType\n                  name {\n                    doingBusinessAsName\n                    legalBusinessName\n                  }\n                  billingAddress {\n                    postalCode\n                  }\n                }\n              }\n              }\n            }\n          }\n        }\n      }\n    }\n    pageInfo {\n      startCursor\n      hasPreviousPage\n      hasNextPage\n      endCursor\n    }\n  }\n}",
      "variables": {
        "after": null
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "account_holders",
      "path": "Onboarding/Account Holders/Get Card Product Application",
      "description": "",
      "tags": [
        "account_holders",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "cardProductApplications",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717750",
    "updated_at": "2025-08-04T16:18:34.717751"
  },
  {
    "name": "GetAccountHolderCardProductApplicationStatus",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{personAccountHolderCardProductApplicationId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "account_holders",
      "path": "Onboarding/Account Holders/Get Account Holder Card Product Application Status",
      "description": "",
      "tags": [
        "account_holders",
        "retrieval"
      ],
      "requires": [
        "personAccountHolderCardProductApplicationId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717768",
    "updated_at": "2025-08-04T16:18:34.717769"
  },
  {
    "name": "ProvisionAccountholder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation provisionAccountHolder($input: ProvisionAccountHolderInput!) {\n\tprovisionAccountHolder(input: $input) {\n\t\t__typename\n\t\t... on AccountHolderProvisioning {\n\t\t\tid\n\t\t\tidempotencyKey\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\toutcome {\n\t\t\t\tstatus\n\t\t\t}\n\t\t\taccountHolder {\n\t\t\t\t... on USBusinessAccountHolder {\n\t\t\t\t\tid\n\t\t\t\t\tbusinessProfile {\n\t\t\t\t\t\tname {\n\t\t\t\t\t\t\tlegalBusinessName\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tnextAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tworkflowActions {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t\tactionInput {\n\t\t\t\t\tcreateAccountHolderCardProductApplicationInput {\n\t\t\t\t\t\tcardHolderAgreementConsent {\n\t\t\t\t\t\t\tconsentTimestamp\n\t\t\t\t\t\t\tprimaryAuthorizedPerson {\n\t\t\t\t\t\t\t\t... on USBusinessAuthorizedPerson {\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on USPersonAuthorizedUser {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tissueFinancialAccountForApplicationInput {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tissuePaymentCardForFinancialAccountInput {\n\t\t\t\t\t\toptions {\n\t\t\t\t\t\t\tactivateOnCreate\n\t\t\t\t\t\t\tcardProfileSet {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texpirationDate\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcome {\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t\texecutionOrder\n\t\t\t\tnode {\n\t\t\t\t\t... on UserError {\n\t\t\t\t\t\terrors {\n\t\t\t\t\t\t\terrorPath\n\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tapplicationState {\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FinancialAccount {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\t... on PaymentCard {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\terrorPath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "idempotencyKey": "07d53fc3-80cb-4bd5-b858-ca58b47f7416",
          "accountHolderId": "og_ah02cac722541e144ab2beace82b9db33cca",
          "actions": [
            "CREATE_APPLICATION",
            "ISSUE_FINANCIAL_ACCOUNT",
            "ISSUE_PAYMENT_CARD"
          ],
          "actionInput": {
            "createAccountHolderCardProductApplicationInput": {
              "cardProductId": "pd_63074611593b4967a74b632089e98f77",
              "cardHolderAgreementConsent": {
                "consentTimestamp": "2024-11-12T16:20:15.657Z",
                "primaryAuthorizedPersonId": "ps_ap01583eb308f15f4cb181689e8d2b6c2ddc"
              }
            },
            "issueFinancialAccountForApplicationInput": {
              "name": "Fianancial Account Name"
            },
            "issuePaymentCardForFinancialAccountInput": {
              "options": {
                "activateOnCreate": true,
                "expirationDate": "2026-01-01T23:59:59Z"
              }
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "provisioning",
      "path": "Onboarding/Provisioning/Provision Accountholder",
      "description": "",
      "tags": [
        "provisioning"
      ],
      "requires": [],
      "produces": [
        "name",
        "createAccountHolderCardProductApplicationInput",
        "name",
        "options",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717809",
    "updated_at": "2025-08-04T16:18:34.717810"
  },
  {
    "name": "CheckAccountholderProvisioning",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query CheckAccountHolderProvisioning($id: ID!) {\n\tnode(id: $id) {\n\t\t... on AccountHolderProvisioning {\n\t\t\tid\n\t\t\tidempotencyKey\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t\toutcome {\n\t\t\t\tstatus\n\t\t\t}\n\t\t\taccountHolder {\n\t\t\t\t__typename\n\t\t\t\t... on USBusinessAccountHolder {\n\t\t\t\t\tid\n\t\t\t\t\tbusinessProfile {\n\t\t\t\t\t\tname {\n\t\t\t\t\t\t\tlegalBusinessName\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tnextAction {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t}\n\t\t\tworkflowActions {\n\t\t\t\tid\n\t\t\t\taction\n\t\t\t\tactionInput {\n\t\t\t\t\tcreateAccountHolderCardProductApplicationInput {\n\t\t\t\t\t\tcardHolderAgreementConsent {\n\t\t\t\t\t\t\tconsentTimestamp\n\t\t\t\t\t\t\tprimaryAuthorizedPerson {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on USPersonAuthorizedUser {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t... on USBusinessAuthorizedPerson {\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tissueFinancialAccountForApplicationInput {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tissuePaymentCardForFinancialAccountInput {\n\t\t\t\t\t\toptions {\n\t\t\t\t\t\t\tactivateOnCreate\n\t\t\t\t\t\t\tcardProfileSet {\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\texpirationDate\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toutcome {\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t\texecutionOrder\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\t... on UserError {\n\t\t\t\t\t\terrors {\n\t\t\t\t\t\t\terrorPath\n\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\tapplicationState {\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t}\n\t\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t\t... on USBusinessAccountHolderSnapshot {\n\t\t\t\t\t\t\t\taccountHolderCurrent {\n\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbusinessProfile {\n\t\t\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\t\t\tlegalBusinessName\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t... on FinancialAccount {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\texternalId\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\t... on PaymentCard {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "idempotencyKey": "07d53fc3-80cb-4bd5-b858-ca58b47f7416",
          "accountHolderId": "og_ah02cac722541e144ab2beace82b9db33cca",
          "actions": [
            "CREATE_APPLICATION",
            "ISSUE_FINANCIAL_ACCOUNT",
            "ISSUE_PAYMENT_CARD"
          ],
          "actionInput": {
            "createAccountHolderCardProductApplicationInput": {
              "cardProductId": "pd_63074611593b4967a74b632089e98f77",
              "cardHolderAgreementConsent": {
                "consentTimestamp": "2024-11-12T16:20:15.657Z",
                "primaryAuthorizedPersonId": "ps_ap01583eb308f15f4cb181689e8d2b6c2ddc"
              }
            },
            "issueFinancialAccountForApplicationInput": {
              "name": "Fianancial Account Name"
            },
            "issuePaymentCardForFinancialAccountInput": {
              "options": {
                "activateOnCreate": true,
                "expirationDate": "2026-01-01T23:59:59Z"
              }
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "provisioning",
      "path": "Onboarding/Provisioning/Check Accountholder Provisioning",
      "description": "",
      "tags": [
        "provisioning"
      ],
      "requires": [],
      "produces": [
        "name",
        "createAccountHolderCardProductApplicationInput",
        "name",
        "options",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717846",
    "updated_at": "2025-08-04T16:18:34.717846"
  },
  {
    "name": "EnableRiskApplicationFeature",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation generateRiskApplicationSdkSessionToken {\n  generateRiskApplicationSDKSessionToken {\n    __typename\n    ... on RiskApplicationSDKSessionToken {\n      sessionToken\n    }\n    ... on AccessDeniedError {\n      message\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {}
    },
    "headers": {},
    "metadata": {
      "category": "risk_application_sdk",
      "path": "Onboarding/Risk Application SDK/Enable Risk Application Feature",
      "description": "",
      "tags": [
        "risk_application_sdk"
      ],
      "requires": [],
      "produces": [
        "generateRiskApplicationSDKSessionToken",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717868",
    "updated_at": "2025-08-04T16:18:34.717869"
  },
  {
    "name": "DisableRiskApplicationFeature",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation disableRiskApplicationSdk($featurePermissionsFirst: Int) {\n  disableRiskApplicationSDK {\n    __typename\n    ... on Organization {\n      __typename\n      id\n      profile {\n        featurePermissions(first: $featurePermissionsFirst) {\n          __typename\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n          }\n          edges {\n            cursor\n            node {\n              __typename\n              ... on RiskApplicationSDK {\n                __typename\n                id\n                createdBy\n                updatedBy\n                createDate\n                updateDate\n                enabled\n                revisions {\n                  __typename\n                  edges {\n                    __typename\n                    cursor\n                    node {\n                      __typename\n                      ... on RiskApplicationSDKRevision {\n                        id\n                        featurePermissionId\n                        createdBy\n                        updatedBy\n                        createDate\n                        updateDate\n                        enabled\n                      }\n                    }\n                  }\n                  pageInfo {\n                    __typename\n                    startCursor\n                    hasNextPage\n                    endCursor\n                    hasPreviousPage\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "featurePermissionsFirst": 1
      }
    },
    "headers": {},
    "metadata": {
      "category": "risk_application_sdk",
      "path": "Onboarding/Risk Application SDK/Disable Risk Application Feature",
      "description": "",
      "tags": [
        "risk_application_sdk"
      ],
      "requires": [],
      "produces": [
        "disableRiskApplicationSDK",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717895",
    "updated_at": "2025-08-04T16:18:34.717895"
  },
  {
    "name": "GenerateRiskApplicationToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation generateRiskApplicationSdkSessionToken {\n  generateRiskApplicationSDKSessionToken {\n    __typename\n    ... on RiskApplicationSDKSessionToken {\n      sessionToken\n    }\n    ... on AccessDeniedError {\n      message\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {}
    },
    "headers": {},
    "metadata": {
      "category": "risk_application_sdk",
      "path": "Onboarding/Risk Application SDK/Generate Risk Application Token",
      "description": "",
      "tags": [
        "risk_application_sdk"
      ],
      "requires": [],
      "produces": [
        "generateRiskApplicationSDKSessionToken",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717908",
    "updated_at": "2025-08-04T16:18:34.717909"
  },
  {
    "name": "CreatePersonAccountHolderForRiskApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on AccessDeniedError {\n        message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n        }\n        employmentStatus\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Medium",
              "familyName": "Risk"
            },
            "externalId": "Risk,Medium",
            "email": "medium-risk@test.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Risky Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "1",
              "number": "714-316-3075"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "risk_application_sdk",
      "path": "Onboarding/Risk Application SDK/Create Person Account Holder For Risk Application",
      "description": "",
      "tags": [
        "risk_application_sdk",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "socialSecurityNumber",
        "totalAnnualIncome"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717948",
    "updated_at": "2025-08-04T16:18:34.717949"
  },
  {
    "name": "LookupRiskScores",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query LookupApplication($id: ID!) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      applicationState {\n        status\n      }\n      accountHolderSnapshot {\n          ... on USPersonAccountHolderSnapshot {\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            postalCode\n            countryCodeAlpha3\n          }\n          currentVerification {\n            status\n            reason\n\t\t\tidentityRiskScores {\n              ... on IdentityRiskScores {\n                identityRiskScores {\n                  identityRiskVendor\n                  identityRiskLevel\n                  identityRiskEventType\n                  sessionKey\n                }\n              }\n              ... on AccessDeniedError {\n                message\n              }\n            }\n            results {\n              code\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{applicationId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "risk_application_sdk",
      "path": "Onboarding/Risk Application SDK/Lookup Risk Scores",
      "description": "",
      "tags": [
        "risk_application_sdk"
      ],
      "requires": [
        "applicationId"
      ],
      "produces": [
        "name",
        "identityRiskScores"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717965",
    "updated_at": "2025-08-04T16:18:34.717966"
  },
  {
    "name": "IssuePaymentCardForFinancialAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      revisionSnapshots {\n        edges {\n            node {\n                createdAt\n            }\n        }\n      }\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": true,
            "expirationDate": "2028-01-01T23:59:59Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Issue Payment Card For Financial Account",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "edges",
        "ledgers",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.717999",
    "updated_at": "2025-08-04T16:18:34.717999"
  },
  {
    "name": "IssuePaymentCardForApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "options": {
            "activateOnCreate": true,
            "expirationDate": "2026-01-01T23:59:59Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Issue Payment Card For Application",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [],
      "produces": [
        "ledgers",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718022",
    "updated_at": "2025-08-04T16:18:34.718022"
  },
  {
    "name": "IssuePaymentCardForApplicationWithOnDemandFundingSource",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": true,
            "expirationDate": "2028-01-01T23:59:59Z"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Issue Payment Card For Application With On Demand Funding Source",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "ledgers",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718050",
    "updated_at": "2025-08-04T16:18:34.718051"
  },
  {
    "name": "ActivatePaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Activate Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "activation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718066",
    "updated_at": "2025-08-04T16:18:34.718066"
  },
  {
    "name": "GenerateClientTokenToSetPin",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "permissions": "SET_PAYMENT_CARD_PIN"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Generate Client Token To Set PIN",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718081",
    "updated_at": "2025-08-04T16:18:34.718081"
  },
  {
    "name": "GenerateClientTokenForRestrictedDetails",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Generate Client Token For Restricted Details",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718096",
    "updated_at": "2025-08-04T16:18:34.718096"
  },
  {
    "name": "GetPaymentCardRestrictedDetails",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n            paymentCardHolderDetails {\n                billingAddressOnCard {\n                    postalCode\n                }\n            }\n            expirationDate\n            restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n                    cvv\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{paymentCardId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Get Payment Card Restricted Details",
      "description": "",
      "tags": [
        "payment_cards",
        "retrieval"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "paymentCardHolderDetails"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718110",
    "updated_at": "2025-08-04T16:18:34.718111"
  },
  {
    "name": "SuspendPaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Suspend Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "suspension"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718122",
    "updated_at": "2025-08-04T16:18:34.718122"
  },
  {
    "name": "SetPinForPaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      pinDetails {\n        isSet\n        pinUpdateHistory {\n            updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "newPin": "1234"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Set PIN For Payment Card",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718140",
    "updated_at": "2025-08-04T16:18:34.718141"
  },
  {
    "name": "ReissuePaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "options": {
            "reissueFeatures": {
              "copyNumber": true,
              "copyPin": true
            },
            "expirationDate": "2024-12-29T23:12:30Z",
            "activateOnCreate": false
          },
          "originalPaymentCardId": "CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Reissue Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "issuance"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718201",
    "updated_at": "2025-08-04T16:18:34.718202"
  },
  {
    "name": "ClosePaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Close Payment Card",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718213",
    "updated_at": "2025-08-04T16:18:34.718214"
  },
  {
    "name": "FindAtmLocationsForPaymentCardByRadius",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindATMLocationsForPaymentCardByRadius(\n  $paymentCardId: ID!\n  $radius: ATMLocationRadiusInput!\n  $atmFilter: ATMLocationFilterInput\n) {\n  node(id: $paymentCardId) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      atmLocations(radius: $radius, atmFilter: $atmFilter) {\n        ... on AtmLocationsResult {\n          ... on ATMLocations{\n            atmLocations {\n              name\n              description\n              logo {\n                brand\n              }\n              features\n              address {\n                streetAddress\n                extendedAddress\n                postalCode\n                region\n                locality\n                countryCodeAlpha3\n              }\n              coordinates {\n                latitude\n                longitude\n              }\n              distance {\n                length\n                unit\n              }\n            }\n          }\n        }\n        ... on UserError {\n          errors {\n            code\n            description\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": "{\n  \"paymentCardId\": \"PAYMENT_CARD_ID\",\n  \"radius\": {\n    \"coordinates\": {\n  \"latitude\": \"40.158018\",\n  \"longitude\": \"-84.957780\"\n},\n    \"distance\": {\n      \"length\": 10,\n      \"unit\": \"MILE\"\n    }\n  },\n  \"atmFilter\": {\n    \"includes\": [\"DEPOSIT_AVAILABLE\"]\n  }\n}"
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Find ATM Locations For Payment Card By Radius",
      "description": "",
      "tags": [
        "payment_cards"
      ],
      "requires": [],
      "produces": [
        "atmLocations",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718239",
    "updated_at": "2025-08-04T16:18:34.718240"
  },
  {
    "name": "GetPaymentCard",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCard($id: ID!) {\n    node(id: $id) {\n        ... on PaymentCard {\n            id\n            last4\n            pinDetails {\n                isSet\n                pinUpdateHistory {\n                    updatedAt\n                }\n            }\n            revisionSnapshots {\n                edges {\n                    node {\n                        updatedAt\n                        statusChangeMemo\n                        statusChangeReason\n                    }\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{paymentCardId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "payment_cards",
      "path": "Issuance/Payment Cards/Get Payment Card",
      "description": "",
      "tags": [
        "payment_cards",
        "retrieval"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718254",
    "updated_at": "2025-08-04T16:18:34.718255"
  },
  {
    "name": "IssueFinancialAccountForApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{businessAccountHolderApplicationId}}",
          "name": "Card Account {{currentTimestampFormatted}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Issue Financial Account For Application",
      "description": "",
      "tags": [
        "financial_accounts",
        "issuance"
      ],
      "requires": [
        "businessAccountHolderApplicationId",
        "currentTimestampFormatted"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718282",
    "updated_at": "2025-08-04T16:18:34.718282"
  },
  {
    "name": "IssueFinancialAccountForApplicationWithOnDemandFundingSource",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFinancialAccountForApplicationWithOnDemandFundingSource($input: IssueFinancialAccountForApplicationWithOnDemandFundingSourceInput!) {\n  issueFinancialAccountForApplicationWithOnDemandFundingSource(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{subscriberApplicationId}}",
          "name": "Card Account {{currentTimestampFormatted}}",
          "sourceFinancialAccountId": "{{productFundingFinancialAccountId}}",
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Issue Financial Account for Application with On-Demand Funding Source",
      "description": "",
      "tags": [
        "financial_accounts",
        "issuance"
      ],
      "requires": [
        "currentTimestampFormatted",
        "subscriberApplicationId",
        "productFundingFinancialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718303",
    "updated_at": "2025-08-04T16:18:34.718303"
  },
  {
    "name": "GetFinancialAccount",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccount($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Node {\n                  __typename\n                  id\n                }\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Get Financial Account",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "edges",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718330",
    "updated_at": "2025-08-04T16:18:34.718330"
  },
  {
    "name": "GetFinancialAccountActivities",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "fragment AmountFragment on Amount {\n  value\n  decimalPlaces\n  currencyCode\n}\n\nfragment MerchantDetailsFragment on MerchantDetails {\n  name\n  description\n  category\n  categoryCode\n  merchantId\n  address {\n    streetAddress\n    locality\n    region\n    postalCode\n  }\n}\n\nfragment TransactionEventFragment on TransactionEvent {\n  responseCode\n  currentFinancialAccountAvailableToSpendAmount {\n    ...AmountFragment\n  }\n  ... on AuthorizationEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on ClearingEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on AuthorizationAndClearEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on ReversalEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n}\n\nfragment TransactionFragment on Transaction {\n  __typename\n  ... on DebitTransaction {\n    id\n    transactionEvents {\n      __typename\n      ... on Node {\n        id\n      }\n      ... on AuthorizationEvent {\n        ...TransactionEventFragment\n      }\n      ... on ClearingEvent {\n        ...TransactionEventFragment\n      }\n      ... on AuthorizationAndClearEvent {\n        ...TransactionEventFragment\n      }\n      ... on ReversalEvent {\n        ...TransactionEventFragment\n      }\n    }\n  }\n  ... on CreditTransaction {\n    id\n    transactionEvents {\n      __typename\n      ... on Node {\n        id\n      }\n      ... on AuthorizationEvent {\n        ...TransactionEventFragment\n      }\n      ... on ClearingEvent {\n        ...TransactionEventFragment\n      }\n      ... on AuthorizationAndClearEvent {\n        ...TransactionEventFragment\n      }\n      ... on ReversalEvent {\n        ...TransactionEventFragment\n      }\n    }\n  }\n}\n\nquery GetFinancialAccountActivities(\n  $id: ID!\n  $first: Int\n  $after: String\n  $filterBy: FinancialAccountActivitiesFilterInput\n) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      financialAccountActivities(\n        first: $first\n        after: $after\n        filterBy: $filterBy\n      ) {\n        pageInfo {\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            sign\n            isComplete\n            pendingAmount {\n              ...AmountFragment\n            }\n            postedAmount {\n              ...AmountFragment\n            }\n            createdAt\n            source {\n              ...TransactionFragment\n              ... on FeeTransferEvent {\n                feeTransfer {\n                  ... on ChargedFeeTransfer {\n                    feeActivityType\n                    status {\n                      ... on NonFailureFeeTransferStatus {\n                        status\n                      }\n                      ... on FailureFeeTransferStatus {\n                        status\n                        reasonDetails {\n                          reason\n                          type\n                        }\n                      }\n                    }\n                    transferDate\n                  }\n                }\n              }\n              ... on ElectronicFundsTransfer {\n                ... on AchTransfer {\n                  companyEntryDescription\n                  companyIdentifier\n                  companyName\n                  failedAt\n                  individualIdentificationNumber\n                  individualName\n                  paymentRelatedInformation\n                  purpose\n                  sign\n                  statusFailureReason\n                  traceNumber\n                  type\n                }\n              }\n              ... on InterFinancialAccountTransfer {\n                memo\n                purpose\n                status\n                statusReason\n                transferActivityType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Get Financial Account Activities",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "merchantDetails",
        "merchantDetails",
        "merchantDetails",
        "merchantDetails",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718366",
    "updated_at": "2025-08-04T16:18:34.718367"
  },
  {
    "name": "GetFinancialAccountLedger",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "fragment AmountFragment on Amount {\n  value\n  decimalPlaces\n  currencyCode\n}\n\nfragment MerchantDetailsFragment on MerchantDetails {\n  name\n  description\n  category\n  categoryCode\n  merchantId\n  address {\n    streetAddress\n    locality\n    region\n    postalCode\n  }\n}\n\nfragment TransactionEventFragment on TransactionEvent {\n  responseCode\n  currentFinancialAccountAvailableToSpendAmount {\n    ...AmountFragment\n  }\n  ... on AuthorizationEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on ClearingEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on AuthorizationAndClearEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on ReversalEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n}\n\nquery GetFinancialAccountLedgerEntries($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      ledgers(ledgerNames: [CASH]) {\n        ledgerEntries {\n          pageInfo {\n            hasNextPage\n            startCursor\n            endCursor\n          }\n          edges {\n            node {\n              createdAt\n              amount {\n                ...AmountFragment\n              }\n              debitBalanceAtLedgerEntry {\n                ...AmountFragment\n              }\n              financialEvent {\n                ... on Node {\n                  __typename\n                  id\n                }\n                ...TransactionEventFragment\n                ... on InterFinancialAccountTransfer {\n                  memo\n                  purpose\n                  interFinancialAccountTransferStatus: status\n                  interFinancialAccountTransferStatusReason: statusReason\n                  transferActivityType\n                }\n                ... on ACHTransferEvent {\n                  companyEntryDescription\n                  companyIdentifier\n                  companyName\n                  returnDate\n                  settlementDate\n                }\n                ... on FeeTransferEvent {\n                  feeTransfer {\n                    ... on ChargedFeeTransfer {\n                      feeActivityType\n                      status {\n                        ... on NonFailureFeeTransferStatus {\n                          status\n                        }\n                        ... on FailureFeeTransferStatus {\n                          status\n                          reasonDetails {\n                            reason\n                            type\n                          }\n                        }\n                      }\n                      transferDate\n                    }\n                  }\n                }\n                ... on ManualAdjustmentEvent {\n                  adjustmentActivityType\n                  originalFinancialEventId\n                }\n                ... on RewardPointsTransfer {\n                  activity\n                  externalTransactionIdentifier\n                  memo\n                  source\n                  rewardPointsTransferStatus: status {\n                    ... on RewardPointsTransferSuccessStatus {\n                      status\n                    }\n                    ... on RewardPointsTransferFailureStatus {\n                      status\n                      statusReasonCode\n                    }\n                  }\n                }\n                ... on WireTransfer {\n                  memo\n                  status\n                  statusReason\n                  type\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Get Financial Account Ledger",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "merchantDetails",
        "merchantDetails",
        "merchantDetails",
        "merchantDetails",
        "ledgerEntries"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718403",
    "updated_at": "2025-08-04T16:18:34.718403"
  },
  {
    "name": "GetFinancialAccountLedgerCopy",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "fragment AmountFragment on Amount {\n  value\n  decimalPlaces\n  currencyCode\n}\n\nfragment MerchantDetailsFragment on MerchantDetails {\n  name\n  description\n  category\n  categoryCode\n  merchantId\n  address {\n    streetAddress\n    locality\n    region\n    postalCode\n  }\n}\n\nfragment TransactionEventFragment on TransactionEvent {\n  responseCode\n  currentFinancialAccountAvailableToSpendAmount {\n    ...AmountFragment\n  }\n  ... on AuthorizationEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on ClearingEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on AuthorizationAndClearEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n  ... on ReversalEvent {\n    merchantDetails {\n      ...MerchantDetailsFragment\n    }\n  }\n}\n\nquery GetFinancialAccountLedgerEntries($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      ledgers(ledgerNames: [CASH]) {\n        ledgerEntries {\n          pageInfo {\n            hasNextPage\n            startCursor\n            endCursor\n          }\n          edges {\n            node {\n              createdAt\n              amount {\n                ...AmountFragment\n              }\n              debitBalanceAtLedgerEntry {\n                ...AmountFragment\n              }\n              financialEvent {\n                ... on Node {\n                  __typename\n                  id\n                }\n                ...TransactionEventFragment\n                ... on InterFinancialAccountTransfer {\n                  memo\n                  purpose\n                  interFinancialAccountTransferStatus: status\n                  interFinancialAccountTransferStatusReason: statusReason\n                  transferActivityType\n                }\n                ... on ACHTransferEvent {\n                  companyEntryDescription\n                  companyIdentifier\n                  companyName\n                  returnDate\n                  settlementDate\n                }\n                ... on FeeTransferEvent {\n                  feeTransfer {\n                    ... on ChargedFeeTransfer {\n                      feeActivityType\n                      status {\n                        ... on NonFailureFeeTransferStatus {\n                          status\n                        }\n                        ... on FailureFeeTransferStatus {\n                          status\n                          reasonDetails {\n                            reason\n                            type\n                          }\n                        }\n                      }\n                      transferDate\n                    }\n                  }\n                }\n                ... on ManualAdjustmentEvent {\n                  adjustmentActivityType\n                  originalFinancialEventId\n                }\n                ... on RewardPointsTransfer {\n                  activity\n                  externalTransactionIdentifier\n                  memo\n                  source\n                  rewardPointsTransferStatus: status {\n                    ... on RewardPointsTransferSuccessStatus {\n                      status\n                    }\n                    ... on RewardPointsTransferFailureStatus {\n                      status\n                      statusReasonCode\n                    }\n                  }\n                }\n                ... on WireTransfer {\n                  memo\n                  status\n                  statusReason\n                  type\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Get Financial Account Ledger Copy",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "merchantDetails",
        "merchantDetails",
        "merchantDetails",
        "merchantDetails",
        "ledgerEntries"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718440",
    "updated_at": "2025-08-04T16:18:34.718440"
  },
  {
    "name": "GenerateDirectDepositDetailClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateDirectDepositDetailClientToken($input: GenerateDirectDepositDetailClientTokenInput!) {\n  generateDirectDepositDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "directDepositDetailId": "DIRECT_DEPOSIT_DETAIL_ID",
          "permissions": [
            "READ_RESTRICTED_DETAILS"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Generate Direct Deposit Detail Client Token",
      "description": "",
      "tags": [
        "financial_accounts"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718455",
    "updated_at": "2025-08-04T16:18:34.718455"
  },
  {
    "name": "GetDirectDepositDetailsByIdWithClientToken",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDirectDepositDetailsByIDWithClientToken($id: ID!) {\n  node(id: $id) {\n    ... on DirectDepositDetail {\n      id\n      restrictedDetails {\n        ... on DirectDepositDetailRestrictedDetails {\n          number\n          routingNumber\n          bank {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DIRECT_DEPOSIT_DETAIL_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Get Direct Deposit Details By ID With Client Token",
      "description": "",
      "tags": [
        "financial_accounts",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718469",
    "updated_at": "2025-08-04T16:18:34.718470"
  },
  {
    "name": "SuspendFinancialAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SuspendFinancialAccount($input: SuspendFinancialAccountInput!) {\n  suspendFinancialAccount(input: $input) {\n    ... on FinancialAccount {\n      accountStatus\n      financialAccountAttributesWithReason {\n        attribute\n        reason\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{financialAccountId}}",
          "memo": "testing suspension",
          "suspensionReason": "DELINQUENCY"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Suspend Financial Account",
      "description": "",
      "tags": [
        "financial_accounts",
        "suspension"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718486",
    "updated_at": "2025-08-04T16:18:34.718487"
  },
  {
    "name": "UnsuspendFinancialAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UnsuspendFinancialAccount($input: UnsuspendFinancialAccountInput!) {\n  unsuspendFinancialAccount(input: $input) {\n    ... on FinancialAccount {\n      accountStatus\n      financialAccountAttributesWithReason {\n        attribute\n        reason\n      }\n      globalNotes {\n        ... on GlobalNoteConnection {\n          edges {\n            node {\n              id\n              createdAt\n              message\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{financialAccountId}}",
          "memo": "testing unsuspend"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Unsuspend Financial Account",
      "description": "",
      "tags": [
        "financial_accounts",
        "suspension"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718503",
    "updated_at": "2025-08-04T16:18:34.718503"
  },
  {
    "name": "SimulateInitiateFinancialAccountClosure",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulateInitiateFinancialAccountClosure(\n  $input: SimulateInitiateFinancialAccountClosureInput!\n) {\n  simulateInitiateFinancialAccountClosure(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      accountStatus\n      accountAttributes\n    }\n    ... on UserError {\n      __typename\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "closeWithBalance": false
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "financial_accounts",
      "path": "Issuance/Financial Accounts/Simulate Initiate Financial Account Closure",
      "description": "",
      "tags": [
        "financial_accounts",
        "simulation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718519",
    "updated_at": "2025-08-04T16:18:34.718519"
  },
  {
    "name": "SimulateMastercardFleetClearing",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetClearing(\n  $input: SimulateMastercardFleetClearingInput!\n) {\n  simulateMastercardFleetClearing(input: $input) {\n    __typename\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      approvedAmount {\n        value\n        currencyCode\n      }\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n      currentFinancialAccountMaximumBalanceAmount {\n        value\n        currencyCode\n      }\n      currentFinancialAccountAvailableToSpendAmount {\n        value\n        currencyCode\n      }\n      transactionProcessingType\n      pointOfServiceDetails {\n        category\n        panEntryMode\n        pinEntryMode\n        terminalAttendance\n        isCardHolderPresent\n        isCardPresent\n        isRecurring\n        terminalSupportsPartialApproval\n      }\n      additionalNetworkData {\n        __typename\n        ... on VisaData {\n          transactionIdentifier\n        }\n      }\n      partial\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "merchantDetails": {
            "address": {
              "countryCodeAlpha3": "USA",
              "locality": "San Francisco",
              "postalCode": "94105",
              "region": "CA"
            },
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "countryCodeAlpha3": "USA",
            "name": "My Awesome Fuel",
            "merchantId": "MERCHANT_ID",
            "description": "The most awesome fuel dispensers"
          },
          "pointOfServiceDetails": {
            "category": "AUTOMATED_FUEL_DISPENSER",
            "panEntryMode": "MAGNETIC_STRIPE",
            "pinEntryMode": "PIN_ENTRY_CAPABILITY",
            "terminalAttendance": "ATTENDED",
            "isCardHolderPresent": true,
            "isCardPresent": true,
            "isRecurring": false,
            "terminalSupportsPartialApproval": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/Fleet/MasterCard/Simulate MasterCard Fleet Clearing",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "address",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718564",
    "updated_at": "2025-08-04T16:18:34.718565"
  },
  {
    "name": "SimulateMastercardFleetAuthorization",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetAuthorization(\n  $input: SimulateMastercardFleetAuthorizationInput!\n) {\n  simulateMastercardFleetAuthorization(input: $input) {\n    __typename\n    ... on AuthorizationEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      requestedAmount {\n        value\n        currencyCode\n      }\n      approvedAmount {\n        value\n        currencyCode\n      }\n      cvvResponseCode\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        categoryCode\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n      currentFinancialAccountMaximumBalanceAmount {\n        value\n        currencyCode\n      }\n      currentFinancialAccountAvailableToSpendAmount {\n        value\n        currencyCode\n      }\n      transactionProcessingType\n      pointOfServiceDetails {\n        category\n        panEntryMode\n        pinEntryMode\n        terminalAttendance\n        isCardHolderPresent\n        isCardPresent\n        isRecurring\n        terminalSupportsPartialApproval\n      }\n      additionalNetworkData {\n        __typename\n        ... on VisaData {\n          transactionIdentifier\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 100,
            "currencyCode": "USD"
          },
          "cardId": "PAYMENT_CARD_ID",
          "merchantDetails": {
            "address": {
              "countryCodeAlpha3": "USA",
              "locality": "San Francisco",
              "postalCode": "94105",
              "region": "CA"
            },
            "countryCodeAlpha3": "USA",
            "name": "My Awesome Fuel",
            "merchantId": "merchantId",
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "description": "The most awesome fuel dispensers of all time"
          },
          "pointOfServiceDetails": {
            "category": "AUTOMATED_FUEL_DISPENSER",
            "panEntryMode": "MAGNETIC_STRIPE",
            "pinEntryMode": "PIN_ENTRY_CAPABILITY",
            "terminalAttendance": "ATTENDED",
            "isCardHolderPresent": true,
            "isCardPresent": true,
            "isRecurring": false,
            "terminalSupportsPartialApproval": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/Fleet/MasterCard/Simulate MasterCard Fleet Authorization",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "address",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718600",
    "updated_at": "2025-08-04T16:18:34.718600"
  },
  {
    "name": "SimulateMastercardFleetAuthorizationAdvice",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetAuthorizationAdvice(\n  $input: SimulateMastercardFleetAuthorizationAdviceInput!\n) {\n  simulateMastercardFleetAuthorizationAdvice(input: $input) {\n    __typename\n    ... on ReversalEvent {\n      id\n      responseCode\n      createdAt\n      approvedAmount {\n        value\n        currencyCode\n      }\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      paymentCard {\n        id\n      }\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n      currentFinancialAccountMaximumBalanceAmount {\n        value\n        currencyCode\n      }\n      currentFinancialAccountAvailableToSpendAmount {\n        value\n        currencyCode\n      }\n      transactionProcessingType\n      pointOfServiceDetails {\n        category\n        panEntryMode\n        pinEntryMode\n        terminalAttendance\n        isCardHolderPresent\n        isCardPresent\n        isRecurring\n        terminalSupportsPartialApproval\n      }\n      additionalNetworkData {\n        __typename\n        ... on VisaData {\n          transactionIdentifier\n        }\n      }\n      partial\n      issuerExpiredAuthorization\n    }\n    ... on AuthorizationEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      approvedAmount {\n        value\n        currencyCode\n      }\n      merchantDetails {\n        address {\n          countryCodeAlpha3\n          locality\n          postalCode\n          region\n        }\n        category\n        countryCodeAlpha3\n        name\n        merchantId\n        description\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "merchantDetails": {
            "address": {
              "countryCodeAlpha3": "USA",
              "locality": "San Francisco",
              "postalCode": "94105",
              "region": "CA"
            },
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "countryCodeAlpha3": "USA",
            "name": "My Awesome Fuel",
            "merchantId": "Merchant Id",
            "description": "The most awesome fuel dispensers"
          },
          "pointOfServiceDetails": {
            "category": "AUTOMATED_FUEL_DISPENSER",
            "panEntryMode": "MAGNETIC_STRIPE",
            "pinEntryMode": "PIN_ENTRY_CAPABILITY",
            "terminalAttendance": "ATTENDED",
            "isCardHolderPresent": true,
            "isCardPresent": true,
            "isRecurring": false,
            "terminalSupportsPartialApproval": true
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/Fleet/MasterCard/Simulate MasterCard Fleet Authorization Advice",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "address",
        "address",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718640",
    "updated_at": "2025-08-04T16:18:34.718640"
  },
  {
    "name": "SimulateMastercardFleetEnhancedData",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateMastercardFleetEnhancedData(\n  $input: SimulateMastercardFleetEnhancedDataInput!\n) {\n  simulateMastercardFleetEnhancedData(input: $input) {\n    __typename\n    ... on EnhancedDataEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n      createdAt\n      additionalTransactionData {\n        ... on MastercardFleetEnhancedData {\n          __typename\n          id\n          fuelBrand\n          purchaseTime\n          fuelServiceType\n          fuelType\n          fuelUnitPrice {\n            value\n            currencyCode\n          }\n          fuelUnitOfMeasure\n          fuelQuantity\n          fuelSaleAmount {\n            value\n            currencyCode\n          }\n          odometerReading\n          vehicleNumber\n          driverIdentification\n          productType\n          fuelDiscountAmount {\n            value\n            currencyCode\n          }\n          taxAmount1 {\n            value\n            currencyCode\n          }\n          taxAmount2 {\n            value\n            currencyCode\n          }\n          lineItems {\n            productCode\n            description\n            unitOfMeasure\n            unitPrice {\n              value\n              currencyCode\n            }\n            itemAmount {\n              value\n              currencyCode\n            }\n            creditOrDebit\n          }\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "fuelBrand": "SINCLAIR",
          "purchaseTime": "1234",
          "fuelServiceType": "FULL_SERVICE",
          "fuelType": "PREMIUM",
          "fuelUnitPrice": {
            "value": 100,
            "currencyCode": "USD"
          },
          "fuelUnitOfMeasure": "GALLONS",
          "fuelQuantity": 12.345,
          "fuelSaleAmount": {
            "value": 200,
            "currencyCode": "USD"
          },
          "odometerReading": "123456",
          "vehicleNumber": "vehicleNumber",
          "driverIdentification": "driverIdentification",
          "productType": "PROMPT_FOR_DRIVER_NUMBER_AND_ODOMETER",
          "fuelDiscountAmount": {
            "value": 300,
            "currencyCode": "USD"
          },
          "taxAmount1": {
            "value": 400,
            "currencyCode": "USD"
          },
          "taxAmount2": {
            "value": 500,
            "currencyCode": "USD"
          },
          "fuelLocationDetails": {
            "openTwentyFourHours": true,
            "eighteenWheelerAccess": true,
            "dieselSites": true,
            "interstateAccess": true,
            "convenienceStore": true,
            "restaurant": true,
            "hotel": true,
            "showers": true,
            "repairBays": true,
            "vehicleWash": true,
            "aviationLocation": true,
            "marinaLocation": true,
            "alternativeFuel": true,
            "payAtPump": true
          },
          "lineItems": [
            {
              "productCode": "BATTERIES",
              "description": "Really good batteries",
              "unitOfMeasure": "EACH",
              "unitPrice": {
                "value": 600,
                "currencyCode": "USD"
              },
              "itemAmount": {
                "value": 700,
                "currencyCode": "USD"
              },
              "creditOrDebit": "CREDIT"
            }
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "mastercard",
      "path": "Issuance/Transactions/Simulation/Fleet/MasterCard/Simulate MasterCard Fleet Enhanced Data",
      "description": "",
      "tags": [
        "mastercard",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718695",
    "updated_at": "2025-08-04T16:18:34.718695"
  },
  {
    "name": "SimulateVisaFleetAuthorization",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateVisaFleetAuthorization(\n  $input: SimulateVisaFleetAuthorizationInput!\n) {\n  simulateVisaFleetAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      createdAt\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n      authorizationExpiration\n      approvedAmount {\n        value\n      }\n      responseCode\n      avsResponseCode\n      postalCodeResponseCode\n      cvvResponseCode\n      networkResponseCode\n      requestedAmount {\n        value\n      }\n      originalAmount {\n        value\n      }\n      spendRuleResults {\n        edges {\n          node {\n            message\n            recommendation\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardId": "{{paymentCardId}}",
          "amount": {
            "value": 100,
            "currencyCode": "USD"
          },
          "merchantDetails": {
            "category": "AUTOMATED_FUEL_DISPENSERS",
            "countryCodeAlpha3": "USA",
            "description": "Test desc",
            "name": "Test name"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "visa",
      "path": "Issuance/Transactions/Simulation/Fleet/Visa/Simulate Visa Fleet Authorization",
      "description": "",
      "tags": [
        "visa",
        "simulation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718720",
    "updated_at": "2025-08-04T16:18:34.718721"
  },
  {
    "name": "SimulateVisaFleetAuthorizationAdvice",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateVisaFleetAuthorizationAdvice($input: SimulateVisaFleetAuthorizationAdviceInput!) {\n  simulateVisaFleetAuthorizationAdvice(input: $input) {\n    __typename\n    ... on TransactionEvent {\n      id\n      createdAt\n      approvedAmount {\n        value\n      }\n      responseCode\n      networkResponseCode\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}",
          "amount": {
            "value": 4000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "visa",
      "path": "Issuance/Transactions/Simulation/Fleet/Visa/Simulate Visa Fleet Authorization Advice",
      "description": "",
      "tags": [
        "visa",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718738",
    "updated_at": "2025-08-04T16:18:34.718738"
  },
  {
    "name": "SimulateVisaFleetClearing",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateVisaFleetClearing($input: SimulateVisaFleetClearingInput!) {\n  simulateVisaFleetClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      responseCode\n      networkResponseCode\n      approvedAmount {\n        value\n      }\n      requestedAmount {\n        value\n      }\n      createdAt\n      merchantDetails {\n        merchantId\n        category\n        categoryCode\n        countryCodeAlpha3\n        description\n        name\n        address {\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n      }\n      additionalTransactionData {\n        id\n        ... on VisaFleetL2TransactionData {\n          id\n          visaFuelPurchaseType\n          visaFuelServiceType\n          visaFuelType\n          visaFuelQuantity\n          visaFuelUnitOfMeasure\n          visaFuelUnitCost\n          visaFuelNetAmount\n          visaFuelGrossAmount\n          visaNonFuelNetAmount\n          visaNonFuelGrossAmount\n          visaTaxRate\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}",
          "amount": {
            "value": 4000,
            "currencyCode": "USD"
          },
          "visaFleetL2TransactionData": {
            "visaFuelPurchaseType": "FUEL_PURCHASE",
            "visaFuelServiceType": "FULL_SERVICE",
            "visaFuelType": "REGULAR",
            "visaFuelQuantity": 100,
            "visaFuelUnitOfMeasure": "GALLON",
            "visaFuelUnitCost": 123,
            "visaFuelNetAmount": 1234,
            "visaFuelGrossAmount": 12345,
            "visaNonFuelNetAmount": 321,
            "visaNonFuelGrossAmount": 4321,
            "visaTaxRate": 1
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "visa",
      "path": "Issuance/Transactions/Simulation/Fleet/Visa/Simulate Visa Fleet Clearing",
      "description": "",
      "tags": [
        "visa",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718764",
    "updated_at": "2025-08-04T16:18:34.718765"
  },
  {
    "name": "SimulateAuthorization",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transaction {\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "amount": {
            "value": 12385,
            "currencyCode": "USD"
          },
          "merchantDetails": {
            "merchantId": "000000000011111",
            "name": "Amazon",
            "description": "Amazon",
            "category": "MISCELLANEOUS_SPECIALTY_RETAIL",
            "address": {
              "postalCode": "94105",
              "region": "CA",
              "locality": "San Francisco",
              "countryCodeAlpha3": "USA"
            }
          },
          "pointOfServiceDetails": {
            "category": "AUTOMATED_FUEL_DISPENSER",
            "cardDataInputCapability": "MAG_STRIPE_READER_AND_EMV_ICC",
            "panEntryMode": "MAGNETIC_STRIPE",
            "pinEntryMode": "PIN_VERIFIED_BY_TERMINAL_DEVICE",
            "terminalAttendance": "ATTENDED",
            "isCardHolderPresent": true,
            "isCardPresent": true,
            "terminalSupportsPartialApproval": true,
            "isRecurring": false
          },
          "transactionProcessingType": "PAYMENT_DEBIT",
          "cardId": "{{paymentCardId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Authorization",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718795",
    "updated_at": "2025-08-04T16:18:34.718796"
  },
  {
    "name": "SimulateReversal",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Reversal",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718808",
    "updated_at": "2025-08-04T16:18:34.718809"
  },
  {
    "name": "SimulateClearing",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Clearing",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "transactionId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718822",
    "updated_at": "2025-08-04T16:18:34.718822"
  },
  {
    "name": "SimulateRefund",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Refund",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718835",
    "updated_at": "2025-08-04T16:18:34.718836"
  },
  {
    "name": "SimulateSingleStepAuthAndClear",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "PAYMENT_CARD_ID",
          "amount": {
            "currencyCode": "USD",
            "value": 1000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Issuance/Transactions/Simulation/Simulate Single Step Auth And Clear",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718855",
    "updated_at": "2025-08-04T16:18:34.718856"
  },
  {
    "name": "GetTransactionEvent",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
      "variables": {
        "id": "te_23kcv4pu1fo157r2o99monfjwpo1sab8rj"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Issuance/Transactions/Get Transaction Event",
      "description": "",
      "tags": [
        "transactions",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718872",
    "updated_at": "2025-08-04T16:18:34.718873"
  },
  {
    "name": "TransactionEventsByPaymentCardAndTransactionId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID",
        "filterBy": {
          "transactionId": {
            "equals": "TRANSACTION_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "transactions",
      "path": "Issuance/Transactions/Transaction Events By Payment Card And Transaction ID",
      "description": "",
      "tags": [
        "transactions"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718892",
    "updated_at": "2025-08-04T16:18:34.718892"
  },
  {
    "name": "GetCardProductTransactionEvents",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "fragment MerchantDetailsFragment on MerchantDetails {\n    name\n    description\n    merchantId\n    category\n    categoryCode\n    address {\n        streetAddress\n        extendedAddress\n        locality\n        region\n        postalCode\n    }\n}\n\nfragment AmountFragment on Amount {\n    currencyCode\n    value\n    decimalPlaces\n}\n\nquery GetCardProductTransactionEvents($id: ID!) {\n    node(id: $id) {\n        ... on CardProduct {\n            transactionEvents {\n                edges {\n                    node {\n                        __typename\n                        id\n                        createdAt\n                        paymentCard {\n                            last4\n                        }\n                        responseCode\n                        approvedAmount {\n                            ... AmountFragment\n                        }\n                        additionalNetworkData {\n                            ... on VisaData {\n                                acquiringInstitutionIdentificationCode\n                                authorizationCode\n                                networkTransmissionDateAndTime\n                                retrievalReferenceNumber\n                                systemTraceAuditNumber\n                                transactionIdentifier\n                            }\n                        }\n                        pointOfServiceDetails {\n                            cardDataInputCapability\n                            category\n                            isCardHolderPresent\n                            isCardPresent\n                            isRecurring\n                            panEntryMode\n                            pinEntryMode\n                            terminalAttendance\n                            terminalSupportsPartialApproval\n                        }\n                        transactionProcessingType\n                        ... on AuthorizationEvent {\n                            requestedAmount {\n                                ... AmountFragment\n                            }\n                            authorizationExpiration\n                            avsResponseCode\n                            cvvResponseCode\n                            postalCodeResponseCode\n                            merchantDetails {\n                                ... MerchantDetailsFragment\n                            }\n                        }\n                        ... on ClearingEvent {\n                            merchantDetails {\n                                ... MerchantDetailsFragment\n                            }\n                        }\n                        ... on ReversalEvent {\n                            issuerExpiredAuthorization\n                            merchantDetails {\n                                ... MerchantDetailsFragment\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "pd_a8414c509ab548e39a6463157a1c59c7"
      }
    },
    "headers": {},
    "metadata": {
      "category": "transactions",
      "path": "Issuance/Transactions/Get Card Product Transaction Events",
      "description": "",
      "tags": [
        "transactions",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "transactionEvents",
        "node",
        "requestedAmount",
        "merchantDetails"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.718920",
    "updated_at": "2025-08-04T16:18:34.718920"
  },
  {
    "name": "LedgerEntry",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccountLedgerActivity(\n    $id: ID!\n    $first: Int\n    $filterBy: LedgerEntriesFilterInput\n    $after: String\n) {\n    node(id: $id) {\n        __typename\n        ... on Ledger {\n            id\n            normalBalance\n            asOf\n            name\n            creditBalance {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n            }\n            debitBalance {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n            }\n            ledgerEntries(\n                first: $first\n                filterBy: $filterBy\n                after: $after\n            ) {\n                ... on LedgerEntryConnection {\n                    pageInfo {\n                        startCursor\n                        endCursor\n                        hasNextPage\n                        hasPreviousPage\n                        __typename\n                    }\n                    edges {\n                        cursor\n                        __typename\n                        node {\n                            __typename\n                            id\n                            ledger {\n                                id\n                                name\n                            }\n                            memo\n                            createdAt\n                            creditBalanceAtLedgerEntry {\n                                value\n                                currencyCode\n                                decimalPlaces\n                                __typename\n                            }\n                            debitBalanceAtLedgerEntry {\n                                value\n                                currencyCode\n                                decimalPlaces\n                                __typename\n                            }\n                            amount {\n                                value\n                                currencyCode\n                                decimalPlaces\n                                __typename\n                            }\n                            financialAccount {\n                                id\n                                owner {\n                                    __typename\n                                    ... on USBusinessAccountHolder {\n                                        id\n                                    }\n                                }\n                            }\n                            financialEvent {\n                                __typename\n                                ... on Node {\n                                    id\n                                    __typename\n                                }\n                                ... on AuthorizationAndClearEvent {\n                                    paymentCard {\n                                        id\n                                        last4\n                                        __typename\n                                    }\n                                    merchantDetails {\n                                        name\n                                        __typename\n                                    }\n                                    pointOfServiceDetails {\n                                        isCardPresent\n                                        __typename\n                                    }\n                                    disputes {\n                                        id\n                                        __typename\n                                    }\n                                    transactionProcessingType\n                                    __typename\n                                }\n                                ... on CreditFundsACHTransferEvent {\n                                    id\n                                    amount {\n                                        value\n                                        currencyCode\n                                        decimalPlaces\n                                    }\n                                    transfer {\n                                        __typename\n                                        ... on CreditFunds {\n                                            id\n                                            amount {\n                                                value\n                                                currencyCode\n                                                decimalPlaces\n                                                __typename\n                                            }\n                                            ledgers {\n                                                id\n                                                name\n                                            }\n                                            companyIdentifier\n                                            companyName\n                                            descriptor {\n                                                companyEntryDescription\n                                                individualName\n                                                __typename\n                                            }\n                                            createdAt\n                                            settlementDate\n                                            status {\n                                                ... on NonFailureExternallyInitiatedACHStatus {\n                                                    status\n                                                    __typename\n                                                }\n                                                ... on FailureExternallyInitiatedACHStatus {\n                                                    status\n                                                    statusReasonCode\n                                                    __typename\n                                                }\n                                                __typename\n                                            }\n                                            toFinancialAccount {\n                                                id\n                                                owner {\n                                                    __typename\n                                                    ... on USBusinessAccountHolder {\n                                                        id\n                                                    }\n                                                }\n                                            }\n                                            __typename\n                                        }\n                                    }\n                                    createdAt\n                                    companyName\n                                    companyIdentifier\n                                    companyEntryDescription\n                                    settlementDate\n                                    returnDate\n                                    externallyInitiatedACHStatus: status {\n                                        ... on NonFailureExternallyInitiatedACHStatus {\n                                            status\n                                            __typename\n                                        }\n                                        ... on FailureExternallyInitiatedACHStatus {\n                                            status\n                                            statusReasonCode\n                                            __typename\n                                        }\n                                        __typename\n                                    }\n                                    toFinancialAccount {\n                                        id\n                                        owner {\n                                            __typename\n                                            ... on USBusinessAccountHolder {\n                                                id\n                                            }\n                                        }\n                                        name\n                                        __typename\n                                    }\n                                    __typename\n                                }\n                                ... on DebitFundsACHTransferEvent {\n                                    externallyInitiatedACHStatus: status {\n                                        ... on NonFailureExternallyInitiatedACHStatus {\n                                            status\n                                            __typename\n                                        }\n                                        ... on FailureExternallyInitiatedACHStatus {\n                                            status\n                                            __typename\n                                        }\n                                        __typename\n                                    }\n                                    fromFinancialAccount {\n                                        id\n                                        owner {\n                                            __typename\n                                            ... on USBusinessAccountHolder {\n                                                id\n                                            }\n                                        }\n                                        name\n                                        __typename\n                                    }\n                                    __typename\n                                }\n                                ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                                    integratorInitiatedACHStatus: status {\n                                        ... on NonFailureIntegratorInitiatedACHStatus {\n                                            status\n                                            __typename\n                                        }\n                                        ... on FailureIntegratorInitiatedACHStatus {\n                                            status\n                                            __typename\n                                        }\n                                        __typename\n                                    }\n                                    toFinancialAccount {\n                                        id\n                                        owner {\n                                            __typename\n                                            ... on USBusinessAccountHolder {\n                                                id\n                                            }\n                                        }\n                                        name\n                                        __typename\n                                    }\n                                    __typename\n                                }\n                                ... on IntegratorInitiatedFundsWithdrawalACHTransferEvent {\n                                    integratorInitiatedACHStatus: status {\n                                        ... on NonFailureIntegratorInitiatedACHStatus {\n                                            status\n                                            __typename\n                                        }\n                                        ... on FailureIntegratorInitiatedACHStatus {\n                                            status\n                                            __typename\n                                        }\n                                        __typename\n                                    }\n                                    fromFinancialAccount {\n                                        id\n                                        owner {\n                                            __typename\n                                            ... on USBusinessAccountHolder {\n                                                id\n                                            }\n                                        }\n                                        name\n                                        __typename\n                                    }\n                                    __typename\n                                }\n                                ... on InterFinancialAccountTransfer {\n                                    amount {\n                                        value\n                                        currencyCode\n                                        decimalPlaces\n                                    }\n                                    interFinancialAccountTransferStatus: status\n                                    interFinancialAccountTransferStatusReason: statusReason\n                                    createdAt\n                                    updatedAt\n                                    fromFinancialAccount {\n                                        id\n                                        owner {\n                                            __typename\n                                            ... on USBusinessAccountHolder {\n                                                id\n                                            }\n                                        }\n                                        name\n                                        __typename\n                                    }\n                                    purpose\n                                    toFinancialAccount {\n                                        id\n                                        owner {\n                                            __typename\n                                            ... on USBusinessAccountHolder {\n                                                id\n                                            }\n                                        }\n                                        name\n                                        __typename\n                                    }\n                                    transferActivityType\n                                    __typename\n                                }\n                                ... on FeeTransferEvent {\n                                    feeTransfer {\n                                        __typename\n                                        ... on ChargedFeeTransfer {\n                                            originatingAccount {\n                                                id\n                                                owner {\n                                                    __typename\n                                                    ... on USBusinessAccountHolder {\n                                                        id\n                                                    }\n                                                }\n                                            }\n                                            receivingAccount {\n                                                id\n                                                owner {\n                                                    __typename\n                                                }\n                                            }\n                                            cardProduct {\n                                                id\n                                            }\n                                            feeActivityType\n                                            feeAmount {\n                                                value\n                                                currencyCode\n                                            }\n                                            transferedFeeAmount {\n                                                value\n                                                currencyCode\n                                            }\n                                            transferDate\n                                            status {\n                                                ... on NonFailureFeeTransferStatus {\n                                                    status\n                                                }\n                                                ... on FailureFeeTransferStatus {\n                                                    status\n                                                    reasonDetails {\n                                                        type\n                                                        reason\n                                                    }\n                                                }\n                                            }\n                                            feeChargeActvity {\n                                                __typename\n                                                ... on PhysicalPaymentCardOrder {\n                                                    id\n                                                }\n                                                ... on PaymentCard {\n                                                    id\n                                                }\n                                                ... on FinancialAccount {\n                                                    id\n                                                }\n                                                ... on SecureDepositACHTransfer {\n                                                    id\n                                                }\n                                                ... on SecureCardBalanceRepaymentACHTransfer {\n                                                    id\n                                                }\n                                                ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                                                    id\n                                                }\n                                                ... on IntegratorInitiatedFundsDepositACHTransfer {\n                                                    id\n                                                }\n                                                ... on AuthorizationAndClearEvent {\n                                                    id\n                                                }\n                                                ... on ClearingEvent {\n                                                    id\n                                                }\n                                                ... on BalanceInquiryEvent {\n                                                    id\n                                                }\n                                            }\n                                        }\n                                        ... on ReversedFeeTransfer {\n                                            originatingAccount {\n                                                id\n                                                owner {\n                                                    __typename\n                                                    ... on USBusinessAccountHolder {\n                                                        id\n                                                    }\n                                                }\n                                            }\n                                            receivingAccount {\n                                                id\n                                                owner {\n                                                    __typename\n                                                }\n                                            }\n                                            transferedFeeAmount {\n                                                value\n                                                currencyCode\n                                            }\n                                            transferDate\n                                            status {\n                                                ... on NonFailureFeeTransferStatus {\n                                                    status\n                                                }\n                                                ... on FailureFeeTransferStatus {\n                                                    status\n                                                    reasonDetails {\n                                                        type\n                                                        reason\n                                                    }\n                                                }\n                                            }\n                                            sourceFeeTransferEvent {\n                                                id\n                                                feeTransfer {\n                                                    __typename\n                                                    ... on ChargedFeeTransfer {\n                                                        feeActivityType\n                                                        __typename\n                                                    }\n                                                }\n                                                __typename\n                                            }\n                                        }\n                                    }\n                                    __typename\n                                }\n                                ... on ManualAdjustmentEvent {\n                                    adjustmentActivityType\n                                    __typename\n                                }\n                                ... on CreditCardTransferEvent {\n                                    accountingDirection\n                                    balanceType\n                                    interestDetails {\n                                        apr\n                                        __typename\n                                    }\n                                    statement {\n                                        id\n                                        __typename\n                                    }\n                                    __typename\n                                }\n                                ... on DisbursementTransferEvent {\n                                    id\n                                    eventType\n                                    __typename\n                                }\n                                ... on WireTransfer {\n                                    id\n                                    ledgers {\n                                        id\n                                        name\n                                    }\n                                    amount {\n                                        value\n                                        currencyCode\n                                        decimalPlaces\n                                    }\n                                    financialAccount {\n                                        id\n                                        owner {\n                                            __typename\n                                            ... on USBusinessAccountHolder {\n                                                id\n                                            }\n                                        }\n                                    }\n                                    createdAt\n                                    updatedAt\n                                    statusReason\n                                    WireTransferStatus: status\n                                    memo\n                                    type\n                                    __typename\n                                }\n                                ... on RewardPointsTransfer {\n                                    id\n                                    rewardPointsValue {\n                                        currencyCode\n                                        value\n                                        __typename\n                                    }\n                                    rewardPointsAmount {\n                                        currencyCode\n                                        value\n                                        __typename\n                                    }\n                                    createdAt\n                                    updatedAt\n                                    status {\n                                        ... on RewardPointsTransferSuccessStatus {\n                                            status\n                                            __typename\n                                        }\n                                        ... on RewardPointsTransferFailureStatus {\n                                            status\n                                            statusReasonCode\n                                            __typename\n                                        }\n                                        __typename\n                                    }\n                                    source\n                                    externalTransactionIdentifier\n                                    activity\n                                    memo\n                                    __typename\n                                }\n                            }\n                        }\n                    }\n                    __typename\n                }\n                __typename\n            }\n            __typename\n        }\n    }\n}",
      "variables": {
        "id": "ac_c022247aa094849a40a59f01ba22166a3c77_a003",
        "first": 100
      }
    },
    "headers": {},
    "metadata": {
      "category": "transactions",
      "path": "Issuance/Transactions/Ledger Entry",
      "description": "",
      "tags": [
        "transactions"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "paymentCard",
        "externallyInitiatedACHStatus",
        "integratorInitiatedACHStatus",
        "integratorInitiatedACHStatus"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719167",
    "updated_at": "2025-08-04T16:18:34.719167"
  },
  {
    "name": "CreateMerchantCategorySpendRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Fuel Rule",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": [
            "AIRLINES_AIR_CARRIERS"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Create Merchant Category Spend Rule",
      "description": "",
      "tags": [
        "spend_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719192",
    "updated_at": "2025-08-04T16:18:34.719193"
  },
  {
    "name": "AttachSpendRuleToCardProduct",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input: $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Attach Spend Rule To Card Product",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719210",
    "updated_at": "2025-08-04T16:18:34.719211"
  },
  {
    "name": "AttachSpendRuleToPaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Attach Spend Rule To Payment Card",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "edges",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719227",
    "updated_at": "2025-08-04T16:18:34.719228"
  },
  {
    "name": "UpdateMerchantCategorySpendRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "spendRuleId": "SPEND_RULE_ID",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": []
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Update Merchant Category Spend Rule",
      "description": "",
      "tags": [
        "spend_rules",
        "modification"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719243",
    "updated_at": "2025-08-04T16:18:34.719243"
  },
  {
    "name": "DetachSpendRuleFromCardProduct",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input: $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Detach Spend Rule From Card Product",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719258",
    "updated_at": "2025-08-04T16:18:34.719258"
  },
  {
    "name": "DetachSpendRuleFromPaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input: $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "spend_rules",
      "path": "Issuance/Authorization Controls/Spend Rules/Detach Spend Rule From Payment Card",
      "description": "",
      "tags": [
        "spend_rules"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719273",
    "updated_at": "2025-08-04T16:18:34.719274"
  },
  {
    "name": "CreateVelocityRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n    ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              version\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Velocity Control - Max $1000 per month",
          "cumulativeRule": {
            "id": "AMOUNT_SPEND_RULE_ID",
            "version": "0"
          },
          "spendRules": [
            {
              "id": "ADDITIONAL_SPEND_RULE_ID",
              "version": "O"
            }
          ],
          "velocityRuleWindow": "MONTHLY"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Create Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719303",
    "updated_at": "2025-08-04T16:18:34.719303"
  },
  {
    "name": "CreateAmountLimitSpendRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input: $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n        currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Amount Limit Rule",
          "maximumAmount": {
            "value": 100000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Create Amount Limit Spend Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719324",
    "updated_at": "2025-08-04T16:18:34.719325"
  },
  {
    "name": "AttachPaymentCardVelocityRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Attach Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719349",
    "updated_at": "2025-08-04T16:18:34.719350"
  },
  {
    "name": "DetachPaymentCardVelocityRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Detach Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719370",
    "updated_at": "2025-08-04T16:18:34.719370"
  },
  {
    "name": "GetAllVelocityRules",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n          updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n              name\n              maximumAmount {\n                value\n                currencyCode\n              }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n          spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Get All Velocity Rules",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719386",
    "updated_at": "2025-08-04T16:18:34.719386"
  },
  {
    "name": "GetPaymentCardVelocityRule",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n  \t}\n\t}\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Get Payment Card Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "currentBalance",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719404",
    "updated_at": "2025-08-04T16:18:34.719404"
  },
  {
    "name": "GetFinancialAccountWithVelocityBalance",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n            version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Get Financial Account With Velocity Balance",
      "description": "",
      "tags": [
        "velocity_rules",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719421",
    "updated_at": "2025-08-04T16:18:34.719422"
  },
  {
    "name": "AttachCardProductVelocityRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Attach Card Product Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719442",
    "updated_at": "2025-08-04T16:18:34.719442"
  },
  {
    "name": "DetachCardProductVelocityRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "velocity_rules",
      "path": "Issuance/Authorization Controls/Velocity Rules/Detach Card Product Velocity Rule",
      "description": "",
      "tags": [
        "velocity_rules"
      ],
      "requires": [],
      "produces": [
        "velocityRule",
        "pageInfo",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719461",
    "updated_at": "2025-08-04T16:18:34.719461"
  },
  {
    "name": "AddCollaborativeAuthorizationEndpoint",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddCollaborativeAuthorizationEndpoint($input: AddCollaborativeAuthorizationEndpointInput!) {\n  addCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on  CollaborativeAuthorizationEndpoint{\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Collaborative Auth Endpoint",
          "uri": "https://example.com"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Add Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719481",
    "updated_at": "2025-08-04T16:18:34.719481"
  },
  {
    "name": "ActivateCollaborativeAuthorizationEndpoint",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ActivateCollaborativeAuthorizationEndpoint($input: ActivateCollaborativeAuthorizationEndpointInput!) {\n  activateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Activate Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "activation"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719507",
    "updated_at": "2025-08-04T16:18:34.719509"
  },
  {
    "name": "GetCollaborativeAuthorizationEndpoint",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindCollaborativeAuthorizationEndpoint($id: ID!) {\n  node(id: $id) {\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{collabAuthEndpointId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Get Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "retrieval"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719535",
    "updated_at": "2025-08-04T16:18:34.719536"
  },
  {
    "name": "DeactivateCollaborativeAuthorizationEndpoint",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateCollaborativeAuthorizationEndpoint($input: DeactivateCollaborativeAuthorizationEndpointInput!) {\n  deactivateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on  CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Deactivate Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "activation"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719561",
    "updated_at": "2025-08-04T16:18:34.719562"
  },
  {
    "name": "RemoveCollaborativeAuthorizationEndpoint",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveCollaborativeAuthorizationEndpoint($input: RemoveCollaborativeAuthorizationEndpointInput!) {\n  removeCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Remove Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719591",
    "updated_at": "2025-08-04T16:18:34.719592"
  },
  {
    "name": "GetCollaborativeAuthorizationEndpoints",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query CollaborativeAuthorizationEndpoints($after: String, $first: Int) {\n\torganizations{\n\t\tid\n\t\tcollaborativeAuthorizationEndpoints(first: $first, after: $after) {\n\t\t\t__typename\n\n\t\t\tedges {\n\t\t\t\t__typename\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tsigningKeys {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tsecret\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Get Collaborative Authorization Endpoints",
      "description": "",
      "tags": [
        "collaborative_authorization",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719609",
    "updated_at": "2025-08-04T16:18:34.719610"
  },
  {
    "name": "RenameCollaborativeAuthorizationEndpoint",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RenameCollaborativeAuthorizationEndpoint($input: RenameCollaborativeAuthorizationEndpointInput!) {\n  renameCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}",
          "name": "Renamed Collaborative Auth Endpoint"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "collaborative_authorization",
      "path": "Issuance/Authorization Controls/Collaborative Authorization/Rename Collaborative Authorization Endpoint",
      "description": "",
      "tags": [
        "collaborative_authorization"
      ],
      "requires": [
        "collabAuthEndpointId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719627",
    "updated_at": "2025-08-04T16:18:34.719628"
  },
  {
    "name": "SetCreditLimitForFinancialAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          },
          "memo": "Set Credit Limit $2000"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "credit_limit",
      "path": "Issuance/Credit Limit/Set Credit Limit For Financial Account",
      "description": "",
      "tags": [
        "credit_limit"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719653",
    "updated_at": "2025-08-04T16:18:34.719654"
  },
  {
    "name": "GetFinancialAccountCreditLimitUpdate",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountCreditLimitUpdateId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "credit_limit",
      "path": "Issuance/Credit Limit/Get Financial Account Credit Limit Update",
      "description": "",
      "tags": [
        "credit_limit",
        "modification",
        "retrieval"
      ],
      "requires": [
        "financialAccountCreditLimitUpdateId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719716",
    "updated_at": "2025-08-04T16:18:34.719716"
  },
  {
    "name": "IncreaseAvailableCreditForFinancialAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IncreaseAvailableCreditForFinancialAccount(\n  $input: InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput!\n) {\n  initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(\n    input: $input\n  ) {\n    __typename\n    ... on InterFinancialAccountTransfer {\n      id\n      status\n      statusReason\n      createdAt\n      updatedAt\n      memo\n      amount {\n        value\n        currencyCode\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "PRODUCT_BALANCE_ID",
          "memo": "Increase available credit by $2000",
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "available_credit",
      "path": "Issuance/Available Credit/Increase Available Credit For Financial Account",
      "description": "",
      "tags": [
        "available_credit"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719743",
    "updated_at": "2025-08-04T16:18:34.719743"
  },
  {
    "name": "DecreaseAvailableCreditForFinancialAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DecreaseAvailableCreditForFinancialAccount(\n  $input: InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountInput!\n) {\n  initiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccount(\n    input: $input\n  ) {\n    __typename\n    ... on InterFinancialAccountTransfer {\n      id\n      status\n      statusReason\n      createdAt\n      updatedAt\n      memo\n      amount {\n        value\n        currencyCode\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "PRODUCT_BALANCE_ID",
          "memo": "Decrease Available Credit By $100",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "available_credit",
      "path": "Issuance/Available Credit/Decrease Available Credit For Financial Account",
      "description": "",
      "tags": [
        "available_credit"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719762",
    "updated_at": "2025-08-04T16:18:34.719763"
  },
  {
    "name": "CreateMerchantCategoryRewardEarnRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRewardMerchantCategoryEarnRule(\n  $input: CreateRewardMerchantCategoryEarnRuleInput!\n  $firstAttachments: Int\n  $afterAttachments: String\n) {\n  createRewardMerchantCategoryEarnRule(input: $input) {\n    __typename\n    ... on RewardMerchantCategoryEarnRule {\n      id\n      type\n      name\n      attachments(first: $firstAttachments, after: $afterAttachments) {\n        __typename\n\n        ... on RewardRuleAttachmentConnection {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                rewardEarnRule {\n                  id\n                }\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      allowedList\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Dining Reward Rule",
          "rewardPointEarning": {
            "rate": "1.5"
          },
          "allowedList": [
            "EATING_PLACES_RESTAURANTS",
            "FAST_FOOD_RESTAURANTS"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "earn_rule",
      "path": "Issuance/Rewards/Earn Rule/Create Merchant Category Reward Earn Rule",
      "description": "",
      "tags": [
        "earn_rule",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "node",
        "rewardEarnRule",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719790",
    "updated_at": "2025-08-04T16:18:34.719790"
  },
  {
    "name": "CreateDefaultRewardEarnRule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRewardDefaultEarnRule(\n  $input: CreateRewardDefaultEarnRuleInput!\n) {\n  createRewardDefaultEarnRule(input: $input) {\n    __typename\n    ... on RewardDefaultEarnRule {\n      id\n      type\n      name\n      attachments {\n        __typename\n\n        ... on RewardRuleAttachmentConnection {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n            startCursor\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                rewardEarnRule {\n                  id\n                }\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Default Reward Earn Rule",
          "rewardPointEarning": {
            "rate": "1"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "earn_rule",
      "path": "Issuance/Rewards/Earn Rule/Create Default Reward Earn Rule",
      "description": "",
      "tags": [
        "earn_rule",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "node",
        "rewardEarnRule",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719808",
    "updated_at": "2025-08-04T16:18:34.719809"
  },
  {
    "name": "AttachRewardEarnRuleToProduct",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachRewardEarnRuleToProduct(\n  $input: AttachRewardEarnRuleToProductInput!\n) {\n  attachRewardEarnRuleToProduct(input: $input) {\n    __typename\n    ... on RewardRuleProductAttachment {\n      effectiveFrom\n      effectiveThrough\n      rewardEarnRule {\n        id\n      }\n      ... on RewardRuleProductAttachment {\n        cardProduct {\n          id\n        }\n      }\n    }\n\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "rewardRule": {
            "id": "{{rewardMerchantCategoryEarnRuleId}}"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "earn_rule",
      "path": "Issuance/Rewards/Earn Rule/Attach Reward Earn Rule To Product",
      "description": "",
      "tags": [
        "earn_rule"
      ],
      "requires": [
        "rewardMerchantCategoryEarnRuleId",
        "cardProductId"
      ],
      "produces": [
        "cardProduct",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719827",
    "updated_at": "2025-08-04T16:18:34.719828"
  },
  {
    "name": "UpdateRewardEarnRuleAttachment",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateRewardRuleAttachment($input: UpdateRewardRuleAttachmentInput!) {\n  updateRewardRuleAttachment(input: $input) {\n    __typename\n    ... on RewardRuleProductAttachment {\n      id\n      cardProduct {\n        id\n      }\n      rewardEarnRule {\n        id\n      }\n      effectiveFrom\n      effectiveThrough\n    }\n\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "attachmentId": "{{rewardEarnRuleAttachmentId}}",
          "effectiveThrough": "2024-03-24T00:00:00.000Z"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "earn_rule",
      "path": "Issuance/Rewards/Earn Rule/Update Reward Earn Rule Attachment",
      "description": "",
      "tags": [
        "earn_rule",
        "modification"
      ],
      "requires": [
        "rewardEarnRuleAttachmentId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719844",
    "updated_at": "2025-08-04T16:18:34.719844"
  },
  {
    "name": "FindRewardEarnRuleById",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindRewardEarnRuleById($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on RewardMerchantCategoryEarnRule {\n      id\n      type\n      name\n      attachments(first: $first, after: $after) {\n        __typename\n        ... on RewardRuleAttachmentConnection {\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      allowedList\n      updatedAt\n    }\n    ... on RewardDefaultEarnRule {\n      id\n      type\n      name\n      attachments {\n        __typename\n        ... on RewardRuleAttachmentConnection {\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{rewardMerchantCategoryEarnRuleId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "earn_rule",
      "path": "Issuance/Rewards/Earn Rule/Find Reward Earn Rule By ID",
      "description": "",
      "tags": [
        "earn_rule"
      ],
      "requires": [
        "rewardMerchantCategoryEarnRuleId"
      ],
      "produces": [
        "edges",
        "cardProduct",
        "edges",
        "cardProduct"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719865",
    "updated_at": "2025-08-04T16:18:34.719866"
  },
  {
    "name": "FindRewardEarnRuleByProductId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindCardProductWithRewardRules($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on CardProduct {\n      attachedRewardRules {\n        ... on RewardRuleAttachmentConnection {\n          pageInfo {\n            startCursor\n            hasNextPage\n          }\n          edges {\n            node {\n              __typename\n              effectiveFrom\n              effectiveThrough\n              rewardEarnRule {\n                ... on RewardMerchantCategoryEarnRule {\n                  id\n                  type\n                  name\n                  attachments {\n                    __typename\n                    ... on RewardRuleAttachmentConnection {\n                      edges {\n                        node {\n                          effectiveFrom\n                          effectiveThrough\n                          ... on RewardRuleProductAttachment {\n                            cardProduct {\n                              id\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  rewardPointEarning {\n                    rate\n                  }\n                  createdAt\n                  allowedList\n                  updatedAt\n                }\n                ... on RewardDefaultEarnRule {\n                  id\n                  type\n                  name\n                  attachments {\n                    __typename\n                    ... on RewardRuleAttachmentConnection {\n                      edges {\n                        node {\n                          effectiveFrom\n                          effectiveThrough\n                          ... on RewardRuleProductAttachment {\n                            cardProduct {\n                              id\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  rewardPointEarning {\n                    rate\n                  }\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "earn_rule",
      "path": "Issuance/Rewards/Earn Rule/Find Reward Earn Rule By Product ID",
      "description": "",
      "tags": [
        "earn_rule"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "attachedRewardRules",
        "pageInfo",
        "node",
        "edges",
        "cardProduct"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719892",
    "updated_at": "2025-08-04T16:18:34.719893"
  },
  {
    "name": "FindRewardEarnRuleByOrganization",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindOrganizationWithRewardRules($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on Organization {\n      rewardEarnRules {\n        ... on RewardEarnRuleConnection {\n          edges {\n            node {\n              __typename\n              ... on RewardMerchantCategoryEarnRule {\n                id\n                type\n                name\n                attachments {\n                  __typename\n                  ... on RewardRuleAttachmentConnection {\n                    edges {\n                      node {\n                        effectiveFrom\n                        effectiveThrough\n                        ... on RewardRuleProductAttachment {\n                          cardProduct {\n                            id\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                rewardPointEarning {\n                  rate\n                }\n                allowedList\n                createdAt\n                updatedAt\n              }\n\n              ... on RewardDefaultEarnRule {\n                id\n                type\n                name\n                attachments {\n                  __typename\n                  ... on RewardRuleAttachmentConnection {\n                    edges {\n                      node {\n                        effectiveFrom\n                        effectiveThrough\n                        ... on RewardRuleProductAttachment {\n                          cardProduct {\n                            id\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                rewardPointEarning {\n                  rate\n                }\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{organizationId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "earn_rule",
      "path": "Issuance/Rewards/Earn Rule/Find Reward Earn Rule By Organization",
      "description": "",
      "tags": [
        "earn_rule"
      ],
      "requires": [
        "organizationId"
      ],
      "produces": [
        "rewardEarnRules",
        "edges",
        "edges",
        "cardProduct",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719916",
    "updated_at": "2025-08-04T16:18:34.719917"
  },
  {
    "name": "CreateRewardRedemptionConfiguration",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRewardRedemptionConfiguration(\n  $input: CreateRewardRedemptionConfigurationInput!\n) {\n  createRewardRedemptionConfiguration(input: $input) {\n    __typename\n    ... on RewardRedemptionConfiguration {\n      id\n      type\n      name\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        ... on RewardRedemptionConfigurationAttachmentConnection {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n            startCursor\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              redemptionConfiguration {\n                id\n              }\n              ... on RewardRedemptionConfigurationProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Rewards Redemption Configuration",
          "rewardPointRedemption": {
            "rate": "1.0"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Issuance/Rewards/Redemption/Create Reward Redemption Configuration",
      "description": "",
      "tags": [
        "redemption",
        "creation"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "node",
        "cardProduct",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719948",
    "updated_at": "2025-08-04T16:18:34.719949"
  },
  {
    "name": "AttachRewardRedemptionConfigurationToProduct",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AttachRewardRedemptionConfigurationToProduct(\n  $input: AttachRewardRedemptionConfigurationToProductInput!\n) {\n  attachRewardRedemptionConfigurationToProduct(input: $input) {\n    __typename\n    ... on RewardRedemptionConfigurationProductAttachment {\n      redemptionConfiguration {\n        id\n      }\n      cardProduct {\n        id\n      }\n      effectiveFrom\n      effectiveThrough\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "redemptionConfiguration": {
            "id": "{{rewardRedemptionConfigurationId}}"
          },
          "cardProductId": "{{cardProductId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Issuance/Rewards/Redemption/Attach Reward Redemption Configuration To Product",
      "description": "",
      "tags": [
        "redemption"
      ],
      "requires": [
        "rewardRedemptionConfigurationId",
        "cardProductId"
      ],
      "produces": [
        "redemptionConfiguration",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719969",
    "updated_at": "2025-08-04T16:18:34.719969"
  },
  {
    "name": "UpdateRewardRedemptionConfigurationAttachment",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateRewardRedemptionConfigurationAttachment(\n  $input: UpdateRewardRedemptionConfigurationAttachmentInput!\n) {\n  updateRewardRedemptionConfigurationAttachment(input: $input) {\n    __typename\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      cardProduct {\n        id\n      }\n      redemptionConfiguration {\n        id\n      }\n      effectiveFrom\n      effectiveThrough\n    }\n\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "attachmentId": "{{rewardRedemptionConfigurationProductAttachmentId}}",
          "effectiveThrough": "2023-03-24T00:00:00.000Z"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Issuance/Rewards/Redemption/Update Reward Redemption Configuration Attachment",
      "description": "",
      "tags": [
        "redemption",
        "modification"
      ],
      "requires": [
        "rewardRedemptionConfigurationProductAttachmentId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.719987",
    "updated_at": "2025-08-04T16:18:34.719988"
  },
  {
    "name": "FindRewardRedemptionConfigurationById",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindRewardRedemptionConfigurationById($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on RewardRedemptionConfiguration {\n      id\n      type\n      name\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        ... on RewardRedemptionConfigurationAttachmentConnection {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n            startCursor\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              redemptionConfiguration {\n                id\n              }\n              ... on RewardRedemptionConfigurationProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{rewardRedemptionConfigurationId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Issuance/Rewards/Redemption/Find Reward Redemption Configuration By ID",
      "description": "",
      "tags": [
        "redemption"
      ],
      "requires": [
        "rewardRedemptionConfigurationId"
      ],
      "produces": [
        "pageInfo",
        "node",
        "cardProduct"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720003",
    "updated_at": "2025-08-04T16:18:34.720004"
  },
  {
    "name": "FindRewardRedemptionConfigurationsByProductId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindCardProductWithRewardRules($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on CardProduct {\n      attachedRewardRedemptionConfigurations {\n        ... on RewardRedemptionConfigurationAttachmentConnection {\n          pageInfo {\n            startCursor\n            hasNextPage\n          }\n          edges {\n            node {\n              __typename\n              effectiveFrom\n              effectiveThrough\n              redemptionConfiguration {\n                ... on RewardRedemptionConfiguration {\n                  id\n                  type\n                  name\n                  rewardPointRedemption {\n                    rate\n                  }\n                  attachments {\n                    ... on RewardRedemptionConfigurationAttachmentConnection {\n                      pageInfo {\n                        hasNextPage\n                        hasPreviousPage\n                        endCursor\n                        startCursor\n                      }\n                      edges {\n                        cursor\n                        node {\n                          effectiveFrom\n                          effectiveThrough\n                          redemptionConfiguration {\n                            id\n                          }\n                          ... on RewardRedemptionConfigurationProductAttachment {\n                            cardProduct {\n                              id\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Issuance/Rewards/Redemption/Find Reward Redemption Configurations By Product ID",
      "description": "",
      "tags": [
        "redemption"
      ],
      "requires": [
        "cardProductId"
      ],
      "produces": [
        "attachedRewardRedemptionConfigurations",
        "pageInfo",
        "node",
        "pageInfo",
        "cardProduct"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720025",
    "updated_at": "2025-08-04T16:18:34.720026"
  },
  {
    "name": "FindRewardRedemptionConfigurationsByOrganizationId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindOrganizationWithRedemptionConfigurations(\n  $id: ID!\n  $first: Int\n  $after: String\n) {\n  node(id: $id) {\n    __typename\n    ... on Organization {\n      rewardRedemptionConfigurations(first: $first, after: $after) {\n        ... on RewardRedemptionConfigurationConnection {\n          edges {\n            node {\n              __typename\n              ... on RewardRedemptionConfiguration {\n                id\n                rewardPointRedemption {\n                  rate\n                }\n                attachments {\n                  ... on RewardRedemptionConfigurationAttachmentConnection {\n                    pageInfo {\n                      hasNextPage\n                      hasPreviousPage\n                      endCursor\n                      startCursor\n                    }\n                    edges {\n                      node {\n                        effectiveFrom\n                        effectiveThrough\n                        redemptionConfiguration {\n                          id\n                        }\n                        ... on RewardRedemptionConfigurationProductAttachment {\n                          cardProduct {\n                            id\n                          }\n                          redemptionConfiguration {\n                            id\n                          }\n                          effectiveFrom\n                          effectiveThrough\n                        }\n                      }\n                    }\n                  }\n                }\n\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "ORGANIZATION_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Issuance/Rewards/Redemption/Find Reward Redemption Configurations By Organization ID",
      "description": "",
      "tags": [
        "redemption"
      ],
      "requires": [],
      "produces": [
        "edges",
        "pageInfo",
        "node",
        "cardProduct"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720048",
    "updated_at": "2025-08-04T16:18:34.720049"
  },
  {
    "name": "RedeemRewardsForStatementCredit",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RedeemRewards($input: RedeemRewardsForStatementCreditInput!) {\n  redeemRewardsForStatementCredit(input: $input) {\n    __typename\n    ... on RewardPointsTransfer {\n      id\n      rewardPointsValue {\n        currencyCode\n        value\n      }\n      rewardPointsAmount {\n        currencyCode\n        value\n      }\n      createdAt\n      updatedAt\n      ledgers {\n        name\n      }\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      activity\n      memo\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "redemption": {
            "redemptionConfigurationId": "{{rewardRedemptionConfigurationProductAttachmentId}}",
            "pointsToRedeem": 25
          },
          "memo": "memo",
          "externalTransactionIdentifier": "external-transaction-id"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "redemption",
      "path": "Issuance/Rewards/Redemption/Redeem Rewards For Statement Credit",
      "description": "",
      "tags": [
        "redemption"
      ],
      "requires": [
        "rewardRedemptionConfigurationProductAttachmentId",
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720070",
    "updated_at": "2025-08-04T16:18:34.720071"
  },
  {
    "name": "CreateRewardPointsAdjustment",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRewardPointsAdjustment(\n  $input: CreateRewardPointsAdjustmentInput!\n) {\n  createRewardPointsAdjustment(input: $input) {\n    __typename\n    ... on RewardPointsTransfer {\n      id\n      rewardPointsValue {\n        currencyCode\n        value\n      }\n      rewardPointsAmount {\n        currencyCode\n        value\n      }\n      createdAt\n      updatedAt\n      ledgers {\n        name\n      }\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      activity\n      memo\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "activity": "DEDUCT",
          "pointsToAdjust": 5,
          "memo": "memo"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "rewards",
      "path": "Issuance/Rewards/Create Reward Points Adjustment",
      "description": "",
      "tags": [
        "rewards",
        "creation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720091",
    "updated_at": "2025-08-04T16:18:34.720092"
  },
  {
    "name": "FindRewardPointTransfersByFinancialAccountId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccountWithRewardPointTransfers($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      rewardPointsTransfers {\n        ... on RewardPointsTransferConnection {\n          edges {\n            node {\n              ... on RewardPointsTransfer {\n                id\n                rewardPointsValue {\n                  currencyCode\n                  value\n                }\n                rewardPointsAmount {\n                  currencyCode\n                  value\n                }\n                createdAt\n                updatedAt\n                ledgers {\n                  name\n                }\n                status {\n                  ... on RewardPointsTransferSuccessStatus {\n                    status\n                  }\n                  ... on RewardPointsTransferFailureStatus {\n                    status\n                    statusReasonCode\n                  }\n                }\n                activity\n                source\n                memo\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "rewards",
      "path": "Issuance/Rewards/Find Reward Point Transfers By Financial Account ID",
      "description": "",
      "tags": [
        "rewards"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "rewardPointsTransfers",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720115",
    "updated_at": "2025-08-04T16:18:34.720116"
  },
  {
    "name": "FindRewardPointTransfersByFinancialAccountIdCopy",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccountWithRewardPointTransfers($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      rewardPointsTransfers {\n        ... on RewardPointsTransferConnection {\n          edges {\n            node {\n              ... on RewardPointsTransfer {\n                id\n                rewardPointsValue {\n                  currencyCode\n                  value\n                }\n                rewardPointsAmount {\n                  currencyCode\n                  value\n                }\n                createdAt\n                updatedAt\n                ledgers {\n                  name\n                }\n                status {\n                  ... on RewardPointsTransferSuccessStatus {\n                    status\n                  }\n                  ... on RewardPointsTransferFailureStatus {\n                    status\n                    statusReasonCode\n                  }\n                }\n                activity\n                source\n                memo\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "rewards",
      "path": "Issuance/Rewards/Find Reward Point Transfers By Financial Account ID Copy",
      "description": "",
      "tags": [
        "rewards"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "rewardPointsTransfers",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720136",
    "updated_at": "2025-08-04T16:18:34.720137"
  },
  {
    "name": "FindRewardPointTransferById",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccountWithRewardPointTransfers($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      rewardPointsTransfers {\n        ... on RewardPointsTransferConnection {\n          edges {\n            node {\n              ... on RewardPointsTransfer {\n                id\n                rewardPointsValue {\n                  currencyCode\n                  value\n                }\n                rewardPointsAmount {\n                  currencyCode\n                  value\n                }\n                createdAt\n                updatedAt\n                ledgers {\n                  name\n                }\n                status {\n                  ... on RewardPointsTransferSuccessStatus {\n                    status\n                  }\n                  ... on RewardPointsTransferFailureStatus {\n                    status\n                    statusReasonCode\n                  }\n                }\n                activity\n                source\n                memo\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "rewards",
      "path": "Issuance/Rewards/Find Reward Point Transfer By ID",
      "description": "",
      "tags": [
        "rewards"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "rewardPointsTransfers",
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720156",
    "updated_at": "2025-08-04T16:18:34.720157"
  },
  {
    "name": "FindRewardsPointsLedgerByFinancialAccountId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindRewardsPointsLedgerByFinancialAccountId($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      ledgers(ledgerNames: [REWARDS_POINTS]) {\n        id\n        name\n        debitBalance {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "rewards",
      "path": "Issuance/Rewards/Find Rewards Points Ledger By Financial Account ID",
      "description": "",
      "tags": [
        "rewards"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720171",
    "updated_at": "2025-08-04T16:18:34.720172"
  },
  {
    "name": "FindRedeemableRewardPointsLedgerByFinancialAccountId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindRedeemableRewardsPointsLedgerByFinancialAccountId($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      ledgers(ledgerNames: [REDEEMABLE_REWARDS_POINTS]) {\n        id\n        name\n        debitBalance {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "rewards",
      "path": "Issuance/Rewards/Find Redeemable Reward Points Ledger By Financial Account ID",
      "description": "",
      "tags": [
        "rewards"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720187",
    "updated_at": "2025-08-04T16:18:34.720187"
  },
  {
    "name": "FindRewardsPointsLedgerById",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindLedger($id: ID!) {\n  node(id: $id) {\n    ... on Ledger {\n      id\n      name\n      normalBalance\n      asOf\n      debitBalance {\n        value\n        currencyCode\n      }\n      ledgerEntries {\n        edges {\n          node {\n            __typename\n            id\n            amount {\n              value\n            }\n            journalEntry {\n              credits {\n                id\n                amount {\n                  value\n                }\n              }\n              debits {\n                id\n                amount {\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "LEDGER_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "rewards",
      "path": "Issuance/Rewards/Find Rewards Points Ledger By ID",
      "description": "",
      "tags": [
        "rewards"
      ],
      "requires": [],
      "produces": [
        "edges",
        "credits"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720205",
    "updated_at": "2025-08-04T16:18:34.720206"
  },
  {
    "name": "InitiateTransferBetweenFinancialAccounts",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateTransferBetweenFinancialAccounts($input: InitiateTransferBetweenFinancialAccountsInput!) {\n  initiateTransferBetweenFinancialAccounts(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      amount {\n        currencyCode\n        value\n      }\n      createdAt\n      id\n      memo\n      purpose\n      status\n      statusReason\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "currencyCode": "USD",
            "value": 999999
          },
          "memo": "Fund",
          "purpose": "GENERAL",
          "toFinancialAccountId": "ac_c022ed563d6c4bb044e9ab1b04e05f93c2d3",
          "fromFinancialAccountId": "{{productFundingFinancialAccountId}}"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "inter_financial_account_transfers",
      "path": "Funding/Inter Financial Account Transfers/Initiate Transfer Between Financial Accounts",
      "description": "",
      "tags": [
        "inter_financial_account_transfers"
      ],
      "requires": [
        "productFundingFinancialAccountId"
      ],
      "produces": [
        "amount",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720232",
    "updated_at": "2025-08-04T16:18:34.720232"
  },
  {
    "name": "InitiateTransferFromFundingAccountToCardAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation TransferFromFundingToCardAccount($input: InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput!) {\n  initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      status\n      memo\n      createdAt\n      amount {\n        value\n        currencyCode\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "fromFinancialAccountId": "PRODUCT_FUNDING_ACCOUNT",
          "toFinancialAccountId": "CARD_FUNDING_ACCOUNT",
          "amount": {
            "value": "50000",
            "currencyCode": "USD"
          },
          "memo": "Card Funding"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "inter_financial_account_transfers",
      "path": "Funding/Inter Financial Account Transfers/Initiate Transfer From Funding Account to Card Account",
      "description": "",
      "tags": [
        "inter_financial_account_transfers"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720254",
    "updated_at": "2025-08-04T16:18:34.720255"
  },
  {
    "name": "InitiateTransferFromCardAccountToFundingAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation TransferFromPaymentCardToProductFunding($input: InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountInput!) {\n  initiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccount(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "PRODUCT_FUNDING_ACCOUNT",
          "toFinancialAccountId": "CARD_FUNDING_ACCOUNT",
          "amount": {
            "value": "50000",
            "currencyCode": "USD"
          },
          "memo": "Card Funding"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "inter_financial_account_transfers",
      "path": "Funding/Inter Financial Account Transfers/Initiate Transfer From Card Account to Funding Account",
      "description": "",
      "tags": [
        "inter_financial_account_transfers"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720274",
    "updated_at": "2025-08-04T16:18:34.720274"
  },
  {
    "name": "GetInterFinancialAccountTransferStatus",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query CheckAccountTransferStatus($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on InterFinancialAccountTransfer {\n      id\n      status\n      statusReason\n    }\n  }\n}",
      "variables": {
        "id": "TRANSFER_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "inter_financial_account_transfers",
      "path": "Funding/Inter Financial Account Transfers/Get Inter Financial Account Transfer Status",
      "description": "",
      "tags": [
        "inter_financial_account_transfers",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720289",
    "updated_at": "2025-08-04T16:18:34.720290"
  },
  {
    "name": "EnableOnDemandFundingFeature",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EnableOnDemandFundingFeature($input: EnableOnDemandFundingFeatureInput!) {\n  enableOnDemandFundingFeature(input: $input) {\n    ... on CardProduct {\n      features {\n        __typename\n        createdAt\n        updatedAt\n        enabled\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "pseudoBalanceEnabled": false
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "on_demand_funding",
      "path": "Funding/On Demand Funding/Enable On Demand Funding Feature",
      "description": "",
      "tags": [
        "on_demand_funding"
      ],
      "requires": [],
      "produces": [
        "features"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720307",
    "updated_at": "2025-08-04T16:18:34.720307"
  },
  {
    "name": "IssueFundingFinancialAccountForApplication",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFundingFinancialAccountForApplication($input: IssueFundingFinancialAccountForApplicationInput!) {\n  issueFundingFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      cardProduct {\n        id\n        name\n        usage\n        vertical\n        commercial\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                extendedAddress\n                postalCode\n                region\n                locality\n                countryCodeAlpha3\n              }\n            }\n            type\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n        createdAt\n        updatedAt\n      }\n      accountStatus\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "ap_22bcgmf36022ae9f8341fbb9f1e69cef5c92ae",
          "name": "Test Business Funding Account"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "on_demand_funding",
      "path": "Funding/On Demand Funding/Issue Funding Financial Account For Application",
      "description": "",
      "tags": [
        "on_demand_funding",
        "issuance"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720328",
    "updated_at": "2025-08-04T16:18:34.720328"
  },
  {
    "name": "IssueFinancialAccountForApplicationWithOdfSourceCopy2",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFinancialAccountForApplicationWithOnDemandFundingSource($input: IssueFinancialAccountForApplicationWithOnDemandFundingSourceInput!) {\n  issueFinancialAccountForApplicationWithOnDemandFundingSource(input: $input) {\n    ... on FinancialAccount {\n      id\n      features {\n        __typename\n        enabled\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "{{businessAccountHolderApplicationId}}",
          "name": "Test Financial Account",
          "sourceFinancialAccountId": "{{fundingFinancialAccountId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "on_demand_funding",
      "path": "Funding/On Demand Funding/Issue Financial Account for Application With ODF Source Copy 2",
      "description": "",
      "tags": [
        "on_demand_funding",
        "issuance"
      ],
      "requires": [
        "fundingFinancialAccountId",
        "businessAccountHolderApplicationId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720347",
    "updated_at": "2025-08-04T16:18:34.720347"
  },
  {
    "name": "InitiatePseudoBalanceUpdate",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFinancialAccountPseudoBalanceUpdate($input: InitiateFinancialAccountPseudoBalanceUpdateInput!) {\n  initiateFinancialAccountPseudoBalanceUpdate(input: $input) {\n    ... on FinancialAccountPseudoBalanceUpdate {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "currencyCode": "USD",
            "value": 10000000
          },
          "memo": ""
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "on_demand_funding",
      "path": "Funding/On Demand Funding/Initiate Pseudo Balance Update",
      "description": "",
      "tags": [
        "on_demand_funding",
        "modification"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720365",
    "updated_at": "2025-08-04T16:18:34.720365"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughPlaid",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      externalBankAccountDetails {\n        id\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Add External Bank Account Verified Through Plaid",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720389",
    "updated_at": "2025-08-04T16:18:34.720390"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughFinicity",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughFinicity($input: AddExternalBankAccountVerifiedThroughFinicityInput!) {\n  addExternalBankAccountVerifiedThroughFinicity(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      owner {\n        ... on USPersonAccountHolder {\n          id\n          externalId\n        }\n        ... on USBusinessAccountHolder {\n          id\n          externalId\n        }\n      }\n      name\n      provider\n      accountStatus\n      createdAt\n      updatedAt\n      externalBankAccountDetails {\n        id\n        last4\n        type\n        routingNumber\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "name": "Finicity Checking",
          "bankAccountType": "CHECKING",
          "externalToken": {
            "receiptId": "processor-token-success",
            "customerId": "5543088633794259024",
            "products": [
              {
                "productType": "ACH_DETAILS",
                "accountId": "8977412844634022494",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "CURRENT_BALANCE",
                "accountId": "1045023535892401594",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "APPROXIMATE_BALANCE",
                "accountId": "7895597441790621692",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "ACH_OWNER_DETAILS",
                "accountId": "5200183909259568542",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              }
            ]
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Add External Bank Account Verified Through Finicity",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720428",
    "updated_at": "2025-08-04T16:18:34.720428"
  },
  {
    "name": "GetExternalFinancialAccountsByAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Get External Financial Accounts By Account Holder",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "externalFinancialAccounts",
        "externalFinancialAccounts"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720453",
    "updated_at": "2025-08-04T16:18:34.720453"
  },
  {
    "name": "InitiateFundsDepositAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "descriptor": {
            "companyEntryDescription": "Company",
            "individualIdentificationNumber": "",
            "individualName": "Baja ABC"
          },
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2022-12-07T14:42:52.453Z",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Initiate Funds Deposit ACH Transfer",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720479",
    "updated_at": "2025-08-04T16:18:34.720479"
  },
  {
    "name": "InitiateFundsWithdrawalAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "descriptor": {
            "companyEntryDescription": "Test Entry",
            "individualName": "Test",
            "individualIdentificationNumber": "1234"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-07T14:42:52.453Z",
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          },
          "idempotencyKey": "abcde123",
          "cancellationPeriodMillis": 0,
          "sameDay": false
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Initiate Funds Withdrawal ACH Transfer",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720504",
    "updated_at": "2025-08-04T16:18:34.720504"
  },
  {
    "name": "SimulateProcessingIntegratorInitiatedStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Simulate Processing Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720525",
    "updated_at": "2025-08-04T16:18:34.720526"
  },
  {
    "name": "SimulateProcessedIntegratorInitiatedStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Simulate Processed Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "edges",
        "financialEvent",
        "edges",
        "financialEvent"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720552",
    "updated_at": "2025-08-04T16:18:34.720553"
  },
  {
    "name": "SimulateReturnedIntegratorInitiatedStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "ID",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "integrator_initiated_originated_ach",
      "path": "Funding/ACH Transfers/Integrator Initiated (Originated) ACH/Simulate Returned Integrator Initiated Status Change",
      "description": "",
      "tags": [
        "integrator_initiated_originated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720573",
    "updated_at": "2025-08-04T16:18:34.720574"
  },
  {
    "name": "SimulateExternallyInitiatedAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 2000,
            "currencyCode": "USD"
          },
          "companyEntryDescription": "TestDesc",
          "companyIdentifier": "TestID",
          "companyName": "TestName",
          "financialAccountId": "{{financialAccountId}}",
          "individualIdentificationNumber": "TestInDID",
          "individualName": "TestIndName",
          "settlementDate": "2022-07-28",
          "transferType": "CREDIT"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Funding/ACH Transfers/Externally Initiated (Non-Originated) ACH/Simulate Externally Initiated ACH Transfer",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach",
        "simulation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720604",
    "updated_at": "2025-08-04T16:18:34.720605"
  },
  {
    "name": "SimulateProcessingExternallyInitiatedStatusChange",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Funding/ACH Transfers/Externally Initiated (Non-Originated) ACH/Simulate Processing Externally Initiated Status Change",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "amount",
        "amount",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720623",
    "updated_at": "2025-08-04T16:18:34.720623"
  },
  {
    "name": "AddNonVerifiedExternalBankAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddNonVerifiedExternalUSFinancialBankAccount($input: AddNonVerifiedExternalUSFinancialBankAccountInput!) {\n  addNonVerifiedExternalUSFinancialBankAccount(input: $input) {\n    ... on NonVerifiedExternalUSFinancialBankAccount {\n      id\n      name\n      accountStatus\n      externalBankAccountDetails {\n        id\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{personAccountHolderId}}",
          "accountNumber": "123456789",
          "routingNumber": "074000010",
          "bankAccountType": "CHECKING",
          "name": "Test Non-Verified External Account"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Funding/ACH Transfers/Externally Initiated (Non-Originated) ACH/Add Non-Verified External Bank Account",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach"
      ],
      "requires": [
        "personAccountHolderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720642",
    "updated_at": "2025-08-04T16:18:34.720642"
  },
  {
    "name": "GetNonVerifiedExternalBankAccountDetail",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNonVerifiedExternalBankAccount($id: ID!) {\n    node(id: $id) {\n        ... on NonVerifiedExternalUSFinancialBankAccountDetail {\n            id\n            last4\n            routingNumber\n            restrictedDetails {\n                ... on NonVerifiedExternalUSFinancialBankAccountRestrictedDetails {\n                    number\n                    routingNumber\n                }\n                ... on AccessDeniedError {\n                    message\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{nonVerifiedExternalBankAccountDetailId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Funding/ACH Transfers/Externally Initiated (Non-Originated) ACH/Get Non-Verified External Bank Account Detail",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach",
        "retrieval"
      ],
      "requires": [
        "nonVerifiedExternalBankAccountDetailId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720658",
    "updated_at": "2025-08-04T16:18:34.720659"
  },
  {
    "name": "GetNonVerifiedExternalBankAccount",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNonVerifiedExternalBankAccount($id: ID!) {\n    node(id: $id) {\n        ... on NonVerifiedExternalUSFinancialBankAccount {\n            id\n            name\n            externalBankAccountDetails {\n                id\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{nonVerifiedExternalBankAccountId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Funding/ACH Transfers/Externally Initiated (Non-Originated) ACH/Get Non-Verified External Bank Account",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach",
        "retrieval"
      ],
      "requires": [
        "nonVerifiedExternalBankAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720671",
    "updated_at": "2025-08-04T16:18:34.720672"
  },
  {
    "name": "GenerateNonVerifiedExternalBankAccountDetailClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateExternalBankAccountDetailClientToken($input: GenerateExternalBankAccountDetailClientTokenInput!) {\n  generateExternalBankAccountDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "externalBankAccountDetailId": "{{nonVerifiedExternalBankAccountDetailId}}",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "externally_initiated_nonoriginated_ach",
      "path": "Funding/ACH Transfers/Externally Initiated (Non-Originated) ACH/Generate Non-Verified External Bank Account Detail Client Token",
      "description": "",
      "tags": [
        "externally_initiated_nonoriginated_ach"
      ],
      "requires": [
        "nonVerifiedExternalBankAccountDetailId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720689",
    "updated_at": "2025-08-04T16:18:34.720690"
  },
  {
    "name": "SimulateNonOriginatedAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateNonOriginatedAchTransfer($input: SimulateNonOriginatedAchTransferInput!) {\n  simulateNonOriginatedAchTransfer(input: $input) {\n    ... on NonOriginatedAchTransfer {\n      id\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      createdAt\n      type\n      purpose\n      paymentRelatedInformation\n      traceNumber\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "value": 500000,
            "currencyCode": "USD"
          },
          "purpose": "DEPOSIT",
          "companyIdentifier": "12345",
          "companyName": "THESAMPLECOMPANY",
          "companyEntryDescription": "TestDesc",
          "individualName": "Test Ind",
          "settlementDate": "{{$isoTimestamp}}",
          "companyDiscretionaryData": "123456",
          "individualIdentificationNumber": "123",
          "paymentRelatedInformation": "RMR*IV*0123456789**999.99"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonoriginated",
      "path": "Funding/ACH Transfers/Non-Originated/Simulate Non-Originated ACH Transfer",
      "description": "",
      "tags": [
        "nonoriginated",
        "simulation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720717",
    "updated_at": "2025-08-04T16:18:34.720718"
  },
  {
    "name": "SimulateNonOriginatedAchTransferProcessing",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAchTransferProcessing($input: SimulateAchTransferProcessingInput!) {\n  simulateAchTransferProcessing(input: $input) {\n    ... on NonOriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{nonOriginatedAchTransferId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonoriginated",
      "path": "Funding/ACH Transfers/Non-Originated/Simulate Non-Originated ACH Transfer Processing",
      "description": "",
      "tags": [
        "nonoriginated",
        "simulation"
      ],
      "requires": [
        "nonOriginatedAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720735",
    "updated_at": "2025-08-04T16:18:34.720736"
  },
  {
    "name": "SimulateNonOriginatedAchTransferReturn",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAchTransferReturn($input: SimulateAchTransferReturnInput!) {\n  simulateAchTransferReturn(input: $input) {\n    ... on NonOriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      status\n      statusFailureReason\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{nonOriginatedAchTransferId}}",
          "statusFailureReason": "DUPLICATE_ENTRY"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonoriginated",
      "path": "Funding/ACH Transfers/Non-Originated/Simulate Non-Originated ACH Transfer Return",
      "description": "",
      "tags": [
        "nonoriginated",
        "simulation"
      ],
      "requires": [
        "nonOriginatedAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720750",
    "updated_at": "2025-08-04T16:18:34.720750"
  },
  {
    "name": "GetNonOriginatedAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNonOriginatedACHTransfer($id: ID!) {\n  node(id: $id) {\n    ... on NonOriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      failedAt\n      processedAt\n      returnSentToBankAt\n      settlementDate\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      sign\n      companyEntryDescription\n      companyIdentifier\n      companyName\n      individualIdentificationNumber\n      individualName\n      paymentRelatedInformation\n      purpose\n      status\n      statusFailureReason\n      traceNumber\n      type\n    }\n  }\n}",
      "variables": {
        "id": "{{nonOriginatedAchTransferId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonoriginated",
      "path": "Funding/ACH Transfers/Non-Originated/Get Non-Originated ACH Transfer",
      "description": "",
      "tags": [
        "nonoriginated",
        "retrieval"
      ],
      "requires": [
        "nonOriginatedAchTransferId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720762",
    "updated_at": "2025-08-04T16:18:34.720763"
  },
  {
    "name": "AddNonVerifiedExternalBankAccount",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddNonVerifiedExternalUSFinancialBankAccount($input: AddNonVerifiedExternalUSFinancialBankAccountInput!) {\n  addNonVerifiedExternalUSFinancialBankAccount(input: $input) {\n    ... on NonVerifiedExternalUSFinancialBankAccount {\n      id\n      name\n      accountStatus\n      externalBankAccountDetails {\n        id\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{personAccountHolderId}}",
          "accountNumber": "123456789",
          "routingNumber": "074000010",
          "bankAccountType": "CHECKING",
          "name": "Test Non-Verified External Account"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonverified_external_bank_accounts",
      "path": "Funding/ACH Transfers/Originated/Non-Verified External Bank Accounts/Add Non-Verified External Bank Account",
      "description": "",
      "tags": [
        "nonverified_external_bank_accounts"
      ],
      "requires": [
        "personAccountHolderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720804",
    "updated_at": "2025-08-04T16:18:34.720805"
  },
  {
    "name": "GetNonVerifiedExternalBankAccount",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNonVerifiedExternalBankAccount($id: ID!) {\n    node(id: $id) {\n        ... on NonVerifiedExternalUSFinancialBankAccount {\n            id\n            name\n            externalBankAccountDetails {\n                id\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{nonVerifiedExternalBankAccountId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonverified_external_bank_accounts",
      "path": "Funding/ACH Transfers/Originated/Non-Verified External Bank Accounts/Get Non-Verified External Bank Account",
      "description": "",
      "tags": [
        "nonverified_external_bank_accounts",
        "retrieval"
      ],
      "requires": [
        "nonVerifiedExternalBankAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720822",
    "updated_at": "2025-08-04T16:18:34.720822"
  },
  {
    "name": "GenerateNonVerifiedExternalBankAccountDetailClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateExternalBankAccountDetailClientToken($input: GenerateExternalBankAccountDetailClientTokenInput!) {\n  generateExternalBankAccountDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "externalBankAccountDetailId": "{{nonVerifiedExternalBankAccountDetailId}}",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonverified_external_bank_accounts",
      "path": "Funding/ACH Transfers/Originated/Non-Verified External Bank Accounts/Generate Non-Verified External Bank Account Detail Client Token",
      "description": "",
      "tags": [
        "nonverified_external_bank_accounts"
      ],
      "requires": [
        "nonVerifiedExternalBankAccountDetailId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720838",
    "updated_at": "2025-08-04T16:18:34.720839"
  },
  {
    "name": "GetNonVerifiedExternalBankAccountDetail",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNonVerifiedExternalBankAccount($id: ID!) {\n    node(id: $id) {\n        ... on NonVerifiedExternalUSFinancialBankAccountDetail {\n            id\n            last4\n            routingNumber\n            restrictedDetails {\n                ... on NonVerifiedExternalUSFinancialBankAccountRestrictedDetails {\n                    number\n                    routingNumber\n                }\n                ... on AccessDeniedError {\n                    message\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{nonVerifiedExternalBankAccountDetailId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "nonverified_external_bank_accounts",
      "path": "Funding/ACH Transfers/Originated/Non-Verified External Bank Accounts/Get Non-Verified External Bank Account Detail",
      "description": "",
      "tags": [
        "nonverified_external_bank_accounts",
        "retrieval"
      ],
      "requires": [
        "nonVerifiedExternalBankAccountDetailId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720856",
    "updated_at": "2025-08-04T16:18:34.720856"
  },
  {
    "name": "GenerateVerifiedExternalBankAccountLinkToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateVerifiedExternalBankAccountLinkToken(\n  $input: GenerateVerifiedExternalBankAccountLinkTokenInput!\n) {\n  generateVerifiedExternalBankAccountLinkToken(input: $input) {\n    __typename\n    ... on GenerateVerifiedExternalBankAccountExternalLinkToken {\n      externalLinkToken\n      externalLinkHostedUrl\n      expirationDate\n      accountHolder {\n        __typename\n        ... on USPersonAccountHolder {\n          id\n        }\n        ... on USBusinessAccountHolder {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "linkExperience": {
            "flow": "WEB_HOSTED",
            "redirectUri": "https://hnship.netlify.app/plaid"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "plaid_reseller",
      "path": "Funding/ACH Transfers/Originated/Verified External Bank Accounts/Plaid Reseller/Generate Verified External Bank Account Link Token",
      "description": "",
      "tags": [
        "plaid_reseller"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720882",
    "updated_at": "2025-08-04T16:18:34.720882"
  },
  {
    "name": "ProvisionAccountHolder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ProvisionAccountHolder($input: ProvisionAccountHolderInput!) {\n  provisionAccountHolder(input: $input) {\n    __typename\n    ... on AccountHolderProvisioning {\n      id\n      accountHolder {\n        __typename\n        ... on USPersonAccountHolder {\n          id\n          name {\n            givenName\n          }\n        }\n        ... on USBusinessAccountHolder {\n          id\n        }\n      }\n      workflowActions {\n        id\n        action\n        outcome {\n          status\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "accountHolderId": "{{businessAccountHolderId}}",
          "actions": [
            "LINK_VERIFIED_EXTERNAL_BANK_ACCOUNT"
          ],
          "actionInput": {
            "linkVerifiedExternalBankAccountInput": {
              "publicToken": "public-token-success"
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "plaid_reseller",
      "path": "Funding/ACH Transfers/Originated/Verified External Bank Accounts/Plaid Reseller/Provision Account Holder",
      "description": "",
      "tags": [
        "plaid_reseller"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720905",
    "updated_at": "2025-08-04T16:18:34.720905"
  },
  {
    "name": "GetAccountHolderProvisioning",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query AccountHolderProvisioning($id: ID!) {\n  node(id: $id) {\n    ... on AccountHolderProvisioning {\n      __typename\n      id\n      idempotencyKey\n      createdAt\n      updatedAt\n      outcome {\n        status\n      }\n      workflowActions {\n        __typename\n        id\n        action\n        actionInput {\n          linkVerifiedExternalBankAccountInput {\n            publicToken\n          }\n        }\n        outcome {\n          status\n        }\n        executionOrder\n        node {\n          __typename\n          ... on UserError {\n            errors {\n              path\n              code\n              description\n            }\n          }\n          ... on WorkflowActionResultOutcome {\n            createdAt\n            updatedAt\n            result {\n              __typename\n              ... on WorkflowActionLinkVerifiedExternalBankAccountResult {\n                externalFinancialBankAccounts {\n                  __typename\n                  id\n                  name\n                  accountStatus\n                  createdAt\n                  updatedAt\n                  provider\n                  externalBankAccountDetails {\n                    last4\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{accountHolderProvisioningId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "plaid_reseller",
      "path": "Funding/ACH Transfers/Originated/Verified External Bank Accounts/Plaid Reseller/Get Account Holder Provisioning",
      "description": "",
      "tags": [
        "plaid_reseller",
        "retrieval"
      ],
      "requires": [
        "accountHolderProvisioningId"
      ],
      "produces": [
        "linkVerifiedExternalBankAccountInput",
        "errors",
        "externalFinancialBankAccounts"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.720986",
    "updated_at": "2025-08-04T16:18:34.720986"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughPlaid",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      externalBankAccountDetails {\n        id\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "verified_external_bank_accounts",
      "path": "Funding/ACH Transfers/Originated/Verified External Bank Accounts/Add External Bank Account Verified Through Plaid",
      "description": "",
      "tags": [
        "verified_external_bank_accounts"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721005",
    "updated_at": "2025-08-04T16:18:34.721006"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorTokenCfsbOnly",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorTokenInput!) {\n  addExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorToken(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      externalBankAccountDetails {\n        id\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          },
          "thirdPartyProcessorToken": {
            "value": "checkbok-token-success"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "verified_external_bank_accounts",
      "path": "Funding/ACH Transfers/Originated/Verified External Bank Accounts/Add External Bank Account Verified Through Plaid Using Third Party Processor Token (CFSB only)",
      "description": "",
      "tags": [
        "verified_external_bank_accounts"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721028",
    "updated_at": "2025-08-04T16:18:34.721028"
  },
  {
    "name": "AddExternalBankAccountVerifiedThroughFinicity",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddExternalBankAccountVerifiedThroughFinicity($input: AddExternalBankAccountVerifiedThroughFinicityInput!) {\n  addExternalBankAccountVerifiedThroughFinicity(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      owner {\n        ... on USPersonAccountHolder {\n          id\n          externalId\n        }\n        ... on USBusinessAccountHolder {\n          id\n          externalId\n        }\n      }\n      name\n      provider\n      accountStatus\n      createdAt\n      updatedAt\n      externalBankAccountDetails {\n        id\n        last4\n        type\n        routingNumber\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "name": "Finicity Checking",
          "bankAccountType": "CHECKING",
          "externalToken": {
            "receiptId": "processor-token-success",
            "customerId": "5543088633794259024",
            "products": [
              {
                "productType": "ACH_DETAILS",
                "accountId": "8977412844634022494",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "CURRENT_BALANCE",
                "accountId": "1045023535892401594",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "APPROXIMATE_BALANCE",
                "accountId": "7895597441790621692",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "ACH_OWNER_DETAILS",
                "accountId": "5200183909259568542",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              }
            ]
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "verified_external_bank_accounts",
      "path": "Funding/ACH Transfers/Originated/Verified External Bank Accounts/Add External Bank Account Verified Through Finicity",
      "description": "",
      "tags": [
        "verified_external_bank_accounts"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721068",
    "updated_at": "2025-08-04T16:18:34.721068"
  },
  {
    "name": "GetAccountHolderExternalBankAccounts",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "originated",
      "path": "Funding/ACH Transfers/Originated/Get Account Holder External Bank Accounts",
      "description": "",
      "tags": [
        "originated",
        "retrieval"
      ],
      "requires": [
        "businessAccountHolderId"
      ],
      "produces": [
        "externalFinancialAccounts",
        "externalFinancialAccounts"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721094",
    "updated_at": "2025-08-04T16:18:34.721095"
  },
  {
    "name": "InitiateOriginatedAchDeposit",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateAchTransfer($input: InitiateAchTransferInput!) {\n  initiateAchTransfer(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      type\n      purpose\n      paymentRelatedInformation\n      traceNumber\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "fromFinancialAccountId": "{{verifiedExternalBankAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}",
          "purpose": "DEPOSIT",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "{{$isoTimestamp}}",
            "authorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1.0"
            }
          },
          "companyEntryDescription": "TestCo",
          "individualName": "Test Business"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "originated",
      "path": "Funding/ACH Transfers/Originated/Initiate Originated ACH Deposit",
      "description": "",
      "tags": [
        "originated"
      ],
      "requires": [
        "verifiedExternalBankAccountId",
        "businessAccountHolderPrimaryAuthorizedPersonId",
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721120",
    "updated_at": "2025-08-04T16:18:34.721121"
  },
  {
    "name": "InitiateOriginatedAchWithdrawal",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateAchTransfer($input: InitiateAchTransferInput!) {\n  initiateAchTransfer(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      type\n      purpose\n      paymentRelatedInformation\n      traceNumber\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "fromFinancialAccountId": "{{financialAccountId}}",
          "toFinancialAccountId": "{{verifiedExternalBankAccountId}}",
          "purpose": "WITHDRAWAL",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "{{$isoTimestamp}}",
            "authorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1.0"
            }
          },
          "companyEntryDescription": "TestCo",
          "individualName": "Test Business"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "originated",
      "path": "Funding/ACH Transfers/Originated/Initiate Originated ACH Withdrawal",
      "description": "",
      "tags": [
        "originated"
      ],
      "requires": [
        "verifiedExternalBankAccountId",
        "businessAccountHolderPrimaryAuthorizedPersonId",
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721145",
    "updated_at": "2025-08-04T16:18:34.721146"
  },
  {
    "name": "SimulateOriginatedAchTransferProcessing",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAchTransferProcessing($input: SimulateAchTransferProcessingInput!) {\n  simulateAchTransferProcessing(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{originatedAchTransferId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "originated",
      "path": "Funding/ACH Transfers/Originated/Simulate Originated ACH Transfer Processing",
      "description": "",
      "tags": [
        "originated",
        "simulation"
      ],
      "requires": [
        "originatedAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721159",
    "updated_at": "2025-08-04T16:18:34.721160"
  },
  {
    "name": "SimulateOriginatedAchTransferReturn",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateAchTransferReturn($input: SimulateAchTransferReturnInput!) {\n  simulateAchTransferReturn(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      status\n      statusFailureReason\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{originatedAchTransferId}}",
          "statusFailureReason": "DUPLICATE_ENTRY"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "originated",
      "path": "Funding/ACH Transfers/Originated/Simulate Originated ACH Transfer Return",
      "description": "",
      "tags": [
        "originated",
        "simulation"
      ],
      "requires": [
        "originatedAchTransferId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721172",
    "updated_at": "2025-08-04T16:18:34.721173"
  },
  {
    "name": "GetOriginatedAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetOriginatedACHTransfer($id: ID!) {\n  node(id: $id) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      failedAt\n      processedAt\n      effectiveEntryDate\n      sentToBankAt\n      expectedProcessedAt\n      processedAt\n      returnProcessedAt\n      canceledAt\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      sign\n      companyEntryDescription\n      companyIdentifier\n      companyName\n      individualIdentificationNumber\n      individualName\n      paymentRelatedInformation\n      purpose\n      status\n      statusFailureReason\n      traceNumber\n      type\n    }\n  }\n}",
      "variables": {
        "id": "{{originatedAchTransferId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "originated",
      "path": "Funding/ACH Transfers/Originated/Get Originated ACH Transfer",
      "description": "",
      "tags": [
        "originated",
        "retrieval"
      ],
      "requires": [
        "originatedAchTransferId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721185",
    "updated_at": "2025-08-04T16:18:34.721185"
  },
  {
    "name": "InitiateAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateAchTransfer($input: InitiateAchTransferInput!) {\n  initiateAchTransfer(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      amount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      createdAt\n      updatedAt\n      type\n      purpose\n      sign\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      sameDay\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "{{fromFinancialAccountId}}",
          "toFinancialAccountId": "{{toFinancialAccountId}}",
          "purpose": "DEPOSIT",
          "amount": {
            "value": 10500,
            "currencyCode": "USD"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "authorizedPersonId": "{{authorizedPersonId}}",
            "template": {
              "consentTemplateId": "123",
              "consentTemplateVersion": "0"
            }
          },
          "cancellationPeriodMillis": 0,
          "sameDay": false,
          "companyEntryDescription": "Citibank",
          "individualName": "King",
          "individualIdentificationNumber": "12345",
          "paymentRelatedInformation": "Repayment",
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "ach_transfers",
      "path": "Funding/ACH Transfers/Initiate ACH Transfer",
      "description": "",
      "tags": [
        "ach_transfers"
      ],
      "requires": [
        "fromFinancialAccountId",
        "authorizedPersonId",
        "toFinancialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721217",
    "updated_at": "2025-08-04T16:18:34.721218"
  },
  {
    "name": "CreateUnifiedFundsTransferQuote",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation createUnifiedFundsTransferQuote($input: CreateUnifiedFundsTransferQuoteInput!) {\n    createUnifiedFundsTransferQuote(input: $input) {\n        ... on CreateUnifiedFundsTransferQuoteResult {\n            quotes {\n                ... on UnifiedFundsTransferQuote {\n                    id\n                    createdAt\n                    updatedAt\n                    expiresAt\n                    memo\n                    source {\n                        ... on UnifiedFundsTransferSource {\n                            node {\n                                __typename\n                                ... on FinancialAccount {\n                                    id\n                                }\n                            }\n                            amount {\n                                currencyCode\n                                value\n                                decimalPlaces\n                            }\n                        }\n                    }\n                    destination {\n                        ... on UnifiedFundsTransferDestination {\n                            node {\n                                __typename\n                                ... on FinancialAccount {\n                                    id\n                                }\n                                ... on PaymentMethodToken {\n                                    id\n                                }\n                            }\n                            amount {\n                                currencyCode\n                                value\n                                decimalPlaces\n                            }\n                        }\n                    }\n                    transferDetail {\n                        timeEstimate\n                        feeTotal {\n                            currencyCode\n                            value\n                            decimalPlaces\n                        }\n                    }\n                    idempotencyKey\n                }\n            }\n        }\n        ... on UserError {\n            errors {\n                code\n                errorPath\n            }\n        }\n        ... on AccessDeniedError {\n            message\n        }\n    }\n}\n",
      "variables": {
        "input": {
          "source": {
            "id": "{{srcFinancialAccountId}}",
            "amount": {
              "value": 10000,
              "currencyCode": "USD"
            }
          },
          "destination": {
            "id": "{{dstFinancialAccountId}}",
            "amount": {
              "value": 10000,
              "currencyCode": "USD"
            }
          },
          "externalIdentifier": "{{uftExternalId}}",
          "idempotencyKey": "{{$guid}}",
          "memo": "MEMO"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "unified_funds_transfer",
      "path": "Funding/Unified Funds Transfer/Create Unified Funds Transfer Quote",
      "description": "",
      "tags": [
        "unified_funds_transfer",
        "creation"
      ],
      "requires": [
        "dstFinancialAccountId",
        "srcFinancialAccountId",
        "uftExternalId"
      ],
      "produces": [
        "quotes",
        "node",
        "node",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721260",
    "updated_at": "2025-08-04T16:18:34.721260"
  },
  {
    "name": "SimulateDeposit",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "toFinancialAccountId": "{{productFundingFinancialAccountId}}",
          "source": "WIRE",
          "memo": "Initial Card Funnding",
          "amount": {
            "value": 500000,
            "currencyCode": "USD"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "funding",
      "path": "Funding/Simulate Deposit",
      "description": "",
      "tags": [
        "funding",
        "simulation"
      ],
      "requires": [
        "productFundingFinancialAccountId"
      ],
      "produces": [
        "edges",
        "financialEvent",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721282",
    "updated_at": "2025-08-04T16:18:34.721282"
  },
  {
    "name": "SimulateSendToPrinter",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Simulation/Simulate Send To Printer",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721305",
    "updated_at": "2025-08-04T16:18:34.721305"
  },
  {
    "name": "SimulateApproval",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Simulation/Simulate Approval",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721325",
    "updated_at": "2025-08-04T16:18:34.721325"
  },
  {
    "name": "SimulateShipmentFailed",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Simulation/Simulate Shipment Failed",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721342",
    "updated_at": "2025-08-04T16:18:34.721342"
  },
  {
    "name": "SimulateShipped",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}",
          "trackingNumber": "trackingNumber",
          "actualShipDate": "YYYY-MM-DD"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Simulation/Simulate Shipped",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721361",
    "updated_at": "2025-08-04T16:18:34.721362"
  },
  {
    "name": "SimulatePhysicalCardGroupOrderSendToPrinter",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulatePhysicalCardGroupOrderSendToPrinter(\n  $input: SimulatePhysicalCardGroupOrderSendToPrinterInput!\n) {\n  simulatePhysicalCardGroupOrderSendToPrinter(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "GROUP_ORDER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Group Order/Simulation/Simulate Physical Card Group Order Send To Printer",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "courier",
        "name",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721390",
    "updated_at": "2025-08-04T16:18:34.721390"
  },
  {
    "name": "SimulatePhysicalCardGroupOrderShipmentFailed",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulatePhysicalCardGroupOrderShipmentFailed(\n  $input: SimulatePhysicalCardGroupOrderShipmentFailedInput!\n) {\n  simulatePhysicalCardGroupOrderShipmentFailed(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "GROUP_ORDER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Group Order/Simulation/Simulate Physical Card Group Order Shipment Failed",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "courier",
        "name",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721430",
    "updated_at": "2025-08-04T16:18:34.721431"
  },
  {
    "name": "SimulatePhysicalCardGroupOrderShipped",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulatePhysicalCardGroupOrderShipped(\n  $input: SimulatePhysicalCardGroupOrderShippedInput!\n) {\n  simulatePhysicalCardGroupOrderShipped(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "GROUP_ORDER_ID",
          "trackingNumber": "1Z1111110311111111",
          "actualShipDate": "YYYY-MM-DD"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Group Order/Simulation/Simulate Physical Card Group Order Shipped",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "courier",
        "name",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721456",
    "updated_at": "2025-08-04T16:18:34.721456"
  },
  {
    "name": "SimulatePhysicalCardGroupOrderApproval",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulatePhysicalCardGroupOrderApproval(\n  $input: SimulatePhysicalCardGroupOrderApprovalInput!\n) {\n  simulatePhysicalCardGroupOrderApproval(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "GROUP_ORDER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "simulation",
      "path": "Physical Card Fulfillment/Group Order/Simulation/Simulate Physical Card Group Order Approval",
      "description": "",
      "tags": [
        "simulation",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "courier",
        "name",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721478",
    "updated_at": "2025-08-04T16:18:34.721479"
  },
  {
    "name": "CreatePhysicalCardGroupOrder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreatePhysicalCardGroupOrder(\n  $input: CreatePhysicalCardGroupOrderInput!\n) {\n  createPhysicalCardGroupOrder(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe",
              "suffix": "Sr",
              "title": "Mr"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "APT 2",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "courier": {
            "method": "USPS_PRIORITY",
            "signatureRequiredOnDelivery": false
          },
          "requestedShipDate": "2023-08-03"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "group_order",
      "path": "Physical Card Fulfillment/Group Order/Create Physical Card Group Order",
      "description": "",
      "tags": [
        "group_order",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721512",
    "updated_at": "2025-08-04T16:18:34.721513"
  },
  {
    "name": "OrderPhysicalPaymentCardForGroup",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation OrderPhysicalPaymentCardForGroup(\n  $input: OrderPhysicalPaymentCardForGroupInput!\n) {\n  orderPhysicalPaymentCardForGroup(input: $input) {\n    __typename\n    ... on PhysicalPaymentCardOrder {\n      id\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "groupOrderId": "GROUP_ORDER_ID",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe",
              "suffix": "Sr",
              "title": "Mr"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "APT 2",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "JOHN D DOE",
              "line2": "line 2"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "group_order",
      "path": "Physical Card Fulfillment/Group Order/Order Physical Payment Card For Group",
      "description": "",
      "tags": [
        "group_order"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721542",
    "updated_at": "2025-08-04T16:18:34.721542"
  },
  {
    "name": "CompletePhysicalCardGroupOrder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CompletePhysicalCardGroupOrder(\n  $input: CompletePhysicalCardGroupOrderInput!\n) {\n  completePhysicalCardGroupOrder(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "GROUP_ORDER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "group_order",
      "path": "Physical Card Fulfillment/Group Order/Complete Physical Card Group Order",
      "description": "",
      "tags": [
        "group_order"
      ],
      "requires": [],
      "produces": [
        "courier",
        "name",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721562",
    "updated_at": "2025-08-04T16:18:34.721562"
  },
  {
    "name": "CancelPhysicalCardGroupOrder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CancelPhysicalCardGroupOrder($input: CancelPhysicalCardGroupOrderInput!) {\n  cancelPhysicalCardGroupOrder(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "GROUP_ORDER_ID"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "group_order",
      "path": "Physical Card Fulfillment/Group Order/Cancel Physical Card Group Order",
      "description": "",
      "tags": [
        "group_order"
      ],
      "requires": [],
      "produces": [
        "courier",
        "name",
        "name",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721583",
    "updated_at": "2025-08-04T16:18:34.721583"
  },
  {
    "name": "GetPhysicalCardGroupOrdersForProduct",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPhysicalCardGroupOrdersForProduct(\n  $cardProductId: ID!\n  $firstGroupOrders: Int\n) {\n  node(id: $cardProductId) {\n    ... on CardProduct {\n      __typename\n      id\n      name\n      usage\n      groupOrders(first: $firstGroupOrders) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            cardCount\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "cardProductId": "CARD_PRODUCT_ID",
        "firstGroupOrders": 1
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "group_order",
      "path": "Physical Card Fulfillment/Group Order/Get Physical Card Group Orders For Product",
      "description": "",
      "tags": [
        "group_order",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721600",
    "updated_at": "2025-08-04T16:18:34.721601"
  },
  {
    "name": "GetPhysicalCardGroupOrder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPhysicalPaymentCardGroupOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n\t\t\tphysicalPaymentCardOrders (first: 1) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\tendCursor\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\tid\n\t\t\t\t\t\torderState {\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "GROUP_ORDER_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "group_order",
      "path": "Physical Card Fulfillment/Group Order/Get Physical Card Group Order",
      "description": "",
      "tags": [
        "group_order",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "courier",
        "name",
        "name"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721620",
    "updated_at": "2025-08-04T16:18:34.721621"
  },
  {
    "name": "ValidateAddress",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "fragment AddressFragment on Address {\n    streetAddress\n    extendedAddress\n    locality\n    region\n    postalCode\n    countryCodeAlpha3\n}\n\nfragment AddressValidatedResultTokenFragment on ValidatedAddressToken {\n    id\n    createdAt\n    labels\n    provided {\n        ... AddressFragment\n    }\n    standardized {\n        ... AddressFragment\n    }\n}\n\nmutation ValidateAddress($input: ValidateAddressInput!) {\n    validateAddress(input: $input) {\n        ... on AddressValidationResult {\n            outcome {\n                ... on AddressValidationOutcome {\n                    ... on AddressValidatedResult {\n                        token {\n                            ... AddressValidatedResultTokenFragment\n                        }\n                    }\n                }\n                ... on AddressValidatedWithChangesResult {\n                    componentsChanged\n                    token {\n                        ... AddressValidatedResultTokenFragment\n                    }\n                }\n                ... on AddressIncompleteResult {\n                    componentsMissing\n                    provided {\n                        ... AddressFragment\n                    }\n                }\n                ... on AddressInvalidResult {\n                    componentsInvalid\n                    provided {\n                        ... AddressFragment\n                    }\n                }\n            }\n        }\n        ... on UserError {\n            errors {\n                code\n                description\n                errorPath\n            }\n        }\n    }\n}",
      "variables": {
        "input": {
          "address": {
            "streetAddress": "642 Harrison St",
            "extendedAddress": "Suite 100",
            "locality": "San Francisco",
            "region": "CA",
            "postalCode": "94107",
            "countryCodeAlpha3": "USA"
          },
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "validate_address",
      "path": "Physical Card Fulfillment/Validate Address/Validate Address",
      "description": "",
      "tags": [
        "validate_address"
      ],
      "requires": [],
      "produces": [
        "outcome",
        "token",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721649",
    "updated_at": "2025-08-04T16:18:34.721649"
  },
  {
    "name": "OrderPhysicalPaymentCardWithValidatedAddress",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation OrderPhysicalCardWithValidatedAddress($input: OrderPhysicalPaymentCardWithValidatedAddressInput!) {\n    orderPhysicalPaymentCardWithValidatedAddress(input: $input) {\n        ... on PhysicalPaymentCardOrder {\n            id\n            createdAt\n            orderState {\n                ... on PaymentCardOrderStateDetail {\n                    status\n                }\n            }\n            paymentCard {\n                id\n                last4\n            }\n        }\n        ... on UserError {\n            errors {\n                code\n                description\n                errorPath\n            }\n        }\n    }\n}",
      "variables": {
        "input": {
          "cardPersonalization": {
            "textLines": {
              "line1": "John Smith",
              "line2": null
            }
          },
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "deliveryDetails": {
            "companyName": "Test",
            "name": {
              "givenName": "John",
              "familyName": "Smith"
            },
            "validatedAddressId": "{{validatedAddressToken}}"
          },
          "idempotencyKey": "{{$guid}}",
          "paymentCardId": "{{paymentCardId}}",
          "requestedShipDate": "2024-06-21"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "validate_address",
      "path": "Physical Card Fulfillment/Validate Address/Order Physical Payment Card with Validated Address",
      "description": "",
      "tags": [
        "validate_address"
      ],
      "requires": [
        "paymentCardId",
        "validatedAddressToken"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721677",
    "updated_at": "2025-08-04T16:18:34.721678"
  },
  {
    "name": "CreatePhysicalPaymentCardGroupOrderWithValidatedAddress",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreatePhysicalCardGroupOrderWithValidatedAddress($input: CreatePhysicalCardGroupOrderWithValidatedAddressInput!) {\n    createPhysicalCardGroupOrderWithValidatedAddress(input: $input) {\n        ... on PhysicalCardGroupOrder {\n            id\n            createdAt\n            orderState {\n                status\n            }\n            cardCount\n        }\n    }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "deliveryDetails": {
            "companyName": "Test",
            "name": {
              "givenName": "John",
              "familyName": "Smith"
            },
            "validatedAddressId": "{{validatedAddressToken}}"
          },
          "idempotencyKey": "{{$guid}}",
          "requestedShipDate": "2024-06-21"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "validate_address",
      "path": "Physical Card Fulfillment/Validate Address/Create Physical Payment Card Group Order with Validated Address",
      "description": "",
      "tags": [
        "validate_address",
        "creation"
      ],
      "requires": [
        "validatedAddressToken",
        "cardProductId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721729",
    "updated_at": "2025-08-04T16:18:34.721730"
  },
  {
    "name": "OrderPhysicalPaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "requestedShipDate": "2021-08-20",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "John Doe"
            }
          }
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card_fulfillment",
      "path": "Physical Card Fulfillment/Order Physical Payment Card",
      "description": "",
      "tags": [
        "physical_card_fulfillment"
      ],
      "requires": [],
      "produces": [
        "courier",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721774",
    "updated_at": "2025-08-04T16:18:34.721775"
  },
  {
    "name": "FindPhysicalPaymentCardOrder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalPaymentCardOrderId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card_fulfillment",
      "path": "Physical Card Fulfillment/Find Physical Payment Card Order",
      "description": "",
      "tags": [
        "physical_card_fulfillment"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "courier"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721791",
    "updated_at": "2025-08-04T16:18:34.721791"
  },
  {
    "name": "CancelPhysicalPaymentCardOrder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "physical_card_fulfillment",
      "path": "Physical Card Fulfillment/Cancel Physical Payment Card Order",
      "description": "",
      "tags": [
        "physical_card_fulfillment"
      ],
      "requires": [
        "physicalPaymentCardOrderId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721806",
    "updated_at": "2025-08-04T16:18:34.721807"
  },
  {
    "name": "CreateExternalPhysicalPaymentCardOrder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateExternalPhysicalPaymentCardOrder($input: CreateExternalPhysicalPaymentCardOrderInput!) {\n    createExternalPhysicalPaymentCardOrder(input: $input) {\n        ... on ExternalPhysicalPaymentCardOrder {\n            id\n            createdAt\n            updatedAt\n            card {\n                id\n            }\n            embeddedDevice {\n                formFactor\n                image\n                name\n                serialNumber\n                variant\n            }\n            status\n        }\n        ... on UserError {\n            errors {\n                errorPath\n                code\n                description\n            }\n        }\n    }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "embeddedDevice": {
            "image": "https://test-url.com",
            "name": "test-name",
            "serialNumber": "test-serial-number",
            "variant": "test-variant"
          },
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "external_physical_payment_card_order",
      "path": "External Physical Payment Card Order/Create External Physical Payment Card Order",
      "description": "",
      "tags": [
        "external_physical_payment_card_order",
        "creation"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721833",
    "updated_at": "2025-08-04T16:18:34.721834"
  },
  {
    "name": "GetExternalPhysicalPaymentCardOrder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetExternalPhysicalPaymentCardOrder($id: ID!) {\n    node(id: $id) {\n        ... on ExternalPhysicalPaymentCardOrder {\n            id\n            createdAt\n            updatedAt\n            card {\n                id\n            }\n            embeddedDevice {\n                formFactor\n                image\n                name\n                serialNumber\n                variant\n            }\n            status\n        }\n    }\n}",
      "variables": {
        "id": "{{externalPhysicalPaymentCardOrderId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "external_physical_payment_card_order",
      "path": "External Physical Payment Card Order/Get External Physical Payment Card Order",
      "description": "",
      "tags": [
        "external_physical_payment_card_order",
        "retrieval"
      ],
      "requires": [
        "externalPhysicalPaymentCardOrderId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721850",
    "updated_at": "2025-08-04T16:18:34.721851"
  },
  {
    "name": "GetPaymentCardExternalPhysicalPaymentCardOrders",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentCardExternalPhysicalPaymentCardOrders($id: ID!) {\n    node(id: $id) {\n        ... on PaymentCard {\n            externalPhysicalPaymentCardOrders {\n                id\n                createdAt\n                updatedAt\n                card {\n                    id\n                }\n                embeddedDevice {\n                    formFactor\n                    image\n                    name\n                    serialNumber\n                    variant\n                }\n                status\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{paymentCardId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "external_physical_payment_card_order",
      "path": "External Physical Payment Card Order/Get Payment Card External Physical Payment Card Orders",
      "description": "",
      "tags": [
        "external_physical_payment_card_order",
        "retrieval"
      ],
      "requires": [
        "paymentCardId"
      ],
      "produces": [
        "externalPhysicalPaymentCardOrders"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721865",
    "updated_at": "2025-08-04T16:18:34.721866"
  },
  {
    "name": "AddWebhookNotificationTarget",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input: $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "{{currentTimestampFormatted}}",
          "uri": "https://webhook.site/938cbdc8-2b0f-44a7-857b-6886f9274004",
          "subscriptions": [
            "NON_ORIGINATED_ACH_TRANSFER_RECEIVED",
            "NON_ORIGINATED_ACH_TRANSFER_PROCESSED",
            "NON_ORIGINATED_ACH_TRANSFER_FAILED",
            "NON_ORIGINATED_ACH_TRANSFER_RETURNED",
            "PAYMENT_CARD_ACTIVATED",
            "AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_IN_REVIEW",
            "CARD_PRODUCT_APPLICATION_MANUAL_REVIEW",
            "CARD_PRODUCT_APPLICATION_DENIED",
            "CARD_PRODUCT_APPLICATION_CLOSED",
            "CARD_PRODUCT_APPLICATION_IDENTITY_UPDATE_REQUESTED",
            "PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED",
            "PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Add Webhook Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [
        "currentTimestampFormatted"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721895",
    "updated_at": "2025-08-04T16:18:34.721896"
  },
  {
    "name": "GetAllWebhookNotificationTargets",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\tid\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\tsubscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Get All Webhook Notification Targets",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721917",
    "updated_at": "2025-08-04T16:18:34.721918"
  },
  {
    "name": "DeactivateNotificationTarget",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input: $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "{{webhookNotificationTargetId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Deactivate Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval",
        "activation"
      ],
      "requires": [
        "webhookNotificationTargetId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721931",
    "updated_at": "2025-08-04T16:18:34.721932"
  },
  {
    "name": "ActivateNotificationTarget",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input: ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "{{webhookNotificationTargetId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Activate Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval",
        "activation"
      ],
      "requires": [
        "webhookNotificationTargetId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721944",
    "updated_at": "2025-08-04T16:18:34.721945"
  },
  {
    "name": "GetWebhookNotificationTarget",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\thttpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "{{webhookNotificationTargetId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Get Webhook Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [
        "webhookNotificationTargetId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721964",
    "updated_at": "2025-08-04T16:18:34.721965"
  },
  {
    "name": "GetNotificationTargetDeliveryAttempts",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n            createdAt\n            event {\n              name\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{webhookNotificationTargetId}}"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Get Notification Target Delivery Attempts",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [
        "webhookNotificationTargetId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.721983",
    "updated_at": "2025-08-04T16:18:34.721983"
  },
  {
    "name": "AddSubscriptionsToNotificationTarget",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "{{webhookNotificationTargetId}}",
          "subscriptions": [
            "CARD_PRODUCT_APPLICATION_DOCUMENT_UPLOAD_REQUESTED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Add Subscriptions To Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [
        "webhookNotificationTargetId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722000",
    "updated_at": "2025-08-04T16:18:34.722000"
  },
  {
    "name": "RemoveSubscriptionsFromNotificationTarget",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!) {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "{{webhookNotificationTargetId}}",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_targets",
      "path": "Reporting/Notifications/Notification Targets/Remove Subscriptions From Notification Target",
      "description": "",
      "tags": [
        "notification_targets",
        "retrieval"
      ],
      "requires": [
        "webhookNotificationTargetId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722015",
    "updated_at": "2025-08-04T16:18:34.722015"
  },
  {
    "name": "GetAllNotificationEvents",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetAllNotificationEvents($after: String, $first: Int) {\n\tnotificationEvents(after: $after, first: $first) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t\tnode {\n            __typename\n\t\t\t\t\t\t... on PaymentCardTransactionDispute {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\tchargebacks {\n                id, \n                status, \n                dispute {\n                  id\n                }, \n                creditStatus\n              }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on PaymentCardTransactionChargeback {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcreditStatus\n\t\t\t\t\t\t\tdispute {\n                id,\n                status,\n                amount { \n                  value\n\t\t\t\t\t\t\t  }\n              }\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "first": 150
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get All Notification Events",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722034",
    "updated_at": "2025-08-04T16:18:34.722034"
  },
  {
    "name": "GetNotificationEvent",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEvent($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tcreatedAt\n\t\t\texpiresAt\n\t\t\tname\n\t\t\tnode {\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get Notification Event",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722046",
    "updated_at": "2025-08-04T16:18:34.722046"
  },
  {
    "name": "ReplayNotificationEvent",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ReplayNotificationEvent($input: ReplayNotificationEventInput!) {\n  replayNotificationEvent(input: $input) {\n    __typename\n    ... on NotificationEvent {\n      __typename\n      id\n\t  createdAt\n\t  expiresAt\n      node {\n        __typename\n        ... on AuthorizationEvent {\n          id\n          approvedAmount {\n            value\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "input": {
          "notificationEventId": "{{notificationEventId}}"
        }
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Replay Notification Event",
      "description": "",
      "tags": [
        "notification_events"
      ],
      "requires": [
        "notificationEventId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722061",
    "updated_at": "2025-08-04T16:18:34.722062"
  },
  {
    "name": "GetDeliveryAttemptsForNotificationEvent",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetDeliveryAttemptsForNotificationEvent($id: ID!, $after: String, $first: Int) {\n\tnode(id: $id) {\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tdeliveryAttempts(first: $first, after: $after) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\t__typename\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\t__typename\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t  httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\turi\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "id": "{{notificationEventId}}",
        "first": 10
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get Delivery Attempts For Notification Event",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [
        "notificationEventId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722080",
    "updated_at": "2025-08-04T16:18:34.722080"
  },
  {
    "name": "GetNotificationEventsFilteredByName",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEventsFilteredByName($filterBy: NotificationEventsFilterInput!, $first: Int) {\n\tnotificationEvents(filterBy: $filterBy, first: $first) {\n\t\t__typename\n\t\tpageInfo {\n\t\t\tstartCursor\n\t\t\tendCursor\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t}\n\t\tedges {\n\t\t\tcursor\n\t\t\t__typename\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "filterBy": {
          "name": [
            "INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED"
          ]
        },
        "first": 20
      }
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get Notification Events Filtered By Name",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722097",
    "updated_at": "2025-08-04T16:18:34.722097"
  },
  {
    "name": "GetUnsuccessfulNotificationEvents",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetNotificationEvents($id: ID!, $first: Int, $after: String, $filterBy: WebhookNotificationTargetEventFilterInput) {\n  node(id: $id) {\n    ... on WebhookNotificationTarget {\n      id\n      status\n      webhookNotificationTargetEvents(first: $first, after: $after, filterBy: $filterBy) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasPreviousPage\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            event {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "ntt_0de84d6c005049be8f6feafbcaaf5043",
        "first": 20,
        "after": null,
        "filterBy": {
          "eventCreatedAt": {
            "between": {
              "start": null,
              "end": null
            }
          },
          "hasSuccessfulDelivery": false
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "notification_events",
      "path": "Reporting/Notifications/Notification Events/Get Unsuccessful Notification Events",
      "description": "",
      "tags": [
        "notification_events",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "event"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722114",
    "updated_at": "2025-08-04T16:18:34.722114"
  },
  {
    "name": "InitiateOrganizationReport",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateOrganizationReport($input: InitiateOrganizationReportInput!) {\n  initiateOrganizationReport(input: $input) {\n    __typename\n    ... on Report {\n      id\n      download {\n        url\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "reportType": "LEDGER_ENTRY",
          "parameters": {
            "between": {
              "start": "2023-01-01",
              "end": "2024-03-02"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Initiate Organization Report",
      "description": "",
      "tags": [
        "reports"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722133",
    "updated_at": "2025-08-04T16:18:34.722134"
  },
  {
    "name": "GetReport",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetReport($id: ID!) {\n  node(id: $id) {\n    ... on Report {\n      download {\n        url\n      }\n    }\n  }\n}",
      "variables": {
        "id": "REPORT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Get Report",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "download"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722143",
    "updated_at": "2025-08-04T16:18:34.722143"
  },
  {
    "name": "GetReportUsage",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query ReportUsage {\n  reportUsage {\n    limit\n    limitRemaining\n    periodEnd\n    reportType\n  }\n}",
      "variables": {}
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Get Report Usage",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "reportUsage"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722152",
    "updated_at": "2025-08-04T16:18:34.722152"
  },
  {
    "name": "GetReports",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query Reports($first: Int, $after: String, $input: ReportFilterInput) {\n  reports(first: $first, after: $after, filterBy: $input) {\n    ... on ReportConnection {\n      edges {\n        ... on ReportEdge {\n          node {\n            __typename\n            id\n            status\n            reportType\n            download {\n              url\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "status": {
            "includes": [
              "COMPLETED"
            ]
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "reports",
      "path": "Reporting/Reports/Get Reports",
      "description": "",
      "tags": [
        "reports",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722169",
    "updated_at": "2025-08-04T16:18:34.722170"
  },
  {
    "name": "GetCurrentBillingStatementByFinancialAccountId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerChargeCardStatement\n        ... currentConsumerReolvingStatement\n        ... currentCreditPayInFullStatement\n        ... currentSecuredDepositCommercialCreditStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n\n\nfragment currentConsumerChargeCardStatement on ConsumerChargeCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerChargeCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n\nfragment currentCreditPayInFullStatement on CreditPayInFullCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on CreditPayInFullCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n\n\nfragment currentSecuredDepositCommercialCreditStatement on SecuredDepositCommercialCreditCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on SecuredDepositCommercialCreditCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": "{\n\t\"id\": \"FINANCIAL_ACCOUNT_ID\"\n}"
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "statements",
      "path": "Reporting/Statements/Get Current Billing Statement By Financial Account ID",
      "description": "",
      "tags": [
        "statements",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722236",
    "updated_at": "2025-08-04T16:18:34.722236"
  },
  {
    "name": "SimulateDelinquency",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      delinquency {\n        __typename\n        totalAmount {\n          value\n          currencyCode\n        }\n        numberOfCycles\n        totalDaysDelinquent\n        delinquencyStartedOn\n        currentDelinquentCycles {\n          daysDelinquent\n          createdAt\n          updatedAt\n          amount {\n            value\n            currencyCode\n          }\n          totalRepaymentsApplied {\n            value\n            currencyCode\n          }\n          state\n          statement {\n            ... on ConsumerRevolvingCardFinancialAccountStatement {\n              id\n              periodStart\n              periodEnd\n              openedAt\n              closedAt\n              primaryLedger {\n                debitBalance {\n                  value\n                  currencyCode\n                }\n                creditBalance {\n                  value\n                  currencyCode\n                }\n                normalBalance\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "delinquency",
      "path": "Repayment/Delinquency/Simulate Delinquency",
      "description": "",
      "tags": [
        "delinquency",
        "simulation"
      ],
      "requires": [],
      "produces": [
        "debitBalance"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722317",
    "updated_at": "2025-08-04T16:18:34.722317"
  },
  {
    "name": "ScheduleRecurringAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "OUTSTANDING_BALANCE"
          },
          "frequency": "MONTHLY",
          "transferDayOfMonth": 3,
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2021-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "Test 1234",
            "individualIdentificationNumber": "Test 12345",
            "individualName": "Test 123456"
          },
          "fromFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "scheduled_transfers",
      "path": "Repayment/Scheduled Transfers/Schedule Recurring ACH Transfer",
      "description": "",
      "tags": [
        "scheduled_transfers"
      ],
      "requires": [],
      "produces": [
        "errors",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722349",
    "updated_at": "2025-08-04T16:18:34.722350"
  },
  {
    "name": "ScheduleOneTimeAchTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "transferAmount": {
              "value": 100000,
              "currencyCode": "USD"
            }
          },
          "transferDate": "2023-12-22",
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Kevin Ruan"
          },
          "fromFinancialAccountId": "EXTERNAL_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "CARD_ACCOUNT_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "scheduled_transfers",
      "path": "Repayment/Scheduled Transfers/Schedule One Time ACH Transfer",
      "description": "",
      "tags": [
        "scheduled_transfers"
      ],
      "requires": [],
      "produces": [
        "errors",
        "amount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722377",
    "updated_at": "2025-08-04T16:18:34.722378"
  },
  {
    "name": "SimulateCreateAndActivateFeeSchedule",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation simulateCreateAndActivateFeeSchedule(\n  $input: SimulateCreateAndActivateFeeScheduleInput!\n) {\n  simulateCreateAndActivateFeeSchedule(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on FeeSchedule {\n      __typename\n      id\n      feeScheduleAssociatedTo {\n        __typename\n        ... on CardProduct {\n          id\n        }\n      }\n      feeConfigurations {\n        id\n        feeActivityType\n        feeChargeRules {\n          id\n          name\n          order\n          value {\n            __typename\n            ... on FixedFeeChargeValue {\n              amount {\n                value\n                currencyCode\n              }\n            }\n            ... on VariableFeeChargeValue {\n              percentage\n            }\n          }\n          conditions {\n            __typename\n            ... on FeeChargeRuleAmountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on AmountFeeCondition {\n                  value {\n                    __typename\n                    ... on AmountFeeConditionValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                      maximumAmount {\n                        value\n                        currencyCode\n                      }\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n            ... on FeeChargeRuleCountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on CountFeeCondition {\n                  value {\n                    __typename\n                    ... on CountFeeConditionValue {\n                      count\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n            ... on FeeChargeRuleAmountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on AmountFeeCondition {\n                  value {\n                    __typename\n                    ... on AmountFeeConditionValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n          }\n        }\n      }\n      activationDate\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "feeConfigurations": [
            {
              "feeActivityType": "CASH_BACK_OTC_FEE",
              "feeAmount": {
                "feeAmount": {
                  "value": 100,
                  "currencyCode": "USD"
                }
              }
            }
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "fees",
      "path": "Fees/Simulate Create and Activate Fee Schedule",
      "description": "",
      "tags": [
        "fees",
        "creation",
        "simulation",
        "activation"
      ],
      "requires": [],
      "produces": [
        "errors",
        "amount",
        "value",
        "amount",
        "value"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722415",
    "updated_at": "2025-08-04T16:18:34.722416"
  },
  {
    "name": "GetFeeSchedule",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFeeSchedule($id: ID!) {\n\tnode(id: $id) {\n\t\t... on FeeSchedule {\n\t\t\t__typename\n\t\t\tid\n\t\t\tfeeScheduleAssociatedTo {\n\t\t\t\t__typename\n\t\t\t\t... on CardProduct {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t\tfeeConfigurations {\n\t\t\t\tid\n\t\t\t\tfeeActivityType\n\t\t\t\tfeeChargeRules {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tvalue {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on FixedFeeChargeValue {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on VariableFeeChargeValue {\n\t\t\t\t\t\t\tpercentage\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconditions {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on FeeChargeRuleAmountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on AmountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on AmountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tmaximumAmount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on FeeChargeRuleCountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on CountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on CountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tcount\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on FeeChargeRuleAmountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on AmountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on AmountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tactivationDate\n\t\t\tstatus\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t}\n\t}\n}",
      "variables": {
        "id": "{{feeScheduleId}}"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "fees",
      "path": "Fees/Get Fee Schedule",
      "description": "",
      "tags": [
        "fees",
        "retrieval"
      ],
      "requires": [
        "feeScheduleId"
      ],
      "produces": [
        "amount",
        "value",
        "amount",
        "value",
        "value"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722440",
    "updated_at": "2025-08-04T16:18:34.722440"
  },
  {
    "name": "GetFeeFinancialActivity",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FindFinancialAccount($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      feeTransferEvents(first: 10) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            feeTransfer {\n              __typename\n              ... on ChargedFeeTransfer {\n                originatingAccount {\n                  id\n                }\n                receivingAccount {\n                  id\n                }\n                cardProduct {\n                  id\n                }\n                feeActivityType\n                feeAmount {\n                  value\n                  currencyCode\n                }\n                transferedFeeAmount {\n                  value\n                  currencyCode\n                }\n                transferDate\n                status {\n                  ... on NonFailureFeeTransferStatus {\n                    status\n                  }\n                  ... on FailureFeeTransferStatus {\n                    status\n                    reasonDetails {\n                      type\n                      reason\n                    }\n                  }\n                }\n                feeChargeRule {\n                  __typename\n                  id\n                  name\n                  value {\n                    __typename\n                    ... on FixedFeeChargeValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                    }\n                    ... on VariableFeeChargeValue {\n                      percentage\n                    }\n                  }\n                  conditions {\n                    __typename\n                    ... on FeeChargeRuleAmountCondition {\n                      id\n                      description\n                      condition {\n                        __typename\n                        ... on AmountFeeCondition {\n                          value {\n                            __typename\n                            ... on AmountFeeConditionValue {\n                              amount {\n                                value\n                                currencyCode\n                              }\n                              maximumAmount {\n                                value\n                                currencyCode\n                              }\n                            }\n                          }\n                          operator\n                        }\n                      }\n                      aggregatedAt\n                      aggregationDuration\n                      createdAt\n                      updatedAt\n                    }\n                    ... on FeeChargeRuleCountCondition {\n                      id\n                      description\n                      condition {\n                        __typename\n                        ... on CountFeeCondition {\n                          value {\n                            __typename\n                            ... on CountFeeConditionValue {\n                              count\n                              maximumCount\n                            }\n                          }\n                          operator\n                        }\n                      }\n                      aggregatedAt\n                      aggregationDuration\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                  createdAt\n                  updatedAt\n                }\n                feeChargeActvity {\n                  __typename\n                  ... on PhysicalPaymentCardOrder {\n                    id\n                  }\n                  ... on PaymentCard {\n                    id\n                  }\n                  ... on FinancialAccount {\n                    id\n                  }\n                  ... on SecureDepositACHTransfer {\n                    id\n                  }\n                  ... on SecureCardBalanceRepaymentACHTransfer {\n                    id\n                  }\n                  ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                    id\n                  }\n                  ... on IntegratorInitiatedFundsDepositACHTransfer {\n                    id\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    id\n                  }\n                  ... on ClearingEvent {\n                    id\n                  }\n                  ... on BalanceInquiryEvent {\n                    id\n                  }\n                }\n              }\n              ... on ReversedFeeTransfer {\n                originatingAccount {\n                  id\n                }\n                receivingAccount {\n                  id\n                }\n                transferedFeeAmount {\n                  value\n                  currencyCode\n                }\n                transferDate\n                status {\n                  ... on NonFailureFeeTransferStatus {\n                    status\n                  }\n                  ... on FailureFeeTransferStatus {\n                    status\n                    reasonDetails {\n                      type\n                      reason\n                    }\n                  }\n                }\n                sourceFeeTransferEvent {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "fees",
      "path": "Fees/Get Fee Financial Activity",
      "description": "",
      "tags": [
        "fees",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "originatingAccount",
        "amount",
        "value",
        "amount",
        "value"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722496",
    "updated_at": "2025-08-04T16:18:34.722497"
  },
  {
    "name": "GetCardProductFeeBalance",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCardProductWithLedgers(\n  $cardProductId: ID!\n  $firstLedgerEntries: Int\n  $ledgerEntriesAfterCursor: String\n  $filterBy: AccountHolderFinancialAccountsFilterInput\n) {\n  node(id: $cardProductId) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      accounts(first: 20, filterBy: $filterBy) {\n        __typename\n        pageInfo {\n          __typename\n          endCursor\n          hasNextPage\n          startCursor\n          hasPreviousPage\n        }\n        edges {\n          __typename\n          cursor\n          node {\n             __typename\n            id\n            name\n            createdAt\n            updatedAt\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            ledgers {\n              __typename\n              id\n              normalBalance\n              asOf\n              name\n              creditBalance {\n                value\n                currencyCode\n                __typename\n              }\n              debitBalance {\n                value\n                currencyCode\n                __typename\n              }\n              ledgerEntries(\n                first: $firstLedgerEntries\n                after: $ledgerEntriesAfterCursor\n              ) {\n                __typename\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                  startCursor\n                  endCursor\n                  __typename\n                }\n                edges {\n                  __typename\n                  cursor\n                  node {\n                    id\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "cardProductId": "CARD_PRODUCT_ID",
        "filterBy": {
          "features": {
            "equals": "INCOME_ACCOUNT"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "fees",
      "path": "Fees/Get Card Product Fee Balance",
      "description": "",
      "tags": [
        "fees",
        "retrieval"
      ],
      "requires": [],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722526",
    "updated_at": "2025-08-04T16:18:34.722527"
  },
  {
    "name": "GetFeeTransferEvents",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query ListFeeTransferEvents(\n  $first: Int\n  $after: String\n  $filterBy: FeeTransferEventFilterInput\n) {\n  feeTransferEvents(first: $first, after: $after, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...feeTransferEvent\n      }\n    }\n  }\n}\nfragment feeTransferEvent on FeeTransferEvent {\n  __typename\n  id\n  feeTransfer {\n    __typename\n    ... on ChargedFeeTransfer {\n      originatingAccount {\n        id\n        accountStatus\n        feeTransferEvents {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              feeTransfer {\n                __typename\n              }\n            }\n          }\n        }\n      }\n      receivingAccount {\n        id\n        accountStatus\n      }\n      cardProduct {\n        id\n        name\n      }\n      feeActivityType\n      feeAmount {\n        value\n        currencyCode\n      }\n      transferedFeeAmount {\n        value\n        currencyCode\n      }\n      transferDate\n      status {\n        __typename\n        ... on NonFailureFeeTransferStatus {\n          status\n        }\n      }\n      feeChargeRule {\n        id\n        name\n        value {\n          __typename\n          ... on FixedFeeChargeValue {\n            amount {\n              value\n              currencyCode\n            }\n          }\n        }\n      }\n      feeChargeActvity {\n        __typename\n        ... on PhysicalPaymentCardOrder {\n          id\n        }\n        ... on PaymentCard {\n          id\n        }\n        ... on FinancialAccount {\n          id\n        }\n        ... on SecureDepositACHTransfer {\n          id\n        }\n        ... on SecureCardBalanceRepaymentACHTransfer {\n          id\n        }\n        ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n          id\n        }\n        ... on IntegratorInitiatedFundsDepositACHTransfer {\n          id\n        }\n        ... on AuthorizationAndClearEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n        ... on ClearingEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n        ... on BalanceInquiryEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n      }\n    }\n    ... on ReversedFeeTransfer {\n      originatingAccount {\n        id\n      }\n      receivingAccount {\n        id\n      }\n      transferedFeeAmount {\n        value\n        currencyCode\n      }\n      transferDate\n      sourceFeeTransferEvent {\n        __typename\n        id\n        ... on FeeTransferEvent {\n          id\n          feeTransfer {\n            __typename\n            ... on ChargedFeeTransfer {\n              originatingAccount {\n                id\n              }\n              feeAmount {\n                value\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 20,
        "filterBy": {
          "cardProductId": {
            "equals": "CARD_PRODUCT_ID"
          },
          "originatingAccountId": {
            "equals": "ACCOUNT_HOLDER_FINANCIAL_ACCOUNT_ID"
          },
          "createDate": {
            "between": {
              "start": "2024-04-01T00:00:00.000Z",
              "end": "2024-05-01T23:59:59.999Z"
            }
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "fees",
      "path": "Fees/Get Fee Transfer Events",
      "description": "",
      "tags": [
        "fees",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "pageInfo",
        "originatingAccount",
        "pageInfo",
        "amount",
        "originatingAccount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722584",
    "updated_at": "2025-08-04T16:18:34.722585"
  },
  {
    "name": "WaiveFeeTransferEvent",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation waiveFeeTransfer($input: WaiveFeeTransferInput!) {\n    waiveFeeTransfer(input: $input) {\n        ... on FeeTransferEvent {\n            id\n            feeTransfer {\n                ... on ChargedFeeTransfer {\n                    originatingAccount {\n                        id\n                        name\n                    }\n                    receivingAccount {\n                        id\n                        name\n                    }\n                    feeActivityType\n                    feeAmount {\n                        currencyCode\n                        value\n                        decimalPlaces\n                    }\n                    transferDate\n                }\n\n            }\n        }\n        ... on UserError {\n            errors {\n                path\n                code\n                description\n            }\n        }\n        ... on AccessDeniedError {\n            message\n        }\n    }\n\n}",
      "variables": {
        "input": {
          "feeTransferEventId": "{{feeTransferEventId}}",
          "idempotencyKey": "{{$guid}}",
          "memo": "NOTES"
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.6.0",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "fees",
      "path": "Fees/Waive Fee Transfer Event",
      "description": "",
      "tags": [
        "fees"
      ],
      "requires": [
        "feeTransferEventId"
      ],
      "produces": [
        "originatingAccount",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722608",
    "updated_at": "2025-08-04T16:18:34.722608"
  },
  {
    "name": "CreateGlobalNote",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateGlobalNote($input: CreateGlobalNoteInput!) {\n  createGlobalNote(input: $input) {\n    ... on GlobalNote {\n      id\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "message": "Test 1234",
          "primaryEntity": {
            "primaryEntityId": "{{financialAccountId}}",
            "primaryEntityType": "FINANCIAL_ACCOUNT"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "global_notes",
      "path": "Global Notes/Create Global Note",
      "description": "",
      "tags": [
        "global_notes",
        "creation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722624",
    "updated_at": "2025-08-04T16:18:34.722624"
  },
  {
    "name": "CreateCardProduct",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n    }\n    ... on UserError {\n      errors {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Acquiring {{currentTimestampFormatted}}",
            "usage": "MULTI_USE",
            "vertical": "ACQUIRING"
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "initialization",
      "path": "Acquiring/Initialization/Create Card Product",
      "description": "",
      "tags": [
        "initialization",
        "creation"
      ],
      "requires": [
        "currentTimestampFormatted"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722644",
    "updated_at": "2025-08-04T16:18:34.722644"
  },
  {
    "name": "CreateAcquiringAccountForTest",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation createAcquiringAccountForTest($input: CreateAcquiringAccountForTestInput!) {\n  createAcquiringAccountForTest(input: $input) {\n\t\t__typename\n    ... on CardProduct {\n\t\t\tid\n\t\t\tname\n\t\t\tvertical\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\terrorPath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n  }\n}",
      "variables": {}
    },
    "headers": {},
    "metadata": {
      "category": "initialization",
      "path": "Acquiring/Initialization/Create Acquiring Account For Test",
      "description": "",
      "tags": [
        "initialization",
        "creation"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722662",
    "updated_at": "2025-08-04T16:18:34.722663"
  },
  {
    "name": "AuthorizePaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation AuthorizePaymentCard($input: AuthorizePaymentCardInput!) {\n  authorizePaymentCard(input: $input) {\n    ... on CardAuthorizationStepSummary {\n      createdAt\n      transaction {\n        __typename\n        id\n        createdAt\n        accountingDirection\n        authorizedAmount {\n          value\n          currencyCode\n        }\n        authorizedRemainingAmount {\n          value\n          currencyCode\n        }\n        settledAmount {\n          value\n          currencyCode\n        }\n        disbursedAmount {\n          value\n          currencyCode\n        }\n        canceledAmount {\n          value\n          currencyCode\n        }\n        refundedAmount {\n          value\n          currencyCode\n        }\n        responseCode {\n          authorizationIdentifier\n          processorResponseCode\n          addressCode\n          postalCode\n          securityCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCard": {
            "cardNumber": "4000000000000002",
            "expiryYear": "31",
            "expiryMonth": "12",
            "securityCode": "111"
          },
          "cardHolder": {
            "billingAddress": {
              "streetAddress": "1234 Visa Street",
              "countryCodeAlpha3": "USA",
              "extendedAddress": "extended-address",
              "locality": "Visa",
              "region": "California",
              "postalCode": "12345"
            }
          },
          "contractId": "{{contractId}}",
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "idempotencyKey": "{{$guid}}",
          "paymentInitiator": "CUSTOMER_INITIATED_VIA_WEB"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "payments",
      "path": "Acquiring/Payments/Authorize Payment Card",
      "description": "",
      "tags": [
        "payments"
      ],
      "requires": [
        "contractId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722694",
    "updated_at": "2025-08-04T16:18:34.722695"
  },
  {
    "name": "ChargePaymentCard",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ChargePaymentCard($input: ChargePaymentCardInput!) {\n  chargePaymentCard(input: $input) {\n    __typename\n    ... on CardCaptureStepSummary {\n      createdAt\n      transaction {\n        __typename\n        id\n        createdAt\n        accountingDirection\n        authorizedAmount {\n          value\n          currencyCode\n        }\n        authorizedRemainingAmount {\n          value\n          currencyCode\n        }\n        settledAmount {\n          value\n          currencyCode\n        }\n        disbursedAmount {\n          value\n          currencyCode\n        }\n        canceledAmount {\n          value\n          currencyCode\n        }\n        refundedAmount {\n          value\n          currencyCode\n        }\n        responseCode {\n          authorizationIdentifier\n          processorResponseCode\n          addressCode\n          postalCode\n          securityCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCard": {
            "cardNumber": "4000000000000002",
            "expiryYear": "31",
            "expiryMonth": "12",
            "securityCode": "111"
          },
          "cardHolder": {
            "billingAddress": {
              "streetAddress": "street-address",
              "countryCodeAlpha3": "USA",
              "extendedAddress": "extended-address",
              "locality": "Los Angeles",
              "region": "California",
              "postalCode": "90210"
            }
          },
          "contractId": "{{contractId}}",
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "idempotencyKey": "{{$guid}}",
          "paymentInitiator": "CUSTOMER_INITIATED_VIA_WEB"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "payments",
      "path": "Acquiring/Payments/Charge Payment Card",
      "description": "",
      "tags": [
        "payments"
      ],
      "requires": [
        "contractId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722778",
    "updated_at": "2025-08-04T16:18:34.722779"
  },
  {
    "name": "CancelPaymentTransaction",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ChargePaymentCard($input: ChargePaymentCardInput!) {\n  chargePaymentCard(input: $input) {\n    __typename\n    ... on CardCaptureStepSummary {\n      createdAt\n      transaction {\n        __typename\n        id\n        createdAt\n        accountingDirection\n        authorizedAmount {\n          value\n          currencyCode\n        }\n        authorizedRemainingAmount {\n          value\n          currencyCode\n        }\n        settledAmount {\n          value\n          currencyCode\n        }\n        disbursedAmount {\n          value\n          currencyCode\n        }\n        canceledAmount {\n          value\n          currencyCode\n        }\n        refundedAmount {\n          value\n          currencyCode\n        }\n        responseCode {\n          authorizationIdentifier\n          processorResponseCode\n          addressCode\n          postalCode\n          securityCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCard": {
            "cardNumber": "4229989999000012",
            "expiryYear": "31",
            "expiryMonth": "12",
            "securityCode": "871"
          },
          "cardHolder": {
            "billingAddress": {
              "streetAddress": "street-address",
              "countryCodeAlpha3": "USA",
              "extendedAddress": "extended-address",
              "locality": "Los Angeles",
              "region": "California",
              "postalCode": "90210"
            }
          },
          "contractId": "{{contractId}}",
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "idempotencyKey": "{{$guid}}",
          "paymentInitiator": "CUSTOMER_INITIATED_VIA_WEB"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "payments",
      "path": "Acquiring/Payments/Cancel Payment Transaction",
      "description": "",
      "tags": [
        "payments"
      ],
      "requires": [
        "contractId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722811",
    "updated_at": "2025-08-04T16:18:34.722811"
  },
  {
    "name": "CapturePaymentTransaction",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CapturePaymentTransaction($input: CapturePaymentTransactionInput!) {\n  capturePaymentTransaction(input: $input) {\n    __typename\n    ... on CardCaptureStepSummary {\n      createdAt\n      transaction {\n        __typename\n        id\n        createdAt\n        accountingDirection\n        authorizedAmount {\n          value\n          currencyCode\n        }\n        authorizedRemainingAmount {\n          value\n          currencyCode\n        }\n        settledAmount {\n          value\n          currencyCode\n        }\n        disbursedAmount {\n          value\n          currencyCode\n        }\n        canceledAmount {\n          value\n          currencyCode\n        }\n        refundedAmount {\n          value\n          currencyCode\n        }\n        responseCode {\n          authorizationIdentifier\n          processorResponseCode\n          addressCode\n          postalCode\n          securityCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentTransactionId": "{{paymentTransactionId}}",
          "contractId": "{{contractId}}",
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "payments",
      "path": "Acquiring/Payments/Capture Payment Transaction",
      "description": "",
      "tags": [
        "payments"
      ],
      "requires": [
        "contractId",
        "paymentTransactionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722833",
    "updated_at": "2025-08-04T16:18:34.722834"
  },
  {
    "name": "RefundPaymentTransaction",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation RefundPaymentTransaction($input: RefundPaymentTransactionInput!) {\n  refundPaymentTransaction(input: $input) {\n    __typename\n    ... on CardCreditStepSummary {\n      createdAt\n      transaction {\n        __typename\n        id\n        createdAt\n        accountingDirection\n        authorizedAmount {\n          value\n          currencyCode\n        }\n        authorizedRemainingAmount {\n          value\n          currencyCode\n        }\n        settledAmount {\n          value\n          currencyCode\n        }\n        disbursedAmount {\n          value\n          currencyCode\n        }\n        canceledAmount {\n          value\n          currencyCode\n        }\n        refundedAmount {\n          value\n          currencyCode\n        }\n        originatedPaymentTransactionId\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentTransactionId": "{{paymentTransactionId}}",
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "idempotencyKey": "{{$guid}}",
          "refundReason": "CUSTOMER_REQUESTED"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "payments",
      "path": "Acquiring/Payments/Refund Payment Transaction",
      "description": "",
      "tags": [
        "payments"
      ],
      "requires": [
        "paymentTransactionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722854",
    "updated_at": "2025-08-04T16:18:34.722855"
  },
  {
    "name": "GetPaymentTransactions",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentTransactions($first: Int) {\n  paymentTransactions(first: $first) {\n    __typename\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      cursor\n      node {\n        __typename\n        id\n        createdAt\n        updatedAt\n        steps {\n          __typename\n          createdAt\n          amount {\n            value\n            currencyCode\n          }\n          transaction {\n            id\n            accountingDirection\n          }\n          events {\n            __typename\n            createdAt\n            updatedAt\n            amount {\n              value\n              currencyCode\n            }\n          }\n        }\n        status\n        accountingDirection\n        authorizedAmount {\n          value\n          currencyCode\n        }\n        authorizedAmount {\n          value\n          currencyCode\n        }\n        settledAmount {\n          value\n          currencyCode\n        }\n        disbursedAmount {\n          value\n          currencyCode\n        }\n        canceledAmount {\n          value\n          currencyCode\n        }\n        refundedAmount {\n          value\n          currencyCode\n        }\n        responseCode {\n          authorizationIdentifier\n          processorResponseCode\n          addressCode\n          postalCode\n          securityCode\n        }\n        totalFeeAmount {\n          value\n          currencyCode\n        }\n        totalPayableAmount {\n          value\n          currencyCode\n        }\n        fees {\n          __typename\n          feeAmount {\n            value\n            currencyCode\n          }\n          accountingDirection\n        }\n        instrument {\n          __typename\n          ... on PaymentCardInstrument {\n            createdAt\n            last4\n            expiryYear\n            expiryMonth\n            brand\n          }\n        }\n        ... on PaymentCreditTransaction {\n          originatedPaymentTransaction {\n            __typename\n            id\n            createdAt\n            updatedAt\n          }\n        }\n        ... on PaymentDebitTransaction {\n          refunds {\n            __typename\n            id\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 20
      }
    },
    "headers": {},
    "metadata": {
      "category": "payments",
      "path": "Acquiring/Payments/Get Payment Transactions",
      "description": "",
      "tags": [
        "payments",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "originatedPaymentTransaction",
        "refunds"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722883",
    "updated_at": "2025-08-04T16:18:34.722883"
  },
  {
    "name": "GetPaymentTransaction",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "fragment PaymentTransactionEvent on PaymentTransactionEvent {\n  __typename\n  createdAt\n  updatedAt\n  amount {\n    value\n    currencyCode\n  }\n}\n\nquery GetPaymentTransaction($id: ID!) {\n  node(id: $id) {\n    __typename\n\n    ... on PaymentTransaction {\n      id\n      createdAt\n      updatedAt\n\n      steps {\n        __typename\n        createdAt\n        amount {\n          value\n          currencyCode\n        }\n        events {\n          ...PaymentTransactionEvent\n        }\n        transaction {\n          id\n          accountingDirection\n        }\n      }\n      status\n      events {\n        ...PaymentTransactionEvent\n      }\n      accountingDirection\n      authorizedAmount {\n        value\n        currencyCode\n      }\n      authorizedAmount {\n        value\n        currencyCode\n      }\n      settledAmount {\n        value\n        currencyCode\n      }\n      disbursedAmount {\n        value\n        currencyCode\n      }\n      canceledAmount {\n        value\n        currencyCode\n      }\n      refundedAmount {\n        value\n        currencyCode\n      }\n      responseCode {\n        authorizationIdentifier\n        processorResponseCode\n        addressCode\n        postalCode\n        securityCode\n      }\n      totalFeeAmount {\n        value\n        currencyCode\n      }\n      totalPayableAmount {\n        value\n        currencyCode\n      }\n      fees {\n        __typename\n        feeAmount {\n          value\n          currencyCode\n        }\n        accountingDirection\n      }\n      instrument {\n        __typename\n        ... on PaymentCardInstrument {\n          createdAt\n          last4\n          expiryYear\n          expiryMonth\n          brand\n        }\n      }\n      ... on PaymentCreditTransaction {\n        originatedPaymentTransaction {\n          __typename\n          id\n          createdAt\n          updatedAt\n        }\n      }\n      ... on PaymentDebitTransaction {\n        refunds {\n          __typename\n          id\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{paymentTransactionId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "payments",
      "path": "Acquiring/Payments/Get Payment Transaction",
      "description": "",
      "tags": [
        "payments",
        "retrieval"
      ],
      "requires": [
        "paymentTransactionId"
      ],
      "produces": [
        "originatedPaymentTransaction",
        "refunds"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722910",
    "updated_at": "2025-08-04T16:18:34.722911"
  },
  {
    "name": "CreatePaymentOrder",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreatePaymentOrderWithPaymentInstructions(\n  $input: CreatePaymentOrderInput!\n) {\n  createPaymentOrder(input: $input) {\n    ... on PaymentOrder {\n      __typename\n      id\n      totalAmount {\n        __typename\n        value\n        currencyCode\n        decimalPlaces\n      }\n      lineItems {\n        item {\n          __typename\n          ... on PaymentOrderItemFromCatalogItem {\n            catalogItem {\n              id\n              name\n              description\n            }\n            name\n            description\n            amountPerItem {\n              __typename\n              value\n              currencyCode\n              decimalPlaces\n            }\n          }\n        }\n        quantity\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "catalogItems": [
            {
              "id": "acqca_1",
              "name": "Apple",
              "description": "A delicious red apple",
              "amountPerItem": {
                "value": 100,
                "currencyCode": "USD"
              },
              "paymentInstructions": [
                {
                  "disbursementPercent": 100,
                  "disburseToId": "ac_apple_seller"
                }
              ],
              "quantity": 1
            },
            {
              "id": "acqca_2",
              "name": "Orange",
              "description": "A juicy orange bursting with flavor",
              "amountPerItem": {
                "value": 100,
                "currencyCode": "USD"
              },
              "paymentInstructions": [
                {
                  "disbursementPercent": 100,
                  "disburseToId": "ac_orange_seller"
                }
              ],
              "quantity": 1
            }
          ],
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "payment_orders",
      "path": "Acquiring/Payment Orders/Create Payment Order",
      "description": "",
      "tags": [
        "payment_orders",
        "creation"
      ],
      "requires": [],
      "produces": [
        "item",
        "catalogItem"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722944",
    "updated_at": "2025-08-04T16:18:34.722945"
  },
  {
    "name": "ChargePaymentOrderFromPaymentMethodToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation ChargePaymentOrderPaymentMethodToken($input: ChargePaymentOrderPaymentMethodTokenInput!) {\n  chargePaymentOrderFromPaymentMethodToken(input: $input) {\n    ... on CardCapturePaymentOrderSummary {\n      transaction {\n        requestedAuthorizationAmount {\n          __typename\n          value\n          currencyCode\n          decimalPlaces\n        }\n      }\n      order {\n        __typename\n        id\n        totalAmount {\n          __typename\n          value\n          currencyCode\n          decimalPlaces\n        }\n        lineItems {\n          item {\n            __typename\n            name\n            description\n            amountPerItem {\n              __typename\n              value\n              currencyCode\n              decimalPlaces\n            }\n          }\n          quantity\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentMethodTokenId": "tkpmc_1",
          "orderId": "{{paymentOrderId}}}}",
          "contractId": "{{contractId}}",
          "idempotencyKey": "{{$guid}}",
          "paymentInitiator": "CUSTOMER_INITIATED_VIA_WEB"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "payment_orders",
      "path": "Acquiring/Payment Orders/Charge Payment Order From Payment Method Token",
      "description": "",
      "tags": [
        "payment_orders"
      ],
      "requires": [
        "paymentOrderId",
        "contractId"
      ],
      "produces": [
        "transaction",
        "item"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722969",
    "updated_at": "2025-08-04T16:18:34.722969"
  },
  {
    "name": "GetPaymentOrder",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetPaymentOrder($id: ID!) {\n  node(id: $id) {\n    ... on PaymentOrder {\n      totalAmount {\n        __typename\n        value\n        currencyCode\n        decimalPlaces\n      }\n      transactions {\n        __typename\n        id\n        settledAmount {\n          __typename\n          value\n          currencyCode\n          decimalPlaces\n        }\n        refundedAmount {\n          __typename\n          value\n          currencyCode\n          decimalPlaces\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{paymentOrderId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "payment_orders",
      "path": "Acquiring/Payment Orders/Get Payment Order",
      "description": "",
      "tags": [
        "payment_orders",
        "retrieval"
      ],
      "requires": [
        "paymentOrderId"
      ],
      "produces": [
        "totalAmount"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.722983",
    "updated_at": "2025-08-04T16:18:34.722984"
  },
  {
    "name": "GetUnifiedFundsTransfer",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetInstantNetworkTransfer($id: ID!) {\n  node(id: $id) {\n    __typename\n    id\n    ... on UnifiedFundsTransfer {\n      status\n      steps {\n        __typename\n        ... on UnifiedFundsTransferInstantNetworkTransferStep {\n          __typename\n          transfer {\n            ... on InstantNetworkTransfer {\n              createdAt\n              destination {\n                node {\n                  __typename\n                  ... on PaymentMethodToken {\n                    id\n                  }\n                }\n              }\n              status\n              events {\n                __typename\n                type\n              }\n              externalIdentifier\n              failureReason\n              id\n              idempotencyKey\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "wouft_5928d27fa852467792baa03987027dd9"
      }
    },
    "headers": {
      "Authorization": "{{apiKey}}"
    },
    "metadata": {
      "category": "united_funds_transfer",
      "path": "Acquiring/United Funds Transfer/Get Unified Funds Transfer",
      "description": "",
      "tags": [
        "united_funds_transfer",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723004",
    "updated_at": "2025-08-04T16:18:34.723004"
  },
  {
    "name": "CreateReusablePaymentMethodToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateReusablePaymentMethodToken(\n  $input: CreateReusablePaymentMethodTokenInput!\n) {\n  createReusablePaymentMethodToken(input: $input) {\n    __typename\n    ... on PaymentMethodToken {\n      instrument {\n        __typename\n        ... on PaymentCardInstrument {\n          brand\n          last4\n          capabilities {\n            __typename\n            ... on InstantNetworkTransferDestinationPaymentInstrumentCapability {\n              createdAt\n              status\n              updatedAt\n            }\n          }\n        }\n      }\n      checkoutToken: token(scope: ECOMMERCE) {\n        ... on ScopedPaymentMethodToken {\n          token\n        }\n      }\n    }\n    ... on UserError {\n        errors {\n            code\n            description\n            errorPath\n        }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentMethodTokenId": "tkpmc_0001mm81r7uo1x4nkj6vrj2v3nsc5",
          "customerIdentifier": "ps_ah0144341be9ec164db9925bf98c27fa2fba",
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "united_funds_transfer",
      "path": "Acquiring/United Funds Transfer/Create Reusable Payment Method Token",
      "description": "",
      "tags": [
        "united_funds_transfer",
        "creation"
      ],
      "requires": [],
      "produces": [
        "instrument",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723022",
    "updated_at": "2025-08-04T16:18:34.723023"
  },
  {
    "name": "CreateUnifiedFundsTransferQuote",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateTransferQuote($input: CreateUnifiedFundsTransferQuoteInput!) {\n  createUnifiedFundsTransferQuote(input: $input) {\n    __typename\n    ... on CreateUnifiedFundsTransferQuoteResult {\n      quotes {\n        id\n        source {\n          node {\n            ... on FinancialAccount {\n              id\n            }\n          }\n          amount {\n            currencyCode\n            value\n            decimalPlaces\n          }\n        }\n        destination {\n          node {\n            ... on PaymentMethodToken {\n              id\n            }\n          }\n          amount {\n            currencyCode\n            value\n            decimalPlaces\n          }\n        }\n        transferDetail {\n          timeEstimate\n          feeTotal {\n            value\n            decimalPlaces\n          }\n        }\n        idempotencyKey\n        expiresAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "source": {
            "id": "ac_c0222a1dd160f368428f8e9e17b58eb01504",
            "amount": {
              "currencyCode": "USD",
              "value": "15000"
            }
          },
          "destination": {
            "id": "tkpmc_0001tp1bm62wawbt1ejciixtueqp2"
          },
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "united_funds_transfer",
      "path": "Acquiring/United Funds Transfer/Create Unified Funds Transfer Quote",
      "description": "",
      "tags": [
        "united_funds_transfer",
        "creation"
      ],
      "requires": [],
      "produces": [
        "quotes",
        "node",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723046",
    "updated_at": "2025-08-04T16:18:34.723046"
  },
  {
    "name": "InitiateUnifiedFundsTransfer",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiateUnifiedFundsTransfer($input: InitiateUnifiedFundsTransferInput!) {\n  initiateUnifiedFundsTransfer(input: $input) {\n    __typename\n    ... on UnifiedFundsTransfer {\n      id\n      source {\n        node {\n          ... on FinancialAccount {\n            id\n          }\n        }\n        amount {\n          currencyCode\n          value\n          decimalPlaces\n        }\n      }\n      destination {\n        node {\n          ... on PaymentMethodToken {\n            id\n          }\n        }\n        amount {\n          currencyCode\n          value\n          decimalPlaces\n        }\n      }\n      externalIdentifier\n      idempotencyKey\n      steps {\n        ... on UnifiedFundsTransferInitiateRequestStep {\n          status\n          createdAt\n        }\n        ... on UnifiedFundsTransferInstantNetworkTransferStep {\n          status\n          createdAt\n          transfer {\n            ... on InstantNetworkTransfer {\n              id\n              createdAt\n              updatedAt\n              status\n              failureReason\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "woquo_cd9e3f3485a747ef977f2a4506db6dfa"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "united_funds_transfer",
      "path": "Acquiring/United Funds Transfer/Initiate Unified Funds Transfer",
      "description": "",
      "tags": [
        "united_funds_transfer"
      ],
      "requires": [],
      "produces": [
        "node",
        "node"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723065",
    "updated_at": "2025-08-04T16:18:34.723065"
  },
  {
    "name": "IssueFinancialAccountForApplicationWithCustomFields",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      customFields {\n        ... on CustomStringField {\n          key\n          value\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "name": "TEST",
          "customFields": [
            {
              "key": "customerID",
              "value": "12345"
            }
          ]
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "custom_fields",
      "path": "Custom Fields/Issue Financial Account For Application With Custom Fields",
      "description": "",
      "tags": [
        "custom_fields",
        "issuance"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723088",
    "updated_at": "2025-08-04T16:18:34.723089"
  },
  {
    "name": "IssuePaymentCardForFinancialAccountWithCustomFields",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      last4\n      customFields {\n        ... on CustomStringField {\n          key\n          value\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "customFields": [
            {
              "key": "customerId",
              "value": "12345"
            }
          ],
          "options": {
            "expirationDate": "2029-01-01T00:00:00.000Z",
            "activateOnCreate": true
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "custom_fields",
      "path": "Custom Fields/Issue Payment Card For Financial Account With Custom Fields",
      "description": "",
      "tags": [
        "custom_fields",
        "issuance"
      ],
      "requires": [],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723109",
    "updated_at": "2025-08-04T16:18:34.723109"
  },
  {
    "name": "UpdateCustomField",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation UpdateCustomFields($input: UpdateCustomFieldsInput!) {\n  updateCustomFields(input: $input) {\n    ... on CustomFieldsResult {\n      customFields {\n        key\n        ... on CustomStringField {\n          key\n          value\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "FINANCIAL_ACCOUNT_ID_OR_PAYMENT_CARD_ID",
          "customFields": [
            {
              "key": "customerId",
              "value": "12345"
            },
            {
              "key": "offerId",
              "value": "45677"
            }
          ]
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "custom_fields",
      "path": "Custom Fields/Update Custom Field",
      "description": "",
      "tags": [
        "custom_fields",
        "modification"
      ],
      "requires": [],
      "produces": [
        "customFields",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723126",
    "updated_at": "2025-08-04T16:18:34.723126"
  },
  {
    "name": "DeleteCustomFields",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation DeleteCustomFields($input: DeleteCustomFieldsInput!) {\n  deleteCustomFields(input: $input) {\n    ... on CustomFieldsResult {\n      customFields {\n        ... on CustomStringField {\n          key\n          value\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "FINANCIAL_ACCOUNT_ID_OR_PAYMENT_CARD_ID"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "custom_fields",
      "path": "Custom Fields/Delete Custom Fields",
      "description": "",
      "tags": [
        "custom_fields",
        "deletion"
      ],
      "requires": [],
      "produces": [
        "customFields",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723138",
    "updated_at": "2025-08-04T16:18:34.723139"
  },
  {
    "name": "GetCustomFieldsFromObjectId",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountCustomFields($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      customFields {\n            ... on CustomStringField {\n                key\n                value\n        }\n      }\n    }\n    ... on PaymentCard {\n        customFields {\n            ... on CustomStringField {\n                key\n                value\n            }\n       }\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID_OR_PAYMENT_CARD_ID"
      }
    },
    "headers": {},
    "metadata": {
      "category": "custom_fields",
      "path": "Custom Fields/Get Custom Fields From Object ID",
      "description": "",
      "tags": [
        "custom_fields",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "customFields",
        "customFields"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723151",
    "updated_at": "2025-08-04T16:18:34.723152"
  },
  {
    "name": "GetFinancialAccountsByCustomFieldsFilter",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FilterFinancialAccountByCustomField($id: ID!, $filterBy: AccountHolderFinancialAccountsFilterInput) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      financialAccounts(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            externalId\n            customFields {\n              ... on CustomStringField {\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "ap_22pcgm96f91e695cd74c1bb9c931c3afe6a47a",
        "filterBy": {
          "customFields": {
            "equals": {
              "key": "customerId",
              "value": "12345"
            }
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "custom_fields",
      "path": "Custom Fields/Get Financial Accounts By Custom Fields Filter",
      "description": "",
      "tags": [
        "custom_fields",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723173",
    "updated_at": "2025-08-04T16:18:34.723174"
  },
  {
    "name": "GetPaymentCardsByCustomFieldsFilter",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query FilterPaymentCardsByCustomField($id: ID!, $filterBy: FinancialAccountPaymentCardsFilterInput) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      paymentCards(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            customFields {\n              ... on CustomStringField {\n                key\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID",
        "filterBy": {
          "customFields": {
            "includes": [
              {
                "key": "customerId",
                "value": "12345"
              }
            ]
          }
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "custom_fields",
      "path": "Custom Fields/Get Payment Cards By Custom Fields Filter",
      "description": "",
      "tags": [
        "custom_fields",
        "retrieval"
      ],
      "requires": [],
      "produces": [
        "edges"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723200",
    "updated_at": "2025-08-04T16:18:34.723201"
  },
  {
    "name": "CreateCheckPaymentSignatureDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateCheckPaymentSignatureDocumentUploadSession(\n  $input: CreateCheckPaymentDocumentUploadSessionInput!\n) {\n  createCheckPaymentDocumentUploadSession(input: $input) {\n    __typename\n    ... on DocumentUploadSession {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "documentTypes": [
            "ACCOUNT_HOLDER_SIGNATURE"
          ]
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "signature",
      "path": "Check Payments/Signature/Create Check Payment Signature Document Upload Session",
      "description": "",
      "tags": [
        "signature",
        "creation"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723238",
    "updated_at": "2025-08-04T16:18:34.723239"
  },
  {
    "name": "GetCheckPaymentSignatureDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCheckPaymentSignatureDocumentUploadSession($id: ID!) {\n    node(id: $id) {\n        ... on DocumentUploadSession {\n            __typename\n            id\n            createdAt\n            updatedAt\n            status\n            documents {\n                __typename\n                id\n                createdAt\n                updatedAt\n                status\n                uploadUrl\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{checkPaymentSignatureDocumentUploadSessionId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "signature",
      "path": "Check Payments/Signature/Get Check Payment Signature Document Upload Session",
      "description": "",
      "tags": [
        "signature",
        "retrieval"
      ],
      "requires": [
        "checkPaymentSignatureDocumentUploadSessionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723264",
    "updated_at": "2025-08-04T16:18:34.723265"
  },
  {
    "name": "GenerateCheckPaymentSignatureDocumentUploadClientToken",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation GenerateCheckPaymentSignatureDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{checkPaymentSignatureDocumentUploadSessionId}}",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "signature",
      "path": "Check Payments/Signature/Generate Check Payment Signature Document Upload Client Token",
      "description": "",
      "tags": [
        "signature"
      ],
      "requires": [
        "checkPaymentSignatureDocumentUploadSessionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723285",
    "updated_at": "2025-08-04T16:18:34.723286"
  },
  {
    "name": "StartCheckPaymentSignatureDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation StartCheckPaymentSignatureDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    ... on CheckPaymentDocumentUploadSession {\n      id\n      status\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{checkPaymentSignatureDocumentUploadSessionId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "signature",
      "path": "Check Payments/Signature/Start Check Payment Signature Document Upload Session",
      "description": "",
      "tags": [
        "signature"
      ],
      "requires": [
        "checkPaymentSignatureDocumentUploadSessionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723302",
    "updated_at": "2025-08-04T16:18:34.723303"
  },
  {
    "name": "CreateCheckPaymentSignatureDocumentUploadLink",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation CreateDocumentUploadLink($input: CreateDocumentUploadLinkInput!) {\n  createDocumentUploadLink(input: $input) {\n    ... on DocumentUploadLink {\n      id\n      uploadUrl\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{checkPaymentSignatureDocumentUploadSessionId}}",
          "documentType": "ACCOUNT_HOLDER_SIGNATURE"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "signature",
      "path": "Check Payments/Signature/Create Check Payment Signature Document Upload Link",
      "description": "",
      "tags": [
        "signature",
        "creation"
      ],
      "requires": [
        "checkPaymentSignatureDocumentUploadSessionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723317",
    "updated_at": "2025-08-04T16:18:34.723317"
  },
  {
    "name": "EndCheckPaymentSignatureDocumentUploadSession",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    ... on DocumentUploadSession {\n      status\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{checkPaymentSignatureDocumentUploadSessionId}}"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "signature",
      "path": "Check Payments/Signature/End Check Payment Signature Document Upload Session",
      "description": "",
      "tags": [
        "signature"
      ],
      "requires": [
        "checkPaymentSignatureDocumentUploadSessionId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723334",
    "updated_at": "2025-08-04T16:18:34.723334"
  },
  {
    "name": "InitiatePhysicalCheckPayment",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation InitiatePhysicalCheckPayment($input: InitiatePhysicalCheckPaymentInput!) {\n  initiatePhysicalCheckPayment(input: $input) {\n    __typename\n    ... on CheckPayment {\n      id\n      amount {\n        __typename\n        value\n        currencyCode\n        decimalPlaces\n      }\n      recipient {\n        __typename\n        name\n        address {\n          __typename\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n      }\n      checkType\n      shippingTime\n      status\n      events {\n        __typename\n        id\n        type\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "recipient": {
            "name": "John Doe",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "Apt 1",
              "postalCode": "12345",
              "region": "CA",
              "locality": "San Francisco",
              "countryCodeAlpha3": "USA"
            }
          },
          "shippingTime": "STANDARD"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "check_payments",
      "path": "Check Payments/Initiate Physical Check Payment",
      "description": "",
      "tags": [
        "check_payments"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723363",
    "updated_at": "2025-08-04T16:18:34.723363"
  },
  {
    "name": "GetPhysicalCheckPayment",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCheckPayment($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on CheckPayment {\n      id\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      recipient {\n        __typename\n        name\n        address {\n          __typename\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n      }\n      checkType\n      shippingTime\n      status\n      failureReason\n      events {\n        __typename\n        id\n        type\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalCheckPaymentId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "check_payments",
      "path": "Check Payments/Get Physical Check Payment",
      "description": "",
      "tags": [
        "check_payments",
        "retrieval"
      ],
      "requires": [
        "physicalCheckPaymentId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723377",
    "updated_at": "2025-08-04T16:18:34.723378"
  },
  {
    "name": "GetPhysicalCheckPaymentEvent",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetCheckPayment($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on CheckPayment {\n      id\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      recipient {\n        __typename\n        name\n        address {\n          __typename\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n      }\n      checkType\n      shippingTime\n      status\n      failureReason\n      events {\n        __typename\n        id\n        type\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalCheckPaymentId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "check_payments",
      "path": "Check Payments/Get Physical Check Payment Event",
      "description": "",
      "tags": [
        "check_payments",
        "retrieval"
      ],
      "requires": [
        "physicalCheckPaymentId"
      ],
      "produces": []
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723392",
    "updated_at": "2025-08-04T16:18:34.723392"
  },
  {
    "name": "GetFinancialAccountCheckPayments",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query GetFinancialAccountCheckPayments($id: ID!) {\n    node(id: $id) {\n        ... on FinancialAccount {\n            id\n            checkPayments {\n                edges {\n                    node {\n                        id\n                        createdAt\n                        updatedAt\n                        amount {\n                            value\n                            decimalPlaces\n                            currencyCode\n                        }\n                        checkType\n                        events {\n                            id\n                            createdAt\n                            checkPayment {\n                                id\n                                createdAt\n                                updatedAt\n                                amount {\n                                    value\n                                    decimalPlaces\n                                    currencyCode\n                                }\n                                checkType\n                                events {\n                                    id\n                                }\n                                failureReason\n                                financialAccount {\n                                    id\n                                }\n                                recipient {\n                                    address {\n                                        streetAddress\n                                        extendedAddress\n                                        locality\n                                        region\n                                        postalCode\n                                        countryCodeAlpha3\n                                    }\n                                    externalIdentifier\n                                    name\n                                }\n                                shippingTime\n                                status\n                            }\n                            failureReason\n                            type\n                        }\n                        failureReason\n                        financialAccount {\n                            id\n                        }\n                        recipient {\n                            address {\n                                streetAddress\n                                extendedAddress\n                                locality\n                                region\n                                postalCode\n                                countryCodeAlpha3\n                            }\n                            externalIdentifier\n                            name\n                        }\n                        shippingTime\n                        status\n                    }\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    "headers": {},
    "metadata": {
      "category": "check_payments",
      "path": "Check Payments/Get Financial Account Check Payments",
      "description": "",
      "tags": [
        "check_payments",
        "retrieval"
      ],
      "requires": [
        "financialAccountId"
      ],
      "produces": [
        "edges",
        "address",
        "address"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723416",
    "updated_at": "2025-08-04T16:18:34.723416"
  },
  {
    "name": "SimulateCheckPaymentStatus",
    "program_type": "highnote_api",
    "operation_type": "mutation",
    "graphql": {
      "query": "mutation SimulateCheckPaymentEvent($input: SimulateCheckPaymentEventInput!) {\n    simulateCheckPaymentEvent(input: $input) {\n        ... on CheckPayment {\n            id\n        }\n        ... on UserError {\n            errors {\n                code\n                description\n                errorPath\n            }\n        }\n    }\n}",
      "variables": {
        "input": {
          "checkPaymentId": "{{physicalCheckPaymentId}}",
          "checkEventType": "PRINTED"
        }
      }
    },
    "headers": {},
    "metadata": {
      "category": "check_payments",
      "path": "Check Payments/Simulate Check Payment Status",
      "description": "",
      "tags": [
        "check_payments",
        "simulation"
      ],
      "requires": [
        "physicalCheckPaymentId"
      ],
      "produces": [
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723431",
    "updated_at": "2025-08-04T16:18:34.723432"
  },
  {
    "name": "UniversalTransactionSearch",
    "program_type": "highnote_api",
    "operation_type": "query",
    "graphql": {
      "query": "query searchTransactions($first: Int, $after: String, $filterBy: TransactionSearchFilterInput!) {\n    organizations {\n        searchTransactions(first: $first, after: $after, filterBy: $filterBy) {\n            ... on TransactionSearchResultConnection {\n                pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                    startCursor\n                    endCursor\n                }\n                edges {\n                    cursor\n                    node {\n                        ... on TransactionSearchResult {\n                            source {\n                                __typename\n                            }\n                            amount {\n                                currencyCode\n                                value\n                            }\n                            status\n                            transactionSearchType\n                            transactionSearchObjectType\n                        }\n                    }\n                }\n            }\n            ... on AccessDeniedError {\n                message\n            }\n            ... on UserError {\n                errors {\n                    errorPath\n                    code\n                    description\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "first": 20,
        "after": null,
        "filterBy": {
          "searchQueryLanguage": {
            "query": "transactionId = 'tx_23ug1ji73thqvu358shhdr8f45e1sb8a5n' AND transactionSearchType = 'EVENT'",
            "version": "VERSION_1"
          }
        }
      }
    },
    "headers": {
      "User-Agent": "insomnia/8.4.2",
      "Content-Type": "application/json"
    },
    "metadata": {
      "category": "universal_search",
      "path": "Universal Search/Universal Transaction Search",
      "description": "",
      "tags": [
        "universal_search",
        "search"
      ],
      "requires": [],
      "produces": [
        "organizations",
        "pageInfo",
        "source",
        "errors"
      ]
    },
    "version": "1.0.0",
    "created_at": "2025-08-04T16:18:34.723456",
    "updated_at": "2025-08-04T16:18:34.723456"
  }
]