{
  "collection": "Commercial Charge",
  "program_type": "commercial_charge",
  "extraction_date": "2025-08-12T17:46:30.867Z",
  "total_operations": 109,
  "categories": [
    {
      "name": "initialization",
      "operations": [
        {
          "name": "GetAllAPIKeys",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateSecretAPIKey",
          "type": "mutation",
          "required": true
        },
        {
          "name": "RevokeAPIKey",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAllOrganizations",
          "type": "query",
          "required": true
        },
        {
          "name": "GetAllOrganizations",
          "type": "query",
          "required": true
        },
        {
          "name": "UpdateOrganizationProfileDisplayName",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetCardProductWithCreditPlanTemplates",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateCardProductCreditPlan",
          "type": "mutation",
          "required": true
        },
        {
          "name": "ActivateCardProductCreditPlan",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetCardProductCreditPlans",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateCardProduct",
          "type": "mutation",
          "required": true
        },
        {
          "name": "EnableCreditCardFeature",
          "type": "mutation",
          "required": true
        },
        {
          "name": "EnableCollaborativeApplicationUnderwritingFeature",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetCardProductWithCreditConfigs",
          "type": "query",
          "required": true
        },
        {
          "name": "GetProductFundingAccount",
          "type": "query",
          "required": true
        },
        {
          "name": "Ping",
          "type": "query",
          "required": false
        },
        {
          "name": "IntrospectionQuery",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateDeposit",
          "type": "mutation",
          "required": false
        }
      ]
    },
    {
      "name": "onboarding",
      "operations": [
        {
          "name": "CreateUSBusiniessAccountHolderInReview",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSBusinessAccountHolderCardProductApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "StartDocumentUploadSession",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GenerateDocumentUploadClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateDocumentUploadSecureLink",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetDocumentUploadSession",
          "type": "query",
          "required": true
        },
        {
          "name": "GetDocumentUploadSessionsViaApplicationID",
          "type": "query",
          "required": true
        },
        {
          "name": "SimulateApplicationDocumentReview",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationVerificationStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateUSBusinessAccountHolderFromToken",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GenerateTokenizeAccountHolderClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "TokenizeUSBusinessAccountHolder",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateUSBusiniessAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetUSBusinessAccountHolder",
          "type": "query",
          "required": true
        },
        {
          "name": "UpdateUSBusinessAccountHolderBillingAddress",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateAccountHolderCardProductApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetUSBusinessAccountHolderCardProductApplications",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateUSPersonAuthorizedUser",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateAuthorizedUserCardProductApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "IssuePaymentCardForAuthorizedUserApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetAuthorizedPersonCardProductApplication",
          "type": "query",
          "required": true
        },
        {
          "name": "GetAccountHolderAuthorizedUsers",
          "type": "query",
          "required": true
        },
        {
          "name": "UpdateUSPersonAuthorizedUserBillingAddress",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateUSPersonAuthorizedUserPhone",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateUSPersonAuthorizedUserEmail",
          "type": "mutation",
          "required": false
        }
      ]
    },
    {
      "name": "issuance",
      "operations": [
        {
          "name": "IssueFinancialAccountForApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetFinancialAccount",
          "type": "query",
          "required": true
        },
        {
          "name": "SuspendFinancialAccount",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UnsuspendFinancialAccount",
          "type": "mutation",
          "required": false
        },
        {
          "name": "IssuePaymentCardForFinancialAccount",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GeneratePaymentCardClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GeneratePaymentCardClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetPaymentCardRestrictedDetails",
          "type": "query",
          "required": true
        },
        {
          "name": "ActivatePaymentCard",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SetPinForPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SuspendPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ReissuePaymentCard",
          "type": "mutation",
          "required": true
        },
        {
          "name": "ClosePaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "InitiateFinancialAccountCreditLimitUpdateFromProductFunding",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetFinancialAccountCreditLimitUpdate",
          "type": "query",
          "required": false
        }
      ]
    },
    {
      "name": "funding",
      "operations": [
        {
          "name": "GenerateDirectDepositDetailClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetDirectDepositDetailsByIDWithClientToken",
          "type": "query",
          "required": true
        },
        {
          "name": "GetProductFundingAccountByCardProductID",
          "type": "query",
          "required": true
        },
        {
          "name": "SimulateDeposit",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughPlaid",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughFinicity",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetExternalFinancialAccountsByAccountHolder",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateFundsDepositACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "InitiateFundsWithdrawalACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessingIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateReturnedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateExternallyInitiatedACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessingExternallyInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "InitiateTransferBetweenFinancialAccounts",
          "type": "mutation",
          "required": false
        }
      ]
    },
    {
      "name": "physical_card",
      "operations": [
        {
          "name": "simulatePhysicalPaymentCardOrderSendToPrinter",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderApproval",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderShipmentFailed",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderShipped",
          "type": "mutation",
          "required": false
        },
        {
          "name": "OrderPhysicalPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindPhysicalPaymentCardOrder",
          "type": "query",
          "required": false
        },
        {
          "name": "CancelPhysicalPaymentCardOrder",
          "type": "mutation",
          "required": false
        }
      ]
    },
    {
      "name": "reporting",
      "operations": [
        {
          "name": "AddWebhookNotificationTarget",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetAllWebhookNotificationTargets",
          "type": "query",
          "required": true
        },
        {
          "name": "DeactivateNotificationTarget",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ActivateNotificationTarget",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetWebhookNotificationTarget",
          "type": "query",
          "required": true
        },
        {
          "name": "GetNotificationTargetDeliveryAttempts",
          "type": "query",
          "required": true
        },
        {
          "name": "AddSubscriptionsToNotificationTarget",
          "type": "mutation",
          "required": true
        },
        {
          "name": "RemoveSubscriptionsFromNotificationTarget",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAllNotificationEvents",
          "type": "query",
          "required": true
        },
        {
          "name": "GetNotificationEvent",
          "type": "query",
          "required": true
        },
        {
          "name": "ReplayNotificationEvent",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetDeliveryAttemptsForNotificationEvent",
          "type": "query",
          "required": true
        },
        {
          "name": "GetNotificationEventsFilteredByName",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateOrganizationReport",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetReport",
          "type": "query",
          "required": true
        },
        {
          "name": "ReportUsage",
          "type": "query",
          "required": false
        },
        {
          "name": "Reports",
          "type": "query",
          "required": false
        },
        {
          "name": "SimulateRolloverCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateShiftCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetCurrentBillingStatementByFinancialAccountID",
          "type": "query",
          "required": true
        },
        {
          "name": "GetLatestClosedBillingStatementByFinancialAccountID",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccountActivities",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccountLedgerActivity",
          "type": "query",
          "required": false
        }
      ]
    },
    {
      "name": "redemption",
      "operations": [
        {
          "name": "CreateRewardRedemptionConfiguration",
          "type": "mutation",
          "required": true
        },
        {
          "name": "AttachRewardRedemptionConfigurationToProduct",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateRewardRedemptionConfigurationAttachment",
          "type": "mutation",
          "required": false
        },
        {
          "name": "RedeemRewardsForStatementCredit",
          "type": "mutation",
          "required": false
        }
      ]
    }
  ],
  "operations": [
    {
      "name": "GetAllAPIKeys",
      "type": "query",
      "required": true,
      "category": "initialization",
      "graphql": "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 10
      }
    },
    {
      "name": "CreateSecretAPIKey",
      "type": "mutation",
      "required": true,
      "category": "initialization",
      "graphql": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "secretKey": {
            "name": "My Secret API Key"
          }
        }
      }
    },
    {
      "name": "RevokeAPIKey",
      "type": "mutation",
      "required": false,
      "category": "initialization",
      "graphql": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "apiKeyId": "API_KEY_ID"
        }
      }
    },
    {
      "name": "GetAllOrganizations",
      "type": "query",
      "required": true,
      "category": "initialization",
      "graphql": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    {
      "name": "GetAllOrganizations",
      "type": "query",
      "required": true,
      "category": "initialization",
      "graphql": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    cardProducts(first: 20) {\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n                features {\n                  ... on DirectDepositFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PrePaidPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on DebitPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on CreditPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PayrollAdvanceFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PayrollEmployerAdvanceFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on NegativeBalanceReserveFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on ProductReserveFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on JustInTimeFundingFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on ProductFundingFinancialAccountFeature {\n                    enabled\n                  }\n                  ... on SecuredCreditPaymentCardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on FleetCardAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on CommercialCreditPayInFullCardAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on VendorProvidedBankFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on AchCapableFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on NonVerifiedFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on PointRewardFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                  ... on CardFundingFinancialAccountFeature {\n                    __typename\n                    enabled\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    {
      "name": "UpdateOrganizationProfileDisplayName",
      "type": "mutation",
      "required": false,
      "category": "initialization",
      "graphql": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "id": "{{organizationId}}",
          "displayName": "Test"
        }
      }
    },
    {
      "name": "GetCardProductWithCreditPlanTemplates",
      "type": "query",
      "required": true,
      "category": "initialization",
      "graphql": "query GetCardProductWithCreditPlanTemplates($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlanTemplates {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              variableAprIndex\n              scraApr\n            }\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            maximumCreditLimit {\n              currencyCode\n              value\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "CreateCardProductCreditPlan",
      "type": "mutation",
      "required": true,
      "category": "initialization",
      "graphql": "mutation CreateCardProductCreditPlan($input: CreateCardProductCreditPlanInput!) {\n  createCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      name\n      planType\n      status\n      createdAt\n      updatedAt\n      interestPolicy {\n        rateType\n        accrualType\n        accrualMethod\n        assessmentSchedule\n        defaultApr\n        scraApr\n      }\n      percentageOfCreditLimit\n      balanceType\n      effectiveFromDate\n      effectiveThroughDate\n      riskBasedPricingPolicy {\n        isRiskBased\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "productId": "{{cardProductId}}",
          "creditPlanTemplateId": "CREDIT_PLAN_TEMPLATE_ID",
          "name": "Default Credit Plan",
          "defaultApr": 10,
          "percentageOfCreditLimit": 100
        }
      }
    },
    {
      "name": "ActivateCardProductCreditPlan",
      "type": "mutation",
      "required": true,
      "category": "initialization",
      "graphql": "mutation ActivateCardProductCreditPlan($input: ActivateCardProductCreditPlanInput!) {\n  activateCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      effectiveFromDate\n      effectiveThroughDate\n      updatedAt\n      createdAt\n      name\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{creditPlanId}}",
          "effectiveFromDate": "2024-01-31",
          "effectiveThroughDate": "2025-01-31"
        }
      }
    },
    {
      "name": "GetCardProductCreditPlans",
      "type": "query",
      "required": true,
      "category": "initialization",
      "graphql": "query GetCardProductCreditPlans($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlans {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            percentageOfCreditLimit\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "CreateCardProduct",
      "type": "mutation",
      "required": true,
      "category": "initialization",
      "graphql": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Commercial Credit Test {{currentTimestampFormatted}}",
            "usage": "MULTI_USE",
            "vertical": "COMMERCIAL_CREDIT"
          }
        }
      }
    },
    {
      "name": "EnableCreditCardFeature",
      "type": "mutation",
      "required": true,
      "category": "initialization",
      "graphql": "mutation EnableCreditCardFeature(\n\t$input: EnableCreditCardFeatureInput!\n) {\n\tenableCreditCardFeature(input: $input) {\n\t\t__typename\t\t\t\n\t\t... on CardProduct {\n\t\t\tid\n\t\t\tfeatures {\n\t\t\t\t__typename\n\t\t\t\tenabled\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "feature": "CHARGE"
        }
      }
    },
    {
      "name": "EnableCollaborativeApplicationUnderwritingFeature",
      "type": "mutation",
      "required": true,
      "category": "initialization",
      "graphql": "mutation EnableCollaborativeApplicationUnderwritingFeature($input: EnableCollaborativeApplicationUnderwritingFeatureInput!) {\n  enableCollaborativeApplicationUnderwritingFeature(input: $input) {\n    ... on CardProduct {\n      id\n      name\n      features {\n        ... on CollaborativeApplicationUnderwritingCardProductFeature {\n          enabled\n          createdAt\n          updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}"
        }
      }
    },
    {
      "name": "GetCardProductWithCreditConfigs",
      "type": "query",
      "required": true,
      "category": "initialization",
      "graphql": "query GetCardProductWithCreditConfigs($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditConfiguration {\n        accountAging {\n          delinquentInDays\n          suspendedInDays\n          chargeOffInDays\n          lateFeeGracePeriodInDays\n        }\n        billingCycleConfiguration {\n          billingCycleGracePeriodInDays\n          billingCycleGracePeriodType\n          billingCyclePeriod\n        }\n        interest {\n          includesFees\n          includesPurchase\n        }\n        minimumPayment {\n          includesInterestAmount\n          includesFeesCharged\n          includesPastDueAmount\n          percentage\n          thresholdAmount {\n            currencyCode\n            value\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "GetProductFundingAccount",
      "type": "query",
      "required": true,
      "category": "initialization",
      "graphql": "query GetProductFundingAccount($id: ID!) {\n  node (id: $id) {\n    ... on CardProduct {\n      accounts {\n        edges {\n          node {\n            id\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "Ping",
      "type": "query",
      "required": false,
      "category": "initialization",
      "graphql": "query Ping {\n  ping\n  organizations {\n    id\n    profile {\n      displayName\n    }\n  }\n}"
    },
    {
      "name": "IntrospectionQuery",
      "type": "mutation",
      "required": false,
      "category": "initialization",
      "graphql": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
    },
    {
      "name": "SimulateDeposit",
      "type": "mutation",
      "required": false,
      "category": "initialization",
      "graphql": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on Transfer {\n      id\n      status\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 99999999999,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "{{productFundingFinancialAccountId}}",
          "memo": "Initial Funding",
          "source": "WIRE"
        }
      }
    },
    {
      "name": "CreateUSBusiniessAccountHolderInReview",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateUSBusiniessAccountHolderInReview($input: CreateUSBusinessAccountHolderInput!) {\n  createUSBusinessAccountHolder(input: $input) {\n    __typename\n      ... on USBusinessAccountHolder {\n      id\n      externalId\n\t    primaryAuthorizedPerson {\n\t    \tid\n\t    }\n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "primaryAuthorizedPerson": {
            "name": {
              "givenName": "IN-REVIEW",
              "familyName": "IN-REVIEW"
            },
            "email": "irev@email.com",
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "homeAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1970-12-12",
            "percentageOwnership": 25,
            "authorizingPersonTitle": "PRESIDENT"
          },
          "businessProfile": {
            "name": {
              "legalBusinessName": "IN-REVIEW",
              "doingBusinessAsName": "IN-REVIEW"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "billingAddress": {
              "streetAddress": "123 Decline St.",
              "postalCode": "95111",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "employerIdentificationNumber": {
                "number": "11-1111111",
                "countryCodeAlpha3": "USA"
              }
            },
            "website": "https://www.foowebsite.com",
            "businessType": "PARTNERSHIP",
            "ultimateBeneficialOwners": [
              {
                "email": "foobo@example.com",
                "name": {
                  "givenName": "IN-REVIEW",
                  "familyName": "IN-REVIEW"
                },
                "homeAddress": {
                  "streetAddress": "123 Manual Review St.",
                  "postalCode": "60654",
                  "locality": "Chicago",
                  "region": "IL",
                  "countryCodeAlpha3": "USA"
                },
                "phoneNumber": {
                  "countryCode": "1",
                  "number": "5555555555",
                  "label": "MOBILE",
                  "extension": "312"
                },
                "identificationDocument": {
                  "socialSecurityNumber": {
                    "number": "111-11-1111",
                    "countryCodeAlpha3": "USA"
                  }
                },
                "dateOfBirth": "1980-09-01",
                "percentageOwnership": 75
              }
            ]
          },
          "externalId": "user-id-in-your-system"
        }
      }
    },
    {
      "name": "CreateUSBusinessAccountHolderCardProductApplication",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateUSBusinessAccountHolderCardProductApplication(\n  $input: CreateAccountHolderCardProductApplicationInput!\n) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "cardProductId": "CARD_PRODUCT_ID",
          "cardHolderAgreementConsent": {
            "primaryAuthorizedPersonId": "PRIMARY_AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2023-12-12T17:10:55.662Z"
          }
        }
      }
    },
    {
      "name": "StartDocumentUploadSession",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      secondaryDocumentTypes\n      supportingDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID"
        }
      }
    },
    {
      "name": "GenerateDocumentUploadClientToken",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    {
      "name": "CreateDocumentUploadSecureLink",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": "{\n  \"input\": {\n    \"documentUploadSessionId\": \"DOCUMENT_UPLOAD_SESSION_ID\",\n    \"documentType\": \"BANK_STATEMENT\" // Provide correct enum\n  }\n}\n"
    },
    {
      "name": "GetDocumentUploadSession",
      "type": "query",
      "required": true,
      "category": "onboarding",
      "graphql": "query GetDocumentUploadSession($id: ID!) {\n  node(id: $id) {\n    ... on DocumentUploadSession {\n      id\n      createdAt\n      updatedAt\n      status\n      documents {\n        ... on DocumentUploadLink {\n          id\n          status\n          uploadUrl\n          documentType\n          documentCategoryType\n        }\n      }\n    }\n    ... on AccountHolderCardProductApplication {\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          currentVerification {\n            requiredDocuments {\n              documentUploadSession {\n                ... on USAccountHolderApplicationDocumentUploadSession {\n                  id\n                  status\n                  primaryDocumentTypes\n                  secondaryDocumentTypes\n                  supportingDocumentTypes\n                  uploadRequirements {\n                    constraints {\n                      ... on DocumentUploadRequirementConstraint {\n                        documentType\n                        numberOfDocuments\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        ... on USBusinessAccountHolderSnapshot {\n          currentVerification {\n            requiredDocuments {\n              documentUploadSession {\n                ... on USAccountHolderApplicationDocumentUploadSession {\n                  id\n                  status\n                  primaryDocumentTypes\n                  secondaryDocumentTypes\n                  supportingDocumentTypes\n                  uploadRequirements {\n                    constraints {\n                      ... on DocumentUploadRequirementConstraint {\n                        documentType\n                        numberOfDocuments\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DOCUMENT_UPLOAD_SESSION_ID"
      }
    },
    {
      "name": "GetDocumentUploadSessionsViaApplicationID",
      "type": "query",
      "required": true,
      "category": "onboarding",
      "graphql": "query GetDocumentUploadSessionsViaApplicationID(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n        ...USBusinessAccountHolderSnapshot\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  currentVerification {\n    status\n    reason\n    results {\n      code\n      description\n    }\n    requiredDocuments {\n      createdAt\n      referenceIdentifier\n      updatedAt\n      status\n      documentUploadSession {\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          status\n          id\n        }\n      }\n      uploadedDocuments {\n        ... on AccountHolderApplicationDocument {\n          status\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}\n\nfragment USBusinessAccountHolderSnapshot on USBusinessAccountHolderSnapshot {\n  __typename\n  primaryAuthorizedPerson {\n    currentVerification {\n      status\n      reason\n      requiredDocuments {\n        createdAt\n        referenceIdentifier\n        updatedAt\n        status\n        documentUploadSession {\n          ... on USAccountHolderApplicationDocumentUploadSession {\n            status\n            id\n          }\n        }\n        uploadedDocuments {\n          ... on AccountHolderApplicationDocument {\n            status\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n  businessProfile {\n    currentVerification {\n      status\n      reason\n      requiredDocuments {\n        createdAt\n        referenceIdentifier\n        updatedAt\n        status\n        documentUploadSession {\n          ... on USAccountHolderApplicationDocumentUploadSession {\n            status\n            id\n          }\n        }\n        uploadedDocuments {\n          ... on AccountHolderApplicationDocument {\n            status\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    ultimateBeneficialOwners {\n      currentVerification {\n        status\n        reason\n        requiredDocuments {\n          createdAt\n          referenceIdentifier\n          updatedAt\n          status\n          documentUploadSession {\n            ... on USAccountHolderApplicationDocumentUploadSession {\n              status\n              id\n            }\n          }\n          uploadedDocuments {\n            ... on AccountHolderApplicationDocument {\n              status\n              type\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "APPLICATION_ID"
      }
    },
    {
      "name": "SimulateApplicationDocumentReview",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "ap_CARD_PRODUCT_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "du_DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    {
      "name": "SimulateApplicationVerificationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "ACCOUNT_HOLDER_ID",
          "applicationId": "APPLICATION_ID",
          "newVerificationStatus": "STATUS_ENUM_VALUE"
        }
      }
    },
    {
      "name": "SimulateApplicationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM_VALUE"
        }
      }
    },
    {
      "name": "CreateUSBusinessAccountHolderFromToken",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateUSBusinessAccountHolderFromToken(\n\t$input:  CreateUSBusinessAccountHolderFromTokenInput!\n) {\n\tcreateUSBusinessAccountHolderFromToken(input: $input) {\n\t  __typename\n\t\t      ... on USBusinessAccountHolder {\n        externalId\n        id\n        createdAt\n        updatedAt\n        primaryAuthorizedPerson {\n          id\n          email\n          dateOfBirth\n          percentageOwnership\n          authorizingPersonTitle\n          createdAt\n          updatedAt\n          name {\n            givenName\n            familyName\n            title\n            suffix\n            middleName\n          }\n          homeAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          identificationDocument {\n            socialSecurityNumber {\n              numberHash\n              countryCodeAlpha3\n            }\n          }\n        }\n        businessProfile {\n          id\n          website\n          businessType\n          createdAt\n          updatedAt\n          name {\n            legalBusinessName\n            doingBusinessAsName\n          }\n          billingAddress {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n          phoneNumbers {\n            countryCode\n            number\n            label\n          }\n          identificationDocument {\n            employerIdentificationNumber {\n              numberHash\n              countryCodeAlpha3\n            }\n          }\n          ultimateBeneficialOwners {\n            id\n            percentageOwnership\n            dateOfBirth\n            email\n            createdAt\n            updatedAt\n            name {\n              givenName\n              familyName\n              title\n              suffix\n              middleName\n            }\n            homeAddress {\n              streetAddress\n              extendedAddress\n              postalCode\n              region\n              locality\n              countryCodeAlpha3\n            }\n            phoneNumbers {\n              countryCode\n              number\n              label\n            }\n            identificationDocument {\n              socialSecurityNumber {\n                numberHash\n                countryCodeAlpha3\n              }\n            }\n          }\n        }\n      }\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t\t... on AccessDeniedError {\n\t\t\tmessage\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "token": "CLIENT_TOKEN"
        }
      }
    },
    {
      "name": "GenerateTokenizeAccountHolderClientToken",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation GenerateTokenizeAccountHolderClientToken {\n  generateTokenizeAccountHolderClientToken {\n    ... on ClientToken {\n      expirationDate\n      usage\n      value\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {}
    },
    {
      "name": "TokenizeUSBusinessAccountHolder",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation TokenizeUSBusinessAccountHolder($input: CreateUSBusinessAccountHolderInput) {\n\ttokenizeUSBusinessAccountHolder(input: $input) {\n\t\t... on USBusinessAccountHolderToken {\n\t\t\ttoken\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t\t... on AccessDeniedError {\n\t\t\tmessage\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "externalId": "bluejay",
          "primaryAuthorizedPerson": {
            "name": {
              "givenName": "Ian",
              "familyName": "Somnia"
            },
            "email": "foo@example.com",
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "homeAddress": {
              "streetAddress": "123 Main Street",
              "postalCode": "95121",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-67-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-09-01",
            "authorizingPersonTitle": "PRESIDENT"
          },
          "businessProfile": {
            "name": {
              "legalBusinessName": "MyTest",
              "doingBusinessAsName": "BlueJay Inc"
            },
            "billingAddress": {
              "streetAddress": "123 Main Street",
              "postalCode": "95121",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "employerIdentificationNumber": {
                "number": "11-2343256",
                "countryCodeAlpha3": "USA"
              }
            },
            "website": "http://www.foowebsite.com",
            "businessType": "SOLE_PROPRIETORSHIP",
            "ultimateBeneficialOwners": [
              {
                "name": {
                  "givenName": "James",
                  "familyName": "Smith"
                },
                "email": "james@example.com",
                "phoneNumber": {
                  "countryCode": "1",
                  "number": "5555555555",
                  "label": "MOBILE",
                  "extension": "312"
                },
                "homeAddress": {
                  "streetAddress": "123 Main Street",
                  "postalCode": "95121",
                  "locality": "San Jose",
                  "region": "CA",
                  "countryCodeAlpha3": "USA"
                },
                "identificationDocument": {
                  "socialSecurityNumber": {
                    "number": "111-67-1325",
                    "countryCodeAlpha3": "USA"
                  }
                },
                "dateOfBirth": "1982-09-01",
                "percentageOwnership": 25
              }
            ]
          }
        }
      }
    },
    {
      "name": "CreateUSBusiniessAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateUSBusiniessAccountHolder($input: CreateUSBusinessAccountHolderInput!) {\n  createUSBusinessAccountHolder(input: $input) {\n    __typename\n    ... on USBusinessAccountHolder {\n      id\n      externalId\n\t\t\tprimaryAuthorizedPerson {\n\t\t\t\tid\n\t\t\t}\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "primaryAuthorizedPerson": {
            "name": {
              "givenName": "Ian",
              "familyName": "Somnia"
            },
            "email": "foo@example.com",
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "homeAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-09-01",
            "percentageOwnership": 25,
            "authorizingPersonTitle": "PRESIDENT"
          },
          "businessProfile": {
            "creditRiskAttributes": {
              "annualRevenue": [
                {
                  "value": 999999999,
                  "currencyCode": "USD"
                }
              ]
            },
            "name": {
              "legalBusinessName": "Test",
              "doingBusinessAsName": "Test DBA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "billingAddress": {
              "streetAddress": "123 Decline St.",
              "postalCode": "66666",
              "locality": "San Jose",
              "region": "CA",
              "countryCodeAlpha3": "USA"
            },
            "identificationDocument": {
              "employerIdentificationNumber": {
                "number": "11-1111111",
                "countryCodeAlpha3": "USA"
              }
            },
            "website": "https://www.foowebsite.com",
            "businessType": "PARTNERSHIP",
            "ultimateBeneficialOwners": [
              {
                "email": "foobo@example.com",
                "name": {
                  "givenName": "Scott",
                  "familyName": "Someone"
                },
                "homeAddress": {
                  "streetAddress": "123 Main Street",
                  "postalCode": "60654",
                  "locality": "Chicago",
                  "region": "IL",
                  "countryCodeAlpha3": "USA"
                },
                "phoneNumber": {
                  "countryCode": "1",
                  "number": "5555555555",
                  "label": "MOBILE",
                  "extension": "312"
                },
                "identificationDocument": {
                  "socialSecurityNumber": {
                    "number": "111-11-1111",
                    "countryCodeAlpha3": "USA"
                  }
                },
                "dateOfBirth": "1980-09-01",
                "percentageOwnership": 75
              }
            ]
          },
          "externalId": "user-id-in-your-system"
        }
      }
    },
    {
      "name": "GetUSBusinessAccountHolder",
      "type": "query",
      "required": true,
      "category": "onboarding",
      "graphql": "  query GetUSBusinessAccountHolder($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on USBusinessAccountHolder {\n      __typename\n      id\n      businessProfile {\n        businessType\n        name {\n          doingBusinessAsName\n          legalBusinessName\n        }\n        billingAddress {\n          streetAddress\n          postalCode\n        }\n      }\n      primaryAuthorizedPerson {\n        id\n        name {\n          givenName\n          middleName\n          familyName\n        }\n        authorizingPersonTitle\n        homeAddress {\n          streetAddress\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "ACCOUNT_HOLDER_ID"
      }
    },
    {
      "name": "UpdateUSBusinessAccountHolderBillingAddress",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation UpdateUSBusinessAccountHolderBillingAddress($input: UpdateUSBusinessAccountHolderBillingAddressInput!) {\n  updateUSBusinessAccountHolderBillingAddress(input: $input) {\n    ... on USBusinessAccountHolder {\n      id\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n      businessProfile {\n        billingAddress {\n          streetAddress\n        }\n      }\n      primaryAuthorizedPerson {\n        id\n        homeAddress {\n          streetAddress\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "billingAddress": {
            "streetAddress": "123 Manual Review St.",
            "postalCode": "77777",
            "locality": "Seatlle",
            "region": "WA",
            "countryCodeAlpha3": "USA"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    {
      "name": "CreateAccountHolderCardProductApplication",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n        errors {\n            errorPath\n            code\n            description\n        }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "{{$isoTimestamp}}",
            "primaryAuthorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}"
          },
          "cardProductId": "{{cardProductId}}",
          "ipAddress": {
            "v4": "{{$randomIP}}"
          }
        }
      }
    },
    {
      "name": "GetUSBusinessAccountHolderCardProductApplications",
      "type": "query",
      "required": true,
      "category": "onboarding",
      "graphql": "query GetUSBusinessAccountHolderCardProductApplications (\n  $id: ID!\n) {\n  node(id: $id){\n    ...on USBusinessAccountHolder {\n      id\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState {\n              status\n            }\n            cardProduct {\n              id\n              name\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "US_BUSINESS_ACCOUNT_HOLDER_ID"
      }
    },
    {
      "name": "CreateUSPersonAuthorizedUser",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateUSPersonAuthorizedUser(\n  $input: CreateUSPersonAuthorizedUserInput!\n) {\n  createUSPersonAuthorizedUser(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      name {\n        givenName\n        familyName\n      }\n      email\n      phoneNumbers {\n        label\n        countryCode\n        number\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        locality\n        region\n        postalCode\n        countryCodeAlpha3\n      }\n      dateOfBirth\n      externalId\n      associatedAccountHolders {\n        ... on AccountHolderConnection {\n          edges {\n            node {\n              ... on USBusinessAccountHolder {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "{{businessAccountHolderId}}",
          "personAuthorizedUser": {
            "email": "foo@example.com",
            "name": {
              "givenName": "Bob",
              "familyName": "Barker"
            },
            "billingAddress": {
              "streetAddress": "123 Main Street",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "dateOfBirth": "1940-12-12",
            "externalId": "some-id"
          }
        }
      }
    },
    {
      "name": "CreateAuthorizedUserCardProductApplication",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation CreateAuthorizedUserCardProductApplication($input: CreateAuthorizedUserCardProductApplicationInput!) {\n  createAuthorizedUserCardProductApplication(input: $input) {\n    ... on AuthorizedUserCardProductApplication {\n      id\n      authorizedUserSnapshot {\n        ... on USPersonAuthorizedUserSnapshot {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          authorizedUserCurrent {\n            id\n          }\n        }\n      }\n      accountHolderCardProductApplication {\n        id\n        cardProduct {\n          id\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "authorizedUserId": "{{authorizedUserId}}",
          "accountHolderCardProductApplicationId": "{{businessAccountHolderApplicationId}}",
          "financialAccountId": "{{financialAccountId}}",
          "cardHolderAgreementConsent": {
            "primaryAuthorizedPersonId": "{{authorizedUserId}}",
            "consentTimestamp": "2024-01-31T01:01:01.000Z"
          }
        }
      }
    },
    {
      "name": "IssuePaymentCardForAuthorizedUserApplication",
      "type": "mutation",
      "required": true,
      "category": "onboarding",
      "graphql": "mutation IssuePaymentCardForAuthorizedUserApplication($input: IssuePaymentCardForAuthorizedUserApplicationInput!) {\n  issuePaymentCardForAuthorizedUserApplication(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      network\n      expirationYear\n      expirationMonth\n      expirationDate\n      status\n      formFactor\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "{{authorizedUserApplicationId}}",
          "options": {
            "expirationDate": "2027-01-01T23:59:59Z",
            "activateOnCreate": true
          }
        }
      }
    },
    {
      "name": "GetAuthorizedPersonCardProductApplication",
      "type": "query",
      "required": true,
      "category": "onboarding",
      "graphql": "query GetAuthorizedPersonCardProductApplication($id: ID!) {\n  node(id: $id) {\n    ... on AuthorizedUserCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      accountHolderCardProductApplication {\n        id\n      }\n      financialAccount {\n        id\n      }\n      authorizedUserSnapshot {\n        ... on USPersonAuthorizedUserSnapshot {\n          authorizedUserCurrent {\n            id\n            name {\n              givenName\n              familyName\n            }\n            billingAddress {\n              streetAddress\n              locality\n              region\n              countryCodeAlpha3\n              postalCode\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{authorizedUserApplicationId}}"
      }
    },
    {
      "name": "GetAccountHolderAuthorizedUsers",
      "type": "query",
      "required": true,
      "category": "onboarding",
      "graphql": "query GetAccountHolderAuthorizedUsers($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    ... on USBusinessAccountHolder {\n      businessProfile {\n        authorizedUsers(first: $first, after: $after) {\n          pageInfo {\n            startCursor\n            endCursor\n            hasNextPage\n          }\n          edges {\n            node {\n              id\n              createdAt\n              name {\n                givenName\n                familyName\n              }\n              email\n              externalId\n              cardProductApplications {\n                edges {\n                  node {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "ACCOUNT_HOLDER_ID"
      }
    },
    {
      "name": "UpdateUSPersonAuthorizedUserBillingAddress",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation UpdateUSPersonAuthorizedUserBillingAddress($input: UpdateUSPersonAuthorizedUserBillingAddressInput!) {\n  updateUSPersonAuthorizedUserBillingAddress(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "authorizedUserId": "{{authorizedUserId}}",
          "billingAddress": {
            "countryCodeAlpha3": "USA",
            "streetAddress": "123 Test St",
            "locality": "Test",
            "region": "CA",
            "postalCode": "12345"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    {
      "name": "UpdateUSPersonAuthorizedUserPhone",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation UpdateUSPersonAuthorizedUserPhone($input: UpdateUSPersonAuthorizedUserPhoneInput!) {\n  updateUSPersonAuthorizedUserPhone(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "authorizedUserId": "{{authorizedUserId}}",
          "phoneNumber": {
            "label": "MOBILE",
            "countryCode": "1",
            "number": "1231231234"
          }
        }
      }
    },
    {
      "name": "UpdateUSPersonAuthorizedUserEmail",
      "type": "mutation",
      "required": false,
      "category": "onboarding",
      "graphql": "mutation UpdateUSPersonAuthorizedUserEmail($input: UpdateUSPersonAuthorizedUserEmailInput!) {\n  updateUSPersonAuthorizedUserEmail(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      email\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "authorizedUserId": "{{authorizedUserId}}",
          "email": "test@test.com"
        }
      }
    },
    {
      "name": "IssueFinancialAccountForApplication",
      "type": "mutation",
      "required": true,
      "category": "issuance",
      "graphql": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{businessAccountHolderApplicationId}}",
          "name": "Test Financial Account"
        }
      }
    },
    {
      "name": "GetFinancialAccount",
      "type": "query",
      "required": true,
      "category": "issuance",
      "graphql": "query GetFinancialAccount($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n              name\n              address {\n                streetAddress\n                postalCode\n              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "SuspendFinancialAccount",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation SuspendFinancialAccount($input: SuspendFinancialAccountInput!) {\n  suspendFinancialAccount(input: $input) {\n    ... on FinancialAccount {\n      accountStatus\n      financialAccountAttributesWithReason {\n        attribute\n        reason\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{financialAccountId}}",
          "memo": "testing suspension",
          "suspensionReason": "DELINQUENCY"
        }
      }
    },
    {
      "name": "UnsuspendFinancialAccount",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation UnsuspendFinancialAccount($input: UnsuspendFinancialAccountInput!) {\n  unsuspendFinancialAccount(input: $input) {\n    ... on FinancialAccount {\n      accountStatus\n      financialAccountAttributesWithReason {\n        attribute\n        reason\n      }\n      globalNotes {\n        ... on GlobalNoteConnection {\n          edges {\n            node {\n              id\n              createdAt\n              message\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{financialAccountId}}",
          "memo": "testing unsuspend"
        }
      }
    },
    {
      "name": "IssuePaymentCardForFinancialAccount",
      "type": "mutation",
      "required": true,
      "category": "issuance",
      "graphql": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": false,
            "expirationDate": "2026-01-01T23:59:59Z"
          }
        }
      }
    },
    {
      "name": "GeneratePaymentCardClientToken",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "SET_PAYMENT_CARD_PIN"
        }
      }
    },
    {
      "name": "GeneratePaymentCardClientToken",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    {
      "name": "GetPaymentCardRestrictedDetails",
      "type": "query",
      "required": true,
      "category": "issuance",
      "graphql": "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n            restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n                    cvv\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": ""
      }
    },
    {
      "name": "ActivatePaymentCard",
      "type": "mutation",
      "required": true,
      "category": "issuance",
      "graphql": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "SetPinForPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n    }\nreq_06f2e9d7416d41eeaa473efa19375e48    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "newPin": "1234"
        }
      }
    },
    {
      "name": "SuspendPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "ReissuePaymentCard",
      "type": "mutation",
      "required": true,
      "category": "issuance",
      "graphql": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "options": {
            "reissueFeatures": {
              "copyNumber": true,
              "copyPin": true
            },
            "expirationDate": "2024-12-29T23:12:30Z",
            "activateOnCreate": false
          },
          "originalPaymentCardId": "ORIGINAL_PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "ClosePaymentCard",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID"
        }
      }
    },
    {
      "name": "InitiateFinancialAccountCreditLimitUpdateFromProductFunding",
      "type": "mutation",
      "required": false,
      "category": "issuance",
      "graphql": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "memo": "Set Credit Limit $1000"
        }
      }
    },
    {
      "name": "GetFinancialAccountCreditLimitUpdate",
      "type": "query",
      "required": false,
      "category": "issuance",
      "graphql": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "GenerateDirectDepositDetailClientToken",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation GenerateDirectDepositDetailClientToken($input: GenerateDirectDepositDetailClientTokenInput!) {\n  generateDirectDepositDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "directDepositDetailId": "DIRECT_DEPOSIT_DETAIL_ID",
          "permissions": [
            "READ_RESTRICTED_DETAILS"
          ]
        }
      }
    },
    {
      "name": "GetDirectDepositDetailsByIDWithClientToken",
      "type": "query",
      "required": true,
      "category": "funding",
      "graphql": "query GetDirectDepositDetailsByIDWithClientToken($id: ID!) {\n  node(id: $id) {\n    ... on DirectDepositDetail {\n      id\n      restrictedDetails {\n        ... on DirectDepositDetailRestrictedDetails {\n          number\n          routingNumber\n          bank {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DIRECT_DEPOSIT_DETAIL_ID"
      }
    },
    {
      "name": "GetProductFundingAccountByCardProductID",
      "type": "query",
      "required": true,
      "category": "funding",
      "graphql": "query GetProductFundingAccountByCardProductID($id: ID!, $filterBy: AccountHolderFinancialAccountsFilterInput!) {\n  node(id: $id) {\n    ... on CardProduct {\n      accounts(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            name\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            directDepositDetails {\n              id\n              createdAt\n              updatedAt\n              restrictedDetails {\n                ... on DirectDepositDetailRestrictedDetails {\n                  number\n                  routingNumber\n                  bank {\n                    name\n                    address {\n                      streetAddress\n                      extendedAddress\n                      postalCode\n                      region\n                      locality\n                      countryCodeAlpha3\n                    }\n                  }\n                  type\n                }\n                ... on AccessDeniedError {\n                  message\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}",
        "filterBy": {
          "features": {
            "equals": "PRODUCT_FUNDING"
          }
        }
      }
    },
    {
      "name": "SimulateDeposit",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "toFinancialAccountId": "{{financialAccountId}}",
          "source": "WIRE",
          "memo": "Initial Card Funding",
          "amount": {
            "value": 50000000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughPlaid",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughFinicity",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughFinicity($input: AddExternalBankAccountVerifiedThroughFinicityInput!) {\n  addExternalBankAccountVerifiedThroughFinicity(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      owner {\n        ... on USPersonAccountHolder {\n          id\n          externalId\n        }\n        ... on USBusinessAccountHolder {\n          id\n          externalId\n        }\n      }\n      name\n      provider\n      accountStatus\n      createdAt\n      updatedAt\n      externalBankAccountDetails {\n        id\n        last4\n        type\n        routingNumber\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "name": "Finicity Checking",
          "bankAccountType": "CHECKING",
          "externalToken": {
            "receiptId": "processor-token-success",
            "customerId": "5543088633794259024",
            "products": [
              {
                "productType": "ACH_DETAILS",
                "accountId": "8977412844634022494",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "CURRENT_BALANCE",
                "accountId": "1045023535892401594",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "APPROXIMATE_BALANCE",
                "accountId": "7895597441790621692",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              },
              {
                "productType": "ACH_OWNER_DETAILS",
                "accountId": "5200183909259568542",
                "callLimit": 1000,
                "expirationDetail": {
                  "start": "2022-03-10T06:06:20Z",
                  "expiry": "2023-03-10T06:06:20Z"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "GetExternalFinancialAccountsByAccountHolder",
      "type": "query",
      "required": true,
      "category": "funding",
      "graphql": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{organizationId}}"
      }
    },
    {
      "name": "InitiateFundsDepositACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "descriptor": {
            "companyEntryDescription": "Company",
            "individualIdentificationNumber": "",
            "individualName": "Baja ABC"
          },
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2022-12-07T14:42:52.453Z",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          }
        }
      }
    },
    {
      "name": "InitiateFundsWithdrawalACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "descriptor": {
            "companyEntryDescription": "Test Entry",
            "individualName": "Test",
            "individualIdentificationNumber": "1234"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-07T14:42:52.453Z",
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          },
          "idempotencyKey": "abcde123",
          "cancellationPeriodMillis": 0,
          "sameDay": false
        }
      }
    },
    {
      "name": "SimulateProcessingIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateProcessedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateReturnedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "ID",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    {
      "name": "SimulateExternallyInitiatedACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 200000,
            "currencyCode": "USD"
          },
          "companyEntryDescription": "TestDesc",
          "companyIdentifier": "TestID",
          "companyName": "TestName",
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "individualIdentificationNumber": "TestInDID",
          "individualName": "TestIndName",
          "settlementDate": "2022-07-28",
          "transferType": "CREDIT"
        }
      }
    },
    {
      "name": "SimulateProcessingExternallyInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "InitiateTransferBetweenFinancialAccounts",
      "type": "mutation",
      "required": false,
      "category": "funding",
      "graphql": "mutation InitiateTransferBetweenFinancialAccounts($input: InitiateTransferBetweenFinancialAccountsInput!) {\n  initiateTransferBetweenFinancialAccounts(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      amount {\n        currencyCode\n        value\n      }\n      createdAt\n      id\n      memo\n      purpose\n      status\n      statusReason\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "currencyCode": "USD",
            "value": 1100
          },
          "fromFinancialAccountId": "{{fromFinancialAccountId}}",
          "toFinancialAccountId": "{{toFinancialAccountId}}",
          "memo": "JLK to XYZ Corp",
          "purpose": "GENERAL"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderSendToPrinter",
      "type": "mutation",
      "required": false,
      "category": "physical_card",
      "graphql": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderApproval",
      "type": "mutation",
      "required": false,
      "category": "physical_card",
      "graphql": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderShipmentFailed",
      "type": "mutation",
      "required": false,
      "category": "physical_card",
      "graphql": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderShipped",
      "type": "mutation",
      "required": false,
      "category": "physical_card",
      "graphql": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}",
          "trackingNumber": "trackingNumber",
          "actualShipDate": "YYYY-MM-DD"
        }
      }
    },
    {
      "name": "OrderPhysicalPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "physical_card",
      "graphql": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "requestedShipDate": "2021-08-20",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "John Doe"
            }
          }
        }
      }
    },
    {
      "name": "FindPhysicalPaymentCardOrder",
      "type": "query",
      "required": false,
      "category": "physical_card",
      "graphql": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalPaymentCardOrderId}}"
      }
    },
    {
      "name": "CancelPhysicalPaymentCardOrder",
      "type": "mutation",
      "required": false,
      "category": "physical_card",
      "graphql": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "AddWebhookNotificationTarget",
      "type": "mutation",
      "required": true,
      "category": "reporting",
      "graphql": "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input: $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "My Target",
          "uri": "<URI>",
          "subscriptions": [
            "PAYMENT_CARD_ACTIVATED",
            "AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_IN_REVIEW",
            "CARD_PRODUCT_APPLICATION_MANUAL_REVIEW",
            "CARD_PRODUCT_APPLICATION_DENIED",
            "CARD_PRODUCT_APPLICATION_CLOSED",
            "PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED",
            "PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED"
          ]
        }
      }
    },
    {
      "name": "GetAllWebhookNotificationTargets",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\tid\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\tsubscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "name": "DeactivateNotificationTarget",
      "type": "mutation",
      "required": false,
      "category": "reporting",
      "graphql": "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input: $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    {
      "name": "ActivateNotificationTarget",
      "type": "mutation",
      "required": true,
      "category": "reporting",
      "graphql": "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input: ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    {
      "name": "GetWebhookNotificationTarget",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\thttpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    {
      "name": "GetNotificationTargetDeliveryAttempts",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n            createdAt\n            event {\n              name\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "WEBHOOK_NOTIFICATION_TARGET_ID"
      }
    },
    {
      "name": "AddSubscriptionsToNotificationTarget",
      "type": "mutation",
      "required": true,
      "category": "reporting",
      "graphql": "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    {
      "name": "RemoveSubscriptionsFromNotificationTarget",
      "type": "mutation",
      "required": false,
      "category": "reporting",
      "graphql": "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!) {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    {
      "name": "GetAllNotificationEvents",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetAllNotificationEvents($after: String, $first: Int) {\n\tnotificationEvents(after: $after, first: $first) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t\tnode {\n            __typename\n\t\t\t\t\t\t... on PaymentCardTransactionDispute {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\tchargebacks {\n                id, \n                status, \n                dispute {\n                  id\n                }, \n                creditStatus\n              }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on PaymentCardTransactionChargeback {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcreditStatus\n\t\t\t\t\t\t\tdispute {\n                id,\n                status,\n                amount { \n                  value\n\t\t\t\t\t\t\t  }\n              }\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "first": 150
      }
    },
    {
      "name": "GetNotificationEvent",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetNotificationEvent($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tcreatedAt\n\t\t\texpiresAt\n\t\t\tname\n\t\t\tnode {\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    {
      "name": "ReplayNotificationEvent",
      "type": "mutation",
      "required": false,
      "category": "reporting",
      "graphql": "mutation ReplayNotificationEvent($input: ReplayNotificationEventInput!) {\n  replayNotificationEvent(input: $input) {\n    __typename\n    ... on NotificationEvent {\n      __typename\n      id\n\t  createdAt\n\t  expiresAt\n      node {\n        ... on AuthorizationEvent {\n          id\n          approvedAmount {\n            value\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "input": {
          "notificationEventId": "<ID>"
        }
      }
    },
    {
      "name": "GetDeliveryAttemptsForNotificationEvent",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetDeliveryAttemptsForNotificationEvent($id: ID!, $after: String, $first: Int) {\n\tnode(id: $id) {\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tdeliveryAttempts(first: $first, after: $after) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\t__typename\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\t__typename\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t  httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\turi\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "id": "<ID>",
        "first": 10
      }
    },
    {
      "name": "GetNotificationEventsFilteredByName",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetNotificationEventsFilteredByName($filterBy: NotificationEventsFilterInput!, $first: Int) {\n\tnotificationEvents(filterBy: $filterBy, first: $first) {\n\t\t__typename\n\t\tpageInfo {\n\t\t\tstartCursor\n\t\t\tendCursor\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t}\n\t\tedges {\n\t\t\tcursor\n\t\t\t__typename\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "filterBy": {
          "name": [
            "INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED"
          ]
        },
        "first": 20
      }
    },
    {
      "name": "InitiateOrganizationReport",
      "type": "mutation",
      "required": false,
      "category": "reporting",
      "graphql": "mutation InitiateOrganizationReport($input: InitiateOrganizationReportInput!) {\n  initiateOrganizationReport(input: $input) {\n    __typename\n    ... on Report {\n      id\n      download {\n        url\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "reportType": "LEDGER_ENTRY",
          "parameters": {
            "between": {
              "start": "2023-01-01",
              "end": "2024-03-02"
            }
          }
        }
      }
    },
    {
      "name": "GetReport",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetReport($id: ID!) {\n  node(id: $id) {\n    ... on Report {\n      download {\n        url\n      }\n    }\n  }\n}",
      "variables": {
        "id": "REPORT_ID"
      }
    },
    {
      "name": "ReportUsage",
      "type": "query",
      "required": false,
      "category": "reporting",
      "graphql": "query ReportUsage {\n  reportUsage {\n    limit\n    limitRemaining\n    periodEnd\n    reportType\n  }\n}",
      "variables": {}
    },
    {
      "name": "Reports",
      "type": "query",
      "required": false,
      "category": "reporting",
      "graphql": "query Reports($first: Int, $after: String, $input: ReportFilterInput) {\n  reports(first: $first, after: $after, filterBy: $input) {\n    ... on ReportConnection {\n      edges {\n        ... on ReportEdge {\n          node {\n            __typename\n            id\n            status\n            reportType\n            download {\n              url\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "status": {
            "includes": [
              "COMPLETED"
            ]
          }
        }
      }
    },
    {
      "name": "SimulateRolloverCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "reporting",
      "graphql": "mutation SimulateRolloverCurrentFinancialAccountStatementPeriod($input: SimulateRolloverCurrentFinancialAccountStatementPeriodInput!) {\n  simulateRolloverCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}"
        }
      }
    },
    {
      "name": "SimulateShiftCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "reporting",
      "graphql": "mutation SimulateShiftCurrentFinancialAccountStatementPeriod($input: SimulateShiftCurrentFinancialAccountStatementPeriodInput!) {\n  simulateShiftCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}"
        }
      }
    },
    {
      "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "reporting",
      "graphql": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statements {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    {
      "name": "GetCurrentBillingStatementByFinancialAccountID",
      "type": "query",
      "required": true,
      "category": "reporting",
      "graphql": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "GetLatestClosedBillingStatementByFinancialAccountID",
      "type": "query",
      "required": false,
      "category": "reporting",
      "graphql": "query GetLatestClosedBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... latestClosedConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment latestClosedConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  latestClosedStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "FindFinancialAccountActivities",
      "type": "query",
      "required": false,
      "category": "reporting",
      "graphql": "query FindFinancialAccountActivities($id: ID!, $firstActivities: Int, $filterBy: FinancialAccountActivitiesFilterInput, $activitiesAfterCursor: String) {\n  node(id: $id) {\n    __typename\n    id\n    ... on FinancialAccount {\n      __typename\n      id\n      financialAccountActivities(\n        first: $firstActivities\n        filterBy: $filterBy\n        after: $activitiesAfterCursor\n      ) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          __typename\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            sign\n            isComplete\n            pendingAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            postedAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            createdAt\n            source {\n              __typename\n              ... on DebitTransaction {\n                __typename\n                id\n                transactionEvents {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on BalanceInquiryEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on VerificationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                }\n              }\n              ... on CreditTransaction {\n                __typename\n                id\n                transactionEvents {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on BalanceInquiryEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on VerificationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                }\n              }\n              ... on FeeTransferEvent {\n                id\n                feeTransfer {\n                  __typename\n                  ... on ChargedFeeTransfer {\n                    cardProduct {\n                      id\n                      name\n                      __typename\n                    }\n                    feeActivityType\n                    feeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    feeChargeActvity {\n                      __typename\n                      ... on PhysicalPaymentCardOrder {\n                        paymentCard {\n                          id\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on PaymentCard {\n                        id\n                        __typename\n                      }\n                      ... on FinancialAccount {\n                        id\n                        __typename\n                      }\n                      ... on SecureDepositACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on SecureCardBalanceRepaymentACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on IntegratorInitiatedFundsDepositACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on AuthorizationAndClearEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on ClearingEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on BalanceInquiryEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    feeChargeRule {\n                      name\n                      __typename\n                    }\n                    originatingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    receivingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureFeeTransferStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureFeeTransferStatus {\n                        status\n                        reasonDetails {\n                          reason\n                          type\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    transferDate\n                    transferedFeeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on ReversedFeeTransfer {\n                    originatingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    receivingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    sourceFeeTransferEvent {\n                      id\n                      feeTransfer {\n                        __typename\n                        ... on ChargedFeeTransfer {\n                          feeActivityType\n                          feeChargeActvity {\n                            __typename\n                            ... on PhysicalPaymentCardOrder {\n                              paymentCard {\n                                id\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on PaymentCard {\n                              id\n                              __typename\n                            }\n                            ... on FinancialAccount {\n                              id\n                              __typename\n                            }\n                            ... on SecureDepositACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on SecureCardBalanceRepaymentACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on IntegratorInitiatedFundsDepositACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on AuthorizationAndClearEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on ClearingEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on BalanceInquiryEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                          }\n                          __typename\n                        }\n                      }\n                      __typename\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureFeeTransferStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureFeeTransferStatus {\n                        status\n                        reasonDetails {\n                          reason\n                          type\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    transferDate\n                    transferedFeeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on InterFinancialAccountTransfer {\n                id\n                fromFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                transferActivityType\n                __typename\n              }\n              ... on CreditFunds {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on DebitFunds {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                fromFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on SecureDeposit {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on PayrollTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on SecureDepositACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on SecureCardBalanceRepaymentACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                fromFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on IntegratorInitiatedFundsDepositACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}",
        "firstActivities": 20,
        "filterBy": {
          "isComplete": {
            "equals": false
          }
        }
      }
    },
    {
      "name": "FindFinancialAccountLedgerActivity",
      "type": "query",
      "required": false,
      "category": "reporting",
      "graphql": "query FindFinancialAccountLedgerActivity($id: ID!, $first: Int, $filterBy: LedgerEntriesFilterInput, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      __typename\n      id\n      ledgers(ledgerNames: [OUTSTANDING_BALANCE_PAYABLE]) {\n        id\n        normalBalance\n        asOf\n        name\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        ledgerEntries(first: $first, filterBy: $filterBy, after: $after) {\n          ... on LedgerEntryConnection {\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n              hasPreviousPage\n              __typename\n            }\n            edges {\n              cursor\n              __typename\n              node {\n                ...LedgerEntryNodeSelection\n                __typename\n              }\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}\n\nfragment LedgerEntryNodeSelection on LedgerEntry {\n  __typename\n  id\n  memo\n  createdAt\n  creditBalanceAtLedgerEntry {\n    value\n    currencyCode\n    decimalPlaces\n    __typename\n  }\n  debitBalanceAtLedgerEntry {\n    value\n    currencyCode\n    decimalPlaces\n    __typename\n  }\n  amount {\n    value\n    currencyCode\n    decimalPlaces\n    __typename\n  }\n  financialEvent {\n    __typename\n    ... on Node {\n      id\n      __typename\n    }\n    ... on AuthorizationAndClearEvent {\n      paymentCard {\n        id\n        last4\n        __typename\n      }\n      merchantDetails {\n        name\n        __typename\n      }\n      pointOfServiceDetails {\n        isCardPresent\n        __typename\n      }\n      disputes {\n        id\n        __typename\n      }\n      transactionProcessingType\n      __typename\n    }\n    ... on AuthorizationEvent {\n      paymentCard {\n        id\n        last4\n        __typename\n      }\n      merchantDetails {\n        name\n        __typename\n      }\n      pointOfServiceDetails {\n        isCardPresent\n        __typename\n      }\n      transactionProcessingType\n      __typename\n    }\n    ... on ClearingEvent {\n      paymentCard {\n        id\n        last4\n        __typename\n      }\n      merchantDetails {\n        name\n        __typename\n      }\n      disputes {\n        id\n        __typename\n      }\n      pointOfServiceDetails {\n        isCardPresent\n        __typename\n      }\n      transactionProcessingType\n      __typename\n    }\n    ... on IssuerPreliminaryAuthorizationEvent {\n      paymentCard {\n        id\n        last4\n        __typename\n      }\n      merchantDetails {\n        name\n        __typename\n      }\n      pointOfServiceDetails {\n        isCardPresent\n        __typename\n      }\n      transactionProcessingType\n      __typename\n    }\n    ... on ReversalEvent {\n      paymentCard {\n        id\n        last4\n        __typename\n      }\n      merchantDetails {\n        name\n        __typename\n      }\n      pointOfServiceDetails {\n        isCardPresent\n        __typename\n      }\n      transactionProcessingType\n      __typename\n    }\n    ... on CreditFundsACHTransferEvent {\n      externallyInitiatedACHStatus: status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on DebitFundsACHTransferEvent {\n      externallyInitiatedACHStatus: status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      fromFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on SecureDepositTransferEvent {\n      externallyInitiatedACHStatus: status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on PayrollACHTransferEvent {\n      externallyInitiatedACHStatus: status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n      integratorInitiatedACHStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on IntegratorInitiatedFundsWithdrawalACHTransferEvent {\n      integratorInitiatedACHStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      fromFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on SecureDepositACHTransferEvent {\n      integratorInitiatedACHStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on SecureCardBalanceRepaymentACHTransferEvent {\n      integratorInitiatedACHStatus: status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          __typename\n        }\n        __typename\n      }\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      __typename\n    }\n    ... on InterFinancialAccountTransfer {\n      fromFinancialAccount {\n        id\n        name\n        __typename\n      }\n      purpose\n      toFinancialAccount {\n        id\n        name\n        __typename\n      }\n      transferActivityType\n      __typename\n    }\n    ... on FeeTransferEvent {\n      feeTransfer {\n        __typename\n        ... on ChargedFeeTransfer {\n          feeActivityType\n          __typename\n        }\n        ... on ReversedFeeTransfer {\n          sourceFeeTransferEvent {\n            feeTransfer {\n              __typename\n              ... on ChargedFeeTransfer {\n                feeActivityType\n                __typename\n              }\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n      __typename\n    }\n    ... on ManualAdjustmentEvent {\n      adjustmentActivityType\n      __typename\n    }\n    ... on CreditCardTransferEvent {\n      accountingDirection\n      balanceType\n      interestDetails {\n        apr\n        __typename\n      }\n      statement {\n        id\n        __typename\n      }\n      __typename\n    }\n    ... on DisbursementTransferEvent {\n      id\n      eventType\n      __typename\n    }\n    ... on WireTransfer {\n      id\n      type\n      __typename\n    }\n    ... on RewardPointsTransfer {\n      id\n      rewardPointsValue {\n        currencyCode\n        value\n        __typename\n      }\n      rewardPointsAmount {\n        currencyCode\n        value\n        __typename\n      }\n      createdAt\n      updatedAt\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n          __typename\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n          __typename\n        }\n        __typename\n      }\n      source\n      externalTransactionIdentifier\n      activity\n      memo\n      __typename\n    }\n    ... on CheckPaymentEvent {\n      id\n      checkPayment {\n        id\n        amount {\n          value\n          decimalPlaces\n          currencyCode\n          __typename\n        }\n        recipient {\n          __typename\n          name\n        }\n        checkType\n        financialAccount {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}",
        "first": 20,
        "filterBy": {}
      }
    },
    {
      "name": "CreateRewardRedemptionConfiguration",
      "type": "mutation",
      "required": true,
      "category": "redemption",
      "graphql": "mutation CreateRewardRedemptionConfiguration($input: CreateRewardRedemptionConfigurationInput!) {\n  createRewardRedemptionConfiguration(input: $input) {\n    ... on RewardRedemptionConfiguration {\n      id\n      name\n      createdAt\n      type\n      updatedAt\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        edges {\n          node {\n            ... on RewardRedemptionConfigurationProductAttachment {\n              id\n              cardProduct {\n                id\n                name\n              }\n              effectiveFrom\n              effectiveThrough\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "REDEMPTION_RULE_NAME",
          "rewardPointRedemption": {
            "rate": "1.0"
          }
        }
      }
    },
    {
      "name": "AttachRewardRedemptionConfigurationToProduct",
      "type": "mutation",
      "required": false,
      "category": "redemption",
      "graphql": "mutation AttachRewardRedemptionConfigurationToProduct($input: AttachRewardRedemptionConfigurationToProductInput!) {\n  attachRewardRedemptionConfigurationToProduct(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      cardProduct {\n        id\n        name\n      }\n      effectiveFrom\n      effectiveThrough\n      redemptionConfiguration {\n        id\n        name\n        type\n        rewardPointRedemption {\n          rate\n        }\n        updatedAt\n        createdAt\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": "{\n  \"input\": {\n    \"cardProductId\": \"CARD_PRODUCT_ID\",\n    // \"effectiveFrom\": null,\n    // \"effectiveThrough\": null,\n    \"redemptionConfiguration\": {\n      \"id\": \"REDEMPTION_RULE_ID\"\n    }\n  }\n}"
    },
    {
      "name": "UpdateRewardRedemptionConfigurationAttachment",
      "type": "mutation",
      "required": false,
      "category": "redemption",
      "graphql": "mutation UpdateRewardRedemptionConfigurationAttachment($input: UpdateRewardRedemptionConfigurationAttachmentInput!) {\n  updateRewardRedemptionConfigurationAttachment(input: $input) {\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      effectiveFrom\n      effectiveThrough\n      cardProduct {\n        id\n        name\n      }\n      redemptionConfiguration {\n        id\n        name\n        rewardPointRedemption {\n          rate\n        }\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "attachmentId": "REDEMPTION_RULE_CONFIGURATION_ID",
          "effectiveThrough": "UPDATED_DATE"
        }
      }
    },
    {
      "name": "RedeemRewardsForStatementCredit",
      "type": "mutation",
      "required": false,
      "category": "redemption",
      "graphql": "mutation RedeemRewardsForStatementCredit($input: RedeemRewardsForStatementCreditInput!) {\n  redeemRewardsForStatementCredit(input: $input) {\n    ... on RewardPointsTransfer {\n      id\n      memo\n      activity\n      externalTransactionIdentifier\n      redemptionConfiguration {\n        id\n        name\n      }\n      rewardEarnRule {\n        __typename\n        id\n        name\n      }\n      rewardPointsAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      rewardPointsValue {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      source\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "memo": "MEMO",
          "externalTransactionIdentifier": "EXTERNAL_ID",
          "redemption": {
            "pointsToRedeem": 100,
            "redemptionConfigurationId": "REDEMPTION_RULE_CONFIGURATION_ID"
          }
        }
      }
    }
  ]
}