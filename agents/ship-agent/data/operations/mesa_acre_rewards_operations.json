{
  "collection": "Mesa (Acre Rewards)",
  "program_type": "mesa_acre_rewards",
  "extraction_date": "2025-08-12T17:46:30.931Z",
  "total_operations": 226,
  "categories": [
    {
      "name": "consumer_credit",
      "operations": [
        {
          "name": "GetAllAPIKeys",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateSecretAPIKey",
          "type": "mutation",
          "required": true
        },
        {
          "name": "RevokeAPIKey",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAllOrganizations",
          "type": "query",
          "required": true
        },
        {
          "name": "GetOrganizationByID",
          "type": "query",
          "required": true
        },
        {
          "name": "UpdateOrganizationProfileDisplayName",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateCardProduct",
          "type": "mutation",
          "required": true
        },
        {
          "name": "EnableCreditCardFeature",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetCardProductWithCreditPlanTemplates",
          "type": "query",
          "required": true
        },
        {
          "name": "CreateCardProductCreditPlan",
          "type": "mutation",
          "required": true
        },
        {
          "name": "ActivateCardProductCreditPlan",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetCardProductWithCreditConfigs",
          "type": "query",
          "required": true
        },
        {
          "name": "GetCardProductWithCreditPlans",
          "type": "query",
          "required": true
        },
        {
          "name": "Ping",
          "type": "query",
          "required": false
        },
        {
          "name": "IntrospectionQuery",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SearchPersonAccountHolders",
          "type": "query",
          "required": false
        },
        {
          "name": "UpdateUSPersonAccountHolderBillingAddress",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateUSPersonAccountHolderPhone",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateUSPersonAccountHolderEmail",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ListAccountHolders",
          "type": "query",
          "required": false
        },
        {
          "name": "GetUSPersonAccountHolderByID",
          "type": "query",
          "required": true
        },
        {
          "name": "SimulateApplicationDocumentReview",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationVerificationStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateApplicationStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAccountHolderCardProductApplicationStatus",
          "type": "query",
          "required": true
        },
        {
          "name": "GetAccountHolderCardProductApplicationStatus",
          "type": "query",
          "required": true
        },
        {
          "name": "GetDocumentUploadBySessionID",
          "type": "query",
          "required": true
        },
        {
          "name": "GenerateDocumentUploadClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "StartDocumentUploadSession",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateDocumentUploadSecureLink",
          "type": "mutation",
          "required": true
        },
        {
          "name": "UploadDocumentCopy",
          "type": "mutation",
          "required": false
        },
        {
          "name": "EndDocumentUploadSession",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateAccountHolderCardProductApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "ApproveCreditProductApplicationUnderwriting",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateUSPersonAccountHolder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateAccountHolderCardProductApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetAccountHolderCardProductApplication",
          "type": "query",
          "required": true
        },
        {
          "name": "confirmCreditReportUnfrozen",
          "type": "mutation",
          "required": false
        },
        {
          "name": "confirmVerificationOfCreditProductApplicationForFraudAlert",
          "type": "mutation",
          "required": false
        },
        {
          "name": "IssueFinancialAccountForApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetFinancialAccountByID",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateFinancialAccountCreditLimitUpdateFromProductFunding",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetFinancialAccountCreditLimitUpdate",
          "type": "query",
          "required": false
        },
        {
          "name": "IssuePaymentCardForFinancialAccount",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GeneratePaymentCardClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GeneratePaymentCardClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetPaymentCardRestrictedDetails",
          "type": "query",
          "required": true
        },
        {
          "name": "ActivatePaymentCard",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SetPinForPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SuspendPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ReissuePaymentCard",
          "type": "mutation",
          "required": true
        },
        {
          "name": "ClosePaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateAuthorization",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateClearing",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateReversal",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateRefund",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateSingleStepAuthAndClear",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateSingleStepAuthAndClear",
          "type": "mutation",
          "required": false
        },
        {
          "name": "initiateCustomerCardTransactionDispute",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulateInitiateCardTransactionChargeback",
          "type": "mutation",
          "required": false
        },
        {
          "name": "initiateCustomerCardTransactionDispute",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetTransactionEvent",
          "type": "query",
          "required": true
        },
        {
          "name": "TransactionEventsByPaymentCardAndTransactionId",
          "type": "query",
          "required": false
        },
        {
          "name": "AttachSpendRuleToCardProduct",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateMerchantCategorySpendRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "UpdateMerchantCategorySpendRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AttachSpendRuleToPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachSpendRuleFromCardProduct",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachSpendRuleFromPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateVelocityRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateAmountLimitSpendRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "AttachPaymentCardVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachPaymentCardVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAllVelocityRules",
          "type": "query",
          "required": true
        },
        {
          "name": "GetPaymentCardVelocityRule",
          "type": "query",
          "required": true
        },
        {
          "name": "GetFinancialAccountWithVelocityBalance",
          "type": "query",
          "required": true
        },
        {
          "name": "AttachCardProductVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "DetachCardProductVelocityRule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AddCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ActivateCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": true
        },
        {
          "name": "FindCollaborativeAuthorizationEndpoint",
          "type": "query",
          "required": false
        },
        {
          "name": "DeactivateCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "RemoveCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CollaborativeAuthorizationEndpoints",
          "type": "query",
          "required": false
        },
        {
          "name": "RenameCollaborativeAuthorizationEndpoint",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateRewardMerchantCategoryEarnRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateRewardDefaultEarnRule",
          "type": "mutation",
          "required": true
        },
        {
          "name": "AttachRewardEarnRuleToProduct",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateRewardRuleAttachment",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindRewardEarnRuleById",
          "type": "query",
          "required": false
        },
        {
          "name": "FindCardProductWithRewardRules",
          "type": "query",
          "required": false
        },
        {
          "name": "FindOrganizationWithRewardRules",
          "type": "query",
          "required": false
        },
        {
          "name": "CreateRewardRedemptionConfiguration",
          "type": "mutation",
          "required": true
        },
        {
          "name": "AttachRewardRedemptionConfigurationToProduct",
          "type": "mutation",
          "required": false
        },
        {
          "name": "UpdateRewardRedemptionConfigurationAttachment",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindRewardRedemptionConfigurationById",
          "type": "query",
          "required": false
        },
        {
          "name": "FindCardProductWithRewardRules",
          "type": "query",
          "required": false
        },
        {
          "name": "FindOrganizationWithRedemptionConfigurations",
          "type": "query",
          "required": false
        },
        {
          "name": "RedeemRewards",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateRewardPointsAdjustment",
          "type": "mutation",
          "required": true
        },
        {
          "name": "FindRewardsPointsLedgerByFinancialAccountId",
          "type": "query",
          "required": false
        },
        {
          "name": "FindRedeemableRewardsPointsLedgerByFinancialAccountId",
          "type": "query",
          "required": false
        },
        {
          "name": "FindLedger",
          "type": "query",
          "required": false
        },
        {
          "name": "GenerateDirectDepositDetailClientToken",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetDirectDepositDetailsByIDWithClientToken",
          "type": "query",
          "required": true
        },
        {
          "name": "GetProductFundingAccountByCardProductID",
          "type": "query",
          "required": true
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughPlaid",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetExternalFinancialAccountsByAccountHolder",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateFundsDepositACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "InitiateFundsWithdrawalACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessingIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateReturnedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateExternallyInitiatedACHTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessingExternallyInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughPlaid",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughPlaid",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetExternalFinancialAccountsByAccountHolder",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateAchTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "InitiateAchTransfer",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateAchTransferProcessing",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateAchTransferReturn",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetOriginatedACHTransfer",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateTransferBetweenFinancialAccounts",
          "type": "mutation",
          "required": false
        },
        {
          "name": "TransferFromFundingToCardAccount",
          "type": "mutation",
          "required": false
        },
        {
          "name": "TransferFromPaymentCardToProductFunding",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CheckAccountTransferStatus",
          "type": "query",
          "required": false
        },
        {
          "name": "SimulateDeposit",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderSendToPrinter",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderApproval",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderShipmentFailed",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulatePhysicalPaymentCardOrderShipped",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulatePhysicalCardGroupOrderSendToPrinter",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulatePhysicalCardGroupOrderShipmentFailed",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulatePhysicalCardGroupOrderApproval",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulatePhysicalCardGroupOrderShipped",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreatePhysicalCardGroupOrder",
          "type": "mutation",
          "required": true
        },
        {
          "name": "OrderPhysicalPaymentCardForGroup",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CompletePhysicalCardGroupOrder",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CancelPhysicalCardGroupOrder",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetPhysicalCardGroupOrdersForProduct",
          "type": "query",
          "required": true
        },
        {
          "name": "GetPhysicalPaymentCardGroupOrder",
          "type": "query",
          "required": true
        },
        {
          "name": "ValidateAddress",
          "type": "mutation",
          "required": false
        },
        {
          "name": "OrderPhysicalCardWithValidatedAddress",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreatePhysicalCardGroupOrderWithValidatedAddress",
          "type": "mutation",
          "required": true
        },
        {
          "name": "OrderPhysicalPaymentCard",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindPhysicalPaymentCardOrder",
          "type": "query",
          "required": false
        },
        {
          "name": "CancelPhysicalPaymentCardOrder",
          "type": "mutation",
          "required": false
        },
        {
          "name": "AddWebhookNotificationTarget",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetAllWebhookNotificationTargets",
          "type": "query",
          "required": true
        },
        {
          "name": "DeactivateNotificationTarget",
          "type": "mutation",
          "required": false
        },
        {
          "name": "ActivateNotificationTarget",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetWebhookNotificationTarget",
          "type": "query",
          "required": true
        },
        {
          "name": "GetNotificationTargetDeliveryAttempts",
          "type": "query",
          "required": true
        },
        {
          "name": "AddSubscriptionsToNotificationTarget",
          "type": "mutation",
          "required": true
        },
        {
          "name": "RemoveSubscriptionsFromNotificationTarget",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetAllNotificationEvents",
          "type": "query",
          "required": true
        },
        {
          "name": "GetNotificationEvent",
          "type": "query",
          "required": true
        },
        {
          "name": "ReplayNotificationEvent",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetDeliveryAttemptsForNotificationEvent",
          "type": "query",
          "required": true
        },
        {
          "name": "GetNotificationEventsFilteredByName",
          "type": "query",
          "required": true
        },
        {
          "name": "InitiateOrganizationReport",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetReport",
          "type": "query",
          "required": true
        },
        {
          "name": "ReportUsage",
          "type": "query",
          "required": false
        },
        {
          "name": "Reports",
          "type": "query",
          "required": false
        },
        {
          "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetCurrentBillingStatementByFinancialAccountID",
          "type": "query",
          "required": true
        },
        {
          "name": "FindFinancialAccount",
          "type": "query",
          "required": false
        },
        {
          "name": "LookupStatement",
          "type": "query",
          "required": false
        },
        {
          "name": "ConsumerRevolvingCardFinancialAccountStatement",
          "type": "query",
          "required": false
        },
        {
          "name": "GetLatestClosedBillingStatementByFinancialAccountID",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccountActivities",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccountLedgerActivity",
          "type": "query",
          "required": false
        },
        {
          "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateRecurringACHTransfer",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateOneTimeACHTransfer",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SimulateSingleStepAuthAndClear",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulateCreateAndActivateFeeSchedule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindFeeSchedule",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccount",
          "type": "query",
          "required": false
        },
        {
          "name": "GetCardProductWithLedgers",
          "type": "query",
          "required": true
        },
        {
          "name": "ListFeeTransferEvents",
          "type": "query",
          "required": false
        }
      ]
    },
    {
      "name": "billing_statements_with_setup",
      "operations": [
        {
          "name": "SimulateSingleStepAuthAndClear",
          "type": "mutation",
          "required": false
        },
        {
          "name": "simulateCreateAndActivateFeeSchedule",
          "type": "mutation",
          "required": false
        },
        {
          "name": "FindFeeSchedule",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccount",
          "type": "query",
          "required": false
        },
        {
          "name": "GetCardProductWithLedgers",
          "type": "query",
          "required": true
        },
        {
          "name": "ListFeeTransferEvents",
          "type": "query",
          "required": false
        },
        {
          "name": "IssueFinancialAccountForApplication",
          "type": "mutation",
          "required": true
        },
        {
          "name": "GetFinancialAccountByID",
          "type": "query",
          "required": true
        },
        {
          "name": "IssuePaymentCardForFinancialAccount",
          "type": "mutation",
          "required": true
        },
        {
          "name": "ActivatePaymentCard",
          "type": "mutation",
          "required": true
        },
        {
          "name": "SimulateAuthorization",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateClearing",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateReversal",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateRefund",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateSingleStepAuthAndClear",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetTransactionEvent",
          "type": "query",
          "required": true
        },
        {
          "name": "TransactionEventsByPaymentCardAndTransactionId",
          "type": "query",
          "required": false
        },
        {
          "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetFinancialAccountStatementHeaderFull",
          "type": "query",
          "required": true
        },
        {
          "name": "GetBillingStatementEntries",
          "type": "query",
          "required": true
        },
        {
          "name": "GetBillingStatementEntries",
          "type": "query",
          "required": true
        },
        {
          "name": "GetCurrentBillingStatementByFinancialAccountID",
          "type": "query",
          "required": true
        },
        {
          "name": "FindFinancialAccount",
          "type": "query",
          "required": false
        },
        {
          "name": "LookupStatement",
          "type": "query",
          "required": false
        },
        {
          "name": "LookupStatement",
          "type": "query",
          "required": false
        },
        {
          "name": "GetLatestClosedBillingStatementByFinancialAccountID",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccountActivities",
          "type": "query",
          "required": false
        },
        {
          "name": "FindFinancialAccountLedgerActivity",
          "type": "query",
          "required": false
        },
        {
          "name": "AddExternalBankAccountVerifiedThroughPlaid",
          "type": "mutation",
          "required": false
        },
        {
          "name": "GetExternalFinancialAccountsByAccountHolder",
          "type": "query",
          "required": true
        },
        {
          "name": "SimulateProcessingIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateProcessedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "SimulateReturnedIntegratorInitiatedStatusChange",
          "type": "mutation",
          "required": false
        },
        {
          "name": "CreateRecurringACHTransfer",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateOneTimeACHTransfer",
          "type": "mutation",
          "required": true
        },
        {
          "name": "CreateOneTimeACHTransfer",
          "type": "mutation",
          "required": true
        }
      ]
    }
  ],
  "operations": [
    {
      "name": "GetAllAPIKeys",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n          createdAt\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 10
      }
    },
    {
      "name": "CreateSecretAPIKey",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n    __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "secretKey": {
            "name": "Test Key"
          }
        }
      }
    },
    {
      "name": "RevokeAPIKey",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n      id\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "apiKeyId": "API_KEY_ID"
        }
      }
    },
    {
      "name": "GetAllOrganizations",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n          __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n              value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    {
      "name": "GetOrganizationByID",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetOrganizationByID($id: ID!) {\n  node(id: $id) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n        environment\n        region\n      }\n      financialAccounts {\n        ledgers {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "ORGANIZATION_ID"
      }
    },
    {
      "name": "UpdateOrganizationProfileDisplayName",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input: $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "id": "ORGANIZATION_ID",
          "displayName": "Test"
        }
      }
    },
    {
      "name": "CreateCardProduct",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateCardProduct($input: CreateCardProductInput!) {\n  createCardProduct(input: $input) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      usage\n      vertical\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "cardProduct": {
            "name": "Consumer Credit Card",
            "usage": "MULTI_USE",
            "vertical": "CONSUMER_CREDIT"
          }
        }
      }
    },
    {
      "name": "EnableCreditCardFeature",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation EnableCreditCardFeature(\n\t$input: EnableCreditCardFeatureInput!\n) {\n\tenableCreditCardFeature(input: $input) {\n\t\t__typename\t\t\t\n\t\t... on CardProduct {\n\t\t\tid\n\t\t\tfeatures {\n\t\t\t\t__typename\n\t\t\t\tenabled\n\t\t\t}\n\t\t}\n\t\t... on UserError {\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tcode\n\t\t\t\tdescription\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "feature": "REVOLVING"
        }
      }
    },
    {
      "name": "GetCardProductWithCreditPlanTemplates",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetCardProductWithCreditPlanTemplates($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlanTemplates {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              variableAprIndex\n              scraApr\n            }\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            maximumCreditLimit {\n              currencyCode\n              value\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "CreateCardProductCreditPlan",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateCardProductCreditPlan($input: CreateCardProductCreditPlanInput!) {\n  createCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      name\n      planType\n      status\n      createdAt\n      updatedAt\n      interestPolicy {\n        rateType\n        accrualType\n        accrualMethod\n        assessmentSchedule\n        defaultApr\n        scraApr\n      }\n      percentageOfCreditLimit\n      balanceType\n      effectiveFromDate\n      effectiveThroughDate\n      riskBasedPricingPolicy {\n        isRiskBased\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "productId": "{{cardProductId}}",
          "creditPlanTemplateId": "{{creditPlanTemplateId}}",
          "name": "Default Credit Plan",
          "defaultApr": 10,
          "percentageOfCreditLimit": 100
        }
      }
    },
    {
      "name": "ActivateCardProductCreditPlan",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation ActivateCardProductCreditPlan($input: ActivateCardProductCreditPlanInput!) {\n  activateCardProductCreditPlan(input: $input) {\n    ... on CreditPlan {\n      id\n      effectiveFromDate\n      effectiveThroughDate\n      updatedAt\n      createdAt\n      name\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{creditPlanId}}",
          "effectiveFromDate": "2024-01-31",
          "effectiveThroughDate": "2025-01-31"
        }
      }
    },
    {
      "name": "GetCardProductWithCreditConfigs",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetCardProductWithCreditConfigs($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditConfiguration {\n        accountAging {\n          delinquentInDays\n          suspendedInDays\n          chargeOffInDays\n          lateFeeGracePeriodInDays\n        }\n        billingCycleConfiguration {\n          billingCycleGracePeriodInDays\n          billingCycleGracePeriodType\n          billingCyclePeriod\n        }\n        interest {\n          includesFees\n          includesPurchase\n        }\n        minimumPayment {\n          includesInterestAmount\n          includesFeesCharged\n          includesPastDueAmount\n          percentage\n          thresholdAmount {\n            currencyCode\n            value\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "GetCardProductWithCreditPlans",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetCardProductWithCreditPlans($id: ID!) {\n  node(id: $id) {\n    ... on CardProduct {\n      __typename\n      id\n      creditPlans {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            name\n            status\n            planType\n            balanceType\n            riskBasedPricingPolicy {\n              isRiskBased\n            }\n            percentageOfCreditLimit\n            interestPolicy {\n              rateType\n              accrualType\n              accrualMethod\n              assessmentSchedule\n              defaultApr\n              scraApr\n            }\n            effectiveFromDate\n            effectiveThroughDate\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "Ping",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query Ping {\n  ping\n}",
      "variables": {}
    },
    {
      "name": "IntrospectionQuery",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\n\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\n\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\n\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {}
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on AccessDeniedError {\n        message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n      personCreditRiskAttributes {\n        totalAnnualIncome {\n          value\n          currencyCode\n        }\n        currentDebtObligations {\n          value\n          currencyCode\n        }\n        employmentStatus\n        monthlyHousingPayment {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "name": {
              "givenName": "Walt",
              "familyName": "Disney"
            },
            "externalId": "Disney,Walt",
            "email": "walt@disney.com",
            "dateOfBirth": "1991-12-05",
            "billingAddress": {
              "countryCodeAlpha3": "USA",
              "region": "CA",
              "locality": "Anaheim",
              "postalCode": "92802",
              "streetAddress": "1313 Disneyland Drive"
            },
            "phoneNumber": {
              "label": "HOME",
              "countryCode": "1",
              "number": "714-316-3075"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "countryCodeAlpha3": "USA",
                "number": "562-10-0296"
              }
            },
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              },
              "monthlyHousingPayment": {
                "value": 100000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "SearchPersonAccountHolders",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query SearchPersonAccountHolders($filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(filterBy: $filterBy) {\n    edges {\n      node {\n        id\n        email\n        dateOfBirth\n        externalId\n        updatedAt\n        createdAt\n        financialAccounts {\n          edges {\n            node {\n              id\n              name\n              owner {\n                __typename\n              }\n            }\n          }\n        }\n        paymentCards {\n          edges {\n            node {\n              last4\n              financialAccounts {\n                id\n                name\n                owner {\n                  __typename\n                }\n              }\n            }\n          }\n        }\n        name {\n          givenName\n          familyName\n          title\n          suffix\n          middleName\n        }\n        billingAddress {\n          streetAddress\n          extendedAddress\n          postalCode\n          region\n          locality\n          countryCodeAlpha3\n        }\n        phoneNumbers {\n          countryCode\n          number\n          label\n        }\n        identificationDocument {\n          socialSecurityNumber {\n            numberHash\n            countryCodeAlpha3\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "filterBy": {
          "name": {
            "givenName": {
              "soundsLike": "Ian"
            },
            "familyName": {
              "soundsLike": "Somnia"
            }
          }
        }
      }
    },
    {
      "name": "UpdateUSPersonAccountHolderBillingAddress",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation UpdateUSPersonAccountHolderBillingAddress(\n  $input: UpdateUSPersonAccountHolderBillingAddressInput!\n) {\n  updateUSPersonAccountHolderBillingAddress(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      paymentCards {\n        edges {\n          node {\n            id\n            last4\n            application {\n              accountHolderSnapshot {\n                ... on USPersonAccountHolderSnapshot {\n                  billingAddress {\n                    streetAddress\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "PERSON_ACCOUNT_HOLDER_ID",
          "billingAddress": {
            "streetAddress": "123 Main Street",
            "extendedAddress": "",
            "postalCode": "60654",
            "region": "IL",
            "locality": "Chicago",
            "countryCodeAlpha3": "USA"
          },
          "updatePaymentCardBillingAddress": true
        }
      }
    },
    {
      "name": "UpdateUSPersonAccountHolderPhone",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation UpdateUSPersonAccountHolderPhone(\n  $input: UpdateUSPersonAccountHolderPhoneInput!\n) {\n  updateUSPersonAccountHolderPhone(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "phoneNumber": {
            "number": "5555555556",
            "countryCode": "1",
            "label": "MOBILE"
          }
        }
      }
    },
    {
      "name": "UpdateUSPersonAccountHolderEmail",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation UpdateUSPersonAccountHolderEmail(\n  $input: UpdateUSPersonAccountHolderEmailInput!\n) {\n  updateUSPersonAccountHolderEmail(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "ACCOUNT_HOLDER_ID",
          "email": "foo+testing-update@email.com"
        }
      }
    },
    {
      "name": "ListAccountHolders",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "fragment accountHolder on USPersonAccountHolder {\n  id\n  email\n  dateOfBirth\n  externalId\n  createdAt\n  updatedAt\n  name {\n    givenName\n    familyName\n    middleName\n    suffix\n    title\n  }\n  externalFinancialAccounts {\n    edges {\n      node {\n        __typename\n        ... on ExternalFinancialBankAccount {\n          id\n        }\n      }\n    }\n  }\n  identificationDocument {\n    socialSecurityNumber {\n      numberHash\n      countryCodeAlpha3\n    }\n  }\n  billingAddress {\n    streetAddress\n    extendedAddress\n    postalCode\n    region\n    locality\n    countryCodeAlpha3\n  }\n  phoneNumbers {\n    number\n    countryCode\n    label\n  }\n  financialAccounts {\n    edges {\n      node {\n        name\n        owner {\n          __typename\n        }\n      }\n    }\n  }\n  paymentCards {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        last4\n        formFactor\n        financialAccounts {\n          __typename\n          id\n          name\n        }\n      }\n    }\n  }\n  cardProductApplications {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        applicationState {\n          status\n        }\n      }\n    }\n  }\n}\n\nquery ListAccountHolders($first: Int, $filterBy: PersonAccountHolderFilterInput) {\n  personAccountHolders(first: $first, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...accountHolder\n      }\n    }\n  }\n}\n",
      "variables": {
        "first": 20,
        "filterBy": {}
      }
    },
    {
      "name": "GetUSPersonAccountHolderByID",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetUSPersonAccountHolderByID($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      cardProductApplications {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      externalFinancialAccounts {\n        edges {\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n            }\n          }\n        }\n      }\n      financialAccounts {\n        edges {\n          node {\n            directDepositDetails {\n              id\n            }\n          }\n        }\n      }\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{accountHolderId}}"
      }
    },
    {
      "name": "SimulateApplicationDocumentReview",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateApplicationDocumentReview($input: SimulateApplicationDocumentReviewInput!) {\n  simulateApplicationDocumentReview(input: $input) {\n    ... on AccountHolderApplicationDocument {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "PERSON_APPLICATION_ID",
          "documentUploadLinkId": "DOCUMENT_UPLOAD_LINK_ID",
          "documentUploadSessionId": "DOCUMENT_UPLOAD_SESSION_ID",
          "newReviewStatus": "REVIEW_STATUS_ENUM"
        }
      }
    },
    {
      "name": "SimulateApplicationVerificationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateApplicationVerificationStatusChange($input: SimulateApplicationVerificationStatusChangeInput!) {\n  simulateApplicationVerificationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicantId": "PERSON_ACCOUNT_HOLDER_ID",
          "applicationId": "APPLICATION_ID",
          "newVerificationStatus": "VERIFICATION_STATUS_ENUM"
        }
      }
    },
    {
      "name": "SimulateApplicationStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateApplicationStatusChange($input: SimulateApplicationStatusChangeInput!) {\n  simulateApplicationStatusChange(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "APPLICATION_ID",
          "newApplicationStatus": "STATUS_ENUM"
        }
      }
    },
    {
      "name": "GetAccountHolderCardProductApplicationStatus",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        primaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
      "variables": {
        "id": "{{accountHolderApplicationId}}"
      }
    },
    {
      "name": "GetAccountHolderCardProductApplicationStatus",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAccountHolderCardProductApplicationStatus(\n  $id: ID!\n  $firstApplicationHistory: Int\n) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        name\n      }\n      accountHolderSnapshot {\n        ...USPersonAccountHolderSnapshot\n      }\n      applicationHistory(first: $firstApplicationHistory) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            ...ApplicationHistorySnapshot\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment Verification on AccountHolderVerification {\n  status\n  reason\n  results {\n      code\n      description\n    }\n  requiredDocuments {\n    __typename\n    createdAt\n    referenceIdentifier\n    updatedAt\n    status\n    documentUploadSession {\n      ... on USAccountHolderApplicationDocumentUploadSession {\n        status\n        id\n        recommendedDocumentTypes\n        documentContext {\n          ... on AccountHolderApplicationDocumentUploadSessionContext {\n            documentVerificationResultCodeContext {\n              entries {\n                document\n                verificationResultCodes\n              }\n            }\n            verificationResultCodeDocumentContext {\n              entries {\n                documents\n                verificationResultCode\n              }\n            }\n          }\n        }\n        primaryDocumentTypes\n        uploadRequirements {\n          constraints {\n            ... on DocumentUploadRequirementConstraint {\n              numberOfDocuments\n              documentType\n            }\n          }\n        }\n      }\n    }\n    uploadedDocuments {\n      ... on AccountHolderApplicationDocument {\n        status\n        type\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nfragment USPersonAccountHolderSnapshot on USPersonAccountHolderSnapshot {\n  __typename\n  accountHolderCurrent {\n    id\n  }\n  name {\n    givenName\n    familyName\n    title\n    suffix\n  }\n  currentVerification {\n    ...Verification\n  }\n}\n\nfragment ApplicationHistorySnapshot on AccountHolderCardProductApplicationSnapshot {\n  __typename\n  createdAt\n  updatedAt\n  applicationState {\n    status\n  }\n}",
      "variables": {
        "id": "{{accountHolderApplicationId}}"
      }
    },
    {
      "name": "GetDocumentUploadBySessionID",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetDocumentUploadBySessionID($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on USAccountHolderApplicationDocumentUploadSession {\n\t\t\t__typename\n\t\t\tid\n\t\t\tstatus\n\t\t\tprimaryDocumentTypes\n\t\t\tuploadRequirements {\n\t\t\t\tconstraints {\n\t\t\t\t\t... on DocumentUploadRequirementConstraint {\n\t\t\t\t\t\tdocumentType\n\t\t\t\t\t\tnumberOfDocuments\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdocuments {\n\t\t\t\t... on DocumentUploadLink {\n\t\t\t\t\tid\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentCategoryType\n\t\t\t\t\tdocumentType\n\t\t\t\t\tstatus\n\t\t\t\t\tdocumentUploadSession {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "{{documentUploadSessionId}}"
      }
    },
    {
      "name": "GenerateDocumentUploadClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation GenerateDocumentUploadClientToken($input: GenerateDocumentUploadClientTokenInput!) {\n  generateDocumentUploadClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{documentUploadSessionId}}",
          "permissions": [
            "MANAGE_DOCUMENT_UPLOAD_SESSION"
          ]
        }
      }
    },
    {
      "name": "StartDocumentUploadSession",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation StartDocumentUploadSession($input: StartDocumentUploadSessionInput!) {\n  startDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{documentUploadSessionId}}"
        }
      }
    },
    {
      "name": "CreateDocumentUploadSecureLink",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateDocumentUploadSecureLink(\n  $input: CreateDocumentUploadLinkInput!\n) {\n  createDocumentUploadLink(input: $input) {\n    __typename\n    ... on DocumentUploadLink {\n      id\n      documentUploadSession {\n        id\n        status\n        ... on USAccountHolderApplicationDocumentUploadSession {\n          uploadRequirements {\n            constraints {\n              ... on DocumentUploadRequirementConstraint {\n                documentType\n                numberOfDocuments\n              }\n            }\n          }\n        }\n      }\n      documentType\n      status\n      documentCategoryType\n      uploadUrl\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{documentUploadSessionId}}",
          "documentType": "DRIVERS_LICENSE"
        }
      }
    },
    {
      "name": "UploadDocumentCopy",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit"
    },
    {
      "name": "EndDocumentUploadSession",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation EndDocumentUploadSession($input: EndDocumentUploadSessionInput!) {\n  endDocumentUploadSession(input: $input) {\n    __typename\n    ... on USAccountHolderApplicationDocumentUploadSession {\n      id\n      status\n      primaryDocumentTypes\n      uploadRequirements {\n        constraints {\n          ... on DocumentUploadRequirementConstraint {\n            documentType\n            numberOfDocuments\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "documentUploadSessionId": "{{documentUploadSessionId}}"
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "IN-REVIEW",
              "familyName": "IN-REVIEW"
            },
            "billingAddress": {
              "streetAddress": "123 Manual Review St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "foo@example.com",
            "name": {
              "givenName": "FORCE-DECLINE",
              "familyName": "FORCE-DECLINE"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "employmentStatus": "EMPLOYED",
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateAccountHolderCardProductApplication",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n      ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }  \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            region\n            countryCodeAlpha3\n            postalCode\n          }\n          currentVerification {\n            reason\n            status\n          }\n        }\n      }    \n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "cardProductId": "{{cardProductId}}",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "2024-01-01T23:59:59Z",
            "primaryAuthorizedPersonId": "{{accountHolderId}}"
          },
          "accountHolderCreditReportPullConsent": {
            "consentTimestamp": "2024-01-01T23:59:59Z",
            "primaryAuthorizedPersonId": "{{accountHolderId}}"
          },
          "ipAddress": {
            "v4": "IP_ADDRESS"
          }
        }
      }
    },
    {
      "name": "ApproveCreditProductApplicationUnderwriting",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation ApproveCreditProductApplicationUnderwriting($input: ApproveCreditProductApplicationUnderwritingInput!) {\n  approveCreditProductApplicationUnderwriting(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      id\n      createdAt\n      updatedAt\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n        name\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "{{accountHolderApplicationId}}",
          "decisionDate": "2024-01-01T23:59:59Z",
          "standardPurchaseCreditLimit": {
            "currencyCode": "USD",
            "value": 100000
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "ivan@example.com",
            "name": {
              "givenName": "Ivan",
              "familyName": "Insufficient-Income"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 100,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "dave@example.com",
            "name": {
              "givenName": "Dave",
              "familyName": "Delinquent-Credit-Obligations"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 200,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "adverse-action@example.com",
            "name": {
              "givenName": "Insufficient-Income",
              "familyName": "Delinquent-Credit-Obligations"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "5555555555",
              "label": "MOBILE",
              "extension": "312"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 500,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "sally@example.com",
            "name": {
              "givenName": "Sally",
              "familyName": "Credit-Freeze"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "1111111111",
              "label": "MOBILE"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "sally@example.com",
            "name": {
              "givenName": "Sally",
              "familyName": "Fraud-Alert"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "2222222222",
              "label": "MOBILE"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateUSPersonAccountHolder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateUSPersonAccountHolder(\n  $input: CreateUSPersonAccountHolderInput!\n) {\n  createUSPersonAccountHolder(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on USPersonAccountHolder {\n      id\n      email\n      dateOfBirth\n      externalId\n      updatedAt\n      createdAt\n      name {\n        givenName\n        familyName\n        title\n        suffix\n        middleName\n      }\n      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n        locality\n        countryCodeAlpha3\n      }\n      phoneNumbers {\n        countryCode\n        number\n        label\n      }\n      identificationDocument {\n        socialSecurityNumber {\n          numberHash\n          countryCodeAlpha3\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "personAccountHolder": {
            "email": "sam@example.com",
            "name": {
              "givenName": "Sam",
              "familyName": "MLA-Eligible"
            },
            "billingAddress": {
              "streetAddress": "123 Green St.",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            },
            "phoneNumber": {
              "countryCode": "1",
              "number": "3333333333",
              "label": "MOBILE"
            },
            "identificationDocument": {
              "socialSecurityNumber": {
                "number": "111-11-1111",
                "countryCodeAlpha3": "USA"
              }
            },
            "dateOfBirth": "1980-12-12",
            "externalId": "some-id",
            "personCreditRiskAttributes": {
              "currentDebtObligations": {
                "value": 0,
                "currencyCode": "USD"
              },
              "totalAnnualIncome": {
                "value": 1000000,
                "currencyCode": "USD"
              }
            }
          }
        }
      }
    },
    {
      "name": "CreateAccountHolderCardProductApplication",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateAccountHolderCardProductApplication($input: CreateAccountHolderCardProductApplicationInput!) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n      ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }  \n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          name {\n            givenName\n            familyName\n          }\n          billingAddress {\n            streetAddress\n            locality\n            region\n            countryCodeAlpha3\n            postalCode\n          }\n          currentVerification {\n            reason\n            status\n          }\n        }\n      }    \n      updatedAt\n      createdAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "cardProductId": "{{cardProductId}}",
          "cardHolderAgreementConsent": {
            "consentTimestamp": "2022-11-24T23:59:59Z",
            "primaryAuthorizedPersonId": "{{accountHolderId}}"
          },
          "accountHolderCreditReportPullConsent": {
            "consentTimestamp": "2024-11-24T23:59:59Z",
            "primaryAuthorizedPersonId": "{{accountHolderId}}"
          },
          "ipAddress": {
            "v4": "IP_ADDRESS"
          }
        }
      }
    },
    {
      "name": "GetAccountHolderCardProductApplication",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAccountHolderCardProductApplication($id: ID!) {\n  node(id: $id) {\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n        name\n      }\n      adverseActionReasons {\n        code\n        description\n      }\n      applicationDenialReason\n      creditReportFraudAlertVerificationResult {\n        accountHolderInitiatedApplication\n        address\n        dateOfBirth\n        name\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          accountHolderCurrent {\n            id\n          }\n          accountHolderCurrent {\n            id\n          }\n          billingAddress {\n            streetAddress\n          }\n          currentVerification {\n            status\n            reason\n            adverseActionReasons {\n              code\n              description\n            }\n          }\n          dateOfBirth\n          currentCreditUnderwritingVerification {\n            __typename\n            status\n            decisionResults\n            reviewReasonDetails {\n              reviewReason\n            }\n            creditScoreDetails {\n                creditBureau\n                creditScoreModels {\n                    creditScoreType\n                    creditScore\n                    creditScoreReasons\n                }\n            }\n            decision {\n              __typename\n              ... on UnderwriterPositiveDecision {\n                creditLine {\n                  value\n                  currencyCode\n                }\n                creditPlanTerms {\n                  creditPlan {\n                    __typename\n                    id\n                    planType\n                    balanceType\n                    interestPolicy {\n                      rateType\n                      index {\n                        type\n                        value\n                        effectiveDate\n                      }\n                    }\n                  }\n                  interest {\n                    apr\n                  }\n                }\n              }\n              ... on UnderwriterAdverseDecision {\n                adverseActionReasons {\n                  code\n                  description\n                  __typename\n                }\n              }\n            }\n            decisionDate\n          }\n        }\n      }\n      applicationHistory {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          cursor\n          node {\n            applicationState {\n              status\n            }\n          }\n        }\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}",
      "variables": {
        "id": "{{accountHolderApplicationId}}"
      }
    },
    {
      "name": "confirmCreditReportUnfrozen",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation confirmCreditReportUnfrozen(\n  $input: ConfirmCreditReportUnfrozenInput!\n) {\n  confirmCreditReportUnfrozen(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccountHolderCardProductApplication {\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          personCreditRiskAttributes {\n            totalAnnualIncome {\n              value\n              currencyCode\n            }\n            currentDebtObligations {\n              currencyCode\n              value\n            }\n            employmentStatus\n          }\n          currentCreditUnderwritingVerification {\n            status\n            decision {\n              __typename\n              ... on UnderwriterPositiveDecision {\n                creditLine {\n                  value\n                  currencyCode\n                }\n              }\n              ... on UnderwriterAdverseDecision {\n                adverseActionReasons {\n                  code\n                  description\n                }\n              }\n            }\n          }\n        }\n      }\n      updatedAt\n      createdAt\n    }\n  }\n}",
      "variables": {
        "input": {
          "applicationId": "{{accountHolderApplicationId}}"
        }
      }
    },
    {
      "name": "confirmVerificationOfCreditProductApplicationForFraudAlert",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation confirmVerificationOfCreditProductApplicationForFraudAlert(\n  $input: ConfirmVerificationOfCreditProductApplicationForFraudAlertInput!\n) {\n  confirmVerificationOfCreditProductApplicationForFraudAlert(input: $input) {\n    ... on AccountHolderCardProductApplication {\n      __typename\n      id\n      applicationState {\n        status\n      }\n      cardProduct {\n        id\n      }\n      creditReportFraudAlertVerificationResult {\n        accountHolderInitiatedApplication\n        address\n        dateOfBirth\n        name\n      }\n      accountHolderSnapshot {\n        ... on USPersonAccountHolderSnapshot {\n          currentCreditUnderwritingVerification {\n            __typename\n            status\n            decision {\n              ... on UnderwriterPositiveDecision {\n                __typename\n                creditLine {\n                  value\n                  currencyCode\n                }\n                creditPlanTerms {\n                  creditPlan {\n                    __typename\n                    id\n                  }\n                  interest {\n                    apr\n                  }\n                }\n              }\n              ... on UnderwriterAdverseDecision {\n                __typename\n                adverseActionReasons {\n                  code\n                  description\n                }\n              }\n            }\n            decisionDate\n            decisionResults\n            reviewReasonDetails {\n              reviewReason\n              memo\n            }\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{accountHolderApplicationId}}",
          "verificationResult": {
            "accountHolderInitiatedApplication": true,
            "name": true,
            "dateOfBirth": true,
            "address": true
          }
        }
      }
    },
    {
      "name": "IssueFinancialAccountForApplication",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{accountHolderApplicationId}}",
          "name": "Credit Account"
        }
      }
    },
    {
      "name": "GetFinancialAccountByID",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n        ... on CreditCardAccountFeature {\n          creditLimit {\n            value\n            currencyCode\n          }\n        }\n      }\n      creditConfiguration {\n        interestRates {\n          balanceType\n          creditPlan {\n            id\n          }\n          interest {\n            apr\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "InitiateFinancialAccountCreditLimitUpdateFromProductFunding",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation InitiateFinancialAccountCreditLimitUpdateFromProductFunding($input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!) {\n  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: $input) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      createdAt\n      updatedAt\n      amount {\n        value\n        currencyCode\n      }\n      status\n      statusReason\n      memo\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "amount": {
            "value": 30000,
            "currencyCode": "USD"
          },
          "memo": "Set Credit Limit $3000"
        }
      }
    },
    {
      "name": "GetFinancialAccountCreditLimitUpdate",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query GetFinancialAccountCreditLimitUpdate($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountCreditLimitUpdateFromProductFunding {\n      id\n      status\n      statusReason\n      amount {\n        value\n      }\n      memo\n      ledgers {\n        name\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        financialAccount {\n          name\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{crediLimitUpdateId}}"
      }
    },
    {
      "name": "IssuePaymentCardForFinancialAccount",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": false,
            "expirationDate": "2026-01-01T23:59:59Z"
          }
        }
      }
    },
    {
      "name": "GeneratePaymentCardClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "permissions": "SET_PAYMENT_CARD_PIN"
        }
      }
    },
    {
      "name": "GeneratePaymentCardClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "permissions": "READ_RESTRICTED_DETAILS"
        }
      }
    },
    {
      "name": "GetPaymentCardRestrictedDetails",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n            restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n                    cvv\n                }\n            }\n        }\n    }\n}",
      "variables": {
        "id": "{{paymentCardId}}"
      }
    },
    {
      "name": "ActivatePaymentCard",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "SetPinForPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n    }\nreq_06f2e9d7416d41eeaa473efa19375e48    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "newPin": "1234"
        }
      }
    },
    {
      "name": "SuspendPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "ReissuePaymentCard",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "options": {
            "reissueFeatures": {
              "copyNumber": true,
              "copyPin": true
            },
            "expirationDate": "2026-12-29T23:12:30Z",
            "activateOnCreate": false
          },
          "originalPaymentCardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "ClosePaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "SimulateAuthorization",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transactionProcessingType\n      transaction {\n        __typename\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "amount": {
            "value": 4000,
            "currencyCode": "USD"
          },
          "cardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "SimulateClearing",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}",
          "amount": {
            "value": 3000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "SimulateReversal",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    {
      "name": "SimulateRefund",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "SimulateSingleStepAuthAndClear",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "{{paymentCardId}}",
          "amount": {
            "currencyCode": "USD",
            "value": 1000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    {
      "name": "SimulateSingleStepAuthAndClear",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "{{paymentCardId}}",
          "amount": {
            "currencyCode": "USD",
            "value": 2000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    {
      "name": "initiateCustomerCardTransactionDispute",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation initiateCustomerCardTransactionDispute(\n  $input: InitiateCustomerCardTransactionDisputeInput!\n) {\n  initiateCustomerCardTransactionDispute(input: $input) {\n    __typename\n    ... on PaymentCardTransactionDispute {\n      id\n      status\n      category\n      amount {\n        currencyCode\n        value\n      }\n      customerClaimType\n      customerInitiatedOn\n      customerContact {\n        phone {\n          number\n          countryCode\n        }\n        email\n        givenName\n        familyName\n      }\n      fromDate\n      throughDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardTransactionEventId": "{{transactionEventId}}",
          "category": "FRAUD",
          "amount": {
            "currencyCode": "USD",
            "value": "2000"
          },
          "customerInitiatedOn": "2024-11-26",
          "customerClaimType": "VERBAL",
          "customerContact": {
            "givenName": "first",
            "familyName": "last",
            "email": "test@test.com",
            "phone": {
              "countryCode": "1",
              "number": "1234567819",
              "label": "MOBILE"
            }
          }
        }
      }
    },
    {
      "name": "simulateInitiateCardTransactionChargeback",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation simulateInitiateCardTransactionChargeback(\n  $input: SimulateInitiateCardTransactionChargebackInput!\n) {\n  simulateInitiateCardTransactionChargeback(input: $input) {\n    __typename\n    ... on PaymentCardTransactionDispute {\n      id\n      status\n      chargebacks {\n        id\n        requestedAmount {\n          currencyCode\n          value\n        }\n        receivedAmount {\n          currencyCode\n          value\n        }\n        status\n        fromDate\n        throughDate\n      }\n      fromDate\n      throughDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "disputeId": "{{disputeId}}",
          "amount": {
            "currencyCode": "USD",
            "value": "3500"
          }
        }
      }
    },
    {
      "name": "initiateCustomerCardTransactionDispute",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation initiateCustomerCardTransactionDispute(\n  $input: InitiateCustomerCardTransactionDisputeInput!\n) {\n  initiateCustomerCardTransactionDispute(input: $input) {\n    __typename\n    ... on PaymentCardTransactionDispute {\n      id\n      status\n      category\n      amount {\n        currencyCode\n        value\n      }\n      customerClaimType\n      customerInitiatedOn\n      customerContact {\n        phone {\n          number\n          countryCode\n        }\n        email\n        givenName\n        familyName\n      }\n      fromDate\n      throughDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardTransactionEventId": "{{transactionEventId}}",
          "category": "FRAUD",
          "amount": {
            "currencyCode": "USD",
            "value": "2000"
          },
          "customerInitiatedOn": "2024-11-25",
          "customerClaimType": "VERBAL",
          "customerContact": {
            "givenName": "first",
            "familyName": "last",
            "email": "test@test.com",
            "phone": {
              "countryCode": "1",
              "number": "1234567819",
              "label": "MOBILE"
            }
          }
        }
      }
    },
    {
      "name": "GetTransactionEvent",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
      "variables": {
        "id": "TRANSACTION_EVENT_ID"
      }
    },
    {
      "name": "TransactionEventsByPaymentCardAndTransactionId",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID",
        "filterBy": {
          "transactionId": {
            "equals": "TRANSACTION_ID"
          }
        }
      }
    },
    {
      "name": "AttachSpendRuleToCardProduct",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input: $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    {
      "name": "CreateMerchantCategorySpendRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Fuel Rule",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": [
            "AIRLINES_AIR_CARRIERS"
          ]
        }
      }
    },
    {
      "name": "UpdateMerchantCategorySpendRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input: $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "spendRuleId": "SPEND_RULE_ID",
          "allowed": [
            "AUTOMATED_FUEL_DISPENSERS"
          ],
          "blocked": []
        }
      }
    },
    {
      "name": "AttachSpendRuleToPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input: $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n            ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    {
      "name": "DetachSpendRuleFromCardProduct",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input: $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    {
      "name": "DetachSpendRuleFromPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input: $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "spendRule": {
            "id": "SPEND_RULE_ID"
          }
        }
      }
    },
    {
      "name": "CreateVelocityRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n    ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              id\n              name\n              version\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Velocity Control - Max $1000 per month",
          "cumulativeRule": {
            "id": "AMOUNT_SPEND_RULE_ID",
            "version": "0"
          },
          "spendRules": [
            {
              "id": "ADDITIONAL_SPEND_RULE_ID",
              "version": "O"
            }
          ],
          "velocityRuleWindow": "MONTHLY"
        }
      }
    },
    {
      "name": "CreateAmountLimitSpendRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input: $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n        currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Amount Limit Rule",
          "maximumAmount": {
            "value": 100000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "AttachPaymentCardVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "0"
          }
        }
      }
    },
    {
      "name": "DetachPaymentCardVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n          id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "PAYMENT_CARD_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    {
      "name": "GetAllVelocityRules",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n        node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n          updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n              name\n              maximumAmount {\n                value\n                currencyCode\n              }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n          spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {}
    },
    {
      "name": "GetPaymentCardVelocityRule",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n  \t}\n\t}\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID"
      }
    },
    {
      "name": "GetFinancialAccountWithVelocityBalance",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n            version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "AttachCardProductVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    {
      "name": "DetachCardProductVelocityRule",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input: $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              cursor\n              node {\n                id\n                name\n                version\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n        createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n          id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "CARD_PRODUCT_ID",
          "velocityRule": {
            "velocityRuleId": "VELOCITY_RULE_ID",
            "version": "VELOCITY_RULE_VERSION"
          }
        }
      }
    },
    {
      "name": "AddCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AddCollaborativeAuthorizationEndpoint($input: AddCollaborativeAuthorizationEndpointInput!) {\n  addCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on  CollaborativeAuthorizationEndpoint{\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Test Collaborative Auth Endpoint",
          "uri": "https://example.com"
        }
      }
    },
    {
      "name": "ActivateCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation ActivateCollaborativeAuthorizationEndpoint($input: ActivateCollaborativeAuthorizationEndpointInput!) {\n  activateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    {
      "name": "FindCollaborativeAuthorizationEndpoint",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindCollaborativeAuthorizationEndpoint($id: ID!) {\n  node(id: $id) {\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{collabAuthEndpointId}}"
      }
    },
    {
      "name": "DeactivateCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation DeactivateCollaborativeAuthorizationEndpoint($input: DeactivateCollaborativeAuthorizationEndpointInput!) {\n  deactivateCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on  CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    {
      "name": "RemoveCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation RemoveCollaborativeAuthorizationEndpoint($input: RemoveCollaborativeAuthorizationEndpointInput!) {\n  removeCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ... on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}"
        }
      }
    },
    {
      "name": "CollaborativeAuthorizationEndpoints",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query CollaborativeAuthorizationEndpoints($after: String, $first: Int) {\n\torganizations{\n\t\tid\n\t\tcollaborativeAuthorizationEndpoints(first: $first, after: $after) {\n\t\t\t__typename\n\n\t\t\tedges {\n\t\t\t\t__typename\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\turi\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tsigningKeys {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tsecret\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t\tstatus\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpageInfo {\n\t\t\t\tendCursor\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {}
    },
    {
      "name": "RenameCollaborativeAuthorizationEndpoint",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation RenameCollaborativeAuthorizationEndpoint($input: RenameCollaborativeAuthorizationEndpointInput!) {\n  renameCollaborativeAuthorizationEndpoint(input: $input) {\n    __typename\n    ...on CollaborativeAuthorizationEndpoint {\n      id\n      name\n      uri\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "endpointId": "{{collabAuthEndpointId}}",
          "name": "Renamed Collaborative Auth Endpoint"
        }
      }
    },
    {
      "name": "CreateRewardMerchantCategoryEarnRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateRewardMerchantCategoryEarnRule(\n  $input: CreateRewardMerchantCategoryEarnRuleInput!\n  $firstAttachments: Int\n  $afterAttachments: String\n) {\n  createRewardMerchantCategoryEarnRule(input: $input) {\n    __typename\n    ... on RewardMerchantCategoryEarnRule {\n      id\n      type\n      name\n      attachments(first: $firstAttachments, after: $afterAttachments) {\n        __typename\n\n        ... on RewardRuleAttachmentConnection {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                rewardEarnRule {\n                  id\n                }\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      allowedList\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Home Improvement Reward Rule",
          "rewardPointEarning": {
            "rate": "1.5"
          },
          "allowedList": [
            "HARDWARE_STORES"
          ]
        }
      }
    },
    {
      "name": "CreateRewardDefaultEarnRule",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateRewardDefaultEarnRule(\n  $input: CreateRewardDefaultEarnRuleInput!\n) {\n  createRewardDefaultEarnRule(input: $input) {\n    __typename\n    ... on RewardDefaultEarnRule {\n      id\n      type\n      name\n      attachments {\n        __typename\n        ... on RewardRuleAttachmentConnection {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n            startCursor\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                rewardEarnRule {\n                  id\n                }\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Default Reward Earn Rule",
          "rewardPointEarning": {
            "rate": "1"
          }
        }
      }
    },
    {
      "name": "AttachRewardEarnRuleToProduct",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AttachRewardEarnRuleToProduct(\n  $input: AttachRewardEarnRuleToProductInput!\n) {\n  attachRewardEarnRuleToProduct(input: $input) {\n    __typename\n    ... on RewardRuleProductAttachment {\n      id\n      effectiveFrom\n      effectiveThrough\n      rewardEarnRule {\n        id\n      }\n      ... on RewardRuleProductAttachment {\n        cardProduct {\n          id\n        }\n      }\n    }\n\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "rewardRule": {
            "id": "{{rewardMerchantCategoryEarnRuleId}}"
          }
        }
      }
    },
    {
      "name": "UpdateRewardRuleAttachment",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation UpdateRewardRuleAttachment($input: UpdateRewardRuleAttachmentInput!) {\n  updateRewardRuleAttachment(input: $input) {\n    __typename\n    ... on RewardRuleProductAttachment {\n      id\n      cardProduct {\n        id\n      }\n      rewardEarnRule {\n        id\n      }\n      effectiveFrom\n      effectiveThrough\n    }\n\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "attachmentId": "{{ruleAttachmentId}}",
          "effectiveThrough": "2024-06-04T00:00:00.000Z"
        }
      }
    },
    {
      "name": "FindRewardEarnRuleById",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindRewardEarnRuleById($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on RewardMerchantCategoryEarnRule {\n      id\n      type\n      name\n      attachments(first: $first, after: $after) {\n        __typename\n        ... on RewardRuleAttachmentConnection {\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      allowedList\n      updatedAt\n    }\n    ... on RewardDefaultEarnRule {\n      id\n      type\n      name\n      attachments {\n        __typename\n        ... on RewardRuleAttachmentConnection {\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              ... on RewardRuleProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      rewardPointEarning {\n        rate\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{rewardMerchantCategoryEarnRuleId}}"
      }
    },
    {
      "name": "FindCardProductWithRewardRules",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindCardProductWithRewardRules($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on CardProduct {\n      attachedRewardRules {\n        ... on RewardRuleAttachmentConnection {\n          pageInfo {\n            startCursor\n            hasNextPage\n          }\n          edges {\n            node {\n              __typename\n              effectiveFrom\n              effectiveThrough\n              rewardEarnRule {\n                ... on RewardMerchantCategoryEarnRule {\n                  id\n                  type\n                  name\n                  attachments {\n                    __typename\n                    ... on RewardRuleAttachmentConnection {\n                      edges {\n                        node {\n                          effectiveFrom\n                          effectiveThrough\n                          ... on RewardRuleProductAttachment {\n                            cardProduct {\n                              id\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  rewardPointEarning {\n                    rate\n                  }\n                  createdAt\n                  allowedList\n                  updatedAt\n                }\n                ... on RewardDefaultEarnRule {\n                  id\n                  type\n                  name\n                  attachments {\n                    __typename\n                    ... on RewardRuleAttachmentConnection {\n                      edges {\n                        node {\n                          effectiveFrom\n                          effectiveThrough\n                          ... on RewardRuleProductAttachment {\n                            cardProduct {\n                              id\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  rewardPointEarning {\n                    rate\n                  }\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "FindOrganizationWithRewardRules",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindOrganizationWithRewardRules($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on Organization {\n      rewardEarnRules {\n        ... on RewardEarnRuleConnection {\n          edges {\n            node {\n              __typename\n              ... on RewardMerchantCategoryEarnRule {\n                id\n                type\n                name\n                attachments {\n                  __typename\n                  ... on RewardRuleAttachmentConnection {\n                    edges {\n                      node {\n                        effectiveFrom\n                        effectiveThrough\n                        ... on RewardRuleProductAttachment {\n                          cardProduct {\n                            id\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                rewardPointEarning {\n                  rate\n                }\n                allowedList\n                createdAt\n                updatedAt\n              }\n\n              ... on RewardDefaultEarnRule {\n                id\n                type\n                name\n                attachments {\n                  __typename\n                  ... on RewardRuleAttachmentConnection {\n                    edges {\n                      node {\n                        effectiveFrom\n                        effectiveThrough\n                        ... on RewardRuleProductAttachment {\n                          cardProduct {\n                            id\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n                rewardPointEarning {\n                  rate\n                }\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{organizationId}}"
      }
    },
    {
      "name": "CreateRewardRedemptionConfiguration",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateRewardRedemptionConfiguration(\n  $input: CreateRewardRedemptionConfigurationInput!\n) {\n  createRewardRedemptionConfiguration(input: $input) {\n    __typename\n    ... on RewardRedemptionConfiguration {\n      id\n      type\n      name\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        ... on RewardRedemptionConfigurationAttachmentConnection {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n            startCursor\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              redemptionConfiguration {\n                id\n              }\n              ... on RewardRedemptionConfigurationProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "Rewards Redemption Configuration",
          "rewardPointRedemption": {
            "rate": "1.0"
          }
        }
      }
    },
    {
      "name": "AttachRewardRedemptionConfigurationToProduct",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AttachRewardRedemptionConfigurationToProduct(\n  $input: AttachRewardRedemptionConfigurationToProductInput!\n) {\n  attachRewardRedemptionConfigurationToProduct(input: $input) {\n    __typename\n    ... on RewardRedemptionConfigurationProductAttachment {\n      redemptionConfiguration {\n        id\n      }\n      cardProduct {\n        id\n      }\n      effectiveFrom\n      effectiveThrough\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "redemptionConfiguration": {
            "id": "{{rewardRedemptionConfigurationId}}"
          },
          "cardProductId": "{{cardProductId}}"
        }
      }
    },
    {
      "name": "UpdateRewardRedemptionConfigurationAttachment",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation UpdateRewardRedemptionConfigurationAttachment(\n  $input: UpdateRewardRedemptionConfigurationAttachmentInput!\n) {\n  updateRewardRedemptionConfigurationAttachment(input: $input) {\n    __typename\n    ... on RewardRedemptionConfigurationProductAttachment {\n      id\n      cardProduct {\n        id\n      }\n      redemptionConfiguration {\n        id\n      }\n      effectiveFrom\n      effectiveThrough\n    }\n\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "attachmentId": "{{rewardRedemptionConfigurationProductAttachmentId}}",
          "effectiveThrough": "2023-03-24T00:00:00.000Z"
        }
      }
    },
    {
      "name": "FindRewardRedemptionConfigurationById",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindRewardRedemptionConfigurationById($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on RewardRedemptionConfiguration {\n      id\n      type\n      name\n      rewardPointRedemption {\n        rate\n      }\n      attachments {\n        ... on RewardRedemptionConfigurationAttachmentConnection {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            endCursor\n            startCursor\n          }\n          edges {\n            node {\n              effectiveFrom\n              effectiveThrough\n              redemptionConfiguration {\n                id\n              }\n              ... on RewardRedemptionConfigurationProductAttachment {\n                cardProduct {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{rewardRedemptionConfigurationId}}"
      }
    },
    {
      "name": "FindCardProductWithRewardRules",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindCardProductWithRewardRules($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on CardProduct {\n      attachedRewardRedemptionConfigurations {\n        ... on RewardRedemptionConfigurationAttachmentConnection {\n          pageInfo {\n            startCursor\n            hasNextPage\n          }\n          edges {\n            node {\n              __typename\n              effectiveFrom\n              effectiveThrough\n              redemptionConfiguration {\n                ... on RewardRedemptionConfiguration {\n                  id\n                  type\n                  name\n                  rewardPointRedemption {\n                    rate\n                  }\n                  attachments {\n                    ... on RewardRedemptionConfigurationAttachmentConnection {\n                      pageInfo {\n                        hasNextPage\n                        hasPreviousPage\n                        endCursor\n                        startCursor\n                      }\n                      edges {\n                        cursor\n                        node {\n                          effectiveFrom\n                          effectiveThrough\n                          redemptionConfiguration {\n                            id\n                          }\n                          ... on RewardRedemptionConfigurationProductAttachment {\n                            cardProduct {\n                              id\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{cardProductId}}"
      }
    },
    {
      "name": "FindOrganizationWithRedemptionConfigurations",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindOrganizationWithRedemptionConfigurations(\n  $id: ID!\n  $first: Int\n  $after: String\n) {\n  node(id: $id) {\n    __typename\n    ... on Organization {\n      rewardRedemptionConfigurations(first: $first, after: $after) {\n        ... on RewardRedemptionConfigurationConnection {\n          edges {\n            node {\n              __typename\n              ... on RewardRedemptionConfiguration {\n                id\n                rewardPointRedemption {\n                  rate\n                }\n                attachments {\n                  ... on RewardRedemptionConfigurationAttachmentConnection {\n                    pageInfo {\n                      hasNextPage\n                      hasPreviousPage\n                      endCursor\n                      startCursor\n                    }\n                    edges {\n                      node {\n                        effectiveFrom\n                        effectiveThrough\n                        redemptionConfiguration {\n                          id\n                        }\n                        ... on RewardRedemptionConfigurationProductAttachment {\n                          cardProduct {\n                            id\n                          }\n                          redemptionConfiguration {\n                            id\n                          }\n                          effectiveFrom\n                          effectiveThrough\n                        }\n                      }\n                    }\n                  }\n                }\n\n                createdAt\n                updatedAt\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "ORGANIZATION_ID"
      }
    },
    {
      "name": "RedeemRewards",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation RedeemRewards($input: RedeemRewardsForStatementCreditInput!) {\n  redeemRewardsForStatementCredit(input: $input) {\n    __typename\n    ... on RewardPointsTransfer {\n      id\n      rewardPointsValue {\n        currencyCode\n        value\n      }\n      rewardPointsAmount {\n        currencyCode\n        value\n      }\n      createdAt\n      updatedAt\n      ledgers {\n        name\n      }\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      activity\n      memo\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "redemption": {
            "redemptionConfigurationId": "{{rewardRedemptionConfigurationProductAttachmentId}}",
            "pointsToRedeem": 25
          },
          "memo": "memo",
          "externalTransactionIdentifier": "external-transaction-id"
        }
      }
    },
    {
      "name": "CreateRewardPointsAdjustment",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateRewardPointsAdjustment(\n  $input: CreateRewardPointsAdjustmentInput!\n) {\n  createRewardPointsAdjustment(input: $input) {\n    __typename\n    ... on RewardPointsTransfer {\n      id\n      rewardPointsValue {\n        currencyCode\n        value\n      }\n      rewardPointsAmount {\n        currencyCode\n        value\n      }\n      createdAt\n      updatedAt\n      ledgers {\n        name\n      }\n      status {\n        ... on RewardPointsTransferSuccessStatus {\n          status\n        }\n        ... on RewardPointsTransferFailureStatus {\n          status\n          statusReasonCode\n        }\n      }\n      activity\n      memo\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "activity": "DEDUCT",
          "pointsToAdjust": 5,
          "memo": "memo"
        }
      }
    },
    {
      "name": "FindRewardsPointsLedgerByFinancialAccountId",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindRewardsPointsLedgerByFinancialAccountId($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      ledgers(ledgerNames: [REWARDS_POINTS]) {\n        id\n        name\n        debitBalance {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindRedeemableRewardsPointsLedgerByFinancialAccountId",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindRedeemableRewardsPointsLedgerByFinancialAccountId($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      ledgers(ledgerNames: [REDEEMABLE_REWARDS_POINTS]) {\n        id\n        name\n        debitBalance {\n          value\n          currencyCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindLedger",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindLedger($id: ID!) {\n  node(id: $id) {\n    ... on Ledger {\n      id\n      name\n      normalBalance\n      asOf\n      debitBalance {\n        value\n        currencyCode\n      }\n      ledgerEntries {\n        edges {\n          node {\n            __typename\n            id\n            amount {\n              value\n            }\n            journalEntry {\n              credits {\n                id\n                amount {\n                  value\n                }\n              }\n              debits {\n                id\n                amount {\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "LEDGER_ID"
      }
    },
    {
      "name": "GenerateDirectDepositDetailClientToken",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation GenerateDirectDepositDetailClientToken($input: GenerateDirectDepositDetailClientTokenInput!) {\n  generateDirectDepositDetailClientToken(input: $input) {\n    ... on ClientToken {\n      value\n      expirationDate\n    }\n  }\n}",
      "variables": {
        "input": {
          "directDepositDetailId": "DIRECT_DEPOSIT_DETAIL_ID",
          "permissions": [
            "READ_RESTRICTED_DETAILS"
          ]
        }
      }
    },
    {
      "name": "GetDirectDepositDetailsByIDWithClientToken",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetDirectDepositDetailsByIDWithClientToken($id: ID!) {\n  node(id: $id) {\n    ... on DirectDepositDetail {\n      id\n      restrictedDetails {\n        ... on DirectDepositDetailRestrictedDetails {\n          number\n          routingNumber\n          bank {\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "DIRECT_DEPOSIT_DETAIL_ID"
      }
    },
    {
      "name": "GetProductFundingAccountByCardProductID",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetProductFundingAccountByCardProductID($id: ID!, $filterBy: AccountHolderFinancialAccountsFilterInput!) {\n  node(id: $id) {\n    ... on CardProduct {\n      accounts(filterBy: $filterBy) {\n        edges {\n          node {\n            id\n            name\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            directDepositDetails {\n              id\n              createdAt\n              updatedAt\n              restrictedDetails {\n                ... on DirectDepositDetailRestrictedDetails {\n                  number\n                  routingNumber\n                  bank {\n                    name\n                    address {\n                      streetAddress\n                      extendedAddress\n                      postalCode\n                      region\n                      locality\n                      countryCodeAlpha3\n                    }\n                  }\n                  type\n                }\n                ... on AccessDeniedError {\n                  message\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "CARD_PRODUCT_ID",
        "filterBy": {
          "features": {
            "equals": "PRODUCT_FUNDING"
          }
        }
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughPlaid",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    {
      "name": "GetExternalFinancialAccountsByAccountHolder",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{accountHolderId}}"
      }
    },
    {
      "name": "InitiateFundsDepositACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation InitiateFundsDepositACHTransfer($input: InitiateFundsDepositACHTransferInput!) {\n  initiateFundsDepositACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "descriptor": {
            "companyEntryDescription": "Company",
            "individualIdentificationNumber": "",
            "individualName": "Baja ABC"
          },
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2022-12-07T14:42:52.453Z",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          }
        }
      }
    },
    {
      "name": "InitiateFundsWithdrawalACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation InitiateFundsWithdrawalACHTransfer($input: InitiateFundsWithdrawalACHTransferInput!) {\n  initiateFundsWithdrawalACHTransfer(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      createdAt\n      updatedAt\n      companyName\n      companyIdentifier\n      settlementDate\n      fundsAvailableDate\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "amount": {
            "value": 10000,
            "currencyCode": "USD"
          },
          "descriptor": {
            "companyEntryDescription": "Test Entry",
            "individualName": "Test",
            "individualIdentificationNumber": "1234"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "2023-12-07T14:42:52.453Z",
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "template": {
              "consentTemplateId": "consent",
              "consentTemplateVersion": "0"
            }
          },
          "idempotencyKey": "abcde123",
          "cancellationPeriodMillis": 0,
          "sameDay": false
        }
      }
    },
    {
      "name": "SimulateProcessingIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateProcessedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateReturnedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "ID",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    {
      "name": "SimulateExternallyInitiatedACHTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateExternallyInitiatedACHTransfer($input: SimulateExternallyInitiatedACHTransferInput!) {\n  simulateExternallyInitiatedACHTransfer(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      __typename\n      id\n      createdAt\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 2000,
            "currencyCode": "USD"
          },
          "companyEntryDescription": "TestDesc",
          "companyIdentifier": "TestID",
          "companyName": "TestName",
          "financialAccountId": "{{financialAccountId}}",
          "individualIdentificationNumber": "TestInDID",
          "individualName": "TestIndName",
          "settlementDate": "2022-07-28",
          "transferType": "CREDIT"
        }
      }
    },
    {
      "name": "SimulateProcessingExternallyInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateProcessingExternallyInitiatedStatusChange($input: SimulateProcessingExternallyInitiatedStatusChangeInput!) {\n  simulateProcessingExternallyInitiatedStatusChange(input: $input) {\n    ... on ExternallyInitiatedACHTransfer {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on CreditFunds {\n      amount {\n        value\n      }\n      status {\n        ... on NonFailureExternallyInitiatedACHStatus {\n          status\n        }\n        ... on FailureExternallyInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughPlaid",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      externalBankAccountDetails {\n        id\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughPlaid",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorTokenInput!) {\n  addExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorToken(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n      externalBankAccountDetails {\n        id\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "accountHolderId": "{{accountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          },
          "thirdPartyProcessorToken": {
            "value": "checkbook-token-success"
          }
        }
      }
    },
    {
      "name": "GetExternalFinancialAccountsByAccountHolder",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{businessAccountHolderId}}"
      }
    },
    {
      "name": "InitiateAchTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation InitiateAchTransfer($input: InitiateAchTransferInput!) {\n  initiateAchTransfer(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      type\n      purpose\n      paymentRelatedInformation\n      traceNumber\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "fromFinancialAccountId": "{{verifiedExternalBankAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}",
          "purpose": "DEPOSIT",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "{{$isoTimestamp}}",
            "authorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1.0"
            }
          },
          "companyEntryDescription": "TestCo",
          "individualName": "Test Business"
        }
      }
    },
    {
      "name": "InitiateAchTransfer",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation InitiateAchTransfer($input: InitiateAchTransferInput!) {\n  initiateAchTransfer(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      type\n      purpose\n      paymentRelatedInformation\n      traceNumber\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "idempotencyKey": "{{$guid}}",
          "fromFinancialAccountId": "{{financialAccountId}}",
          "toFinancialAccountId": "{{verifiedExternalBankAccountId}}",
          "purpose": "WITHDRAWAL",
          "amount": {
            "value": 100000,
            "currencyCode": "USD"
          },
          "transferAgreementConsent": {
            "consentTimestamp": "{{$isoTimestamp}}",
            "authorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1.0"
            }
          },
          "companyEntryDescription": "TestCo",
          "individualName": "Test Business"
        }
      }
    },
    {
      "name": "SimulateAchTransferProcessing",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateAchTransferProcessing($input: SimulateAchTransferProcessingInput!) {\n  simulateAchTransferProcessing(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{originatedAchTransferId}}"
        }
      }
    },
    {
      "name": "SimulateAchTransferReturn",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateAchTransferReturn($input: SimulateAchTransferReturnInput!) {\n  simulateAchTransferReturn(input: $input) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      status\n      statusFailureReason\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "{{originatedAchTransferId}}",
          "statusFailureReason": "DUPLICATE_ENTRY"
        }
      }
    },
    {
      "name": "GetOriginatedACHTransfer",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetOriginatedACHTransfer($id: ID!) {\n  node(id: $id) {\n    ... on OriginatedAchTransfer {\n      id\n      createdAt\n      updatedAt\n      failedAt\n      processedAt\n      effectiveEntryDate\n      sentToBankAt\n      expectedProcessedAt\n      processedAt\n      returnProcessedAt\n      canceledAt\n      amount {\n        value\n        decimalPlaces\n        currencyCode\n      }\n      sign\n      companyEntryDescription\n      companyIdentifier\n      companyName\n      individualIdentificationNumber\n      individualName\n      paymentRelatedInformation\n      purpose\n      status\n      statusFailureReason\n      traceNumber\n      type\n    }\n  }\n}",
      "variables": {
        "id": "{{originatedAchTransferId}}"
      }
    },
    {
      "name": "InitiateTransferBetweenFinancialAccounts",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation InitiateTransferBetweenFinancialAccounts($input: InitiateTransferBetweenFinancialAccountsInput!) {\n  initiateTransferBetweenFinancialAccounts(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      amount {\n        currencyCode\n        value\n      }\n      createdAt\n      id\n      memo\n      purpose\n      status\n      statusReason\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "currencyCode": "USD",
            "value": 1100
          },
          "memo": "JLK to XYZ Corp",
          "purpose": "GENERAL",
          "toFinancialAccountId": "TO_FINANCIAL_ACCOUNT_ID",
          "fromFinancialAccountId": "FROM_FINANCIAL_ACCOUNT_ID"
        }
      }
    },
    {
      "name": "TransferFromFundingToCardAccount",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation TransferFromFundingToCardAccount($input: InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput!) {\n  initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      status\n      memo\n      createdAt\n      amount {\n        value\n        currencyCode\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "fromFinancialAccountId": "PRODUCT_FUNDING_ACCOUNT",
          "toFinancialAccountId": "CARD_ACCOUNT",
          "amount": {
            "value": "50000",
            "currencyCode": "USD"
          },
          "memo": "Repayment - 12/18/24"
        }
      }
    },
    {
      "name": "TransferFromPaymentCardToProductFunding",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation TransferFromPaymentCardToProductFunding($input: InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountInput!) {\n  initiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccount(input: $input) {\n    ... on InterFinancialAccountTransfer {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "fromFinancialAccountId": "PRODUCT_FUNDING_ACCOUNT",
          "toFinancialAccountId": "CARD_FUNDING_ACCOUNT",
          "amount": {
            "value": "50000",
            "currencyCode": "USD"
          },
          "memo": "Card Funding"
        }
      }
    },
    {
      "name": "CheckAccountTransferStatus",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query CheckAccountTransferStatus($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on InterFinancialAccountTransfer {\n      id\n      status\n      statusReason\n    }\n  }\n}",
      "variables": {
        "id": "TRANSFER_ID"
      }
    },
    {
      "name": "SimulateDeposit",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateDeposit($input: SimulateDepositInput!) {\n  simulateDeposit(input: $input) {\n    ...on Transfer {\n      id\n      status\n      createdAt\n      updatedAt\n      amount {\n        value\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        financialAccount {\n          id\n        }\n        debitBalance {\n          value\n        }\n        creditBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              financialEvent {\n                ... on Transfer {\n                  id\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ...on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "toFinancialAccountId": "FINANCIAL_ACCOUNT_ID",
          "source": "WIRE",
          "memo": "Initial Card Funding",
          "amount": {
            "value": 50000000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderSendToPrinter",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation simulatePhysicalPaymentCardOrderSendToPrinter\n($input: SimulatePhysicalPaymentCardSendToPrinterInput!) {\n  simulatePhysicalPaymentCardOrderSendToPrinter(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderApproval",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation simulatePhysicalPaymentCardOrderApproval($input: SimulatePhysicalPaymentCardApprovalInput!) {\n  simulatePhysicalPaymentCardOrderApproval(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderShipmentFailed",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation simulatePhysicalPaymentCardOrderShipmentFailed($input: SimulatePhysicalPaymentCardShipmentFailedInput!) {\n  simulatePhysicalPaymentCardOrderShipmentFailed(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "simulatePhysicalPaymentCardOrderShipped",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation simulatePhysicalPaymentCardOrderShipped\n($input: SimulatePhysicalPaymentCardShippedInput!) {\n  simulatePhysicalPaymentCardOrderShipped(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}",
          "trackingNumber": "{{$guid}}",
          "actualShipDate": "2024-02-12"
        }
      }
    },
    {
      "name": "SimulatePhysicalCardGroupOrderSendToPrinter",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulatePhysicalCardGroupOrderSendToPrinter(\n  $input: SimulatePhysicalCardGroupOrderSendToPrinterInput!\n) {\n  simulatePhysicalCardGroupOrderSendToPrinter(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "{{physicalCardGroupOrderId}}"
        }
      }
    },
    {
      "name": "SimulatePhysicalCardGroupOrderShipmentFailed",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulatePhysicalCardGroupOrderShipmentFailed(\n  $input: SimulatePhysicalCardGroupOrderShipmentFailedInput!\n) {\n  simulatePhysicalCardGroupOrderShipmentFailed(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "{{physicalCardGroupOrderId}}"
        }
      }
    },
    {
      "name": "SimulatePhysicalCardGroupOrderApproval",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulatePhysicalCardGroupOrderApproval(\n  $input: SimulatePhysicalCardGroupOrderApprovalInput!\n) {\n  simulatePhysicalCardGroupOrderApproval(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "{{physicalCardGroupOrderId}}"
        }
      }
    },
    {
      "name": "SimulatePhysicalCardGroupOrderShipped",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulatePhysicalCardGroupOrderShipped(\n  $input: SimulatePhysicalCardGroupOrderShippedInput!\n) {\n  simulatePhysicalCardGroupOrderShipped(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "{{physicalCardGroupOrderId}}",
          "trackingNumber": "1Z1111110311111111",
          "actualShipDate": "2024-02-12"
        }
      }
    },
    {
      "name": "CreatePhysicalCardGroupOrder",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreatePhysicalCardGroupOrder(\n  $input: CreatePhysicalCardGroupOrderInput!\n) {\n  createPhysicalCardGroupOrder(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe",
              "suffix": "Sr",
              "title": "Mr"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "APT 2",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "courier": {
            "method": "USPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "requestedShipDate": "2023-08-03"
        }
      }
    },
    {
      "name": "OrderPhysicalPaymentCardForGroup",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation OrderPhysicalPaymentCardForGroup(\n  $input: OrderPhysicalPaymentCardForGroupInput!\n) {\n  orderPhysicalPaymentCardForGroup(input: $input) {\n    __typename\n    ... on PhysicalPaymentCardOrder {\n      id\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "groupOrderId": "{{physicalCardGroupOrderId}}",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe",
              "suffix": "Sr",
              "title": "Mr"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "APT 2",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "JOHN D DOE",
              "line2": "line 2"
            }
          }
        }
      }
    },
    {
      "name": "CompletePhysicalCardGroupOrder",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation CompletePhysicalCardGroupOrder(\n  $input: CompletePhysicalCardGroupOrderInput!\n) {\n  completePhysicalCardGroupOrder(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "{{physicalCardGroupOrderId}}"
        }
      }
    },
    {
      "name": "CancelPhysicalCardGroupOrder",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation CancelPhysicalCardGroupOrder($input: CancelPhysicalCardGroupOrderInput!) {\n  cancelPhysicalCardGroupOrder(input: $input) {\n    __typename\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "groupOrderId": "GROUP_ORDER_ID"
        }
      }
    },
    {
      "name": "GetPhysicalCardGroupOrdersForProduct",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetPhysicalCardGroupOrdersForProduct(\n  $cardProductId: ID!\n  $firstGroupOrders: Int\n) {\n  node(id: $cardProductId) {\n    ... on CardProduct {\n      __typename\n      id\n      name\n      usage\n      groupOrders(first: $firstGroupOrders) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            cardCount\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "cardProductId": "CARD_PRODUCT_ID",
        "firstGroupOrders": 1
      }
    },
    {
      "name": "GetPhysicalPaymentCardGroupOrder",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetPhysicalPaymentCardGroupOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalCardGroupOrder {\n      id\n      cardProductId\n      cardCount\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n        deliveryDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n        senderDetails {\n          name {\n            givenName\n            middleName\n            familyName\n            suffix\n            title\n          }\n          companyName\n          address {\n            streetAddress\n            extendedAddress\n            postalCode\n            region\n            locality\n            countryCodeAlpha3\n          }\n        }\n      }\n      orderState {\n        status\n      }\n\t\t\tphysicalPaymentCardOrders (first: 1) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\tendCursor\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\tid\n\t\t\t\t\t\torderState {\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "GROUP_ORDER_ID"
      }
    },
    {
      "name": "ValidateAddress",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "fragment AddressFragment on Address {\n    streetAddress\n    extendedAddress\n    locality\n    region\n    postalCode\n    countryCodeAlpha3\n}\n\nfragment AddressValidatedResultTokenFragment on ValidatedAddressToken {\n    id\n    createdAt\n    labels\n    provided {\n        ... AddressFragment\n    }\n    standardized {\n        ... AddressFragment\n    }\n}\n\nmutation ValidateAddress($input: ValidateAddressInput!) {\n    validateAddress(input: $input) {\n        ... on AddressValidationResult {\n            outcome {\n                ... on AddressValidationOutcome {\n                    ... on AddressValidatedResult {\n                        token {\n                            ... AddressValidatedResultTokenFragment\n                        }\n                    }\n                }\n                ... on AddressValidatedWithChangesResult {\n                    componentsChanged\n                    token {\n                        ... AddressValidatedResultTokenFragment\n                    }\n                }\n                ... on AddressIncompleteResult {\n                    componentsMissing\n                    provided {\n                        ... AddressFragment\n                    }\n                }\n                ... on AddressInvalidResult {\n                    componentsInvalid\n                    provided {\n                        ... AddressFragment\n                    }\n                }\n            }\n        }\n        ... on UserError {\n            errors {\n                code\n                description\n                errorPath\n            }\n        }\n    }\n}",
      "variables": {
        "input": {
          "address": {
            "streetAddress": "642 Harrison St",
            "extendedAddress": "Suite 100",
            "locality": "San Francisco",
            "region": "CA",
            "postalCode": "94107",
            "countryCodeAlpha3": "USA"
          },
          "idempotencyKey": "{{$guid}}"
        }
      }
    },
    {
      "name": "OrderPhysicalCardWithValidatedAddress",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation OrderPhysicalCardWithValidatedAddress($input: OrderPhysicalPaymentCardWithValidatedAddressInput!) {\n    orderPhysicalPaymentCardWithValidatedAddress(input: $input) {\n        ... on PhysicalPaymentCardOrder {\n            id\n            createdAt\n            orderState {\n                ... on PaymentCardOrderStateDetail {\n                    status\n                }\n            }\n            paymentCard {\n                id\n                last4\n            }\n        }\n        ... on UserError {\n            errors {\n                code\n                description\n                errorPath\n            }\n        }\n    }\n}",
      "variables": {
        "input": {
          "cardPersonalization": {
            "textLines": {
              "line1": "John Smith",
              "line2": null
            }
          },
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "deliveryDetails": {
            "companyName": "Test",
            "name": {
              "givenName": "John",
              "familyName": "Smith"
            },
            "validatedAddressId": "{{validatedAddressToken}}"
          },
          "idempotencyKey": "{{$guid}}",
          "paymentCardId": "{{paymentCardId}}",
          "requestedShipDate": "2024-06-21"
        }
      }
    },
    {
      "name": "CreatePhysicalCardGroupOrderWithValidatedAddress",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreatePhysicalCardGroupOrderWithValidatedAddress($input: CreatePhysicalCardGroupOrderWithValidatedAddressInput!) {\n    createPhysicalCardGroupOrderWithValidatedAddress(input: $input) {\n        ... on PhysicalCardGroupOrder {\n            id\n            createdAt\n            orderState {\n                status\n            }\n            cardCount\n        }\n    }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "courier": {
            "method": "UPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "deliveryDetails": {
            "companyName": "Test",
            "name": {
              "givenName": "John",
              "familyName": "Smith"
            },
            "validatedAddressId": "{{validatedAddressToken}}"
          },
          "idempotencyKey": "{{$guid}}",
          "requestedShipDate": "2024-06-21"
        }
      }
    },
    {
      "name": "OrderPhysicalPaymentCard",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation OrderPhysicalPaymentCard($input: OrderPhysicalPaymentCardInput!) {\n  orderPhysicalPaymentCard(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}",
          "deliveryDetails": {
            "name": {
              "givenName": "John",
              "middleName": "D",
              "familyName": "Doe"
            },
            "companyName": "Highnote",
            "address": {
              "streetAddress": "123 Main St",
              "extendedAddress": "",
              "postalCode": "60654",
              "locality": "Chicago",
              "region": "IL",
              "countryCodeAlpha3": "USA"
            }
          },
          "requestedShipDate": "2024-07-20",
          "courier": {
            "method": "USPS_GROUND",
            "signatureRequiredOnDelivery": false
          },
          "cardPersonalization": {
            "textLines": {
              "line1": "John Doe"
            }
          }
        }
      }
    },
    {
      "name": "FindPhysicalPaymentCardOrder",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindPhysicalPaymentCardOrder($id: ID!) {\n  node(id: $id) {\n    ... on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      paymentCardShipment {\n        courier {\n          method\n          signatureRequiredOnDelivery\n          tracking {\n            trackingNumber\n            actualShipDateLocal\n          }\n        }\n        requestedShipDate\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "id": "{{physicalPaymentCardOrderId}}"
      }
    },
    {
      "name": "CancelPhysicalPaymentCardOrder",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation CancelPhysicalPaymentCardOrder($input: CancelPhysicalPaymentCardOrderInput!) {\n  cancelPhysicalPaymentCardOrder(input: $input) {\n    __typename\n    ...on PhysicalPaymentCardOrder {\n      id\n      orderState {\n        status\n      }\n      stateHistory {\n        previousStatus\n        newStatus\n        createdAt\n      }\n      paymentCard {\n        id\n      }\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "physicalPaymentCardOrderId": "{{physicalPaymentCardOrderId}}"
        }
      }
    },
    {
      "name": "AddWebhookNotificationTarget",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input: $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "name": "My Target",
          "uri": "<URI>",
          "subscriptions": [
            "PAYMENT_CARD_ACTIVATED",
            "AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_APPROVED",
            "CARD_PRODUCT_APPLICATION_IN_REVIEW",
            "CARD_PRODUCT_APPLICATION_MANUAL_REVIEW",
            "CARD_PRODUCT_APPLICATION_DENIED",
            "CARD_PRODUCT_APPLICATION_CLOSED",
            "PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED",
            "PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED"
          ]
        }
      }
    },
    {
      "name": "GetAllWebhookNotificationTargets",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\tid\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\tnode {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\tsubscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    {
      "name": "DeactivateNotificationTarget",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input: $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    {
      "name": "ActivateNotificationTarget",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input: ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n",
      "variables": {
        "input": {
          "targetId": "<ID>"
        }
      }
    },
    {
      "name": "GetWebhookNotificationTarget",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\thttpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    {
      "name": "GetNotificationTargetDeliveryAttempts",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n            createdAt\n            event {\n              name\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "WEBHOOK_NOTIFICATION_TARGET_ID"
      }
    },
    {
      "name": "AddSubscriptionsToNotificationTarget",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    {
      "name": "RemoveSubscriptionsFromNotificationTarget",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!) {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "targetId": "WEBHOOK_NOTIFICATION_TARGET_ID",
          "subscriptions": [
            "ACCOUNT_STATUS_CLOSED"
          ]
        }
      }
    },
    {
      "name": "GetAllNotificationEvents",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetAllNotificationEvents($after: String, $first: Int) {\n\tnotificationEvents(after: $after, first: $first) {\n\t\tedges {\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t\tnode {\n            __typename\n\t\t\t\t\t\t... on PaymentCardTransactionDispute {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\tchargebacks {\n                id, \n                status, \n                dispute {\n                  id\n                }, \n                creditStatus\n              }\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on PaymentCardTransactionChargeback {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tcreditStatus\n\t\t\t\t\t\t\tdispute {\n                id,\n                status,\n                amount { \n                  value\n\t\t\t\t\t\t\t  }\n              }\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "first": 150
      }
    },
    {
      "name": "GetNotificationEvent",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetNotificationEvent($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tcreatedAt\n\t\t\texpiresAt\n\t\t\tname\n\t\t\tnode {\n\t\t\t\t__typename\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "id": "<ID>"
      }
    },
    {
      "name": "ReplayNotificationEvent",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation ReplayNotificationEvent($input: ReplayNotificationEventInput!) {\n  replayNotificationEvent(input: $input) {\n    __typename\n    ... on NotificationEvent {\n      __typename\n      id\n\t  createdAt\n\t  expiresAt\n      node {\n        ... on AuthorizationEvent {\n          id\n          approvedAmount {\n            value\n          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n\n",
      "variables": {
        "input": {
          "notificationEventId": "<ID>"
        }
      }
    },
    {
      "name": "GetDeliveryAttemptsForNotificationEvent",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetDeliveryAttemptsForNotificationEvent($id: ID!, $after: String, $first: Int) {\n\tnode(id: $id) {\n\t\t... on NotificationEvent {\n\t\t\t__typename\n\t\t\tid\n\t\t\tdeliveryAttempts(first: $first, after: $after) {\n\t\t\t\t__typename\n\t\t\t\tpageInfo {\n\t\t\t\t\t__typename\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\tedges {\n\t\t\t\t\t__typename\n\t\t\t\t\tcursor\n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t  httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\turi\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
      "variables": {
        "id": "<ID>",
        "first": 10
      }
    },
    {
      "name": "GetNotificationEventsFilteredByName",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetNotificationEventsFilteredByName($filterBy: NotificationEventsFilterInput!, $first: Int) {\n\tnotificationEvents(filterBy: $filterBy, first: $first) {\n\t\t__typename\n\t\tpageInfo {\n\t\t\tstartCursor\n\t\t\tendCursor\n\t\t\thasNextPage\n\t\t\thasPreviousPage\n\t\t}\n\t\tedges {\n\t\t\tcursor\n\t\t\t__typename\n\t\t\tnode {\n\t\t\t\t... on NotificationEvent {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tcreatedAt\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
      "variables": {
        "filterBy": {
          "name": [
            "INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED"
          ]
        },
        "first": 20
      }
    },
    {
      "name": "InitiateOrganizationReport",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation InitiateOrganizationReport($input: InitiateOrganizationReportInput!) {\n  initiateOrganizationReport(input: $input) {\n    __typename\n    ... on Report {\n      id\n      download {\n        url\n      }\n    }\n    ... on UserError {\n      errors {\n        code\n        path\n        description\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "reportType": "LEDGER_ENTRY",
          "parameters": {
            "between": {
              "start": "2023-01-01",
              "end": "2024-03-02"
            }
          }
        }
      }
    },
    {
      "name": "GetReport",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetReport($id: ID!) {\n  node(id: $id) {\n    ... on Report {\n      download {\n        url\n      }\n    }\n  }\n}",
      "variables": {
        "id": "REPORT_ID"
      }
    },
    {
      "name": "ReportUsage",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query ReportUsage {\n  reportUsage {\n    limit\n    limitRemaining\n    periodEnd\n    reportType\n  }\n}",
      "variables": {}
    },
    {
      "name": "Reports",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query Reports($first: Int, $after: String, $input: ReportFilterInput) {\n  reports(first: $first, after: $after, filterBy: $input) {\n    ... on ReportConnection {\n      edges {\n        ... on ReportEdge {\n          node {\n            __typename\n            id\n            status\n            reportType\n            download {\n              url\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "status": {
            "includes": [
              "COMPLETED"
            ]
          }
        }
      }
    },
    {
      "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statements {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    {
      "name": "GetCurrentBillingStatementByFinancialAccountID",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        statementEntries {\n          edges {\n            node {\n              ledgerEntry {\n                id\n                __typename\n                financialEvent {\n                  __typename\n                  ... on FeeTransferEvent {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n        tertiaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingTertiaryCreditBalance {\n          value\n        }\n        startingTertiaryDebitBalance {\n          value\n        }\n        endingTertiaryCreditBalance {\n          value\n        }\n        endingTertiaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindFinancialAccount",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "fragment statement on ConsumerRevolvingCardFinancialAccountStatement {\n  id\n  __typename\n  periodStart\n  periodEnd\n  openedAt\n  closedAt\n  paymentDueOn\n  pastDueAmount {\n    value\n    currencyCode\n  }\n  periodMinimumPaymentDue {\n    value\n    currencyCode\n  }\n  primaryLedger {\n    id\n    name\n    normalBalance\n    creditBalance {\n      value\n      currencyCode\n    }\n    debitBalance {\n      value\n      currencyCode\n    }\n  }\n  startingPrimaryCreditBalance {\n    value\n    currencyCode\n  }\n  startingPrimaryDebitBalance {\n    value\n    currencyCode\n  }\n  endingPrimaryCreditBalance {\n    value\n    currencyCode\n  }\n  endingPrimaryDebitBalance {\n    value\n    currencyCode\n  }\n  periodInterestCharges {\n    value\n    currencyCode\n  }\n  periodPurchaseCreditPlan {\n    balanceType\n    balanceSubjectToInterestAmount {\n      value\n      currencyCode\n    }\n    interestChargedAmount {\n      value\n      currencyCode\n    }\n    apr\n  }\n  payOffWarning {\n    paymentCycles {\n      payOffType\n      paymentDetails {\n        periodPayment {\n          value\n          currencyCode\n        }\n        estimatedTotal {\n          value\n          currencyCode\n        }\n        estimatedPayOffDays\n      }\n    }\n  }\n  secondaryLedger {\n    id\n    name\n    normalBalance\n    creditBalance {\n      value\n      currencyCode\n    }\n    debitBalance {\n      value\n      currencyCode\n    }\n  }\n  startingSecondaryCreditBalance {\n    value\n    currencyCode\n  }\n  startingSecondaryDebitBalance {\n    value\n    currencyCode\n  }\n  endingSecondaryCreditBalance {\n    value\n    currencyCode\n  }\n  endingSecondaryDebitBalance {\n    value\n    currencyCode\n  }\n}\n\nquery FindFinancialAccount(\n  $id: ID!\n  $filterStatementsBy: FinancialAccountStatementFilterInput\n) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      id\n      activeBillingCycleConfiguration {\n        billingCycleStartDayOfMonth\n        billingCycleEndDayOfMonth\n        from\n        paymentDueDayOfMonth\n      }\n      createdAt\n      statements(first: 10, filterBy: $filterStatementsBy) {\n        edges {\n          node {\n            ...statement\n          }\n          cursor\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "LookupStatement",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query LookupStatement($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccountStatement {\n      id\n      __typename\n      periodStart\n      periodEnd\n      openedAt\n      closedAt\n      primaryLedger {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        __typename\n      }\n      startingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      secondaryLedger {\n        id\n        name\n        normalBalance\n        __typename\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n      }\n      startingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      tertiaryLedger {\n        id\n        name\n        normalBalance\n        __typename\n      }\n      startingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      statementEntries(first: 20) {\n        edges {\n          cursor\n          node {\n            __typename\n            postDate\n            creditAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            debitAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            primaryCreditBalance {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            primaryDebitBalance {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            ledgerEntry {\n              __typename\n              id\n              memo\n              creditBalanceAtLedgerEntry {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              debitBalanceAtLedgerEntry {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              amount {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              financialEvent {\n                __typename\n                ... on FeeTransferEvent {\n                  id\n                }\n                ... on Node {\n                  id\n                  __typename\n                }\n                ... on AuthorizationAndClearEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on AuthorizationEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on ClearingEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IssuerPreliminaryAuthorizationEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on ReversalEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on CreditFundsACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on DebitFundsACHTransferEvent {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureDepositTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on PayrollACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    ... on NonVerifiedExternalUSFinancialBankAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IntegratorInitiatedFundsWithdrawalACHTransferEvent {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  toFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    ... on NonVerifiedExternalUSFinancialBankAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureDepositACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureCardBalanceRepaymentACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on InterFinancialAccountTransfer {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  purpose\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  transferActivityType\n                  __typename\n                }\n              }\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n      ... on SecuredDepositCommercialCreditCardFinancialAccountStatement {\n        __typename\n        paymentDueOn\n        periodFeesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchasesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodRefundsAndPaymentsAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n      }\n      ... on CreditPayInFullCardFinancialAccountStatement {\n        __typename\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        repaymentHistory {\n          appliedAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          sourceRepayment {\n            createdAt\n            updatedAt\n            memo\n            references\n            repaymentMethod\n            repaymentType\n            amount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n        periodFeesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchasesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodRefundsAndPaymentsAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n      }\n      ... on ConsumerRevolvingCardFinancialAccountStatement {\n        __typename\n        pastDueAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        payOffWarning {\n          paymentCycles {\n            __typename\n            payOffType\n            paymentDetails {\n              estimatedPayOffDays\n              estimatedTotal {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              periodPayment {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              __typename\n            }\n          }\n          __typename\n        }\n        paymentDueOn\n        periodFeesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodInterestCharges {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodMinimumPaymentDue {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchasesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchaseCreditPlan {\n          balanceType\n          balanceSubjectToInterestAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          interestChargedAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          apr\n          __typename\n        }\n        periodRefundsAndPaymentsAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        repaymentHistory {\n          appliedAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          sourceRepayment {\n            createdAt\n            updatedAt\n            memo\n            references\n            repaymentMethod\n            repaymentType\n            amount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n      ... on ConsumerChargeCardFinancialAccountStatement {\n        __typename\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodFeesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchasesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodRefundsAndPaymentsAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n      }\n    }\n    __typename\n  }\n}",
      "variables": {
        "id": "STATEMENT_ID"
      }
    },
    {
      "name": "ConsumerRevolvingCardFinancialAccountStatement",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query ConsumerRevolvingCardFinancialAccountStatement($nodeId: ID!) {\n  node(id: $nodeId) {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n      id\n      periodStart\n      periodEnd\n      openedAt\n      closedAt\n      startingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      startingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      endingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      endingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      startingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      startingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      endingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      endingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      startingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      startingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      endingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      endingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      periodPurchasesAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      periodFeesAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      periodFeeCredit {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      periodInterestCharges {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      periodInterestCredit {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      periodRefundsAndPaymentsAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      endingCreditLimit {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      paymentDueOn\n      pastDueAmount {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      periodPurchaseCreditPlan {\n        balanceType\n        balanceSubjectToInterestAmount {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        interestChargedAmount {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        apr\n      }\n      payOffWarning {\n        paymentCycles {\n          payOffType\n          paymentDetails {\n            estimatedPayOffDays\n            estimatedTotal {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            periodPayment {\n              value\n              currencyCode\n              decimalPlaces\n            }\n          }\n        }\n      }\n      periodMinimumPaymentDue {\n        value\n        currencyCode\n        decimalPlaces\n      }\n      statementEntries {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            creditAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            debitAmount {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            primaryCreditBalance {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            primaryDebitBalance {\n              value\n              currencyCode\n              decimalPlaces\n            }\n            postDate\n            ledgerEntry {\n              id\n              memo\n              createdAt\n              financialEvent {\n                __typename\n              }\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      repaymentHistory {\n        statement {\n          id\n          periodStart\n          periodEnd\n          openedAt\n          closedAt\n          createdAt\n          updatedAt\n        }\n        sourceRepayment {\n          amount {\n            value\n            currencyCode\n            decimalPlaces\n          }\n          repaymentMethod\n          repaymentType\n          memo\n          references\n          createdAt\n          updatedAt\n        }\n        appliedAmount {\n          value\n          currencyCode\n          decimalPlaces\n        }\n      }\n      accumulatedAccountInterestAndFees {\n        yearToDateAccumulatedInterestDebit {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        yearToDateAccumulatedInterestCredit {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        yearToDateAccumulatedFeesDebit {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        yearToDateAccumulatedFeesCredit {\n          value\n          currencyCode\n          decimalPlaces\n        }\n      }\n      createdAt\n      updatedAt\n      primaryLedger {\n        id\n        name\n        description\n        normalBalance\n        asOf\n      }\n      secondaryLedger {\n        id\n        name\n        description\n        normalBalance\n        asOf\n      }\n      tertiaryLedger {\n        id\n        name\n        description\n        normalBalance\n        asOf\n      }\n    }\n  }\n}",
      "variables": {
        "nodeId": "{{statementId}}"
      }
    },
    {
      "name": "GetLatestClosedBillingStatementByFinancialAccountID",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query GetLatestClosedBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... latestClosedConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment latestClosedConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  latestClosedStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        periodRefundsAndPaymentsAmount {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodPurchasesAmount {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodFeesAmount {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodPurchaseCreditPlan {\n            balanceType\n            balanceSubjectToInterestAmount {\n                value\n                currencyCode\n                decimalPlaces\n            }\n            interestChargedAmount {\n                value\n                currencyCode\n                decimalPlaces\n            }\n        }\n        periodInterestCharges {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodMinimumPaymentDue {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        pastDueAmount {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        endingCreditLimit {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n        tertiaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingTertiaryCreditBalance {\n          value\n        }\n        startingTertiaryDebitBalance {\n          value\n        }\n        endingTertiaryCreditBalance {\n          value\n        }\n        endingTertiaryDebitBalance {\n          value\n        }\n        payOffWarning {\n          paymentCycles {\n            payOffType\n            paymentDetails {\n              estimatedPayOffDays\n              estimatedTotal {\n                value\n                currencyCode\n                decimalPlaces\n              }\n              periodPayment {\n                value\n                currencyCode\n                decimalPlaces\n              }  \n            }\n          }    \n        }\n        statementEntries {\n          edges {\n            node {\n              ... on FinancialAccountStatementEntry {\n                __typename\n                postDate\n                creditAmount {\n                    value\n                }\n                debitAmount {\n                    value\n                }\n                primaryCreditBalance {\n                    value\n                }\n                primaryDebitBalance {\n                    value\n                }\n                ledgerEntry {\n                  id\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }    \n            }\n            cursor\n          }\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }    \n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindFinancialAccountActivities",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindFinancialAccountActivities($id: ID!, $firstActivities: Int, $filterBy: FinancialAccountActivitiesFilterInput, $activitiesAfterCursor: String) {\n  node(id: $id) {\n    __typename\n    id\n    ... on FinancialAccount {\n      __typename\n      id\n      financialAccountActivities(\n        first: $firstActivities\n        filterBy: $filterBy\n        after: $activitiesAfterCursor\n      ) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          __typename\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            sign\n            isComplete\n            pendingAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            postedAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            createdAt\n            source {\n              __typename\n              ... on DebitTransaction {\n                __typename\n                id\n                transactionEvents {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on BalanceInquiryEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on VerificationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                }\n              }\n              ... on CreditTransaction {\n                __typename\n                id\n                transactionEvents {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on BalanceInquiryEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on VerificationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                }\n              }\n              ... on FeeTransferEvent {\n                id\n                feeTransfer {\n                  __typename\n                  ... on ChargedFeeTransfer {\n                    cardProduct {\n                      id\n                      name\n                      __typename\n                    }\n                    feeActivityType\n                    feeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    feeChargeActvity {\n                      __typename\n                      ... on PhysicalPaymentCardOrder {\n                        paymentCard {\n                          id\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on PaymentCard {\n                        id\n                        __typename\n                      }\n                      ... on FinancialAccount {\n                        id\n                        __typename\n                      }\n                      ... on SecureDepositACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on SecureCardBalanceRepaymentACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on IntegratorInitiatedFundsDepositACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on AuthorizationAndClearEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on ClearingEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on BalanceInquiryEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    feeChargeRule {\n                      name\n                      __typename\n                    }\n                    originatingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    receivingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureFeeTransferStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureFeeTransferStatus {\n                        status\n                        reasonDetails {\n                          reason\n                          type\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    transferDate\n                    transferedFeeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on ReversedFeeTransfer {\n                    originatingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    receivingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    sourceFeeTransferEvent {\n                      id\n                      feeTransfer {\n                        __typename\n                        ... on ChargedFeeTransfer {\n                          feeActivityType\n                          feeChargeActvity {\n                            __typename\n                            ... on PhysicalPaymentCardOrder {\n                              paymentCard {\n                                id\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on PaymentCard {\n                              id\n                              __typename\n                            }\n                            ... on FinancialAccount {\n                              id\n                              __typename\n                            }\n                            ... on SecureDepositACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on SecureCardBalanceRepaymentACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on IntegratorInitiatedFundsDepositACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on AuthorizationAndClearEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on ClearingEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on BalanceInquiryEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                          }\n                          __typename\n                        }\n                      }\n                      __typename\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureFeeTransferStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureFeeTransferStatus {\n                        status\n                        reasonDetails {\n                          reason\n                          type\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    transferDate\n                    transferedFeeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on InterFinancialAccountTransfer {\n                id\n                fromFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                transferActivityType\n                __typename\n              }\n              ... on CreditFunds {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on DebitFunds {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                fromFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on SecureDeposit {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on PayrollTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on SecureDepositACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on SecureCardBalanceRepaymentACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                fromFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on IntegratorInitiatedFundsDepositACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindFinancialAccountLedgerActivity",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindFinancialAccountLedgerActivity($id: ID!, $first: Int, $filterBy: LedgerEntriesFilterInput, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      __typename\n      id\n      ledgers(ledgerNames: [CASH, OUTSTANDING_BALANCE_PAYABLE]) {\n        id\n        normalBalance\n        asOf\n        name\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        ledgerEntries(first: $first, filterBy: $filterBy, after: $after) {\n          ... on LedgerEntryConnection {\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n              hasPreviousPage\n              __typename\n            }\n            edges {\n              cursor\n              __typename\n              node {\n                __typename\n                id\n                memo\n                createdAt\n                creditBalanceAtLedgerEntry {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                debitBalanceAtLedgerEntry {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                financialEvent {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on CreditFundsACHTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on DebitFundsACHTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on SecureDepositTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on PayrollACHTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on IntegratorInitiatedFundsWithdrawalACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on SecureDepositACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on SecureCardBalanceRepaymentACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on InterFinancialAccountTransfer {\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    purpose\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    transferActivityType\n                    __typename\n                  }\n                  ... on FeeTransferEvent {\n                    feeTransfer {\n                      __typename\n                      ... on ChargedFeeTransfer {\n                        feeActivityType\n                        __typename\n                      }\n                      ... on ReversedFeeTransfer {\n                        sourceFeeTransferEvent {\n                          feeTransfer {\n                            __typename\n                            ... on ChargedFeeTransfer {\n                              feeActivityType\n                              __typename\n                            }\n                          }\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    __typename\n                  }\n                  ... on ManualAdjustmentEvent {\n                    adjustmentActivityType\n                    __typename\n                  }\n                  ... on CreditCardTransferEvent {\n                    accountingDirection\n                    balanceType\n                    interestDetails {\n                      apr\n                      __typename\n                    }\n                    statement {\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on DisbursementTransferEvent {\n                    id\n                    eventType\n                    __typename\n                  }\n                  ... on WireTransfer {\n                    id\n                    type\n                    __typename\n                  }\n                  ... on RewardPointsTransfer {\n                    id\n                    rewardPointsValue {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    rewardPointsAmount {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    createdAt\n                    updatedAt\n                    status {\n                      ... on RewardPointsTransferSuccessStatus {\n                        status\n                        __typename\n                      }\n                      ... on RewardPointsTransferFailureStatus {\n                        status\n                        statusReasonCode\n                        __typename\n                      }\n                      __typename\n                    }\n                    source\n                    externalTransactionIdentifier\n                    activity\n                    memo\n                    __typename\n                  }\n                }\n              }\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      delinquency {\n        __typename\n        totalAmount {\n          value\n          currencyCode\n        }\n        numberOfCycles\n        totalDaysDelinquent\n        delinquencyStartedOn\n        currentDelinquentCycles {\n          daysDelinquent\n          createdAt\n          updatedAt\n          amount {\n            value\n            currencyCode\n          }\n          totalRepaymentsApplied {\n            value\n            currencyCode\n          }\n          state\n          statement {\n            ... on ConsumerRevolvingCardFinancialAccountStatement {\n              id\n              periodStart\n              periodEnd\n              openedAt\n              closedAt\n              primaryLedger {\n                debitBalance {\n                  value\n                  currencyCode\n                }\n                creditBalance {\n                  value\n                  currencyCode\n                }\n                normalBalance\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "FINANCIAL_ACCOUNT_ID",
          "numberOfCyclesToShiftCurrentStatementBackward": 3
        }
      }
    },
    {
      "name": "CreateRecurringACHTransfer",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "OUTSTANDING_BALANCE"
          },
          "frequency": "MONTHLY",
          "transferDayOfMonth": 3,
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "Test 1234",
            "individualIdentificationNumber": "Test 12345",
            "individualName": "Test 123456"
          },
          "fromFinancialAccountId": "{{externalFinancialAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}"
        }
      }
    },
    {
      "name": "CreateOneTimeACHTransfer",
      "type": "mutation",
      "required": true,
      "category": "consumer_credit",
      "graphql": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "transferAmount": {
              "value": 2500,
              "currencyCode": "USD"
            }
          },
          "transferDate": "2024-12-11",
          "transferAgreementConsent": {
            "authorizedPersonId": "{{accountHolderId}}",
            "consentTimestamp": "2024-12-11",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Lucy MacLean"
          },
          "fromFinancialAccountId": "{{externalFinancialAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}"
        }
      }
    },
    {
      "name": "SimulateSingleStepAuthAndClear",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "cardId": "{{paymentCardId}}",
          "transactionProcessingType": "CASH",
          "pointOfServiceDetails": {
            "isCardPresent": true,
            "isCardHolderPresent": true
          },
          "merchantDetails": {
            "category": "MANUAL_CASH_DISBURSE"
          }
        }
      }
    },
    {
      "name": "simulateCreateAndActivateFeeSchedule",
      "type": "mutation",
      "required": false,
      "category": "consumer_credit",
      "graphql": "mutation simulateCreateAndActivateFeeSchedule(\n  $input: SimulateCreateAndActivateFeeScheduleInput!\n) {\n  simulateCreateAndActivateFeeSchedule(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on FeeSchedule {\n      __typename\n      id\n      feeScheduleAssociatedTo {\n        __typename\n        ... on CardProduct {\n          id\n        }\n      }\n      feeConfigurations {\n        id\n        feeActivityType\n        feeChargeRules {\n          id\n          name\n          order\n          value {\n            __typename\n            ... on FixedFeeChargeValue {\n              amount {\n                value\n                currencyCode\n              }\n            }\n            ... on VariableFeeChargeValue {\n              percentage\n            }\n          }\n          conditions {\n            __typename\n            ... on FeeChargeRuleAmountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on AmountFeeCondition {\n                  value {\n                    __typename\n                    ... on AmountFeeConditionValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                      maximumAmount {\n                        value\n                        currencyCode\n                      }\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n            ... on FeeChargeRuleCountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on CountFeeCondition {\n                  value {\n                    __typename\n                    ... on CountFeeConditionValue {\n                      count\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n            ... on FeeChargeRuleAmountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on AmountFeeCondition {\n                  value {\n                    __typename\n                    ... on AmountFeeConditionValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n          }\n        }\n      }\n      activationDate\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "feeConfigurations": [
            {
              "feeActivityType": "CASH_BACK_OTC_FEE",
              "feeAmount": {
                "feeAmount": {
                  "value": 100,
                  "currencyCode": "USD"
                }
              }
            }
          ]
        }
      }
    },
    {
      "name": "FindFeeSchedule",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindFeeSchedule($id: ID!) {\n\tnode(id: $id) {\n\t\t... on FeeSchedule {\n\t\t\t__typename\n\t\t\tid\n\t\t\tfeeScheduleAssociatedTo {\n\t\t\t\t__typename\n\t\t\t\t... on CardProduct {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t\tfeeConfigurations {\n\t\t\t\tid\n\t\t\t\tfeeActivityType\n\t\t\t\tfeeChargeRules {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tvalue {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on FixedFeeChargeValue {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on VariableFeeChargeValue {\n\t\t\t\t\t\t\tpercentage\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconditions {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on FeeChargeRuleAmountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on AmountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on AmountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tmaximumAmount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on FeeChargeRuleCountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on CountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on CountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tcount\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on FeeChargeRuleAmountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on AmountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on AmountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tactivationDate\n\t\t\tstatus\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t}\n\t}\n}",
      "variables": {
        "id": "{{feeScheduleId}}"
      }
    },
    {
      "name": "FindFinancialAccount",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query FindFinancialAccount($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      feeTransferEvents(first: 10) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            feeTransfer {\n              __typename\n              ... on ChargedFeeTransfer {\n                originatingAccount {\n                  id\n                }\n                receivingAccount {\n                  id\n                }\n                cardProduct {\n                  id\n                }\n                feeActivityType\n                feeAmount {\n                  value\n                  currencyCode\n                }\n                transferedFeeAmount {\n                  value\n                  currencyCode\n                }\n                transferDate\n                status {\n                  ... on NonFailureFeeTransferStatus {\n                    status\n                  }\n                  ... on FailureFeeTransferStatus {\n                    status\n                    reasonDetails {\n                      type\n                      reason\n                    }\n                  }\n                }\n                feeChargeRule {\n                  __typename\n                  id\n                  name\n                  value {\n                    __typename\n                    ... on FixedFeeChargeValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                    }\n                    ... on VariableFeeChargeValue {\n                      percentage\n                    }\n                  }\n                  conditions {\n                    __typename\n                    ... on FeeChargeRuleAmountCondition {\n                      id\n                      description\n                      condition {\n                        __typename\n                        ... on AmountFeeCondition {\n                          value {\n                            __typename\n                            ... on AmountFeeConditionValue {\n                              amount {\n                                value\n                                currencyCode\n                              }\n                              maximumAmount {\n                                value\n                                currencyCode\n                              }\n                            }\n                          }\n                          operator\n                        }\n                      }\n                      aggregatedAt\n                      aggregationDuration\n                      createdAt\n                      updatedAt\n                    }\n                    ... on FeeChargeRuleCountCondition {\n                      id\n                      description\n                      condition {\n                        __typename\n                        ... on CountFeeCondition {\n                          value {\n                            __typename\n                            ... on CountFeeConditionValue {\n                              count\n                              maximumCount\n                            }\n                          }\n                          operator\n                        }\n                      }\n                      aggregatedAt\n                      aggregationDuration\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                  createdAt\n                  updatedAt\n                }\n                feeChargeActvity {\n                  __typename\n                  ... on PhysicalPaymentCardOrder {\n                    id\n                  }\n                  ... on PaymentCard {\n                    id\n                  }\n                  ... on FinancialAccount {\n                    id\n                  }\n                  ... on SecureDepositACHTransfer {\n                    id\n                  }\n                  ... on SecureCardBalanceRepaymentACHTransfer {\n                    id\n                  }\n                  ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                    id\n                  }\n                  ... on IntegratorInitiatedFundsDepositACHTransfer {\n                    id\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    id\n                  }\n                  ... on ClearingEvent {\n                    id\n                  }\n                  ... on BalanceInquiryEvent {\n                    id\n                  }\n                }\n              }\n              ... on ReversedFeeTransfer {\n                originatingAccount {\n                  id\n                }\n                receivingAccount {\n                  id\n                }\n                transferedFeeAmount {\n                  value\n                  currencyCode\n                }\n                transferDate\n                status {\n                  ... on NonFailureFeeTransferStatus {\n                    status\n                  }\n                  ... on FailureFeeTransferStatus {\n                    status\n                    reasonDetails {\n                      type\n                      reason\n                    }\n                  }\n                }\n                sourceFeeTransferEvent {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "GetCardProductWithLedgers",
      "type": "query",
      "required": true,
      "category": "consumer_credit",
      "graphql": "query GetCardProductWithLedgers(\n  $cardProductId: ID!\n  $firstLedgerEntries: Int\n  $ledgerEntriesAfterCursor: String\n  $filterBy: AccountHolderFinancialAccountsFilterInput\n) {\n  node(id: $cardProductId) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      accounts(first: 20, filterBy: $filterBy) {\n        __typename\n        pageInfo {\n          __typename\n          endCursor\n          hasNextPage\n          startCursor\n          hasPreviousPage\n        }\n        edges {\n          __typename\n          cursor\n          node {\n             __typename\n            id\n            name\n            createdAt\n            updatedAt\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            ledgers {\n              __typename\n              id\n              normalBalance\n              asOf\n              name\n              creditBalance {\n                value\n                currencyCode\n                __typename\n              }\n              debitBalance {\n                value\n                currencyCode\n                __typename\n              }\n              ledgerEntries(\n                first: $firstLedgerEntries\n                after: $ledgerEntriesAfterCursor\n              ) {\n                __typename\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                  startCursor\n                  endCursor\n                  __typename\n                }\n                edges {\n                  __typename\n                  cursor\n                  node {\n                    id\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "cardProductId": "CARD_PRODUCT_ID",
        "filterBy": {
          "features": {
            "equals": "INCOME_ACCOUNT"
          }
        }
      }
    },
    {
      "name": "ListFeeTransferEvents",
      "type": "query",
      "required": false,
      "category": "consumer_credit",
      "graphql": "query ListFeeTransferEvents(\n  $first: Int\n  $after: String\n  $filterBy: FeeTransferEventFilterInput\n) {\n  feeTransferEvents(first: $first, after: $after, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...feeTransferEvent\n      }\n    }\n  }\n}\nfragment feeTransferEvent on FeeTransferEvent {\n  __typename\n  id\n  feeTransfer {\n    __typename\n    ... on ChargedFeeTransfer {\n      originatingAccount {\n        id\n        accountStatus\n        feeTransferEvents {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              feeTransfer {\n                __typename\n              }\n            }\n          }\n        }\n      }\n      receivingAccount {\n        id\n        accountStatus\n      }\n      cardProduct {\n        id\n        name\n      }\n      feeActivityType\n      feeAmount {\n        value\n        currencyCode\n      }\n      transferedFeeAmount {\n        value\n        currencyCode\n      }\n      transferDate\n      status {\n        __typename\n        ... on NonFailureFeeTransferStatus {\n          status\n        }\n      }\n      feeChargeRule {\n        id\n        name\n        value {\n          __typename\n          ... on FixedFeeChargeValue {\n            amount {\n              value\n              currencyCode\n            }\n          }\n        }\n      }\n      feeChargeActvity {\n        __typename\n        ... on PhysicalPaymentCardOrder {\n          id\n        }\n        ... on PaymentCard {\n          id\n        }\n        ... on FinancialAccount {\n          id\n        }\n        ... on SecureDepositACHTransfer {\n          id\n        }\n        ... on SecureCardBalanceRepaymentACHTransfer {\n          id\n        }\n        ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n          id\n        }\n        ... on IntegratorInitiatedFundsDepositACHTransfer {\n          id\n        }\n        ... on AuthorizationAndClearEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n        ... on ClearingEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n        ... on BalanceInquiryEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n      }\n    }\n    ... on ReversedFeeTransfer {\n      originatingAccount {\n        id\n      }\n      receivingAccount {\n        id\n      }\n      transferedFeeAmount {\n        value\n        currencyCode\n      }\n      transferDate\n      sourceFeeTransferEvent {\n        __typename\n        id\n        ... on FeeTransferEvent {\n          id\n          feeTransfer {\n            __typename\n            ... on ChargedFeeTransfer {\n              originatingAccount {\n                id\n              }\n              feeAmount {\n                value\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 20,
        "filterBy": {
          "cardProductId": {
            "equals": "CARD_PRODUCT_ID"
          },
          "originatingAccountId": {
            "equals": "ACCOUNT_HOLDER_FINANCIAL_ACCOUNT_ID"
          },
          "createDate": {
            "between": {
              "start": "2024-04-01T00:00:00.000Z",
              "end": "2024-05-01T23:59:59.999Z"
            }
          }
        }
      }
    },
    {
      "name": "SimulateSingleStepAuthAndClear",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "amount": {
            "value": 1000,
            "currencyCode": "USD"
          },
          "cardId": "{{paymentCardId}}",
          "transactionProcessingType": "CASH",
          "pointOfServiceDetails": {
            "isCardPresent": true,
            "isCardHolderPresent": true
          },
          "merchantDetails": {
            "category": "MANUAL_CASH_DISBURSE"
          }
        }
      }
    },
    {
      "name": "simulateCreateAndActivateFeeSchedule",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation simulateCreateAndActivateFeeSchedule(\n  $input: SimulateCreateAndActivateFeeScheduleInput!\n) {\n  simulateCreateAndActivateFeeSchedule(input: $input) {\n    __typename\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on FeeSchedule {\n      __typename\n      id\n      feeScheduleAssociatedTo {\n        __typename\n        ... on CardProduct {\n          id\n        }\n      }\n      feeConfigurations {\n        id\n        feeActivityType\n        feeChargeRules {\n          id\n          name\n          order\n          value {\n            __typename\n            ... on FixedFeeChargeValue {\n              amount {\n                value\n                currencyCode\n              }\n            }\n            ... on VariableFeeChargeValue {\n              percentage\n            }\n          }\n          conditions {\n            __typename\n            ... on FeeChargeRuleAmountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on AmountFeeCondition {\n                  value {\n                    __typename\n                    ... on AmountFeeConditionValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                      maximumAmount {\n                        value\n                        currencyCode\n                      }\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n            ... on FeeChargeRuleCountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on CountFeeCondition {\n                  value {\n                    __typename\n                    ... on CountFeeConditionValue {\n                      count\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n            ... on FeeChargeRuleAmountCondition {\n              id\n              description\n              condition {\n                __typename\n                ... on AmountFeeCondition {\n                  value {\n                    __typename\n                    ... on AmountFeeConditionValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                    }\n                  }\n                  operator\n                }\n              }\n              aggregatedAt\n              aggregationDuration\n            }\n          }\n        }\n      }\n      activationDate\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardProductId": "{{cardProductId}}",
          "feeConfigurations": [
            {
              "feeActivityType": "CASH_BACK_OTC_FEE",
              "feeAmount": {
                "feeAmount": {
                  "value": 100,
                  "currencyCode": "USD"
                }
              }
            }
          ]
        }
      }
    },
    {
      "name": "FindFeeSchedule",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query FindFeeSchedule($id: ID!) {\n\tnode(id: $id) {\n\t\t... on FeeSchedule {\n\t\t\t__typename\n\t\t\tid\n\t\t\tfeeScheduleAssociatedTo {\n\t\t\t\t__typename\n\t\t\t\t... on CardProduct {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t\tfeeConfigurations {\n\t\t\t\tid\n\t\t\t\tfeeActivityType\n\t\t\t\tfeeChargeRules {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tvalue {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on FixedFeeChargeValue {\n\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on VariableFeeChargeValue {\n\t\t\t\t\t\t\tpercentage\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconditions {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on FeeChargeRuleAmountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on AmountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on AmountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tmaximumAmount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on FeeChargeRuleCountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on CountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on CountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tcount\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t\t... on FeeChargeRuleAmountCondition {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\tcondition {\n\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t... on AmountFeeCondition {\n\t\t\t\t\t\t\t\t\tvalue {\n\t\t\t\t\t\t\t\t\t\t__typename\n\t\t\t\t\t\t\t\t\t\t... on AmountFeeConditionValue {\n\t\t\t\t\t\t\t\t\t\t\tamount {\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\toperator\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\taggregatedAt\n\t\t\t\t\t\t\taggregationDuration\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tactivationDate\n\t\t\tstatus\n\t\t\tcreatedAt\n\t\t\tupdatedAt\n\t\t}\n\t}\n}",
      "variables": {
        "id": "{{feeScheduleId}}"
      }
    },
    {
      "name": "FindFinancialAccount",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query FindFinancialAccount($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      id\n      feeTransferEvents(first: 10) {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            id\n            feeTransfer {\n              __typename\n              ... on ChargedFeeTransfer {\n                originatingAccount {\n                  id\n                }\n                receivingAccount {\n                  id\n                }\n                cardProduct {\n                  id\n                }\n                feeActivityType\n                feeAmount {\n                  value\n                  currencyCode\n                }\n                transferedFeeAmount {\n                  value\n                  currencyCode\n                }\n                transferDate\n                status {\n                  ... on NonFailureFeeTransferStatus {\n                    status\n                  }\n                  ... on FailureFeeTransferStatus {\n                    status\n                    reasonDetails {\n                      type\n                      reason\n                    }\n                  }\n                }\n                feeChargeRule {\n                  __typename\n                  id\n                  name\n                  value {\n                    __typename\n                    ... on FixedFeeChargeValue {\n                      amount {\n                        value\n                        currencyCode\n                      }\n                    }\n                    ... on VariableFeeChargeValue {\n                      percentage\n                    }\n                  }\n                  conditions {\n                    __typename\n                    ... on FeeChargeRuleAmountCondition {\n                      id\n                      description\n                      condition {\n                        __typename\n                        ... on AmountFeeCondition {\n                          value {\n                            __typename\n                            ... on AmountFeeConditionValue {\n                              amount {\n                                value\n                                currencyCode\n                              }\n                              maximumAmount {\n                                value\n                                currencyCode\n                              }\n                            }\n                          }\n                          operator\n                        }\n                      }\n                      aggregatedAt\n                      aggregationDuration\n                      createdAt\n                      updatedAt\n                    }\n                    ... on FeeChargeRuleCountCondition {\n                      id\n                      description\n                      condition {\n                        __typename\n                        ... on CountFeeCondition {\n                          value {\n                            __typename\n                            ... on CountFeeConditionValue {\n                              count\n                              maximumCount\n                            }\n                          }\n                          operator\n                        }\n                      }\n                      aggregatedAt\n                      aggregationDuration\n                      createdAt\n                      updatedAt\n                    }\n                  }\n                  createdAt\n                  updatedAt\n                }\n                feeChargeActvity {\n                  __typename\n                  ... on PhysicalPaymentCardOrder {\n                    id\n                  }\n                  ... on PaymentCard {\n                    id\n                  }\n                  ... on FinancialAccount {\n                    id\n                  }\n                  ... on SecureDepositACHTransfer {\n                    id\n                  }\n                  ... on SecureCardBalanceRepaymentACHTransfer {\n                    id\n                  }\n                  ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                    id\n                  }\n                  ... on IntegratorInitiatedFundsDepositACHTransfer {\n                    id\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    id\n                  }\n                  ... on ClearingEvent {\n                    id\n                  }\n                  ... on BalanceInquiryEvent {\n                    id\n                  }\n                }\n              }\n              ... on ReversedFeeTransfer {\n                originatingAccount {\n                  id\n                }\n                receivingAccount {\n                  id\n                }\n                transferedFeeAmount {\n                  value\n                  currencyCode\n                }\n                transferDate\n                status {\n                  ... on NonFailureFeeTransferStatus {\n                    status\n                  }\n                  ... on FailureFeeTransferStatus {\n                    status\n                    reasonDetails {\n                      type\n                      reason\n                    }\n                  }\n                }\n                sourceFeeTransferEvent {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "FINANCIAL_ACCOUNT_ID"
      }
    },
    {
      "name": "GetCardProductWithLedgers",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetCardProductWithLedgers(\n  $cardProductId: ID!\n  $firstLedgerEntries: Int\n  $ledgerEntriesAfterCursor: String\n  $filterBy: AccountHolderFinancialAccountsFilterInput\n) {\n  node(id: $cardProductId) {\n    __typename\n    ... on CardProduct {\n      id\n      name\n      accounts(first: 20, filterBy: $filterBy) {\n        __typename\n        pageInfo {\n          __typename\n          endCursor\n          hasNextPage\n          startCursor\n          hasPreviousPage\n        }\n        edges {\n          __typename\n          cursor\n          node {\n             __typename\n            id\n            name\n            createdAt\n            updatedAt\n            features {\n              __typename\n              enabled\n              createdAt\n              updatedAt\n            }\n            ledgers {\n              __typename\n              id\n              normalBalance\n              asOf\n              name\n              creditBalance {\n                value\n                currencyCode\n                __typename\n              }\n              debitBalance {\n                value\n                currencyCode\n                __typename\n              }\n              ledgerEntries(\n                first: $firstLedgerEntries\n                after: $ledgerEntriesAfterCursor\n              ) {\n                __typename\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                  startCursor\n                  endCursor\n                  __typename\n                }\n                edges {\n                  __typename\n                  cursor\n                  node {\n                    id\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "cardProductId": "CARD_PRODUCT_ID",
        "filterBy": {
          "features": {
            "equals": "INCOME_ACCOUNT"
          }
        }
      }
    },
    {
      "name": "ListFeeTransferEvents",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query ListFeeTransferEvents(\n  $first: Int\n  $after: String\n  $filterBy: FeeTransferEventFilterInput\n) {\n  feeTransferEvents(first: $first, after: $after, filterBy: $filterBy) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      cursor\n      node {\n        ...feeTransferEvent\n      }\n    }\n  }\n}\nfragment feeTransferEvent on FeeTransferEvent {\n  __typename\n  id\n  feeTransfer {\n    __typename\n    ... on ChargedFeeTransfer {\n      originatingAccount {\n        id\n        accountStatus\n        feeTransferEvents {\n          pageInfo {\n            hasNextPage\n          }\n          edges {\n            cursor\n            node {\n              id\n              feeTransfer {\n                __typename\n              }\n            }\n          }\n        }\n      }\n      receivingAccount {\n        id\n        accountStatus\n      }\n      cardProduct {\n        id\n        name\n      }\n      feeActivityType\n      feeAmount {\n        value\n        currencyCode\n      }\n      transferedFeeAmount {\n        value\n        currencyCode\n      }\n      transferDate\n      status {\n        __typename\n        ... on NonFailureFeeTransferStatus {\n          status\n        }\n      }\n      feeChargeRule {\n        id\n        name\n        value {\n          __typename\n          ... on FixedFeeChargeValue {\n            amount {\n              value\n              currencyCode\n            }\n          }\n        }\n      }\n      feeChargeActvity {\n        __typename\n        ... on PhysicalPaymentCardOrder {\n          id\n        }\n        ... on PaymentCard {\n          id\n        }\n        ... on FinancialAccount {\n          id\n        }\n        ... on SecureDepositACHTransfer {\n          id\n        }\n        ... on SecureCardBalanceRepaymentACHTransfer {\n          id\n        }\n        ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n          id\n        }\n        ... on IntegratorInitiatedFundsDepositACHTransfer {\n          id\n        }\n        ... on AuthorizationAndClearEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n        ... on ClearingEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n        ... on BalanceInquiryEvent {\n          id\n          transaction {\n            __typename\n            ... on CreditTransaction {\n              id\n            }\n            ... on DebitTransaction {\n              id\n            }\n          }\n        }\n      }\n    }\n    ... on ReversedFeeTransfer {\n      originatingAccount {\n        id\n      }\n      receivingAccount {\n        id\n      }\n      transferedFeeAmount {\n        value\n        currencyCode\n      }\n      transferDate\n      sourceFeeTransferEvent {\n        __typename\n        id\n        ... on FeeTransferEvent {\n          id\n          feeTransfer {\n            __typename\n            ... on ChargedFeeTransfer {\n              originatingAccount {\n                id\n              }\n              feeAmount {\n                value\n                currencyCode\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "first": 20,
        "filterBy": {
          "cardProductId": {
            "equals": "CARD_PRODUCT_ID"
          },
          "originatingAccountId": {
            "equals": "ACCOUNT_HOLDER_FINANCIAL_ACCOUNT_ID"
          },
          "createDate": {
            "between": {
              "start": "2024-04-01T00:00:00.000Z",
              "end": "2024-05-01T23:59:59.999Z"
            }
          }
        }
      }
    },
    {
      "name": "IssueFinancialAccountForApplication",
      "type": "mutation",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input: $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "applicationId": "{{accountHolderApplicationId}}",
          "name": "Credit Account"
        }
      }
    },
    {
      "name": "GetFinancialAccountByID",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n            node {\n              __typename\n              id\n              createdAt\n              amount {\n                value\n                currencyCode\n              }\n              financialEvent {\n                ... on Transfer {\n                  amount {\n                    value\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n        updatedAt\n        ... on CreditCardAccountFeature {\n          creditLimit {\n            value\n            currencyCode\n          }\n        }\n      }\n      creditConfiguration {\n        interestRates {\n          balanceType\n          creditPlan {\n            id\n          }\n          interest {\n            apr\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "IssuePaymentCardForFinancialAccount",
      "type": "mutation",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n      status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n      cardProductApplication {\n\t\t\t\t... on AccountHolderCardProductApplication {\n\t\t\t\t\tid\n\t\t\t\t\tapplicationState {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\taccountHolderSnapshot {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\t... on USPersonAccountHolderSnapshot {\n\t\t\t\t\t\t\tname {\n\t\t\t\t\t\t\t\tgivenName\n\t\t\t\t\t\t\t\tfamilyName\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbillingAddress {\n\t\t\t\t\t\t\t\tstreetAddress\n\t\t\t\t\t\t\t\tlocality\n\t\t\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentVerification {\n\t\t\t\t\t\t\t\tstatus\n\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\t\t\tcode\n\t\t\t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n        }\n      }\n      \n      restrictedDetails {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "options": {
            "activateOnCreate": true,
            "expirationDate": "2026-01-01T23:59:59Z"
          }
        }
      }
    },
    {
      "name": "ActivatePaymentCard",
      "type": "mutation",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "paymentCardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "SimulateAuthorization",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateAuthorization(\n  $input: SimulateAuthorizationInput!\n) {\n  simulateAuthorization(input: $input) {\n    ... on AuthorizationEvent {\n      id\n      responseCode\n      cvvResponseCode\n      transactionProcessingType\n      transaction {\n        __typename\n        ... on CreditTransaction {\n          id\n        }\n        ... on DebitTransaction {\n          id\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "amount": {
            "value": 4000,
            "currencyCode": "USD"
          },
          "cardId": "{{paymentCardId}}"
        }
      }
    },
    {
      "name": "SimulateClearing",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateClearing($input: SimulateClearingInput!) {\n  simulateClearing(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n      merchantDetails {\n        countryCodeAlpha3\n        category\n        name\n        description\n      }\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "{{transactionId}}"
        }
      }
    },
    {
      "name": "SimulateReversal",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateReversal($input: SimulateReversalInput!) {\n  simulateReversal(input: $input) {\n    ... on ReversalEvent {\n      id\n      transaction {\n        ...on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "TRANSACTION_ID"
        }
      }
    },
    {
      "name": "SimulateRefund",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateRefund($input: SimulateRefundInput!) {\n  simulateRefund(input: $input) {\n    ... on ClearingEvent {\n      id\n      transaction {\n        ... on Node {\n          id\n        }\n      }\n      responseCode\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n",
      "variables": {
        "input": {
          "transactionId": "tx_23ekq7d5gunwfbwnj6q29j2ga5b1sab094",
          "amount": {
            "value": 3000,
            "currencyCode": "USD"
          }
        }
      }
    },
    {
      "name": "SimulateSingleStepAuthAndClear",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateSingleStepAuthAndClear($input: SimulateSingleStepAuthAndClearInput!) {\n  simulateSingleStepAuthAndClear(input: $input) {\n    ... on AuthorizationAndClearEvent {\n      id\n      responseCode\n      transaction {\n        ... on DebitTransaction {\n          id\n        }\n        ... on CreditTransaction {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "cardId": "{{paymentCardId}}",
          "amount": {
            "currencyCode": "USD",
            "value": 2000
          },
          "merchantDetails": {
            "description": "Test Merchant",
            "name": "Test Merchant Name"
          }
        }
      }
    },
    {
      "name": "GetTransactionEvent",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n    id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n      isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}",
      "variables": {
        "id": "TRANSACTION_EVENT_ID"
      }
    },
    {
      "name": "TransactionEventsByPaymentCardAndTransactionId",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n        edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n              ... on DebitTransaction {\n                __typename\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "PAYMENT_CARD_ID",
        "filterBy": {
          "transactionId": {
            "equals": "TRANSACTION_ID"
          }
        }
      }
    },
    {
      "name": "SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod($input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!) {\n  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: $input) {\n    ... on FinancialAccount {\n      id\n      statements {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n        errorPath\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "financialAccountId": "{{financialAccountId}}",
          "numberOfCyclesToShiftCurrentStatementBackward": 4
        }
      }
    },
    {
      "name": "GetFinancialAccountStatementHeaderFull",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetFinancialAccountStatementHeaderFull($id: ID!) {\n    node(id: $id) {\n      __typename\n      ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        periodStart\n        periodEnd\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        periodMinimumPaymentDue {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n            currencyCode\n          }\n          debitBalance {\n            value\n            currencyCode\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n          currencyCode\n        }\n        startingPrimaryDebitBalance {\n          value\n          currencyCode\n        }\n        endingPrimaryCreditBalance {\n          value\n          currencyCode\n        }\n        endingPrimaryDebitBalance {\n          value\n          currencyCode\n        }\n        periodPurchasesAmount {\n          value\n          currencyCode\n        }\n        periodFeesAmount {\n          value\n          currencyCode\n        }\n        periodFeeCredit {\n          value\n          currencyCode\n        }\n        periodInterestCharges {\n          value\n          currencyCode\n        }\n        periodInterestCredit {\n          value\n          currencyCode\n        }\n        periodRefundsAndPaymentsAmount {\n          value\n          currencyCode\n        }\n        periodPurchaseCreditPlan {\n          balanceType\n          balanceSubjectToInterestAmount {\n            value\n            currencyCode\n          }\n          interestChargedAmount {\n            value\n            currencyCode\n          }\n          apr\n        }\n        payOffWarning {\n          paymentCycles {\n            payOffType\n            paymentDetails {\n              periodPayment {\n                value\n                currencyCode\n              }\n              estimatedTotal {\n                value\n                currencyCode\n              }\n              estimatedPayOffDays\n            }\n          }\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n            currencyCode\n          }\n          debitBalance {\n            value\n            currencyCode\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n          currencyCode\n        }\n        startingSecondaryDebitBalance {\n          value\n          currencyCode\n        }\n        endingSecondaryCreditBalance {\n          value\n          currencyCode\n        }\n        endingSecondaryDebitBalance {\n          value\n          currencyCode\n        }\n        accumulatedAccountInterestAndFees {\n          yearToDateAccumulatedInterestDebit {\n            value\n            currencyCode\n          }\n          yearToDateAccumulatedInterestCredit {\n            value\n            currencyCode\n          }\n          yearToDateAccumulatedFeesDebit {\n            value\n            currencyCode\n          }\n          yearToDateAccumulatedFeesCredit {\n            value\n            currencyCode\n          }\n        }\n        createdAt\n      }\n    }\n  }",
      "variables": {
        "id": "{{statementId}}"
      }
    },
    {
      "name": "GetBillingStatementEntries",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetBillingStatementEntries($id: ID!, $first: Int!, $afterCursor: String) {\n    node(id: $id) {\n      ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        statementEntries(first: $first, after: $afterCursor) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              __typename\n              ledgerEntry {\n                __typename\n                id\n                amount {\n                  value\n                  currencyCode\n                }\n                financialEvent {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    id\n                    merchantDetails {\n                      name\n                      description\n                      category\n                    }\n                    createdAt\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    id\n                    merchantDetails {\n                      name\n                      description\n                      category\n                    }\n                    createdAt\n                    __typename\n                  }\n                  ... on FeeTransferEvent {\n                    id\n                    feeTransfer {\n                      __typename \n                      ... on ChargedFeeTransfer {\n                        feeActivityType\n                        feeAmount {\n                          value\n                          currencyCode\n                        }\n                      }\n                      ... on ReversedFeeTransfer {\n                        transferedFeeAmount {\n                          value\n                          currencyCode\n                        }\n                      }\n                    }\n                  }\n                  ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    fromFinancialAccount {\n                      ... on ExternalFinancialBankAccount {\n                        name\n                        id\n                        __typename\n                      }\n                      ... on NonVerifiedExternalUSFinancialBankAccount {\n                        id\n                        name\n                        __typename\n                      }\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on ManualAdjustmentEvent {\n                    adjustmentActivityType\n                    __typename\n                  }\n                  ... on CreditCardTransferEvent {\n                    accountingDirection\n                    balanceType\n                    interestDetails {\n                      apr\n                      __typename\n                    }\n                    statement {\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on RewardPointsTransfer {\n                    id\n                    rewardPointsValue {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    rewardPointsAmount {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    createdAt\n                    updatedAt\n                  }\n                  ... on InterFinancialAccountTransfer {\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    purpose\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    transferActivityType\n                    __typename\n                  }\n                }\n              }\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n      __typename\n    }\n  }",
      "variables": {
        "id": "{{statementId}}",
        "first": 20
      }
    },
    {
      "name": "GetBillingStatementEntries",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetBillingStatementEntries($id: ID!, $first: Int!, $afterCursor: String, $filterBy: FinancialAccountStatementEntriesFilterInput) {\n    node(id: $id) {\n      ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        statementEntries(first: $first, after: $afterCursor, filterBy: $filterBy) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          edges {\n            cursor\n            node {\n              __typename\n              ledgerEntry {\n                __typename\n                id\n                amount {\n                  value\n                  currencyCode\n                }\n                financialEvent {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    id\n                    merchantDetails {\n                      name\n                      description\n                      category\n                    }\n                    createdAt\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    id\n                    merchantDetails {\n                      name\n                      description\n                      category\n                    }\n                    createdAt\n                    __typename\n                  }\n                  ... on FeeTransferEvent {\n                    id\n                    feeTransfer {\n                      __typename \n                      ... on ChargedFeeTransfer {\n                        feeActivityType\n                        feeAmount {\n                          value\n                          currencyCode\n                        }\n                      }\n                      ... on ReversedFeeTransfer {\n                        transferedFeeAmount {\n                          value\n                          currencyCode\n                        }\n                      }\n                    }\n                  }\n                  ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    fromFinancialAccount {\n                      ... on ExternalFinancialBankAccount {\n                        name\n                        id\n                        __typename\n                      }\n                      ... on NonVerifiedExternalUSFinancialBankAccount {\n                        id\n                        name\n                        __typename\n                      }\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on ManualAdjustmentEvent {\n                    adjustmentActivityType\n                    __typename\n                  }\n                  ... on CreditCardTransferEvent {\n                    accountingDirection\n                    balanceType\n                    interestDetails {\n                      apr\n                      __typename\n                    }\n                    statement {\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on RewardPointsTransfer {\n                    id\n                    rewardPointsValue {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    rewardPointsAmount {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    createdAt\n                    updatedAt\n                  }\n                  ... on InterFinancialAccountTransfer {\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    purpose\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    transferActivityType\n                    __typename\n                  }\n                }\n              }\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n      __typename\n    }\n  }",
      "variables": {
        "id": "{{statementId}}",
        "first": 20,
        "filterBy": {
          "isCredit": {
            "equals": false
          }
        }
      }
    },
    {
      "name": "GetCurrentBillingStatementByFinancialAccountID",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetCurrentBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... currentConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment currentConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  asOf\n  updatedAt\n  currentAmountDue {\n    value\n    currencyCode\n  }\n  currentOpenStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        statementEntries {\n          edges {\n            node {\n              ledgerEntry {\n                id\n                __typename\n                financialEvent {\n                  __typename\n                  ... on FeeTransferEvent {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n        paymentDueOn\n        pastDueAmount {\n          value\n          currencyCode\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n        tertiaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingTertiaryCreditBalance {\n          value\n        }\n        startingTertiaryDebitBalance {\n          value\n        }\n        endingTertiaryCreditBalance {\n          value\n        }\n        endingTertiaryDebitBalance {\n          value\n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindFinancialAccount",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "fragment statement on ConsumerRevolvingCardFinancialAccountStatement {\n  id\n  __typename\n  periodStart\n  periodEnd\n  openedAt\n  closedAt\n  paymentDueOn\n  pastDueAmount {\n    value\n    currencyCode\n  }\n  periodMinimumPaymentDue {\n    value\n    currencyCode\n  }\n  primaryLedger {\n    id\n    name\n    normalBalance\n    creditBalance {\n      value\n      currencyCode\n    }\n    debitBalance {\n      value\n      currencyCode\n    }\n  }\n  startingPrimaryCreditBalance {\n    value\n    currencyCode\n  }\n  startingPrimaryDebitBalance {\n    value\n    currencyCode\n  }\n  endingPrimaryCreditBalance {\n    value\n    currencyCode\n  }\n  endingPrimaryDebitBalance {\n    value\n    currencyCode\n  }\n  periodInterestCharges {\n    value\n    currencyCode\n  }\n  periodPurchaseCreditPlan {\n    balanceType\n    balanceSubjectToInterestAmount {\n      value\n      currencyCode\n    }\n    interestChargedAmount {\n      value\n      currencyCode\n    }\n    apr\n  }\n  payOffWarning {\n    paymentCycles {\n      payOffType\n      paymentDetails {\n        periodPayment {\n          value\n          currencyCode\n        }\n        estimatedTotal {\n          value\n          currencyCode\n        }\n        estimatedPayOffDays\n      }\n    }\n  }\n  secondaryLedger {\n    id\n    name\n    normalBalance\n    creditBalance {\n      value\n      currencyCode\n    }\n    debitBalance {\n      value\n      currencyCode\n    }\n  }\n  startingSecondaryCreditBalance {\n    value\n    currencyCode\n  }\n  startingSecondaryDebitBalance {\n    value\n    currencyCode\n  }\n  endingSecondaryCreditBalance {\n    value\n    currencyCode\n  }\n  endingSecondaryDebitBalance {\n    value\n    currencyCode\n  }\n}\n\nquery FindFinancialAccount(\n  $id: ID!\n  $filterStatementsBy: FinancialAccountStatementFilterInput\n) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      id\n      activeBillingCycleConfiguration {\n        billingCycleStartDayOfMonth\n        billingCycleEndDayOfMonth\n        from\n        paymentDueDayOfMonth\n      }\n      createdAt\n      statements(first: 10, filterBy: $filterStatementsBy) {\n        edges {\n          node {\n            ...statement\n          }\n          cursor\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "LookupStatement",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query LookupStatement($id: ID!, $filterBy: FinancialAccountStatementEntriesFilterInput) {\n  node(id: $id) {\n    ... on FinancialAccountStatement {\n      id\n      __typename\n      periodStart\n      periodEnd\n      openedAt\n      closedAt\n      primaryLedger {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        __typename\n      }\n      startingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      secondaryLedger {\n        id\n        name\n        normalBalance\n        __typename\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n      }\n      startingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      tertiaryLedger {\n        id\n        name\n        normalBalance\n        __typename\n      }\n      startingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      statementEntries(first: 20, filterBy: $filterBy) {\n        edges {\n          cursor\n          node {\n            __typename\n            postDate\n            creditAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            debitAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            primaryCreditBalance {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            primaryDebitBalance {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            ledgerEntry {\n              __typename\n              id\n              memo\n              creditBalanceAtLedgerEntry {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              debitBalanceAtLedgerEntry {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              amount {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              financialEvent {\n                __typename\n                ... on FeeTransferEvent {\n                  id\n                  feeTransfer {\n                    __typename \n                    ... on ChargedFeeTransfer {\n                        feeActivityType\n                        feeAmount {\n                            value\n                            currencyCode\n                        }\n                    }\n                    ... on ReversedFeeTransfer {\n                        transferedFeeAmount {\n                            value\n                            currencyCode\n                        }\n                    }\n                  }\n                }\n                ... on Node {\n                  id\n                  __typename\n                }\n                ... on AuthorizationAndClearEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on AuthorizationEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on ClearingEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IssuerPreliminaryAuthorizationEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on ReversalEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on CreditFundsACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on DebitFundsACHTransferEvent {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureDepositTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on PayrollACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    ... on NonVerifiedExternalUSFinancialBankAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IntegratorInitiatedFundsWithdrawalACHTransferEvent {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  toFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    ... on NonVerifiedExternalUSFinancialBankAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureDepositACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureCardBalanceRepaymentACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on InterFinancialAccountTransfer {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  purpose\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  transferActivityType\n                  __typename\n                }\n              }\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n      ... on ConsumerRevolvingCardFinancialAccountStatement {\n        __typename\n        pastDueAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        payOffWarning {\n          paymentCycles {\n            __typename\n            payOffType\n            paymentDetails {\n              estimatedPayOffDays\n              estimatedTotal {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              periodPayment {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              __typename\n            }\n          }\n          __typename\n        }\n        paymentDueOn\n        periodFeesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodInterestCharges {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodMinimumPaymentDue {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchasesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchaseCreditPlan {\n          balanceType\n          balanceSubjectToInterestAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          interestChargedAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          apr\n          __typename\n        }\n        periodRefundsAndPaymentsAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        repaymentHistory {\n          appliedAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          sourceRepayment {\n            createdAt\n            updatedAt\n            memo\n            references\n            repaymentMethod\n            repaymentType\n            amount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n    }\n    __typename\n  }\n}",
      "variables": {
        "id": "{{statementId}}"
      }
    },
    {
      "name": "LookupStatement",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query LookupStatement($id: ID!, $filterBy: FinancialAccountStatementEntriesFilterInput) {\n  node(id: $id) {\n    ... on FinancialAccountStatement {\n      id\n      __typename\n      periodStart\n      periodEnd\n      openedAt\n      closedAt\n      primaryLedger {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        __typename\n      }\n      startingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingPrimaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingPrimaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      secondaryLedger {\n        id\n        name\n        normalBalance\n        __typename\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n      }\n      startingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingSecondaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingSecondaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      tertiaryLedger {\n        id\n        name\n        normalBalance\n        __typename\n      }\n      startingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      startingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingTertiaryCreditBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      endingTertiaryDebitBalance {\n        value\n        currencyCode\n        decimalPlaces\n        __typename\n      }\n      statementEntries(first: 20, filterBy: $filterBy) {\n        edges {\n          cursor\n          node {\n            __typename\n            postDate\n            creditAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            debitAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            primaryCreditBalance {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            primaryDebitBalance {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            ledgerEntry {\n              __typename\n              id\n              memo\n              creditBalanceAtLedgerEntry {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              debitBalanceAtLedgerEntry {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              amount {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              financialEvent {\n                __typename\n                ... on FeeTransferEvent {\n                  id\n                  feeTransfer {\n                    __typename \n                    ... on ChargedFeeTransfer {\n                        feeActivityType\n                        feeAmount {\n                            value\n                            currencyCode\n                        }\n                    }\n                    ... on ReversedFeeTransfer {\n                        transferedFeeAmount {\n                            value\n                            currencyCode\n                        }\n                    }\n                  }\n                }\n                ... on Node {\n                  id\n                  __typename\n                }\n                ... on AuthorizationAndClearEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on AuthorizationEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on ClearingEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IssuerPreliminaryAuthorizationEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on ReversalEvent {\n                  id\n                  merchantDetails {\n                    name\n                    description\n                    category\n                    __typename\n                  }\n                  __typename\n                }\n                ... on CreditFundsACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on DebitFundsACHTransferEvent {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureDepositTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on PayrollACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    ... on NonVerifiedExternalUSFinancialBankAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on IntegratorInitiatedFundsWithdrawalACHTransferEvent {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  toFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    ... on NonVerifiedExternalUSFinancialBankAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureDepositACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on SecureCardBalanceRepaymentACHTransferEvent {\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  fromFinancialAccount {\n                    ... on ExternalFinancialBankAccount {\n                      name\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  __typename\n                }\n                ... on InterFinancialAccountTransfer {\n                  fromFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  purpose\n                  toFinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  transferActivityType\n                  __typename\n                }\n              }\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n      ... on ConsumerRevolvingCardFinancialAccountStatement {\n        __typename\n        pastDueAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        payOffWarning {\n          paymentCycles {\n            __typename\n            payOffType\n            paymentDetails {\n              estimatedPayOffDays\n              estimatedTotal {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              periodPayment {\n                value\n                currencyCode\n                decimalPlaces\n                __typename\n              }\n              __typename\n            }\n          }\n          __typename\n        }\n        paymentDueOn\n        periodFeesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodInterestCharges {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodMinimumPaymentDue {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchasesAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        periodPurchaseCreditPlan {\n          balanceType\n          balanceSubjectToInterestAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          interestChargedAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          apr\n          __typename\n        }\n        periodRefundsAndPaymentsAmount {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        repaymentHistory {\n          appliedAmount {\n            value\n            currencyCode\n            decimalPlaces\n            __typename\n          }\n          sourceRepayment {\n            createdAt\n            updatedAt\n            memo\n            references\n            repaymentMethod\n            repaymentType\n            amount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n    }\n    __typename\n  }\n}",
      "variables": {
        "id": "{{statementId}}",
        "filterBy": {
          "isCredit": {
            "equals": false
          }
        }
      }
    },
    {
      "name": "GetLatestClosedBillingStatementByFinancialAccountID",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query GetLatestClosedBillingStatementByFinancialAccountID($id: ID!) {\n  node (id: $id) {\n    ... on FinancialAccount {\n      id\n      name\n      externalId\n      createdAt\n      updatedAt\n      statementSnapshot {\n        ... latestClosedConsumerReolvingStatement\n      }\n    }\n  }\n}\n\nfragment latestClosedConsumerReolvingStatement on ConsumerRevolvingCardFinancialAccountStatementSnapshot {\n  latestClosedStatement {\n    ... on ConsumerRevolvingCardFinancialAccountStatement {\n        id\n        __typename\n        periodStart\n        periodEnd\n        openedAt\n        closedAt\n        createdAt\n        updatedAt\n        paymentDueOn\n        periodRefundsAndPaymentsAmount {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodPurchasesAmount {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodFeesAmount {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodPurchaseCreditPlan {\n            balanceType\n            balanceSubjectToInterestAmount {\n                value\n                currencyCode\n                decimalPlaces\n            }\n            interestChargedAmount {\n                value\n                currencyCode\n                decimalPlaces\n            }\n        }\n        periodInterestCharges {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        periodMinimumPaymentDue {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        pastDueAmount {\n          value\n          currencyCode\n          decimalPlaces\n        }\n        endingCreditLimit {\n            value\n            currencyCode\n            decimalPlaces\n        }\n        primaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingPrimaryCreditBalance {\n          value\n        }\n        startingPrimaryDebitBalance {\n          value\n        }\n        endingPrimaryCreditBalance {\n          value\n        }\n        endingPrimaryDebitBalance {\n          value\n        }\n        secondaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingSecondaryCreditBalance {\n          value\n        }\n        startingSecondaryDebitBalance {\n          value\n        }\n        endingSecondaryCreditBalance {\n          value\n        }\n        endingSecondaryDebitBalance {\n          value\n        }\n        tertiaryLedger {\n          id\n          name\n          normalBalance\n          creditBalance {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n        startingTertiaryCreditBalance {\n          value\n        }\n        startingTertiaryDebitBalance {\n          value\n        }\n        endingTertiaryCreditBalance {\n          value\n        }\n        endingTertiaryDebitBalance {\n          value\n        }\n        payOffWarning {\n          paymentCycles {\n            payOffType\n            paymentDetails {\n              estimatedPayOffDays\n              estimatedTotal {\n                value\n                currencyCode\n                decimalPlaces\n              }\n              periodPayment {\n                value\n                currencyCode\n                decimalPlaces\n              }  \n            }\n          }    \n        }\n        statementEntries {\n          edges {\n            node {\n              ... on FinancialAccountStatementEntry {\n                __typename\n                postDate\n                creditAmount {\n                    value\n                }\n                debitAmount {\n                    value\n                }\n                primaryCreditBalance {\n                    value\n                }\n                primaryDebitBalance {\n                    value\n                }\n                ledgerEntry {\n                  id\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }    \n            }\n            cursor\n          }\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }    \n        }\n      }\n  }\n}\n",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindFinancialAccountActivities",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query FindFinancialAccountActivities($id: ID!, $firstActivities: Int, $filterBy: FinancialAccountActivitiesFilterInput, $activitiesAfterCursor: String) {\n  node(id: $id) {\n    __typename\n    id\n    ... on FinancialAccount {\n      __typename\n      id\n      financialAccountActivities(\n        first: $firstActivities\n        filterBy: $filterBy\n        after: $activitiesAfterCursor\n      ) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n          __typename\n        }\n        edges {\n          cursor\n          node {\n            __typename\n            sign\n            isComplete\n            pendingAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            postedAmount {\n              value\n              currencyCode\n              decimalPlaces\n              __typename\n            }\n            createdAt\n            source {\n              __typename\n              ... on DebitTransaction {\n                __typename\n                id\n                transactionEvents {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on BalanceInquiryEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on VerificationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                }\n              }\n              ... on CreditTransaction {\n                __typename\n                id\n                transactionEvents {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on BalanceInquiryEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on VerificationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      category\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                }\n              }\n              ... on FeeTransferEvent {\n                id\n                feeTransfer {\n                  __typename\n                  ... on ChargedFeeTransfer {\n                    cardProduct {\n                      id\n                      name\n                      __typename\n                    }\n                    feeActivityType\n                    feeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    feeChargeActvity {\n                      __typename\n                      ... on PhysicalPaymentCardOrder {\n                        paymentCard {\n                          id\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on PaymentCard {\n                        id\n                        __typename\n                      }\n                      ... on FinancialAccount {\n                        id\n                        __typename\n                      }\n                      ... on SecureDepositACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on SecureCardBalanceRepaymentACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on IntegratorInitiatedFundsDepositACHTransfer {\n                        id\n                        __typename\n                      }\n                      ... on AuthorizationAndClearEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on ClearingEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                      ... on BalanceInquiryEvent {\n                        id\n                        pointOfServiceDetails {\n                          isCardPresent\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    feeChargeRule {\n                      name\n                      __typename\n                    }\n                    originatingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    receivingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureFeeTransferStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureFeeTransferStatus {\n                        status\n                        reasonDetails {\n                          reason\n                          type\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    transferDate\n                    transferedFeeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on ReversedFeeTransfer {\n                    originatingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    receivingAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    sourceFeeTransferEvent {\n                      id\n                      feeTransfer {\n                        __typename\n                        ... on ChargedFeeTransfer {\n                          feeActivityType\n                          feeChargeActvity {\n                            __typename\n                            ... on PhysicalPaymentCardOrder {\n                              paymentCard {\n                                id\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on PaymentCard {\n                              id\n                              __typename\n                            }\n                            ... on FinancialAccount {\n                              id\n                              __typename\n                            }\n                            ... on SecureDepositACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on SecureCardBalanceRepaymentACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on IntegratorInitiatedFundsDepositACHTransfer {\n                              id\n                              __typename\n                            }\n                            ... on AuthorizationAndClearEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on ClearingEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                            ... on BalanceInquiryEvent {\n                              id\n                              pointOfServiceDetails {\n                                isCardPresent\n                                __typename\n                              }\n                              __typename\n                            }\n                          }\n                          __typename\n                        }\n                      }\n                      __typename\n                    }\n                    status {\n                      __typename\n                      ... on NonFailureFeeTransferStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureFeeTransferStatus {\n                        status\n                        reasonDetails {\n                          reason\n                          type\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    transferDate\n                    transferedFeeAmount {\n                      value\n                      currencyCode\n                      decimalPlaces\n                      __typename\n                    }\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on InterFinancialAccountTransfer {\n                id\n                fromFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                transferActivityType\n                __typename\n              }\n              ... on CreditFunds {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on DebitFunds {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                fromFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on SecureDeposit {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on PayrollTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                toFinancialAccount {\n                  id\n                  name\n                  __typename\n                }\n                createdAt\n                settlementDate\n                __typename\n              }\n              ... on SecureDepositACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on SecureCardBalanceRepaymentACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                fromFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n              ... on IntegratorInitiatedFundsDepositACHTransfer {\n                id\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                companyIdentifier\n                companyName\n                descriptor {\n                  companyEntryDescription\n                  individualName\n                  __typename\n                }\n                createdAt\n                settlementDate\n                toFinancialAccount {\n                  __typename\n                  ... on FinancialAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on ExternalFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                  ... on NonVerifiedExternalUSFinancialBankAccount {\n                    id\n                    name\n                    __typename\n                  }\n                }\n                __typename\n              }\n            }\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "FindFinancialAccountLedgerActivity",
      "type": "query",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "query FindFinancialAccountLedgerActivity($id: ID!, $first: Int, $filterBy: LedgerEntriesFilterInput, $after: String) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount {\n      __typename\n      id\n      ledgers(ledgerNames: [CASH, OUTSTANDING_BALANCE_PAYABLE]) {\n        id\n        normalBalance\n        asOf\n        name\n        creditBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        debitBalance {\n          value\n          currencyCode\n          decimalPlaces\n          __typename\n        }\n        ledgerEntries(first: $first, filterBy: $filterBy, after: $after) {\n          ... on LedgerEntryConnection {\n            pageInfo {\n              startCursor\n              endCursor\n              hasNextPage\n              hasPreviousPage\n              __typename\n            }\n            edges {\n              cursor\n              __typename\n              node {\n                __typename\n                id\n                memo\n                createdAt\n                creditBalanceAtLedgerEntry {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                debitBalanceAtLedgerEntry {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                amount {\n                  value\n                  currencyCode\n                  decimalPlaces\n                  __typename\n                }\n                financialEvent {\n                  __typename\n                  ... on Node {\n                    id\n                    __typename\n                  }\n                  ... on AuthorizationAndClearEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on AuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ClearingEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    disputes {\n                      id\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on IssuerPreliminaryAuthorizationEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on ReversalEvent {\n                    paymentCard {\n                      id\n                      last4\n                      __typename\n                    }\n                    merchantDetails {\n                      name\n                      __typename\n                    }\n                    pointOfServiceDetails {\n                      isCardPresent\n                      __typename\n                    }\n                    transactionProcessingType\n                    __typename\n                  }\n                  ... on CreditFundsACHTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on DebitFundsACHTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on SecureDepositTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on PayrollACHTransferEvent {\n                    externallyInitiatedACHStatus: status {\n                      ... on NonFailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureExternallyInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on IntegratorInitiatedFundsDepositACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on IntegratorInitiatedFundsWithdrawalACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on SecureDepositACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on SecureCardBalanceRepaymentACHTransferEvent {\n                    integratorInitiatedACHStatus: status {\n                      ... on NonFailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      ... on FailureIntegratorInitiatedACHStatus {\n                        status\n                        __typename\n                      }\n                      __typename\n                    }\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on InterFinancialAccountTransfer {\n                    fromFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    purpose\n                    toFinancialAccount {\n                      id\n                      name\n                      __typename\n                    }\n                    transferActivityType\n                    __typename\n                  }\n                  ... on FeeTransferEvent {\n                    feeTransfer {\n                      __typename\n                      ... on ChargedFeeTransfer {\n                        feeActivityType\n                        __typename\n                      }\n                      ... on ReversedFeeTransfer {\n                        sourceFeeTransferEvent {\n                          feeTransfer {\n                            __typename\n                            ... on ChargedFeeTransfer {\n                              feeActivityType\n                              __typename\n                            }\n                          }\n                          __typename\n                        }\n                        __typename\n                      }\n                    }\n                    __typename\n                  }\n                  ... on ManualAdjustmentEvent {\n                    adjustmentActivityType\n                    __typename\n                  }\n                  ... on CreditCardTransferEvent {\n                    accountingDirection\n                    balanceType\n                    interestDetails {\n                      apr\n                      __typename\n                    }\n                    statement {\n                      id\n                      __typename\n                    }\n                    __typename\n                  }\n                  ... on DisbursementTransferEvent {\n                    id\n                    eventType\n                    __typename\n                  }\n                  ... on WireTransfer {\n                    id\n                    type\n                    __typename\n                  }\n                  ... on RewardPointsTransfer {\n                    id\n                    rewardPointsValue {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    rewardPointsAmount {\n                      currencyCode\n                      value\n                      __typename\n                    }\n                    createdAt\n                    updatedAt\n                    status {\n                      ... on RewardPointsTransferSuccessStatus {\n                        status\n                        __typename\n                      }\n                      ... on RewardPointsTransferFailureStatus {\n                        status\n                        statusReasonCode\n                        __typename\n                      }\n                      __typename\n                    }\n                    source\n                    externalTransactionIdentifier\n                    activity\n                    memo\n                    __typename\n                  }\n                }\n              }\n            }\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  }\n}",
      "variables": {
        "id": "{{financialAccountId}}"
      }
    },
    {
      "name": "AddExternalBankAccountVerifiedThroughPlaid",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation AddExternalBankAccountVerifiedThroughPlaid($input: AddExternalBankAccountVerifiedThroughPlaidInput!) {\n  addExternalBankAccountVerifiedThroughPlaid(input: $input) {\n    ... on ExternalFinancialBankAccount {\n      id\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "accountHolderId": "{{accountHolderId}}",
          "externalToken": {
            "value": "processor-token-success"
          }
        }
      }
    },
    {
      "name": "GetExternalFinancialAccountsByAccountHolder",
      "type": "query",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "query GetExternalFinancialAccountsByAccountHolder($id: ID!) {\n  node(id: $id) {\n    ... on USPersonAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n    ... on USBusinessAccountHolder {\n      externalFinancialAccounts {\n        edges {\n          cursor\n          node {\n            __typename\n            ... on ExternalFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n              provider\n              createdAt\n              updatedAt\n            }\n            ... on NonVerifiedExternalUSFinancialBankAccount {\n              id\n              name\n              externalBankAccountDetails {\n                last4\n                type\n              }\n              accountStatus\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "variables": {
        "id": "{{accountHolderId}}"
      }
    },
    {
      "name": "SimulateProcessingIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateProcessingIntegratorInitiatedStatusChange($input: SimulateProcessingIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessingIntegratorInitiatedStatusChange(input: $input) {\n    ... on IntegratorInitiatedFundsWithdrawalACHTransfer {\n      id\n      amount {\n        value\n        currencyCode\n      }\n      fundsAvailableDate\n      settlementDate\n      companyIdentifier\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      updatedAt\n      createdAt\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n      fromFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        ... on FinancialAccount {\n          id\n        }\n      }\n      companyName\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateProcessedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateProcessedIntegratorInitiatedStatusChange($input: SimulateProcessedIntegratorInitiatedStatusChangeInput!) {\n  simulateProcessedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureCardBalanceRepaymentACHTransfer {\n      __typename\n      id\n      amount {\n        currencyCode\n        value\n      }\n      status {\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          status\n        }\n        ... on FailureIntegratorInitiatedACHStatus {\n          status\n          statusReasonCode\n        }\n      }\n    }\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n          ledgers {\n            id\n            name\n            ledgerEntries {\n              edges {\n                node {\n                  financialEvent {\n                    __typename\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on IntegratorInitiatedFundsDepositACHTransfer {\n      id\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "TRANSFER_ID"
        }
      }
    },
    {
      "name": "SimulateReturnedIntegratorInitiatedStatusChange",
      "type": "mutation",
      "required": false,
      "category": "billing_statements_with_setup",
      "graphql": "mutation SimulateReturnedIntegratorInitiatedStatusChange($input: SimulateReturnedIntegratorInitiatedStatusChangeInput!) {\n  simulateReturnedIntegratorInitiatedStatusChange(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on SecureDepositACHTransfer {\n      createdAt\n      updatedAt\n      id\n      amount {\n        value\n        currencyCode\n      }\n      \n      status {\n        __typename\n        ... on FailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n          statusReasonCode\n        }\n        ... on NonFailureIntegratorInitiatedACHStatus {\n          __typename\n          status\n        }\n      }\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "id": "ID",
          "reasonCode": "INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT"
        }
      }
    },
    {
      "name": "CreateRecurringACHTransfer",
      "type": "mutation",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "mutation CreateRecurringACHTransfer($input: CreateRecurringACHTransferInput!) {\n  createRecurringACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on RecurringACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "OUTSTANDING_BALANCE"
          },
          "frequency": "MONTHLY",
          "transferDayOfMonth": 3,
          "transferAgreementConsent": {
            "authorizedPersonId": "AUTHORIZED_PERSON_ID",
            "consentTimestamp": "2023-12-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1234",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "Test 1234",
            "individualIdentificationNumber": "Test 12345",
            "individualName": "Test 123456"
          },
          "fromFinancialAccountId": "{{externalFinancialAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}"
        }
      }
    },
    {
      "name": "CreateOneTimeACHTransfer",
      "type": "mutation",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "transferAmount": {
              "value": 2585,
              "currencyCode": "USD"
            }
          },
          "transferDate": "2024-11-24",
          "transferAgreementConsent": {
            "authorizedPersonId": "{{accountHolderId}}",
            "consentTimestamp": "2024-11-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Lucy MacLean"
          },
          "fromFinancialAccountId": "{{externalFinancialAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}"
        }
      }
    },
    {
      "name": "CreateOneTimeACHTransfer",
      "type": "mutation",
      "required": true,
      "category": "billing_statements_with_setup",
      "graphql": "mutation CreateOneTimeACHTransfer($input: CreateOneTimeACHTransferInput!) {\n  createOneTimeACHTransfer(input: $input) {\n    ... on UserError {\n      errors {\n        __typename\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError {\n      __typename\n      message\n    }\n    __typename\n    ... on OneTimeACHTransfer {\n      createdAt\n      updatedAt\n      id\n      descriptor {\n        companyEntryDescription\n        individualName\n        individualIdentificationNumber\n      }\n      transferAmount {\n        ... on TransferAmountCalculation {\n          __typename\n          calculatedType\n        }\n        ... on ManualTransferAmount {\n          amount {\n            value\n            currencyCode\n          }\n        }\n      }\n      status\n      fromFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n      toFinancialAccount {\n        __typename\n        ... on FinancialAccount {\n          id\n        }\n      }\n    }\n  }\n}",
      "variables": {
        "input": {
          "transferAmountStrategy": {
            "balanceAmountType": "MINIMUM_PAYMENT"
          },
          "transferDate": "2024-11-24",
          "transferAgreementConsent": {
            "authorizedPersonId": "{{accountHolderId}}",
            "consentTimestamp": "2024-11-22T17:10:55.662Z",
            "template": {
              "consentTemplateId": "1",
              "consentTemplateVersion": "1"
            }
          },
          "descriptor": {
            "companyEntryDescription": "CitiBank",
            "individualIdentificationNumber": "123456",
            "individualName": "Lucy MacLean"
          },
          "fromFinancialAccountId": "{{externalFinancialAccountId}}",
          "toFinancialAccountId": "{{financialAccountId}}"
        }
      }
    }
  ]
}