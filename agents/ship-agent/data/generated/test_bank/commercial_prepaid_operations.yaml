metadata:
  program_type: commercial_prepaid
  customer: Test Bank
  generated_at: '2025-08-04T17:56:17.166297'
  generator_version: 1.0.0
dimensions:
  customer: Test Bank
  environment: sandbox
  business_type: small_business
  program_variant: expense_management_prepaid
  region: us_east
options:
  categories:
  - api_key_management
  - organization
  - business_account_holder
  - application
  - authorized_users
  - financial_accounts
  - payment_cards
  - transactions
  - spend_rules
  - velocity_rules
  - notification_targets
  flows: &id001
  - standard_business_prepaid_onboarding
  - authorized_user_setup
  - comprehensive_spend_controls
  - ach_funding_setup
  include_simulations: true
  include_webhooks: true
  max_operations_per_category: 10
operations:
  Api Key Management:
  - name: GetAllApiKeys
    method: POST
    description: ''
    graphql:
      query: "query GetAllAPIKeys($first: Int, $after: String) {\n  organizations {\n    apiKeys(first: $first, after: $after)\
        \ {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n    \
        \  }\n      edges {\n        cursor\n        node {\n          id\n          name\n          redactedKey\n       \
        \   createdAt\n        }\n      }\n    }\n  }\n}"
      variables: '{"first": 10}'
  - name: CreateApiKey
    method: POST
    description: ''
    graphql:
      query: "mutation CreateSecretAPIKey($input: CreateSecretAPIKeyInput!) {\n  createSecretAPIKey(input: $input) {\n   \
        \ __typename  \n    ... on APIKey {\n      id\n      name\n      key\n    }\n  }\n}\n"
      variables: '{"input": {"secretKey": {"name": "Test Key"}}}'
  - name: RevokeApiKey
    method: POST
    description: ''
    graphql:
      query: "mutation RevokeAPIKey($input: RevokeAPIKeyInput!) {\n  revokeAPIKey(input: $input) {\n    ...on APIKey {\n \
        \     id\n    }\n  }\n}\n"
      variables: '{"input": {"apiKeyId": "{{createdApiKey}}"}}'
  Organization:
  - name: GetAllOrganizations
    method: POST
    description: ''
    graphql:
      query: "query GetAllOrganizations {\n  organizations {\n    id\n    profile {\n      displayName\n      environment\n\
        \      region\n    }\n    accounts {\n      edges {\n        node {\n          createdAt\n          updatedAt\n  \
        \        __typename\n          id\n          name\n          ledgers {\n            creditBalance {\n            \
        \  value\n            }\n            debitBalance {\n              value\n            }\n          }\n        }\n\
        \      }\n    }\n    cardProducts(first: 20) {\n      pageInfo {\n        startCursor\n        endCursor\n       \
        \ hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        cursor\n        node {\n          __typename\n\
        \          id\n          name\n          usage\n          vertical\n          accounts {\n            edges {\n  \
        \            node {\n                id\n                name\n              }\n            }\n          }\n     \
        \   }\n      }\n    }\n  }\n}\n"
      variables: '{}'
  - name: GetOrganizationById
    method: POST
    description: ''
    graphql:
      query: "query GetOrganizationByID($id: ID!) {\n  node(id: $id) {\n    ... on Organization {\n      id\n      profile\
        \ {\n        displayName\n        environment\n        region\n      }\n      financialAccounts {\n        ledgers\
        \ {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n"
      variables: '{"id": "ORGANIZATION_ID"}'
  - name: UpdateOrganizationProfileDisplayName
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateOrganizationProfileDisplayName($input: UpdateOrganizationProfileDisplayNameInput!) {\n  updateOrganizationProfileDisplayName(input:\
        \ $input) {\n    ... on Organization {\n      id\n      profile {\n        displayName\n      }\n    }\n  }\n}\n"
      variables: '{"input": {"id": "ORGANIZATION_ID", "displayName": "Test"}}'
  Business Account Holder:
  - name: CreateBusinessAccountHolder
    method: POST
    description: ''
    graphql:
      query: "mutation CreateUSBusiniessAccountHolder($input: CreateUSBusinessAccountHolderInput!) {\n  createUSBusinessAccountHolder(input:\
        \ $input) {\n    __typename\n    ... on USBusinessAccountHolder {\n      id\n      externalId\n\t\t\tprimaryAuthorizedPerson\
        \ {\n\t\t\t\tid\n\t\t\t}\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n\
        \      }\n    }\n  }\n}\n"
      variables: '{"input": {"primaryAuthorizedPerson": {"name": {"givenName": "John", "familyName": "Smith"}, "email": "jsmith@example.com",
        "phoneNumber": {"countryCode": "1", "number": "5555555555", "label": "MOBILE", "extension": ""}, "homeAddress": {"streetAddress":
        "123 Green St.", "postalCode": "60654", "locality": "Chicago", "region": "IL", "countryCodeAlpha3": "USA"}, "identificationDocument":
        {"socialSecurityNumber": {"number": "111-11-1112", "countryCodeAlpha3": "USA"}}, "dateOfBirth": "1980-09-01", "percentageOwnership":
        25, "authorizingPersonTitle": "PRESIDENT"}, "businessProfile": {"name": {"legalBusinessName": "Test", "doingBusinessAsName":
        "Test DBA"}, "phoneNumber": {"countryCode": "1", "number": "5555555555", "label": "MOBILE", "extension": "312"}, "billingAddress":
        {"streetAddress": "123 Green St.", "postalCode": "66666", "locality": "San Jose", "region": "CA", "countryCodeAlpha3":
        "USA"}, "identificationDocument": {"employerIdentificationNumber": {"number": "11-1111112", "countryCodeAlpha3": "USA"}},
        "website": "https://www.foowebsite.com", "businessType": "PARTNERSHIP", "ultimateBeneficialOwners": [{"email": "sjones@example.com",
        "name": {"givenName": "Sarah", "familyName": "Jones"}, "homeAddress": {"streetAddress": "123 Main Street", "postalCode":
        "60654", "locality": "Chicago", "region": "IL", "countryCodeAlpha3": "USA"}, "phoneNumber": {"countryCode": "1", "number":
        "5555555555", "label": "MOBILE", "extension": "312"}, "identificationDocument": {"socialSecurityNumber": {"number":
        "111-11-1112", "countryCodeAlpha3": "USA"}}, "dateOfBirth": "1980-09-01", "percentageOwnership": 75}]}, "externalId":
        "{{$guid}}"}}'
  - name: GetBusinessAccountHolderById
    method: POST
    description: ''
    graphql:
      query: "  query GetUSBusinessAccountHolder($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on USBusinessAccountHolder\
        \ {\n      __typename\n      id\n      businessProfile {\n        businessType\n        name {\n          doingBusinessAsName\n\
        \          legalBusinessName\n        }\n        billingAddress {\n          streetAddress\n          postalCode\n\
        \        }\n      }\n      primaryAuthorizedPerson {\n        id\n        name {\n          givenName\n          middleName\n\
        \          familyName\n        }\n        authorizingPersonTitle\n        homeAddress {\n          streetAddress\n\
        \        }\n      }\n    }\n  }\n}"
      variables: '{"id": "{{businessAccountHolderId}}"}'
  - name: UpdateBusinessAccountHolderBillingAddress
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateUSBusinessAccountHolderBillingAddress($input: UpdateUSBusinessAccountHolderBillingAddressInput!)\
        \ {\n  updateUSBusinessAccountHolderBillingAddress(input: $input) {\n    ... on USBusinessAccountHolder {\n      id\n\
        \      businessProfile {\n        billingAddress {\n          streetAddress\n          extendedAddress\n         \
        \ locality\n          region\n          postalCode\n          countryCodeAlpha3\n        }\n      }\n    }\n    ...\
        \ on UserError {\n        errors {\n            errorPath\n            code\n            description\n        }\n\
        \    }\n  }\n}"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "billingAddress": {"streetAddress": "123 Test
        St.", "postalCode": "77777", "locality": "Seatlle", "region": "WA", "countryCodeAlpha3": "USA"}, "updatePaymentCardBillingAddress":
        true}}'
  - name: UpdateBusinessAccountHolderWebsite
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateUSBusinessAccountHolderWebsite($input: UpdateUSBusinessAccountHolderWebsiteInput!) {\n  updateUSBusinessAccountHolderWebsite(input:\
        \ $input) {\n    ... on USBusinessAccountHolder {\n      id\n      businessProfile {\n        website\n      }\n \
        \   }\n    ... on UserError {\n        errors {\n            errorPath\n            code\n            description\n\
        \        }\n    }\n  }\n}"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "website": "https://some.website.com"}}'
  - name: UpdateBusinessAccountHolderPhone
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateUSBusinessAccountHolderPhone($input: UpdateUSBusinessAccountHolderPhoneInput!) {\n  updateUSBusinessAccountHolderPhone(input:\
        \ $input) {\n    ... on USBusinessAccountHolder {\n      id\n      businessProfile {\n        phoneNumbers {\n   \
        \         label\n            countryCode\n            number\n        }\n      }\n    }\n    ... on UserError {\n\
        \        errors {\n            errorPath\n            code\n            description\n        }\n    }\n  }\n}"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "phoneNumber": {"label": "MOBILE", "countryCode":
        "1", "number": "1231231234"}}}'
  Application:
  - name: CreateBusinessAccountHolderApplication
    method: POST
    description: ''
    graphql:
      query: "mutation CreateAccountHolderCardProductApplication(\n  $input: CreateAccountHolderCardProductApplicationInput!\n\
        ) {\n  createAccountHolderCardProductApplication(input: $input) {\n    __typename\n    ... on AccountHolderCardProductApplication\
        \ {\n      id\n      applicationState {\n        status\n      }\n      updatedAt\n      createdAt\n    }\n    ...\
        \ on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "cardProductId": "{{cardProductId}}", "cardHolderAgreementConsent":
        {"primaryAuthorizedPersonId": "{{businessAccountHolderPrimaryAuthorizedPersonId}}", "consentTimestamp": "2024-02-22T17:10:55.662Z"},
        "ipAddress": {"v4": "1.1.1.1"}}}'
  - name: GetBusinessAccountHolderApplication
    method: POST
    description: ''
    graphql:
      query: "query GetBusinessAccountHolderByApplicationID($id: ID!) {\n  node (id: $id) {\n    ... on AccountHolderCardProductApplication\
        \ {\n      id\n      cardProduct {\n        id\n        name\n      }\n      createdAt\n      applicationState {\n\
        \        status\n      }\n      \n      accountHolderSnapshot {\n        ... on USBusinessAccountHolderSnapshot {\n\
        \          primaryAuthorizedPerson {\n            name {\n              givenName\n              familyName\n    \
        \          title\n              suffix\n            }\n            currentVerification {\n              reason\n \
        \             status\n              requiredDocuments {\n                documentUploadSession {\n               \
        \     ... on USAccountHolderApplicationDocumentUploadSession {\n                        documentContext {\n      \
        \                      ... on AccountHolderApplicationDocumentUploadSessionContext {\n                           \
        \     documentVerificationResultCodeContext {\n                                    entries {\n                   \
        \                     document\n                                        verificationResultCodes\n                \
        \                    }\n                                }\n                                verificationResultCodeDocumentContext\
        \ {\n                                    entries {\n                                        documents\n          \
        \                              verificationResultCode\n                                    }\n                   \
        \             }\n                            }\n                        }\n                        recommendedDocumentTypes\n\
        \                    }\n                }\n              }\n            }\n          }\n          businessProfile\
        \ {\n            name {\n              doingBusinessAsName\n              legalBusinessName\n            }\n     \
        \       currentVerification {\n              reason\n              status\n              requiredDocuments {\n   \
        \             documentUploadSession {\n                    ... on USAccountHolderApplicationDocumentUploadSession\
        \ {\n                        documentContext {\n                            ... on AccountHolderApplicationDocumentUploadSessionContext\
        \ {\n                                documentVerificationResultCodeContext {\n                                   \
        \ entries {\n                                        document\n                                        verificationResultCodes\n\
        \                                    }\n                                }\n                                verificationResultCodeDocumentContext\
        \ {\n                                    entries {\n                                        documents\n          \
        \                              verificationResultCode\n                                    }\n                   \
        \             }\n                            }\n                        }\n                        recommendedDocumentTypes\n\
        \                    }\n                }\n              }\n            }\n            ultimateBeneficialOwners {\n\
        \              name {\n                givenName\n                familyName\n                title\n            \
        \    suffix\n              }\n              currentVerification {\n                reason\n                status\n\
        \                requiredDocuments {\n                documentUploadSession {\n                    ... on USAccountHolderApplicationDocumentUploadSession\
        \ {\n                        documentContext {\n                            ... on AccountHolderApplicationDocumentUploadSessionContext\
        \ {\n                                documentVerificationResultCodeContext {\n                                   \
        \ entries {\n                                        document\n                                        verificationResultCodes\n\
        \                                    }\n                                }\n                                verificationResultCodeDocumentContext\
        \ {\n                                    entries {\n                                        documents\n          \
        \                              verificationResultCode\n                                    }\n                   \
        \             }\n                            }\n                        }\n                        recommendedDocumentTypes\n\
        \                    }\n                }\n              }\n              }\n            }  \n          }\n      \
        \  }\n      }\n    }\n  }\n}"
      variables: '{"id": "{{businessAccountHolderApplicationId}}"}'
  - name: GetBusinessAccountHolderApplications
    method: POST
    description: ''
    graphql:
      query: "query GetUSBusinessAccountHolderCardProductApplications (\n  $id: ID!\n) {\n  node(id: $id){\n    ...on USBusinessAccountHolder\
        \ {\n      id\n      cardProductApplications {\n        edges {\n          node {\n            id\n            applicationState\
        \ {\n              status\n            }\n            cardProduct {\n              id\n              name\n      \
        \      }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n}\n"
      variables: '{"id": "{{businessAccountHolderId}}"}'
  Authorized Users:
  - name: CreatePersonAuthorizedUser
    method: POST
    description: ''
    graphql:
      query: "mutation CreateUSPersonAuthorizedUser(\n  $input: CreateUSPersonAuthorizedUserInput!\n) {\n  createUSPersonAuthorizedUser(input:\
        \ $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      name {\n        givenName\n        familyName\n\
        \      }\n      email\n      phoneNumbers {\n        label\n        countryCode\n        number\n      }\n      billingAddress\
        \ {\n        streetAddress\n        extendedAddress\n        locality\n        region\n        postalCode\n      \
        \  countryCodeAlpha3\n      }\n      dateOfBirth\n      externalId\n      associatedAccountHolders {\n        ...\
        \ on AccountHolderConnection {\n          edges {\n            node {\n              ... on USBusinessAccountHolder\
        \ {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n    ... on UserError\
        \ {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}\n"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "personAuthorizedUser": {"email": "foo@example.com",
        "name": {"givenName": "Bob", "familyName": "Barker"}, "billingAddress": {"streetAddress": "123 Main Street", "postalCode":
        "60654", "locality": "Chicago", "region": "IL", "countryCodeAlpha3": "USA"}, "phoneNumber": {"countryCode": "1", "number":
        "5555555555", "label": "MOBILE", "extension": "312"}, "dateOfBirth": "1960-12-12", "externalId": "{{$guid}}"}}}'
  - name: CreateAuthorizedUserCardProductApplication
    method: POST
    description: ''
    graphql:
      query: "mutation CreateAuthorizedUserCardProductApplication($input: CreateAuthorizedUserCardProductApplicationInput!)\
        \ {\n  createAuthorizedUserCardProductApplication(input: $input) {\n    ... on AuthorizedUserCardProductApplication\
        \ {\n      id\n      authorizedUserSnapshot {\n        ... on USPersonAuthorizedUserSnapshot {\n          name {\n\
        \            givenName\n            middleName\n            familyName\n            suffix\n            title\n  \
        \        }\n          authorizedUserCurrent {\n            id\n          }\n        }\n      }\n      accountHolderCardProductApplication\
        \ {\n        id\n        cardProduct {\n          id\n          name\n        }\n      }\n      createdAt\n      updatedAt\n\
        \    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n\
        \    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"authorizedUserId": "{{authorizedUserId}}", "accountHolderCardProductApplicationId": "{{businessAccountHolderApplicationId}}",
        "financialAccountId": "{{financialAccountId}}", "cardHolderAgreementConsent": {"primaryAuthorizedPersonId": "{{authorizedUserId}}",
        "consentTimestamp": "2024-06-30T01:01:01.000Z"}}}'
  - name: IssuePaymentCardForAuthorizedUserApplication
    method: POST
    description: ''
    graphql:
      query: "mutation IssuePaymentCardForAuthorizedUserApplication($input: IssuePaymentCardForAuthorizedUserApplicationInput!)\
        \ {\n  issuePaymentCardForAuthorizedUserApplication(input: $input) {\n    ... on PaymentCard {\n      id\n      bin\n\
        \      last4\n      network\n      expirationYear\n      expirationMonth\n      expirationDate\n      status\n   \
        \   formFactor\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n \
        \     }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"applicationId": "{{authorizedUserApplicationId}}", "options": {"expirationDate": "2027-01-01T23:59:59Z",
        "activateOnCreate": true}}}'
  - name: GetAuthorizedPersonCardProductApplication
    method: POST
    description: ''
    graphql:
      query: "query GetAuthorizedPersonCardProductApplication($id: ID!) {\n  node(id: $id) {\n    ... on AuthorizedUserCardProductApplication\
        \ {\n      id\n      applicationState {\n        status\n      }\n      accountHolderCardProductApplication {\n  \
        \      id\n      }\n      financialAccount {\n        id\n      }\n      authorizedUserSnapshot {\n        ... on\
        \ USPersonAuthorizedUserSnapshot {\n          authorizedUserCurrent {\n            id\n            name {\n      \
        \        givenName\n              familyName\n            }\n            billingAddress {\n              streetAddress\n\
        \              locality\n              region\n              countryCodeAlpha3\n              postalCode\n       \
        \     }\n          }\n        }\n      }\n    }\n  }\n}\n"
      variables: '{"id": "{{authorizedUserApplicationId}}"}'
  - name: GetAccountHolderAuthorizedUsers
    method: POST
    description: ''
    graphql:
      query: "query GetAccountHolderAuthorizedUsers($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n    ... on\
        \ USBusinessAccountHolder {\n      businessProfile {\n        authorizedUsers(first: $first, after: $after) {\n  \
        \        pageInfo {\n            startCursor\n            endCursor\n            hasNextPage\n          }\n      \
        \    edges {\n            node {\n              id\n              createdAt\n              name {\n              \
        \  givenName\n                familyName\n              }\n              email\n              externalId\n       \
        \       cardProductApplications {\n                edges {\n                  node {\n                    id\n   \
        \               }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\
        }"
      variables: '{"id": "{{businessAccountHolderId}}"}'
  - name: UpdatePersonAuthorizedUserBillingAddress
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateUSPersonAuthorizedUserBillingAddress($input: UpdateUSPersonAuthorizedUserBillingAddressInput!)\
        \ {\n  updateUSPersonAuthorizedUserBillingAddress(input: $input) {\n    ... on USPersonAuthorizedUser {\n      id\n\
        \      billingAddress {\n        streetAddress\n        extendedAddress\n        postalCode\n        region\n    \
        \    locality\n        countryCodeAlpha3\n      }\n    }\n  }\n}"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "authorizedUserId": "{{authorizedUserId}}",
        "billingAddress": {"countryCodeAlpha3": "USA", "streetAddress": "123 Test St", "locality": "Test", "region": "CA",
        "postalCode": "12345"}, "updatePaymentCardBillingAddress": true}}'
  - name: UpdatePersonAuthorizedUserPhone
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateUSPersonAuthorizedUserPhone($input: UpdateUSPersonAuthorizedUserPhoneInput!) {\n  updateUSPersonAuthorizedUserPhone(input:\
        \ $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      phoneNumbers {\n        countryCode\n        number\n\
        \        label\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n\
        \      }\n    }\n  }\n}"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "authorizedUserId": "{{authorizedUserId}}",
        "phoneNumber": {"label": "MOBILE", "countryCode": "1", "number": "1231231234"}}}'
  - name: UpdatePersonAuthorizedUserEmail
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateUSPersonAuthorizedUserEmail($input: UpdateUSPersonAuthorizedUserEmailInput!) {\n  updateUSPersonAuthorizedUserEmail(input:\
        \ $input) {\n    ... on USPersonAuthorizedUser {\n      id\n      email\n    }\n    ... on UserError {\n      errors\
        \ {\n        path\n        code\n        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"accountHolderId": "{{businessAccountHolderId}}", "authorizedUserId": "{{authorizedUserId}}",
        "email": "test@test.com"}}'
  Financial Accounts:
  - name: IssueFinancialAccountForApplication
    method: POST
    description: ''
    graphql:
      query: "mutation IssueFinancialAccountForApplication($input: IssueFinancialAccountForApplicationInput!) {\n  issueFinancialAccountForApplication(input:\
        \ $input) {\n    ... on FinancialAccount {\n      __typename\n      id\n      name\n      owner {\n        __typename\n\
        \      }\n      ledgers {\n        name\n      }\n      features {\n        __typename\n        enabled\n        createdAt\n\
        \        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails {\n          ...\
        \ on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n            bank {\n \
        \             name\n              address {\n                streetAddress\n                postalCode\n         \
        \     }\n            }\n          }\n          ... on AccessDeniedError {\n            __typename\n            message\n\
        \          }\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n    \
        \    description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}\n"
      variables: '{"input": {"applicationId": "{{businessAccountHolderApplicationId}}", "name": "Financial Account 1"}}'
  - name: GetFinancialAccountById
    method: POST
    description: ''
    graphql:
      query: "query GetFinancialAccountByID($id: ID!) {\n  node(id: $id) {\n    ... on FinancialAccount {\n      __typename\n\
        \      id\n      createdAt\n      name\n      owner {\n        __typename\n      }\n      cardProduct {\n        id\n\
        \      }\n      ledgers {\n        id\n        name\n        normalBalance\n        creditBalance {\n          value\n\
        \        }\n        debitBalance {\n          value\n        }\n        ledgerEntries {\n          edges {\n     \
        \       node {\n              __typename\n              id\n              createdAt\n              amount {\n    \
        \            value\n                currencyCode\n              }\n              financialEvent {\n              \
        \  ... on Transfer {\n                  amount {\n                    value\n                  }\n               \
        \ }\n              }\n            }\n          }\n        }\n      }\n      features {\n        __typename\n     \
        \   enabled\n        createdAt\n        updatedAt\n      }\n      directDepositDetails {\n        id\n        restrictedDetails\
        \ {\n          ... on DirectDepositDetailRestrictedDetails {\n            number\n            routingNumber\n    \
        \        bank {\n              name\n              address {\n                streetAddress\n                postalCode\n\
        \              }\n            }\n          }\n          ... on AccessDeniedError {\n            message\n        \
        \  }\n        }\n      }\n    }\n  }\n}\n"
      variables: '{"id": "{{financialAccountId}}"}'
  Payment Cards:
  - name: IssuePaymentCardForFinancialAccount
    method: POST
    description: ''
    graphql:
      query: "mutation IssuePaymentCardForFinancialAccount($input: IssuePaymentCardForFinancialAccountInput!) {\n  issuePaymentCardForFinancialAccount(input:\
        \ $input) {\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      expirationDate\n      network\n   \
        \   status\n      formFactor\n      financialAccounts {\n        ledgers {\n          normalBalance\n          creditBalance\
        \ {\n            value\n          }\n          debitBalance {\n            value\n          }\n        }\n      }\n\
        \      cardProductApplication {\n        ... on AccountHolderCardProductApplication {\n\t\t\tid\n\t\t\tapplicationState\
        \ {\n\t\t\t\tstatus\n\t\t\t}\n\t\t\taccountHolderSnapshot {\n\t\t\t\t__typename\n\t\t\t\t... on USPersonAccountHolderSnapshot\
        \ {\n\t\t\t\t\tname {\n\t\t\t\t\t\tgivenName\n\t\t\t\t\t\tfamilyName\n\t\t\t\t\t}\n\t\t\t\t\tbillingAddress {\n\t\t\
        \t\t\t\tstreetAddress\n\t\t\t\t\t\tlocality\n\t\t\t\t\t\tpostalCode\n\t\t\t\t\t\tcountryCodeAlpha3\n\t\t\t\t\t}\n\t\
        \t\t\t\tcurrentVerification {\n\t\t\t\t\t\tstatus\n\t\t\t\t\t\treason\n\t\t\t\t\t\tresults {\n\t\t\t\t\t\t\tcode\n\
        \t\t\t\t\t\t\tdescription\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n        }\n      }\n      \n      restrictedDetails\
        \ {\n        ... on PaymentCardRestrictedDetails {\n          cvv\n          number\n        }\n        ... on AccessDeniedError\
        \ {\n          message\n        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n\
        \        description\n      }\n    }\n  }\n}\n"
      variables: '{"input": {"financialAccountId": "{{financialAccountId}}", "options": {"activateOnCreate": false, "expirationDate":
        "2026-01-01T23:59:59Z"}}}'
  - name: GenerateClientTokenToSetPin
    method: POST
    description: ''
    graphql:
      query: "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input:\
        \ $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError\
        \ {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError\
        \ {\n      message\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}", "permissions": "SET_PAYMENT_CARD_PIN"}}'
  - name: GenerateClientTokenForRestrictedDetail
    method: POST
    description: ''
    graphql:
      query: "mutation GeneratePaymentCardClientToken($input: GeneratePaymentCardClientTokenInput!) {\n  generatePaymentCardClientToken(input:\
        \ $input) {\n    ... on ClientToken {\n      value\n      usage\n      expirationDate\n    }\n    ... on UserError\
        \ {\n      errors {\n        code\n        description\n        path\n      }\n    }\n    ... on AccessDeniedError\
        \ {\n      message\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "PAYMENT_CARD_ID", "permissions": "READ_RESTRICTED_DETAILS"}}'
  - name: ViewPaymentCardRestrictedDetails
    method: POST
    description: ''
    graphql:
      query: "query GetPaymentCardRestrictedDetails($id: ID!) {\n    node (id: $id) {\n        ... on PaymentCard {\n    \
        \        restrictedDetails {\n                ... on PaymentCardRestrictedDetails {\n                    number\n\
        \                    cvv\n                }\n            }\n        }\n    }\n}"
      variables: '{"id": "PAYMENT_CARD_ID"}'
  - name: ActivatePaymentCard
    method: POST
    description: ''
    graphql:
      query: "mutation ActivatePaymentCard($input: ActivatePaymentCardInput!) {\n  activatePaymentCard(input: $input) {\n\
        \    ... on PaymentCard {\n      id\n      status\n    }\n    ... on UserError {\n      errors {\n        path\n \
        \       code\n        description\n      }\n    }\n  }\n}\n"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}"}}'
  - name: SetPinForPaymentCard
    method: POST
    description: ''
    graphql:
      query: "mutation SetPinForPaymentCard($input: SetPinForPaymentCardInput!) {\n  setPinForPaymentCard(input: $input) {\n\
        \    __typename\n    ... on PaymentCard {\n      id\n      bin\n      last4\n      pinDetails {\n        isSet\n \
        \       pinUpdateHistory {\n            updatedAt\n        }\n      }\n    }\n    ... on UserError {\n      errors\
        \ {\n        errorPath\n        code\n        description\n      }\n    }\n  }\n}\n"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}", "newPin": "1234"}}'
  - name: SuspendPaymentCard
    method: POST
    description: ''
    graphql:
      query: "mutation SuspendPaymentCard($input: SuspendPaymentCardInput!) {\n  suspendPaymentCard(input: $input) {\n   \
        \ ...on PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n      \
        \  code\n        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}"}}'
  - name: ReissuePaymentCard
    method: POST
    description: ''
    graphql:
      query: "mutation ReissuePaymentCard($input: ReissuePaymentCardInput!) {\n  reissuePaymentCard(input: $input) {\n   \
        \ ... on PaymentCard {\n      id\n      bin\n      last4\n      physicalPaymentCardOrders {\n        id\n      }\n\
        \      status\n    }\n    ... on UserError {\n      errors {\n        code\n        description\n        path\n  \
        \    }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"options": {"reissueFeatures": {"copyNumber": true, "copyPin": true}, "expirationDate": "2024-12-29T23:12:30Z",
        "activateOnCreate": false}, "originalPaymentCardId": "{{paymentCardId}}"}}'
  - name: ClosePaymentCard
    method: POST
    description: ''
    graphql:
      query: "mutation ClosePaymentCard($input: ClosePaymentCardInput!) {\n  closePaymentCard(input: $input) {\n    ...on\
        \ PaymentCard {\n      id\n      status\n    }\n    ...on UserError {\n      errors {\n        path\n        code\n\
        \        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}"}}'
  - name: GetPaymentCard
    method: POST
    description: ''
    graphql:
      query: "query GetPaymentCard($id: ID!) {\n    node(id: $id) {\n        ... on PaymentCard {\n            id\n      \
        \      last4\n            status\n            pinDetails {\n                isSet\n            }\n        }\n    }\n\
        }"
      variables: '{"id": "{{paymentCardId}}"}'
  Transactions:
  - name: GetTransactionEvent
    method: POST
    description: ''
    graphql:
      query: "query GetTransactionEvent($id: ID!) {\n  node(id: $id) {\n    ... on TransactionEvent {\n    __typename\n  \
        \  id\n    approvedAmount {\n      currencyCode\n      value\n    }\n    responseCode\n    createdAt\n    transactionProcessingType\n\
        \    pointOfServiceDetails {\n      category\n      panEntryMode\n      pinEntryMode\n      terminalAttendance\n \
        \     isCardHolderPresent\n      isCardPresent\n      isRecurring\n      terminalSupportsPartialApproval\n    }\n\
        \    additionalNetworkData {\n      ... on VisaData {\n        transactionIdentifier\n      }\n    }\n  }\n}}"
      variables: '{"id": "{{authorizationEventId}}"}'
  - name: TransactionEventsByPaymentCardAndTransactionid
    method: POST
    description: ''
    graphql:
      query: "query TransactionEventsByPaymentCardAndTransactionId($id: ID!, $filterBy: PaymentCardTransactionEventsFilterInput)\
        \ {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      transactionEvents(filterBy: $filterBy) {\n     \
        \   edges {\n          node {\n            __typename\n            id\n            createdAt\n            responseCode\n\
        \            approvedAmount {\n              value\n              currencyCode\n            }\n            transaction\
        \ {\n              ... on CreditTransaction {\n                __typename\n                id\n              }\n \
        \             ... on DebitTransaction {\n                __typename\n                id\n              }\n       \
        \     }\n          }\n        }\n      }\n    }\n  }\n}"
      variables: '{"id": "{{paymentCardId}}", "filterBy": {"transactionId": {"equals": "{{transactionId}}"}}}'
  Velocity Rules:
  - name: CreateAmountLimitSpendRule
    method: POST
    description: ''
    graphql:
      query: "mutation CreateAmountLimitSpendRule($input: CreateAmountLimitSpendRuleInput!) {\n  createAmountLimitSpendRule(input:\
        \ $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n     \
        \   currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n\
        \          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n       \
        \ edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n\
        \        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n\
        \      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"name": "Test Amount Limit Rule", "maximumAmount": {"value": 100000, "currencyCode": "USD"}}}'
  - name: UpdateAmountLimitSpendRule
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateAmountLimitSpendRule($input: UpdateAmountLimitSpendRuleInput!) {\n  updateAmountLimitSpendRule(input:\
        \ $input) {\n    ... on AmountLimitSpendRule {\n      id\n      name\n      maximumAmount {\n        value\n     \
        \   currencyCode\n      }\n      updatedAt\n      createdAt\n      version\n      revisions {\n        pageInfo {\n\
        \          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n       \
        \ edges {\n          cursor\n          node {\n            id\n            name\n            version\n          }\n\
        \        }\n      }\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n\
        \      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"spendRuleId": "{{amountLimitSpendRuleId}}", "maximumAmount": {"value": 200000, "currencyCode":
        "USD"}}}'
  - name: CreateVelocityRule
    method: POST
    description: ''
    graphql:
      query: "mutation CreateVelocityRule($input: CreateVelocityRuleInput!) {\n  createVelocityRule(input: $input) {\n   \
        \ ... on VelocityRule {\n      id\n      name\n      velocityRuleWindow\n      cumulativeRule {\n        id\n    \
        \    name\n        version\n        createdAt\n        updatedAt\n        revisions {\n          pageInfo {\n    \
        \        hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n \
        \         edges {\n            cursor\n            node {\n              id\n              name\n              version\n\
        \              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      spendRules\
        \ {\n        id\n        name\n        version\n        createdAt\n        updatedAt\n      }\n      version\n   \
        \   createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n      \
        \  description\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"name": "Test Velocity Control - Max $1000 per month", "cumulativeRule": {"id": "{{amountLimitSpendRuleId}}",
        "version": "LATEST"}, "velocityRuleWindow": "MONTHLY"}}'
  - name: GetAllVelocityRules
    method: POST
    description: ''
    graphql:
      query: "query GetAllVelocityRules {\n  organizations {\n    velocityRules {\n      pageInfo {\n        hasNextPage\n\
        \        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        cursor\n       \
        \ node {\n          id\n          name\n          velocityRuleWindow\n          version\n          createdAt\n   \
        \       updatedAt\n          cumulativeRule {\n            ... on AmountLimitSpendRule {\n              id\n     \
        \         name\n              maximumAmount {\n                value\n                currencyCode\n             \
        \ }\n              version\n              createdAt\n              updatedAt\n            }\n          }\n       \
        \   spendRules {\n            __typename\n            id\n            name\n            version\n            createdAt\n\
        \            updatedAt\n          }\n        }\n      }\n    }\n  }\n}"
      variables: '{}'
  - name: GetPaymentCardVelocityRule
    method: POST
    description: ''
    graphql:
      query: "query GetPaymentCardVelocityRule($id: ID!) {\n  node(id: $id) {\n    ... on PaymentCard {\n      id\n      bin\n\
        \      last4\n      attachedVelocityRules {\n        edges {\n          node {\n            id\n            name\n\
        \            version\n          }\n        }\n      }\n      velocitySpendRuleBalances {\n\t\t\t\t... on VelocitySpendRuleAmountBalance\
        \ {\n\t\t\t\t\tcurrentBalance {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tremainingBalance\
        \ {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t\tcurrencyCode\n\t\t\t\t\t}\n\t\t\t\t\tvelocityRule {\n\t\t\t\t\t\tid\n\t\t\t\t\t\
        \tname\n\t\t\t\t\t\tvelocityRuleWindow\n\t\t\t\t\t\tcumulativeRule {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\
        \t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\trevisions {\n\t\t\t\t\t\t\t\tpageInfo\
        \ {\n\t\t\t\t\t\t\t\t\thasNextPage\n\t\t\t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\
        \t\t\tendCursor\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tedges {\n\t\t\t\t\t\t\t\t\tcursor\n\t\t\t\t\t\t\t\t\tnode {\n\t\
        \t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\
        \t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tspendRules\
        \ {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tversion\n\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\tupdatedAt\n\
        \t\t\t\t\t\t}\n\t\t\t\t\t\tversion\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t}\n\t\t\t\t}\n    \t}\n\
        \  \t}\n\t}\n}"
      variables: '{"id": "{{paymentCardId}}"}'
  - name: GetFinancialAccountWithVelocityBalance
    method: POST
    description: ''
    graphql:
      query: "query GetFinancialAccountWithVelocityBalance($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on FinancialAccount\
        \ {\n      id\n      velocitySpendRuleBalances {\n        ... on VelocitySpendRuleAmountBalance {\n          __typename\n\
        \n          currentBalance {\n            currencyCode\n            value\n          }\n          remainingBalance\
        \ {\n            currencyCode\n            value\n          }\n          velocityRule {\n            id\n        \
        \    version\n            name\n          }\n        }\n      }\n    }\n  }\n}\n\n"
      variables: '{"id": "{{financialAccountId}}"}'
  - name: AttachPaymentCardVelocityRule
    method: POST
    description: ''
    graphql:
      query: "mutation AttachPaymentCardVelocityRule($input: AttachPaymentCardVelocityRuleInput!) {\n  attachPaymentCardVelocityRule(input:\
        \ $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n\
        \        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n\
        \          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n       \
        \       startCursor\n              endCursor\n            }\n            edges {\n              cursor\n         \
        \     node {\n                id\n                name\n                version\n                createdAt\n     \
        \           updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n\
        \          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n       \
        \ createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n        \
        \  id,\n          bin,\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n   \
        \ }\n    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n   \
        \ ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}", "velocityRule": {"velocityRuleId": "{{velocityRuleId}}",
        "version": "LATEST"}}}'
  - name: DetachPaymentCardVelocityRule
    method: POST
    description: ''
    graphql:
      query: "mutation DetachPaymentCardVelocityRule($input: DetachPaymentCardVelocityRuleInput!) {\n  detachPaymentCardVelocityRule(input:\
        \ $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n\
        \        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n\
        \          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n       \
        \       startCursor\n              endCursor\n            }\n            edges {\n              cursor\n         \
        \     node {\n                id\n                name\n                version\n                createdAt\n     \
        \           updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n\
        \          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n       \
        \ createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on PaymentCard {\n        \
        \  id\n          bin\n          last4\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n\
        \    ... on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ...\
        \ on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}", "velocityRule": {"velocityRuleId": "{{velocityRuleId}}"}}}'
  - name: AttachCardProductVelocityRule
    method: POST
    description: ''
    graphql:
      query: "mutation AttachCardProductVelocityRule($input: AttachCardProductVelocityRuleInput!) {\n  attachCardProductVelocityRule(input:\
        \ $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n\
        \        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n\
        \          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n       \
        \       startCursor\n              endCursor\n            }\n            edges {\n              cursor\n         \
        \     node {\n                id\n                name\n                version\n                createdAt\n     \
        \           updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n\
        \          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n       \
        \ createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n        \
        \  id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError\
        \ {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError\
        \ {\n      message\n    }\n  }\n}"
      variables: '{"input": {"cardProductId": "{{cardProductId}}", "velocityRule": {"velocityRuleId": "{{velocityRuleId}}",
        "version": "0"}}}'
  - name: DetachCardProductVelocityRule
    method: POST
    description: ''
    graphql:
      query: "mutation DetachCardProductVelocityRule($input: DetachCardProductVelocityRuleInput!) {\n  detachCardProductVelocityRule(input:\
        \ $input) {\n    ... on VelocityRuleAssociation {\n      velocityRule {\n        id\n        name\n        velocityRuleWindow\n\
        \        cumulativeRule {\n          id\n          name\n          version\n          createdAt\n          updatedAt\n\
        \          revisions {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n       \
        \       startCursor\n              endCursor\n            }\n            edges {\n              cursor\n         \
        \     node {\n                id\n                name\n                version\n                createdAt\n     \
        \           updatedAt\n              }\n            }\n          }\n        }\n        spendRules {\n          id\n\
        \          name\n          version\n          createdAt\n          updatedAt\n        }\n        version\n       \
        \ createdAt\n        updatedAt\n      }\n      name\n      associatedTo {\n        ... on CardProduct {\n        \
        \  id\n          name\n        }\n      }\n      version\n      createdAt\n      updatedAt\n    }\n    ... on UserError\
        \ {\n      errors {\n        path\n        code\n        description\n      }\n    }\n    ... on AccessDeniedError\
        \ {\n      message\n    }\n  }\n}"
      variables: '{"input": {"cardProductId": "{{cardProductId}}", "velocityRule": {"velocityRuleId": "{{velocityRuleId}}"}}}'
  Spend Rules:
  - name: CreateMerchantCategorySpendRule
    method: POST
    description: ''
    graphql:
      query: "mutation CreateMerchantCategorySpendRule(\n  $input: CreateMerchantCategorySpendRuleInput!\n) {\n  createMerchantCategorySpendRule(input:\
        \ $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n\
        \      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n  \
        \      path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"name": "Fuel Rule", "allowed": ["AUTOMATED_FUEL_DISPENSERS"], "blocked": ["AIRLINES_AIR_CARRIERS"]}}'
  - name: AttachSpendRuleToCardProduct
    method: POST
    description: ''
    graphql:
      query: "mutation AttachSpendRuleToCardProduct($input: AttachSpendRuleToCardProductInput!) {\n  attachSpendRuleToCardProduct(input:\
        \ $input) {\n    ...on CardProduct {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n  \
        \          ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n\
        \    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}"
      variables: '{"input": {"cardProductId": "{{cardProductId}}", "spendRule": {"id": "SPEND_RULE_ID", "version": "0"}}}'
  - name: UpdateMerchantCategorySpendRule
    method: POST
    description: ''
    graphql:
      query: "mutation UpdateMerchantCategorySpendRule(\n  $input: UpdateMerchantCategorySpendRuleInput!\n) {\n  updateMerchantCategorySpendRule(input:\
        \ $input) {\n    __typename\n    ... on MerchantCategorySpendRule {\n      id\n      name\n      version\n      allowed\n\
        \      blocked\n      createdAt\n      updatedAt\n    }\n    ... on UserError {\n      errors {\n        code\n  \
        \      path\n      }\n    }\n    ... on AccessDeniedError {\n      message\n    }\n  }\n}"
      variables: '{"input": {"spendRuleId": "SPEND_RULE_ID", "allowed": ["AUTOMATED_FUEL_DISPENSERS"], "blocked": []}}'
  - name: AttachSpendRuleToPaymentCard
    method: POST
    description: ''
    graphql:
      query: "mutation AttachSpendRuleToPaymentCard($input: AttachSpendRuleToPaymentCardInput!) {\n  attachSpendRuleToPaymentCard(input:\
        \ $input) {\n    ...on PaymentCard {\n      id\n      attachedSpendRules {\n        edges {\n          node {\n  \
        \          ...on SpendRule {\n              id\n              name\n            }\n          }\n        }\n      }\n\
        \    }\n    ... on UserError {\n      errors {\n        code\n      }\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}", "spendRule": {"id": "SPEND_RULE_ID", "version": "0"}}}'
  - name: DetachSpendRuleFromCardProduct
    method: POST
    description: ''
    graphql:
      query: "mutation DetachSpendRuleFromCardProduct($input: DetachSpendRuleFromCardProductInput!) {\n  detachSpendRuleFromCardProduct(input:\
        \ $input) {\n    __typename\n\t\t... on CardProduct {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n \
        \       code\n        path\n        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"cardProductId": "{{cardProductId}}", "spendRule": {"id": "SPEND_RULE_ID"}}}'
  - name: DetachSpendRuleFromPaymentCard
    method: POST
    description: ''
    graphql:
      query: "mutation DetachSpendRuleFromPaymentCard($input: DetachSpendRuleFromPaymentCardInput!) {\n  detachSpendRuleFromPaymentCard(input:\
        \ $input) {\n    __typename\n\t\t... on PaymentCard {\n\t\t\tid\n\t\t}\n    ... on UserError {\n      errors {\n \
        \       code\n        path\n        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"paymentCardId": "{{paymentCardId}}", "spendRule": {"id": "SPEND_RULE_ID"}}}'
  Notification Targets:
  - name: AddWebhookNotificationTarget
    method: POST
    description: ''
    graphql:
      query: "mutation AddWebhookNotificationTarget($input: AddWebhookNotificationTargetInput!) {\n  addWebhookNotificationTarget(input:\
        \ $input) {\n    __typename\n    ...on WebhookNotificationTarget {\n      id\n      name\n      uri\n      subscriptions\n\
        \      createdAt\n      status\n      updatedAt\n      signingKeys {\n        id\n        secret\n      }\n    }\n\
        \    ...on UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"name": "My Target", "uri": "<URI>", "subscriptions": ["PAYMENT_CARD_ACTIVATED", "AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED",
        "CARD_PRODUCT_APPLICATION_APPROVED", "CARD_PRODUCT_APPLICATION_IN_REVIEW", "CARD_PRODUCT_APPLICATION_MANUAL_REVIEW",
        "CARD_PRODUCT_APPLICATION_DENIED", "CARD_PRODUCT_APPLICATION_CLOSED", "PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED",
        "PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED"]}}'
  - name: GetAllWebhookNotificationTargets
    method: POST
    description: ''
    graphql:
      query: "query GetAllWebhookNotificationTargets($firstTargets: Int, $afterTargets: String) {\n\torganizations {\n\t\t\
        id\n\n\t\twebhookNotificationTargets(first: $firstTargets, after: $afterTargets) {\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\
        \t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\n\t\t\tedges {\n\t\t\t\tcursor\n\t\t\t\t\
        node {\n\t\t\t\t\t__typename\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tstatus\n\t\t\t\t\tdeactivatedAt\n\t\t\t\t\t\
        subscriptions\n\n\t\t\t\t\tstatusHistory {\n\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\tpageInfo {\n\t\t\t\t\t\t\thasNextPage\n\
        \t\t\t\t\t\t\thasPreviousPage\n\t\t\t\t\t\t\tstartCursor\n\t\t\t\t\t\t\tendCursor\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedges\
        \ {\n\t\t\t\t\t\t\tcursor\n\n\t\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\t\t__typename\n\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\
        \tcreatedAt\n\t\t\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\t\t\tpreviousStatus\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\
        }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
      variables: '{}'
  - name: DeactivateNotificationTarget
    method: POST
    description: ''
    graphql:
      query: "mutation DeactivateNotificationTarget($input: DeactivateNotificationTargetInput!) {\n\tdeactivateNotificationTarget(input:\
        \ $input) {\n\t\t... on WebhookNotificationTarget {\n\t\t\tid\n\t\t\tstatus\n\t\t}\n\t}\n}\n"
      variables: '{"input": {"targetId": "<ID>"}}'
  - name: ActivateNotificationTarget
    method: POST
    description: ''
    graphql:
      query: "fragment Target on WebhookNotificationTarget {\n\t__typename\n\tid\n\tname\n\turi\n\tsubscriptions\n\tstatus\n\
        \tcreatedAt\n\tupdatedAt\n\tsigningKeys {\n\t\tid\n\t\tsecret\n\t\tcreatedAt\n\t}\n}\n\nmutation ActivateNotificationTarget($input:\
        \ ActivateNotificationTargetInput!) {\n\tactivateNotificationTarget(input: $input) {\n\t\t...Target\n\t}\n}\n"
      variables: '{"input": {"targetId": "<ID>"}}'
  - name: GetWebhookNotificationTarget
    method: POST
    description: ''
    graphql:
      query: "query GetWebhookNotificationTarget($id: ID!) {\n\tnode(id: $id) {\n\t\t__typename\n\t\t... on WebhookNotificationTarget\
        \ {\n\t\t\tstatus\n\t\t\tid\n\n\t\t\tdeliveryAttempts {\n\t\t\t\t__typename\n\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\
        \t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\t\t\t\t\tendCursor\n\t\t\t\t}\n\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\
        \n\t\t\t\t\tnode {\n\t\t\t\t\t\t__typename\n\t\t\t\t\t\tid\n\t\t\t\t\t\turi\n\t\t\t\t\t\tresponse {\n\t\t\t\t\t\t\t\
        httpStatusCode\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdeliveryAttemptStatus\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tevent {\n\t\t\
        \t\t\t\t\tname\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstatusHistory {\n\t\
        \t\t\t__typename\n\t\t\t\t\n\t\t\t\tpageInfo {\n\t\t\t\t\thasNextPage\n\t\t\t\t\thasPreviousPage\n\t\t\t\t\tstartCursor\n\
        \t\t\t\t\tendCursor\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tedges {\n\t\t\t\t\tcursor\n\t\t\t\t\t\n\t\t\t\t\tnode {\n\t\t\t\t\
        \t\t__typename\n\t\t\t\t\t\t\n\t\t\t\t\t\tid\n\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\tnewStatus\n\t\t\t\t\t\tpreviousStatus\n\
        \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
      variables: '{"id": "<ID>"}'
  - name: GetNotificationTargetDeliveryAttempts
    method: POST
    description: ''
    graphql:
      query: "query GetNotificationTargetDeliveryAttempts($id: ID!, $first: Int, $after: String) {\n  node(id: $id) {\n  \
        \  __typename\n    ... on WebhookNotificationTarget {\n      id\n      deliveryAttempts(first: $first, after: $after)\
        \ {\n        __typename\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n\
        \          endCursor\n        }\n        edges {\n          cursor\n          node {\n            __typename\n   \
        \         id\n            uri\n            response {\n\t\t\t\thttpStatusCode\n\t\t\t}\n            deliveryAttemptStatus\n\
        \            createdAt\n            event {\n              name\n              id\n            }\n          }\n  \
        \      }\n      }\n    }\n  }\n}"
      variables: '{"id": "WEBHOOK_NOTIFICATION_TARGET_ID"}'
  - name: AddSubscriptionsToNotificationTarget
    method: POST
    description: ''
    graphql:
      query: "mutation AddSubscriptionsToNotificationTarget($input: AddSubscriptionsToNotificationTargetInput!) {\n  addSubscriptionsToNotificationTarget(input:\
        \ $input) {\n    ... on WebhookNotificationTarget {\n      id\n      name\n      subscriptions\n    }\n    ... on\
        \ UserError {\n      errors {\n        path\n        code\n        description\n      }\n    }\n  }\n}"
      variables: '{"input": {"targetId": "WEBHOOK_NOTIFICATION_TARGET_ID", "subscriptions": ["ACCOUNT_STATUS_CLOSED"]}}'
  - name: RemoveSubscriptionsFromNotificationTarget
    method: POST
    description: ''
    graphql:
      query: "mutation RemoveSubscriptionsFromNotificationTarget($input: RemoveSubscriptionsFromNotificationTargetInput!)\
        \ {\n  removeSubscriptionsFromNotificationTarget(input: $input) {\n    ... on WebhookNotificationTarget {\n      id\n\
        \      name\n      subscriptions\n    }\n    ... on UserError {\n      errors {\n        path\n        code\n    \
        \    description\n      }\n    }\n  }\n}"
      variables: '{"input": {"targetId": "WEBHOOK_NOTIFICATION_TARGET_ID", "subscriptions": ["ACCOUNT_STATUS_CLOSED"]}}'
flows: *id001
