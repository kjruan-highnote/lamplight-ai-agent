"""Directive to define the protobuffer path to the GraphQL input field."""
directive @protoErrorPath(
  """
  The path returned from `ErrorDetail.getField()`. Example: `/person/firstName`.
  """
  path: String!
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""Directive to define the protobuffer path to the GraphQL input field."""
directive @protoErrorPathPrefix(
  """
  The prefix for error paths mapped to nested fields. Example: `/businessAccountHolder`.
  """
  prefix: String!
) on INPUT_FIELD_DEFINITION

"""
Directive to enable GraphQL server to generate error mappings from gRPC services to GraphQL input.
"""
directive @useProtoErrorMapper on FIELD_DEFINITION

"""
Directive to enable or disable a field based on an environment variable.
"""
directive @featureFlag(
  """Name of the feature flag."""
  name: String!
) on FIELD_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

directive @complexity(
  """Optional multipliers"""
  multipliers: [String!]

  """The complexity value for the field"""
  value: Int!
) on FIELD_DEFINITION

"""Directive to hide a field from introspection."""
directive @hiddenFromIntrospection on FIELD_DEFINITION

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""A non-negative integer"""
scalar UnsignedInt

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A UUIDv4 string used to uniquely identify requests.

If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.

[See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
"""
scalar IdempotencyKey

"""All Queries that can be performed."""
type Query {
  """Simple query that returns a static value of `pong`"""
  ping: String!

  """Query to fetch any type by its globally unique ID."""
  node(id: ID!): Node

  """A paginated list of schema changelogs"""
  schemaChangelogs(first: Int = 10, after: String): SchemaChangelogConnection

  """
  A paginated list of personAccountHolders.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  personAccountHolders(
    first: Int = 20
    after: String

    """Filter results to specific account holder."""
    filterBy: PersonAccountHolderFilterInput
  ): USPersonAccountHolderConnection

  """
  A paginated list of businessAccountHolders.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  businessAccountHolders(
    first: Int = 20
    after: String

    """Filter results to specific business account holder."""
    filterBy: BusinessAccountHolderFilterInput
  ): USBusinessAccountHolderConnection

  """
  A paginated list of personAuthorizedUsers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  personAuthorizedUsers(
    first: Int = 20
    after: String

    """Filter results to specific authorized user."""
    filterBy: PersonAuthorizedUserFilterInput
  ): AuthorizedUserConnection

  """A list of organizations."""
  organizations: [Organization!]

  """A paginated list of Card Products."""
  cardProducts(first: Int = 10, after: String): CardProductConnection

  """A list of merchant categories."""
  merchantCategories: MerchantCategoryDetailsContainer

  """Find a customer"""
  customer(customerIdentifier: String!): CustomerPayload

  """A paginated list of notification events."""
  notificationEvents(
    first: Int = 20
    after: String

    """The filter parameter for this connection."""
    filterBy: NotificationEventsFilterInput
  ): NotificationEventsConnection

  """
  Determine whether `TransactionEvent`s are eligible for any available `InstallmentOffers`. These must be `AuthorizationAndClearEvent`s or `ClearingEvent`s, and they must have an `Amount` within the range defined by an active `CreditPlan` with a `CreditBalanceType` of `INSTALLMENT`.
  """
  installmentEligibilityForTransactionEvents(input: InstallmentEligibilityForTransactionEventsInput): InstallmentEligibilityForTransactionEventsPayload

  """
  Retrieve the available `InstallmentOffer`s for a `Transaction` by providing a `TransactionEvent`. This must be either an `AuthorizationAndClearEvent` or a `ClearingEvent`.
  """
  installmentOffersForTransactionEvent(input: InstallmentOffersForTransactionEventInput): InstallmentOffersForTransactionEventPayload

  """
  A paginated list of FeeTransferEvents.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  feeTransferEvents(
    first: Int = 20
    after: String

    """Filter results to specific Fee Transfer Event."""
    filterBy: FeeTransferEventFilterInput
  ): FeeTransferEventConnection

  """Finds report usage metrics for the current Organization."""
  reportUsage: [ReportUsage!]

  """Finds reports that match the given filter."""
  reports(first: Int = 20, after: String, filterBy: ReportFilterInput): ReportConnection

  """
  A paginated list of all card profile sets filtered by name, status and card product.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  cardProfileSets(first: Int = 20, after: String, filterBy: FilteredCardProfileSetsInput!): CardProfileSetConnectionPayload

  """A paginated list of `PaymentTransaction`s."""
  paymentTransactions(first: Int = 20, after: String, filterBy: PaymentTransactionFilterInput): PaymentTransactionsConnection

  """Finds application metrics that match the given filter."""
  cardProductApplicationBusinessMetric(filterBy: CardProductApplicationBusinessMetricFilterInput): CardProductApplicationBusinessMetricResult

  """Finds transaction metrics that match the given filter."""
  paymentCardTransactionBusinessMetric(filterBy: PaymentCardTransactionBusinessMetricFilterInput): PaymentCardTransactionBusinessMetricResult
}

"""The schema definition for check payment mutations."""
type Mutation {
  """Create a new USPersonAccountHolder."""
  createUSPersonAccountHolder(input: CreateUSPersonAccountHolderInput!): CreateUSPersonAccountHolderPayload

  """Tokenizes data for a new USPersonAccountHolder."""
  tokenizeUSPersonAccountHolder(input: CreateUSPersonAccountHolderInput!): TokenizeUSPersonAccountHolderPayload

  """Tokenizes data for a new USBusinessAccountHolder."""
  tokenizeUSBusinessAccountHolder(input: CreateUSBusinessAccountHolderInput): TokenizeUSBusinessAccountHolderPayload

  """Tokenizes data for a new USPersonAuthorizedUser."""
  tokenizeUSPersonAuthorizedUser(input: CreateUSPersonAuthorizedUserInput!): TokenizeUSPersonAuthorizedUserPayload

  """Create a new USPersonAccountHolder from tokenized data."""
  createUSPersonAccountHolderFromToken(input: CreateUSPersonAccountHolderFromTokenInput!): CreateUSPersonAccountHolderFromTokenPayload

  """Create a new USBusinessAccountHolder from tokenized data."""
  createUSBusinessAccountHolderFromToken(input: CreateUSBusinessAccountHolderFromTokenInput!): CreateUSBusinessAccountHolderFromTokenPayload

  """Create a new USPersonAuthorizedUser from tokenized data."""
  createUSPersonAuthorizedUserFromToken(input: CreateUSPersonAuthorizedUserFromTokenInput!): CreateUSPersonAuthorizedUserFromTokenPayload

  """Create a new USBusinessAccountHolder."""
  createUSBusinessAccountHolder(input: CreateUSBusinessAccountHolderInput!): CreateUSBusinessAccountHolderPayload

  """
  Create a new `USBusinessAccountHolder` with minimal information.
  
  Note: The following mutation may not be sufficient for your `CardProduct`.
  """
  createMinimalUSBusinessAccountHolder(input: CreateMinimalUSBusinessAccountHolderInput!): CreateMinimalUSBusinessAccountHolderPayload

  """Create a new USPersonAuthorizedUser."""
  createUSPersonAuthorizedUser(input: CreateUSPersonAuthorizedUserInput!): CreateUSPersonAuthorizedUserPayload

  """Create a new card product application for an AccountHolder."""
  createAccountHolderCardProductApplication(input: CreateAccountHolderCardProductApplicationInput!): CreateAccountHolderCardProductApplicationPayload

  """Create a new card product application for an AuthorizedUser."""
  createAuthorizedUserCardProductApplication(input: CreateAuthorizedUserCardProductApplicationInput!): CreateAuthorizedUserCardProductApplicationPayload

  """Update billing address for existing USPersonAccountHolder."""
  updateUSPersonAccountHolderBillingAddress(input: UpdateUSPersonAccountHolderBillingAddressInput!): UpdateUSPersonAccountHolderPayload

  """Update phone for existing USPersonAccountHolder."""
  updateUSPersonAccountHolderPhone(input: UpdateUSPersonAccountHolderPhoneInput!): UpdateUSPersonAccountHolderPayload

  """Update email for existing USPersonAccountHolder."""
  updateUSPersonAccountHolderEmail(input: UpdateUSPersonAccountHolderEmailInput!): UpdateUSPersonAccountHolderPayload

  """Update address for existing USBusinessAccountHolder."""
  updateUSBusinessAccountHolderBillingAddress(input: UpdateUSBusinessAccountHolderBillingAddressInput!): UpdateUSBusinessAccountHolderPayload

  """Update phone for existing USBusinessAccountHolder."""
  updateUSBusinessAccountHolderPhone(input: UpdateUSBusinessAccountHolderPhoneInput!): UpdateUSBusinessAccountHolderPayload

  """Update website for existing USBusinessAccountHolder."""
  updateUSBusinessAccountHolderWebsite(input: UpdateUSBusinessAccountHolderWebsiteInput!): UpdateUSBusinessAccountHolderPayload

  """Update credit risk attribute for existing USBusinessAccountHolder."""
  updateUSBusinessAccountHolderCreditRiskAttribute(input: UpdateUSBusinessAccountHolderCreditRiskAttributeInput!): UpdateUSBusinessAccountHolderPayload

  """Update credit risk attribute for an existing `USPersonAccountHolder`."""
  updateUSPersonAccountHolderCreditRiskAttribute(input: UpdateUSPersonAccountHolderCreditRiskAttributeInput!): UpdateUSPersonAccountHolderPayload

  """Update address for existing USAssociatedPersonAccountHolder."""
  updateUSAssociatedPersonAccountHolderHomeAddress(input: UpdateUSAssociatedPersonAccountHolderHomeAddressInput!): UpdateUSAssociatedPersonAccountHolderPayload

  """Update phone for existing USAssociatedPersonAccountHolder."""
  updateUSAssociatedPersonAccountHolderPhone(input: UpdateUSAssociatedPersonAccountHolderPhoneInput!): UpdateUSAssociatedPersonAccountHolderPayload

  """Update email for existing USAssociatedPersonAccountHolder."""
  updateUSAssociatedPersonAccountHolderEmail(input: UpdateUSAssociatedPersonAccountHolderEmailInput!): UpdateUSAssociatedPersonAccountHolderPayload

  """Update address for existing USPersonAuthorizedUser."""
  updateUSPersonAuthorizedUserBillingAddress(input: UpdateUSPersonAuthorizedUserBillingAddressInput!): UpdateUSPersonAuthorizedUserPayload

  """Update phone for existing USPersonAuthorizedUser."""
  updateUSPersonAuthorizedUserPhone(input: UpdateUSPersonAuthorizedUserPhoneInput!): UpdateUSPersonAuthorizedUserPayload

  """Update email for existing USPersonAuthorizedUser."""
  updateUSPersonAuthorizedUserEmail(input: UpdateUSPersonAuthorizedUserEmailInput!): UpdateUSPersonAuthorizedUserPayload

  """
  Simulate updating the verification status for existing AccountHolder on a previously created `AccountHolderCardProductApplication` in the Test environment.
  
  This operation allows you to test various application lifecycle scenarios before going live.
  """
  simulateApplicationVerificationStatusChange(input: SimulateApplicationVerificationStatusChangeInput!): SimulateApplicationUpdatePayload

  """
  Simulate updating the application status on a previously created `AccountHolderCardProductApplication` in the Test environment.
  
  This operation allows you to test various application lifecycle scenarios before going live.
  """
  simulateApplicationStatusChange(input: SimulateApplicationStatusChangeInput!): SimulateApplicationUpdatePayload

  """
  Simulate updating the review status on a previously created `AccountHolderApplicationDocument` in the Test environment.
  
  This operation allows you to test various application lifecycle scenarios before going live.
  """
  simulateApplicationDocumentReview(input: SimulateApplicationDocumentReviewInput!): SimulateApplicationDocumentReviewPayload

  """Deny a credit-based `AccountHolderCardProductApplication`."""
  denyCreditProductApplicationUnderwriting(input: DenyCreditProductApplicationUnderwritingInput!): DenyCreditProductApplicationUnderwritingPayload

  """Approve a credit-based `AccountHolderCardProductApplication`."""
  approveCreditProductApplicationUnderwriting(input: ApproveCreditProductApplicationUnderwritingInput!): ApproveCreditProductApplicationUnderwritingPayload

  """
  Confirm a credit-based `AccountHolderCardProductApplication` is verified in response to a fraud alert on the applicant's credit report.
  
  If an applicant's credit report contains a fraud alert, verify the applicant did intend to initiate this application,
  and that their name, date of birth, and address are correct on the application. Then, call this mutation.
  
  Will return an error if the `AccountHolderCardProductApplication` is in a terminal state such as `APPROVED`, `DENIED`, or `CLOSED`.
  """
  confirmVerificationOfCreditProductApplicationForFraudAlert(input: ConfirmVerificationOfCreditProductApplicationForFraudAlertInput!): ConfirmVerificationOfCreditProductApplicationForFraudAlertPayload

  """
  Confirm credit freeze is lifted for an `AccountHolderCardProductApplication`.
  
  If a credit freeze was present during initial underwriting, confirm the freeze is no longer present and then use this mutation to restart underwriting.
  
  Will return an error if the `AccountHolderCardProductApplication` is in a terminal state such as `APPROVED`, `DENIED`, or `CLOSED`.
  """
  confirmCreditReportUnfrozen(input: ConfirmCreditReportUnfrozenInput!): ConfirmCreditReportUnfrozenPayload

  """Initiate the request to modify a `USBusinessProfile`."""
  initiateUSBusinessProfileRequestedIdentityUpdate(input: InitiateUSBusinessProfileRequestedIdentityUpdateInput!): InitiateUSBusinessProfileRequestedIdentityUpdatePayload

  """Initiate the request to modify a `USBusinessAuthorizedPerson`."""
  initiateUSBusinessAuthorizedPersonRequestedIdentityUpdate(input: InitiateUSBusinessAuthorizedPersonRequestedIdentityUpdateInput!): InitiateUSBusinessAuthorizedPersonRequestedIdentityUpdatePayload

  """Initiate the request to modify a `USBusinessUltimateBeneficialOwner`."""
  initiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdate(input: InitiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdateInput!): InitiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdatePayload

  """
  Confirms the `RequestedIdentityUpdate`. The individual or business has acknowledged the accuracy and correctness of the supplied information.
  """
  confirmRequestedIdentityUpdate(input: ConfirmRequestedIdentityUpdateInput!): ConfirmRequestedIdentityUpdatePayload

  """
  Cancels the `RequestedIdentityUpdate`. The individual or business has acknowledged the accuracy and correctness of the provided information.
  
  Requested updates will not be applied.
  """
  cancelRequestedIdentityUpdate(input: CancelRequestedIdentityUpdateInput!): CancelRequestedIdentityUpdatePayload

  """
  Update non-terminal `AccountHolderCardProductApplicationOffer` on an `AccountHolderCardProductApplication`.
  """
  updateAccountHolderCardProductApplicationOffers(input: UpdateAccountHolderCardProductApplicationOffersInput!): AccountHolderCardProductApplicationOffersPayload

  """Accept an extended `AccountHolderCardProductApplicationOffer`."""
  acceptAccountHolderCardProductApplicationOffer(input: AcceptAccountHolderCardProductApplicationOfferInput!): AccountHolderCardProductApplicationOffersPayload

  """Creates a new `GlobalNote` for an entity."""
  createGlobalNote(input: CreateGlobalNoteInput!): GlobalNotePayload

  """
  Create a `CreditLimitChangeRequest`, to track status and ultimately decision it.
  """
  createCreditLimitChangeRequest(input: CreateCreditLimitChangeRequestInput!): CreditLimitChangeRequestPayload

  """
  Once a decision has been reached to approve a credit limit increase, use this decision to update the `CreditLimitChangeRequest` and provide the updated credit limit and other details.
  """
  approveCreditLimitIncrease(input: ApproveCreditLimitIncreaseInput!): CreditLimitChangeRequestPayload

  """
  Once a decision has been reached to deny a credit limit increase, use this mutation to update the `CreditLimitChangeRequest` and provide the adverse action reason (if applicable) and other details.
  """
  denyCreditLimitIncrease(input: DenyCreditLimitIncreaseInput!): CreditLimitChangeRequestPayload

  """
  Once a decision has been reached to approve a credit limit decrease, use this mutation to update the `CreditLimitChangeRequest` and provide the adverse action reason (if applicable) and other details.
  """
  approveCreditLimitDecrease(input: ApproveCreditLimitDecreaseInput!): CreditLimitChangeRequestPayload

  """
  Once a decision has been reached to deny a credit limit decrease, use this mutation to update the `CreditLimitChangeRequest` and provide any customer information collected.
  """
  denyCreditLimitDecrease(input: DenyCreditLimitDecreaseInput!): CreditLimitChangeRequestPayload

  """Creates a new Secret API Key."""
  createSecretAPIKey(input: CreateSecretAPIKeyInput!): CreateSecretAPIKeyPayload

  """Updates an existing Users data."""
  updateUser(input: UpdateUserInput!): UpdateUserPayload

  """Invites a User to your Organization."""
  inviteUser(input: InviteUserInput!): InviteUserPayload

  """Removes a User from your Organization."""
  removeUser(input: RemoveUserInput!): RemoveUserPayload

  """
  Revokes an API Key. After revocation, the API Key will be unusable for subsequent requests.
  """
  revokeAPIKey(input: RevokeAPIKeyInput!): RevokeAPIKeyPayload

  """Update the display name of an organization."""
  updateOrganizationProfileDisplayName(input: UpdateOrganizationProfileDisplayNameInput!): UpdateOrganizationProfileDisplayNamePayload

  """
  Generate a token for use in a client-side integration for a specific Payment Card.
  """
  generatePaymentCardClientToken(input: GeneratePaymentCardClientTokenInput!): GeneratePaymentCardClientTokenPayload

  """
  Generate a token for use in a client-side integration for a specific Financial Account Direct Deposit Details.
  """
  generateDirectDepositDetailClientToken(input: GenerateDirectDepositDetailClientTokenInput!): GenerateDirectDepositDetailClientTokenPayload

  """
  Generate a token to tokenize input for a new account holder.
  
  The resulting token can be used with `createUSPersonAccountHolderFromToken`
  """
  generateTokenizeAccountHolderClientToken: GenerateTokenizeAccountHolderClientTokenPayload

  """
  Generate a token to tokenize input for a new authorized user.
  
  The resulting token can be used with `createUSPersonAuthorizedUserFromToken`
  """
  generateTokenizeAuthorizedUserClientToken: GenerateTokenizeAuthorizedUserClientTokenPayload

  """
  Generate a token for use in a client-side integration to orchestrate document uploads.
  """
  generateDocumentUploadClientToken(input: GenerateDocumentUploadClientTokenInput!): GenerateDocumentUploadClientTokenPayload

  """
  Generate a token for use in a client-side integration for a specific Financial Account Direct Deposit Details.
  """
  generateExternalBankAccountDetailClientToken(input: GenerateExternalBankAccountDetailClientTokenInput!): GenerateExternalBankAccountDetailClientTokenPayload

  """
  Generate a token for use in a client-side integration to manage a person account holder.
  """
  generatePersonAccountHolderClientToken(input: GeneratePersonAccountHolderClientTokenInput!): GeneratePersonAccountHolderClientTokenPayload

  """
  Generate a token for use in a client-side integration to manage a business account holder.
  """
  generateBusinessAccountHolderClientToken(input: GenerateBusinessAccountHolderClientTokenInput!): GenerateBusinessAccountHolderClientTokenPayload

  """
  Generate a token for use in a client-side integration to manage a person authorized user.
  """
  generatePersonAuthorizedUserClientToken(input: GeneratePersonAuthorizedUserClientTokenInput!): GeneratePersonAuthorizedUserClientTokenPayload

  """
  Generate a token for use in a client-side integration to initiate a secure deposit.
  """
  generateInitiateSecureDepositClientToken(input: GenerateInitiateSecureDepositClientTokenInput!): GenerateInitiateSecureDepositClientTokenPayload

  """
  Generate a token for use in a client-side integration for a secure deposit.
  """
  generateSecureDepositClientToken(input: GenerateSecureDepositClientTokenInput!): GenerateSecureDepositClientTokenPayload

  """
  Generate a token for use in a client-side integration for a scheduled transfer.
  """
  generateScheduledTransferClientToken(input: GenerateScheduledTransferClientTokenInput!): GenerateSecureDepositClientTokenPayload

  """
  Generate a token for use in a client-side integration to create a scheduled transfer.
  """
  generateCreateScheduledTransferClientToken(input: GenerateCreateScheduledTransferClientTokenInput!): GenerateCreateScheduledTransferClientTokenPayload

  """
  Generate a Single Use Client Token for use in a client-side integration for a specific Financial Account.
  
  `generateFinancialAccountSingleUseClientToken` can only be called once provisioned a restricted key after a security audit.
  
  In Test, Highnote Customer Service can grant a restricted key without a security audit.
  
  In Live, please reach out to Highnote Customer Service to initiate the audit.
  """
  generateFinancialAccountSingleUseClientToken(input: GenerateFinancialAccountSingleUseClientTokenInput!): GenerateFinancialAccountSingleUseClientTokenPayload

  """
  Generate a client token for use in the Secure Inputs SDK when tokenizing a payment method.
  
  Expiry: 15 minutes
  """
  generatePaymentMethodTokenizationClientToken(input: GeneratePaymentMethodTokenizationClientTokenInput!): GeneratePaymentMethodTokenizationClientTokenPayload

  """Generate risk application sdk session token"""
  generateRiskApplicationSDKSessionToken: GenerateRiskApplicationSDKSessionTokenPayload

  """Generate risk client token"""
  generateRiskClientToken(input: GenerateRiskClientTokenInput!): GenerateRiskClientTokenPayload

  """Creates a new Card Product."""
  createCardProduct(input: CreateCardProductInput!): CreateCardProductPayload

  """Changes the name of a Card Product."""
  updateCardProductName(input: UpdateCardProductNameInput!): UpdateCardProductNamePayload

  """Issue a new Payment Card against an Account Holder Application."""
  issuePaymentCardForApplication(input: IssuePaymentCardForApplicationInput!): IssuePaymentCardForApplicationPayload

  """
  Issue a new Payment Card against an Account Holder Application with an on-demand funding source.
  """
  issuePaymentCardForApplicationWithOnDemandFundingSource(input: IssuePaymentCardForApplicationWithOnDemandFundingSourceInput!): IssuePaymentCardForApplicationWithOnDemandFundingSourcePayload

  """Issue a new Payment Card against an Authorized User Application."""
  issuePaymentCardForAuthorizedUserApplication(input: IssuePaymentCardForAuthorizedUserApplicationInput!): IssuePaymentCardForApplicationPayload

  """Issue a new Payment Card against an Account Holder Application."""
  issuePaymentCardForFinancialAccount(input: IssuePaymentCardForFinancialAccountInput!): IssuePaymentCardForFinancialAccountPayload

  """Issue a new Payment Card against an Account Holder Application."""
  issueFinancialAccountForApplication(input: IssueFinancialAccountForApplicationInput!): IssueFinancialAccountForApplicationPayload

  """Issue a new Financial Account with an on-demand funding source."""
  issueFinancialAccountForApplicationWithOnDemandFundingSource(input: IssueFinancialAccountForApplicationWithOnDemandFundingSourceInput!): IssueFinancialAccountForApplicationWithOnDemandFundingSourcePayload

  """
  Issue a new Funding Financial Account against an Account Holder Application.
  """
  issueFundingFinancialAccountForApplication(input: IssueFundingFinancialAccountForApplicationInput!): IssueFundingFinancialAccountForApplicationPayload

  """Issue an Employer Financial Account against a Product."""
  issueEmployerFinancialAccountForCardProduct(input: IssueEmployerFinancialAccountForCardProductInput!): IssueEmployerFinancialAccountForCardProductPayload

  """Issue a new Payment Card against an existing payment card."""
  reissuePaymentCard(input: ReissuePaymentCardInput!): ReissuePaymentCardPayload

  """Close a Payment Card and decline all future authorizations."""
  closePaymentCard(input: ClosePaymentCardInput!): ClosePaymentCardPayload

  """
  Suspend a Payment Card and decline all authorizations until the suspension is lifted.
  """
  suspendPaymentCard(input: SuspendPaymentCardInput!): SuspendPaymentCardPayload

  """Activate a Payment Card."""
  activatePaymentCard(input: ActivatePaymentCardInput!): ActivatePaymentCardPayload

  """
  Creates a new spend rule that specifies the merchant categories that are either
  allowed or blocked during authorizations.
  """
  createMerchantCategorySpendRule(input: CreateMerchantCategorySpendRuleInput!): CreateMerchantCategorySpendRulePayload

  """
  Updates an existing spend rule that specifies the merchant categories that are either
  allowed or blocked during authorizations.
  """
  updateMerchantCategorySpendRule(input: UpdateMerchantCategorySpendRuleInput!): UpdateMerchantCategorySpendRulePayload

  """
  Creates a new spend rule that specifies the merchant countries that are either
  allowed or blocked during authorizations.
  """
  createMerchantCountrySpendRule(input: CreateMerchantCountrySpendRuleInput!): CreateMerchantCountrySpendRulePayload

  """
  Updates an existing spend rule that specifies the merchant countries that are either
  allowed or blocked during authorizations.
  """
  updateMerchantCountrySpendRule(input: UpdateMerchantCountrySpendRuleInput!): UpdateMerchantCountrySpendRulePayload

  """Creates a new spend rule that limits the amount of authorizations."""
  createAmountLimitSpendRule(input: CreateAmountLimitSpendRuleInput!): CreateAmountLimitSpendRulePayload

  """
  Updates an existing spend rule that limits the amount of authorizations.
  """
  updateAmountLimitSpendRule(input: UpdateAmountLimitSpendRuleInput!): UpdateAmountLimitSpendRulePayload

  """
  Creates a new spend rule that limits the number of allowed transactions.
  """
  createCountLimitSpendRule(input: CreateCountLimitSpendRuleInput!): CreateCountLimitSpendRulePayload

  """
  Updates an existing spend rule that limits the number of allowed transactions.
  """
  updateCountLimitSpendRule(input: UpdateCountLimitSpendRuleInput!): UpdateCountLimitSpendRulePayload

  """
  Creates a new spend rule that specifies if the result of a CVV check should be
  approved or declined.
  """
  createCVVSpendRule(input: CreateCVVSpendRuleInput!): CreateCVVSpendRulePayload

  """
  Updates an existing spend rule that specifies if the result of a CVV check should be
  approved or declined.
  """
  updateCVVSpendRule(input: UpdateCVVSpendRuleInput!): UpdateCVVSpendRulePayload

  """
  Creates a new spend rule that specifies if the result of a street address verification should be
  approved or declined.
  
  **Note** Street address verifications only verify a street number. Use `createPostalCodeVerificationSpendRule` to
  change how postal codes are verified.
  """
  createStreetAddressSpendRule(input: CreateStreetAddressSpendRuleInput!): CreateStreetAddressSpendRulePayload

  """
  Updates an existing spend rule that specifies if the result of street address verification should be
  approved or declined.
  
  **Note** Street address verifications only verify a street number. Use `createPostalCodeVerificationSpendRule` to
  change how postal codes are verified.
  """
  updateStreetAddressSpendRule(input: UpdateStreetAddressSpendRuleInput!): UpdateStreetAddressSpendRulePayload

  """
  Creates a new spend rule that specifies which merchant identifiers (MIDs) are
  either allowed or blocked.
  """
  createMerchantIdentifierSpendRule(input: CreateMerchantIdentifierSpendRuleInput!): CreateMerchantIdentifierSpendRulePayload

  """
  Updates an existing spend rule that specifies which merchant identifiers (MIDs) are
  either allowed or blocked.
  """
  updateMerchantIdentifierSpendRule(input: UpdateMerchantIdentifierSpendRuleInput!): UpdateMerchantIdentifierSpendRulePayload

  """
  Creates a new spend rule that specifies which Point of Service (POS) categories are either allowed or blocked.
  """
  createPointOfServiceCategorySpendRule(input: CreatePointOfServiceCategorySpendRuleInput!): CreatePointOfServiceCategorySpendRulePayload

  """
  Updates an existing spend rule that specifies which Point of Service (POS) categories are
  either allowed or blocked.
  """
  updatePointOfServiceCategorySpendRule(input: UpdatePointOfServiceCategorySpendRuleInput!): UpdatePointOfServiceCategorySpendRulePayload

  """
  Creates a new spend rule that specifies which address verification postal codes are either allowed or blocked.
  """
  createPostalCodeVerificationSpendRule(input: CreatePostalCodeVerificationSpendRuleInput!): CreatePostalCodeVerificationSpendRulePayload

  """
  Updates an existing spend rule that specifies which address verification postal codes categories are
  either allowed or blocked.
  """
  updatePostalCodeVerificationSpendRule(input: UpdatePostalCodeVerificationSpendRuleInput!): UpdatePostalCodeVerificationSpendRulePayload

  """
  Attaches a spend rule to the given Card Product. The spend rule will be evaluated for every authorization
  on a payment card issued under the card product.
  """
  attachSpendRuleToCardProduct(input: AttachSpendRuleToCardProductInput!): AttachSpendRuleToCardProductPayload

  """
  Attaches a spend control rule to the given Payment Card. The spend control rule will be evaluated for every authorization.
  """
  attachSpendRuleToPaymentCard(input: AttachSpendRuleToPaymentCardInput!): AttachSpendRuleToPaymentCardPayload

  """
  Detaches, or removes, a spend rule from the given Card Product. The spend rule will **not** be evaluated for future authorizations
  on a payment card issued under the card product.
  """
  detachSpendRuleFromCardProduct(input: DetachSpendRuleFromCardProductInput!): DetachSpendRuleFromCardProductPayload

  """
  Detaches, or removes, a spend rule from the given Payment Card. The spend rule will **not** be evaluated for future authorizations.
  """
  detachSpendRuleFromPaymentCard(input: DetachSpendRuleFromPaymentCardInput!): DetachSpendRuleFromPaymentCardPayload

  """Add a bank account for account holder using external token."""
  addExternalBankAccountFromToken(input: AddExternalBankAccountFromTokenInput!): AddExternalBankAccountFromTokenPayload @deprecated(reason: "Use Mutation.addExternalBankAccountVerifiedThroughPlaid instead.")

  """
  Add a bank account for account holder using external token. (Plaid specific)
  """
  addExternalBankAccountVerifiedThroughPlaid(input: AddExternalBankAccountVerifiedThroughPlaidInput!): AddExternalBankAccountFromTokenPayload

  """
  Add a bank account for account holder using external tokens. (Third Party with Plaid specific)
  This is only usable for specific products within the `CONSUMER_CREDIT` vertical.
  """
  addExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorToken(input: AddExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorTokenInput!): AddExternalBankAccountFromTokenPayload

  """
  Add a bank account for account holder using external token. (Finicity specific)
  """
  addExternalBankAccountVerifiedThroughFinicity(input: AddExternalBankAccountVerifiedThroughFinicityInput!): AddExternalBankAccountFromTokenPayload

  """Generate a token for account holder to link external bank accounts"""
  generateVerifiedExternalBankAccountLinkToken(input: GenerateVerifiedExternalBankAccountLinkTokenInput!): GenerateVerifiedExternalBankAccountLinkTokenPayload

  """Temporarily suspend a card digital wallet token."""
  suspendCardDigitalWalletToken(input: SuspendCardDigitalWalletTokenInput!): SuspendCardDigitalWalletTokenPayload

  """Reactivate a suspended card digital wallet token."""
  unsuspendCardDigitalWalletToken(input: UnsuspendCardDigitalWalletTokenInput!): UnsuspendCardDigitalWalletTokenPayload

  """Terminate a card digital wallet token."""
  terminateCardDigitalWalletToken(input: TerminateCardDigitalWalletTokenInput!): TerminateCardDigitalWalletTokenPayload

  """
  Add a non-verified US bank account for an account holder.  Can only be used to initiateFundsWithdrawalACHTransfer
  """
  addNonVerifiedExternalUSFinancialBankAccount(input: AddNonVerifiedExternalUSFinancialBankAccountInput!): AddNonVerifiedExternalUSFinancialBankAccountPayload

  """Close previously added external bank account."""
  closeExternalFinancialBankAccount(input: CloseExternalFinancialBankAccountInput!): CloseExternalFinancialBankAccountPayload

  """Changes the name of a Financial Account."""
  updateFinancialAccountName(input: UpdateFinancialAccountNameInput!): UpdateFinancialAccountNamePayload

  """Create a `VelocityRule`"""
  createVelocityRule(input: CreateVelocityRuleInput!): CreateVelocityRulePayload

  """
  Creates a `DepositAmountLimitSpendRule` that limits the amount of authorizations.
  """
  createDepositAmountLimitSpendRule(input: CreateDepositAmountLimitSpendRuleInput!): CreateDepositAmountLimitSpendRulePayload

  """
  Updates a `DepositAmountLimitSpendRule` that limits the amount of authorizations.
  """
  updateDepositAmountLimitSpendRule(input: UpdateDepositAmountLimitSpendRuleInput!): UpdateDepositAmountLimitSpendRulePayload

  """
  Creates a new `DepositCountLimitSpendRule` that limits the number of authorizations.
  """
  createDepositCountLimitSpendRule(input: CreateDepositCountLimitSpendRuleInput!): CreateDepositCountLimitSpendRulePayload

  """
  Updates a `DepositCountLimitSpendRule` that limits the number of authorizations.
  """
  updateDepositCountLimitSpendRule(input: UpdateDepositCountLimitSpendRuleInput!): UpdateDepositCountLimitSpendRulePayload

  """
  Creates a new `DepositProcessingNetworkSpendRule` which allows or blocks an ATM processing network.
  """
  createDepositProcessingNetworkSpendRule(input: CreateDepositProcessingNetworkSpendRuleInput!): CreateDepositProcessingNetworkSpendRulePayload

  """
  Updates a `DepositProcessingNetworkSpendRule` which allows or blocks an ATM processing network.
  """
  updateDepositProcessingNetworkSpendRule(input: UpdateDepositProcessingNetworkSpendRuleInput!): UpdateDepositProcessingNetworkSpendRulePayload

  """
  Creates a `ConditionalRuleSetSpendRule` that combines the results of multiple spend rules.
  """
  createConditionalRuleSetSpendRule(input: CreateConditionalRuleSetSpendRuleInput!): CreateConditionalRuleSetSpendRulePayload

  """
  Updates a `ConditionalRuleSetSpendRule` that combines the results of multiple spend rules.
  """
  updateConditionalRuleSetSpendRule(input: UpdateConditionalRuleSetSpendRuleInput!): UpdateConditionalRuleSetSpendRulePayload

  """
  Creates a `CardTransactionProcessingTypeConditionSpendRule` that allows or blocks a `CardTransactionProcessingType`.
  """
  createCardTransactionProcessingTypeConditionSpendRule(input: CreateCardTransactionProcessingTypeConditionSpendRuleInput!): CreateCardTransactionProcessingTypeConditionSpendRulePayload

  """
  Updates a `CardTransactionProcessingTypeConditionSpendRule` that allows or blocks a `CardTransactionProcessingType`.
  """
  updateCardTransactionProcessingTypeConditionSpendRule(input: UpdateCardTransactionProcessingTypeConditionSpendRuleInput!): UpdateCardTransactionProcessingTypeConditionSpendRulePayload

  """
  Creates a `PanEntryModeSpendRule` that allows or blocks a `PanEntryMode`.
  """
  createPanEntryModeSpendRule(input: CreatePanEntryModeSpendRuleInput!): CreatePanEntryModeSpendRulePayload

  """
  Updates a `PanEntryModeSpendRule` that allows or blocks a `PanEntryMode`.
  """
  updatePanEntryModeSpendRule(input: UpdatePanEntryModeSpendRuleInput!): UpdatePanEntryModeSpendRulePayload

  """
  Creates a `CardDataInputCapabilitySpendRule` that allows or blocks a `CardDataInputCapability`.
  """
  createCardDataInputCapabilitySpendRule(input: CreateCardDataInputCapabilitySpendRuleInput!): CreateCardDataInputCapabilitySpendRulePayload

  """
  Updates a `CardDataInputCapabilitySpendRule` that allows or blocks a `CardDataInputCapability`.
  """
  updateCardDataInputCapabilitySpendRule(input: UpdateCardDataInputCapabilitySpendRuleInput!): UpdateCardDataInputCapabilitySpendRulePayload

  """
  Creates a `MinimumAmountLimitSpendRule` that only allows transactions for a specified amount.
  """
  createMinimumAmountLimitSpendRule(input: CreateMinimumAmountLimitSpendRuleInput!): CreateMinimumAmountLimitSpendRulePayload

  """
  Updates a `MinimumAmountLimitSpendRule` that only allows transactions for a specified amount.
  """
  updateMinimumAmountLimitSpendRule(input: UpdateMinimumAmountLimitSpendRuleInput!): UpdateMinimumAmountLimitSpendRulePayload

  """
  Creates a `MaximumPercentVarianceOnPseudoBalanceSpendRule` that allows for spending up to a specified percentage over the account's original balance.
  """
  createMaximumPercentVarianceOnPseudoBalanceSpendRule(input: CreateMaximumPercentVarianceOnPseudoBalanceSpendRuleInput!): CreateMaximumPercentVarianceOnPseudoBalanceSpendRulePayload

  """
  Updates a `MaximumPercentVarianceOnPseudoBalanceSpendRule` that allows for spending up to a specified percentage over the account's original balance.
  """
  updateMaximumPercentVarianceOnPseudoBalanceSpendRule(input: UpdateMaximumPercentVarianceOnPseudoBalanceSpendRuleInput!): UpdateMaximumPercentVarianceOnPseudoBalanceSpendRulePayload

  """
  Creates a `MaximumAmountVarianceOnPseudoBalanceSpendRule` that allows for spending up to a specified `Amount` above the account's original balance.
  """
  createMaximumAmountVarianceOnPseudoBalanceSpendRule(input: CreateMaximumAmountVarianceOnPseudoBalanceSpendRuleInput!): CreateMaximumAmountVarianceOnPseudoBalanceSpendRulePayload

  """
  Updates a `MaximumAmountVarianceOnPseudoBalanceSpendRule` that allows for spending up to a specified `Amount` above the account's original balance.
  """
  updateMaximumAmountVarianceOnPseudoBalanceSpendRule(input: UpdateMaximumAmountVarianceOnPseudoBalanceSpendRuleInput!): UpdateMaximumAmountVarianceOnPseudoBalanceSpendRulePayload

  """
  Creates a `DaysWithinCardCreateDateSpendRule` that allows for spending up to a specified number of days since the create date of the `PaymentCard`.
  """
  createDaysWithinCardCreateDateSpendRule(input: CreateDaysWithinCardCreateDateSpendRuleInput!): CreateDaysWithinCardCreateDateSpendRulePayload

  """
  Updates a `DaysWithinCardCreateDateSpendRule` that allows for spending up to a specified number of days since the create date of the `PaymentCard`.
  """
  updateDaysWithinCardCreateDateSpendRule(input: UpdateDaysWithinCardCreateDateSpendRuleInput!): UpdateDaysWithinCardCreateDateSpendRulePayload

  """
  Creates a `DaysWithinAccountCreateDateSpendRule` that allows for spending up to a specified number of days since the create date of the card's `FinancialAccount`.
  """
  createDaysWithinAccountCreateDateSpendRule(input: CreateDaysWithinAccountCreateDateSpendRuleInput!): CreateDaysWithinAccountCreateDateSpendRulePayload

  """
  Updates a `DaysWithinAccountCreateDateSpendRule` that allows for spending up to a specified number of days since the create date of the card's `FinancialAccount`.
  """
  updateDaysWithinAccountCreateDateSpendRule(input: UpdateDaysWithinAccountCreateDateSpendRuleInput!): UpdateDaysWithinAccountCreateDateSpendRulePayload

  """
  Creates a `VisaRiskScoreSpendRule` that limits the acceptable Visa Risk Score for transactions.
  """
  createVisaRiskScoreSpendRule(input: CreateVisaRiskScoreSpendRuleInput!): CreateVisaRiskScoreSpendRulePayload

  """
  Updates a `VisaRiskScoreSpendRule` that limits the acceptable Visa Risk Score for transactions.
  """
  updateVisaRiskScoreSpendRule(input: UpdateVisaRiskScoreSpendRuleInput!): UpdateVisaRiskScoreSpendRulePayload

  """
  Creates a `MastercardFraudScoreSpendRule` that limits the acceptable Mastercard Fraud Score for transactions.
  """
  createMastercardFraudScoreSpendRule(input: CreateMastercardFraudScoreSpendRuleInput!): CreateMastercardFraudScoreSpendRulePayload

  """
  Updates a `MastercardFraudScoreSpendRule` that limits the acceptable Mastercard Fraud Score for transactions.
  """
  updateMastercardFraudScoreSpendRule(input: UpdateMastercardFraudScoreSpendRuleInput!): UpdateMastercardFraudScoreSpendRulePayload

  """Attach a `VelocityRule` to a `PaymentCard`"""
  attachPaymentCardVelocityRule(input: AttachPaymentCardVelocityRuleInput!): AttachPaymentCardVelocityRulePayload

  """Detach a `VelocityRule` from a `PaymentCard`"""
  detachPaymentCardVelocityRule(input: DetachPaymentCardVelocityRuleInput!): DetachPaymentCardVelocityRulePayload

  """Attach a `VelocityRule` to a `CardProduct`"""
  attachCardProductVelocityRule(input: AttachCardProductVelocityRuleInput!): AttachCardProductVelocityRulePayload

  """Detach a `VelocityRule` from a `CardProduct`"""
  detachCardProductVelocityRule(input: DetachCardProductVelocityRuleInput!): DetachCardProductVelocityRulePayload

  """
  Enable the Collaborative Application Decisioning feature for a `CardProduct`.
  This feature is only available for the COMMERCIAL_CREDIT_PAY_IN_FULL product.
  If this feature is enabled, all application will wait for customer to use actual API
  to update underwriting status and until that time the Application will remain in pending state.
  """
  enableCollaborativeApplicationUnderwritingFeature(input: EnableCollaborativeApplicationUnderwritingFeatureInput!): EnableCollaborativeApplicationUnderwritingFeaturePayload

  """
  Enable a credit card feature for a `CardProduct`. For example, `REVOLVING` or `CHARGE`.
  This feature is only available for the `COMMERCIAL_CREDIT` and `CONSUMER_CREDIT` `CardProductVertical`s.
  """
  enableCreditCardFeature(input: EnableCreditCardFeatureInput!): EnableCreditCardFeaturePayload

  """
  Update the billing cycle configuration for a `FinancialAccount`.
  Currently, this enables you to update the day of the month when payment is due for a `FinancialAccount`.
  The change only applies to future billing cycles, not the current open cycle or any closed cycles.
  """
  updateFinancialAccountBillingCycleConfiguration(input: UpdateFinancialAccountBillingCycleConfigurationInput!): UpdateFinancialAccountBillingCycleConfigurationPayload

  """
  Enable the on-demand funding feature for a `CardProduct`.
  If this feature is enabled, on-demand funding source is supported on `FinancialAccount` of a `CardProduct`.
  
  **Note:** Enabling this feature is only supported in the `TEST` environment.
  """
  enableOnDemandFundingFeature(input: EnableOnDemandFundingFeatureInput!): EnableOnDemandFundingFeaturePayload

  """Enable the authorized user feature for a `CardProduct`."""
  enableAuthorizedUserFeature(input: EnableAuthorizedUserFeatureInput!): EnableAuthorizedUserFeaturePayload

  """Disable the authorized user feature for a `CardProduct`."""
  disableAuthorizedUserFeature(input: DisableAuthorizedUserFeatureInput!): DisableAuthorizedUserFeaturePayload

  """
  Set and update the pseudo balance on your customers' financial account.
  
  The pseudo balance is the lifetime limit for this financial account. Highnote checks the pseudo balance during the transaction processing and will decline authorizations that would cause the current balance to exceed the pseudo balance. For example, if you allocate a pseudo balance of $100 for this finanacial account, the financial account already has a balance of $100 and the account holder attempts to authorize $1, Highnote would decline the authorization.
  """
  initiateFinancialAccountPseudoBalanceUpdate(input: InitiateFinancialAccountPseudoBalanceUpdateInput!): FinancialAccountPseudoBalanceUpdatePayload

  """
  Simulates moving a `FinancialAccount` into `PENDING_CLOSURE` status.
  The `PENDING_CLOSURE` account attribute will also be applied.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateInitiateFinancialAccountClosure(input: SimulateInitiateFinancialAccountClosureInput!): SimulateInitiateFinancialAccountClosurePayload

  """
  Simulates moving a `FinancialAccount` into `CLOSED` status.
  The specified `FinancialAccount` must be in `PENDING_CLOSURE` status.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateCloseFinancialAccount(input: SimulateCloseFinancialAccountInput!): SimulateCloseFinancialAccountPayload

  """
  Issues a preprinted payment card financial account for a `AccountHolderCardProductApplication`.
  """
  issuePreprintedPaymentCardFinancialAccountForApplication(input: IssuePreprintedPaymentCardFinancialAccountForApplicationInput!): IssuePreprintedPaymentCardFinancialAccountForApplicationPayload

  """
  Assigns a `PaymentCard` to a `FinancialAccount`.
  
  This is used in addition to the `issuePreprintedPaymentCardFinancialAccountForApplication` mutation.
  """
  assignPaymentCardToFinancialAccount(input: AssignPaymentCardToFinancialAccountInput!): AssignPaymentCardToFinancialAccountPayload

  """
  Creates a card product from a template.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  createCardProductWithTemplate(input: CreateCardProductWithTemplateInput!): CreateCardProductWithTemplatePayload

  """
  Simulate behaviors around authorizations in the Test environment.
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  """
  simulateAuthorization(input: SimulateAuthorizationInput!): SimulateAuthorizationPayload

  """
  Simulate behaviors around clearing authorizations in the Test environment.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  """
  simulateClearing(input: SimulateClearingInput!): SimulateClearingPayload

  """
  Simulate behaviors around a single step authorization and clear in the Test environment.
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  """
  simulateSingleStepAuthAndClear(input: SimulateSingleStepAuthAndClearInput!): SimulateAuthAndClearPayload

  """
  Simulate behaviors around reversing authorizations in the Test environment.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** In Test, the `ReversalResponseCode` will always be `APPROVED`, however, more response codes may be added in the future.
  """
  simulateReversal(input: SimulateReversalInput!): SimulateReversalPayload

  """
  Simulate behaviors around reversing authorizations in the Test environment.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** In Test, the `RefundResponseCode` will always be `APPROVED`, however, more response codes may be added in the future.
  """
  simulateRefund(input: SimulateRefundInput!): SimulateRefundPayload

  """
  Simulate the authorization of a Visa Fleet transaction in the Test environment. This allows for partial authorizations.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateVisaFleetAuthorization(input: SimulateVisaFleetAuthorizationInput!): SimulateAuthorizationPayload

  """
  Simulate an authorization advice event for a Visa Fleet transaction in the Test environment.
  
  This creates a `ReversalEvent` for the difference between the authorized amount and the provided advice amount.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateVisaFleetAuthorizationAdvice(input: SimulateVisaFleetAuthorizationAdviceInput!): SimulateAuthorizationAdvicePayload

  """
  Simulate the `ClearingEvent` for a Visa Fleet transaction in the Test environment.
  
  Also allows for input of simulated `VisaFleetL2TransactionData` to mimic what would be received in a Live clearing event.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateVisaFleetClearing(input: SimulateVisaFleetClearingInput!): SimulateClearingPayload

  """
  Simulate the `VisaFleetL3EnhancedData` for a Visa Fleet transaction in the Test environment.
  
  Allows for the input of Level 3 transaction data pertaining to a Visa Fleet transaction to mimic what would be received in a Live transaction.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateVisaFleetL3EnhancedData(input: SimulateVisaFleetL3EnhancedDataInput!): SimulateVisaFleetL3EnhancedDataPayload

  """
  Simulate the authorization of a Mastercard Fleet transaction in the Test environment. This allows for partial authorizations.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateMastercardFleetAuthorization(input: SimulateMastercardFleetAuthorizationInput!): SimulateAuthorizationPayload

  """
  Simulate an authorization advice event for a Mastercard Fleet transaction in the Test environment.
  
  This creates a `ReversalEvent` for the difference between the authorized amount and the provided advice amount.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateMastercardFleetAuthorizationAdvice(input: SimulateMastercardFleetAuthorizationAdviceInput!): SimulateAuthorizationAdvicePayload

  """
  Simulate the `ClearingEvent` for a Mastercard Fleet transaction in the Test environment.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateMastercardFleetClearing(input: SimulateMastercardFleetClearingInput!): SimulateClearingPayload

  """
  Simulate the `MastercardFleetEnhancedData` for a Mastercard Fleet transaction in the Test environment.
  
  Allows for the input of enhanced transaction data pertaining to a Mastercard Fleet transaction to mimic what would be received in a Live transaction.
  
  This operation mirrors Live behavior and allows you to test various scenarios before going live.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateMastercardFleetEnhancedData(input: SimulateMastercardFleetEnhancedDataInput!): SimulateEnhancedDataPayload

  """
  Transfer funds from a funding account of the Organization to a payment card.
  """
  addFundsToPaymentCard(input: AddFundsToPaymentCardInput!): AddFundsToPaymentCardPayload @deprecated(reason: "Transfer is deprecated in favor of initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount")

  """Order and ship a payment card to an account holder."""
  orderPhysicalPaymentCard(input: OrderPhysicalPaymentCardInput!): OrderPhysicalPaymentCardPayload

  """
  Order and ship a payment card to an account holder using validated address.
  """
  orderPhysicalPaymentCardWithValidatedAddress(input: OrderPhysicalPaymentCardWithValidatedAddressInput!): OrderPhysicalPaymentCardPayload @deprecated(reason: "Use `orderPhysicalPaymentCardWithValidatedAddressToken` instead.")

  """
  Order and ship a payment card to an account holder using validated address token.
  """
  orderPhysicalPaymentCardWithValidatedAddressToken(input: OrderPhysicalPaymentCardWithValidatedAddressTokenInput!): OrderPhysicalPaymentCardPayload

  """
  Simulate sending the order to the printer for fulfillment. This can only
  be called while the order is in the `NEW` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalPaymentCardOrderSendToPrinter(input: SimulatePhysicalPaymentCardSendToPrinterInput!): SimulatePhysicalPaymentCardPayload

  """
  Simulate printer approval of the order. This can only be called while the order is in the
  `SENT_TO_PRINTER` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalPaymentCardOrderApproval(input: SimulatePhysicalPaymentCardApprovalInput!): SimulatePhysicalPaymentCardPayload

  """
  Simulate a failed shipment by the printer. This can only be called while the
  order is in the `APPROVED` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalPaymentCardOrderShipmentFailed(input: SimulatePhysicalPaymentCardShipmentFailedInput!): SimulatePhysicalPaymentCardPayload

  """
  Simulate a successful shipment by the printer. This can only be called while
  the order is in the `APPROVED` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalPaymentCardOrderShipped(input: SimulatePhysicalPaymentCardShippedInput!): SimulatePhysicalPaymentCardPayload

  """
  Cancel an order for a physical payment card. This can only be called while the
  order is in the `NEW` state.
  """
  cancelPhysicalPaymentCardOrder(input: CancelPhysicalPaymentCardOrderInput!): CancelPhysicalPaymentCardPayload

  """
  Simulate sending the order to the printer for fulfillment. This can only
  be called while the order is in the `NEW` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalCardGroupOrderSendToPrinter(input: SimulatePhysicalCardGroupOrderSendToPrinterInput!): SimulatePhysicalCardGroupOrderPayload

  """
  Simulate printer approval of the order. This can only be called while the order is in the
  `SENT_TO_PRINTER` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalCardGroupOrderApproval(input: SimulatePhysicalCardGroupOrderApprovalInput!): SimulatePhysicalCardGroupOrderPayload

  """
  Simulate a failed shipment by the printer. This can only be called while the
  order is in the `APPROVED` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalCardGroupOrderShipmentFailed(input: SimulatePhysicalCardGroupOrderShipmentFailedInput!): SimulatePhysicalCardGroupOrderPayload

  """
  Simulate a successful shipment by the printer. This can only be called while
  the order is in the `APPROVED` state.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulatePhysicalCardGroupOrderShipped(input: SimulatePhysicalCardGroupOrderShippedInput!): SimulatePhysicalCardGroupOrderPayload

  """
  Creates a new group order that can be used to ship multiple physical cards to the same location.
  """
  createPhysicalCardGroupOrder(input: CreatePhysicalCardGroupOrderInput!): PhysicalCardGroupOrderPayload

  """
  Creates a new group order that can be used to ship multiple physical cards to the same validated address.
  """
  createPhysicalCardGroupOrderWithValidatedAddress(input: CreatePhysicalCardGroupOrderWithValidatedAddressInput!): PhysicalCardGroupOrderPayload @deprecated(reason: "Use `createPhysicalCardGroupOrderWithValidatedAddressToken` instead.")

  """
  Creates a new group order that can be used to ship multiple physical cards to the same validated address.
  """
  createPhysicalCardGroupOrderWithValidatedAddressToken(input: CreatePhysicalCardGroupOrderWithValidatedAddressTokenInput!): PhysicalCardGroupOrderPayload

  """
  Order and ship a payment card to an account holder as part of a group order.
  """
  orderPhysicalPaymentCardForGroup(input: OrderPhysicalPaymentCardForGroupInput!): OrderPhysicalPaymentCardPayload

  """Completes a group order, marking it as ready to ship."""
  completePhysicalCardGroupOrder(input: CompletePhysicalCardGroupOrderInput!): PhysicalCardGroupOrderPayload

  """Cancels a group order, and all the fulfillments in it."""
  cancelPhysicalCardGroupOrder(input: CancelPhysicalCardGroupOrderInput!): PhysicalCardGroupOrderPayload

  """
  Log an External Physical Payment Card Order and provide additional payment instrument details.
  """
  createExternalPhysicalPaymentCardOrder(input: CreateExternalPhysicalPaymentCardOrderInput!): ExternalPhysicalPaymentCardOrderPayload

  """Completes external physical payment card."""
  completeExternalPhysicalPaymentCardOrder(input: CompleteExternalPhysicalPaymentCardOrderInput!): ExternalPhysicalPaymentCardOrderPayload

  """Set a pin on a payment card."""
  setPinForPaymentCard(input: SetPinForPaymentCardInput!): SetPinForPaymentCardPayload

  """Create a reusable payment method from a tokenized payment method."""
  createReusablePaymentMethodToken(input: CreateReusablePaymentMethodTokenInput!): CreateReusablePaymentMethodTokenPayload

  """Adds a new https target for webhook notifications."""
  addWebhookNotificationTarget(
    """The input to add a new webhook notification target."""
    input: AddWebhookNotificationTargetInput!
  ): AddWebhookNotificationTargetPayload

  """Reactivates a previously deactivated notification target."""
  activateNotificationTarget(
    """The input to activate a notification target."""
    input: ActivateNotificationTargetInput!
  ): ActivateNotificationTargetPayload

  """Deactivates a notification target."""
  deactivateNotificationTarget(
    """The input to deactivate a notification target."""
    input: DeactivateNotificationTargetInput!
  ): DeactivateNotificationTargetPayload

  """Deletes a notification target."""
  removeNotificationTarget(
    """The input to delete a notification target."""
    input: RemoveNotificationTargetInput!
  ): RemoveNotificationTargetPayload

  """Updates the name of an existing notification target."""
  renameNotificationTarget(
    """The input to update the name of an existing notification target."""
    input: RenameNotificationTargetInput!
  ): RenameNotificationTargetPayload

  """
  Sets the email for a notification target. This data is only stored in the live environment.
  Deactivation emails are not sent in the test environment.
  """
  setEmailForNotificationTarget(
    """The input to set the email for a notification target."""
    input: SetEmailForNotificationTargetInput!
  ): SetEmailForNotificationTargetPayload

  """
  Remove the email for a notification target. This mutation is a noop in the test environment.
  """
  removeEmailFromNotificationTarget(
    """The input to remove the email for a notification target."""
    input: RemoveEmailFromNotificationTargetInput!
  ): RemoveEmailFromNotificationTargetPayload

  """
  Replays a given Notification Event to all subscribing notification targets.
  """
  replayNotificationEvent(
    """The input to replay a Notification Event."""
    input: ReplayNotificationEventInput!
  ): ReplayNotificationEventPayload

  """Adds subscriptions to a notification target."""
  addSubscriptionsToNotificationTarget(
    """The input to add subscriptions to a notification target."""
    input: AddSubscriptionsToNotificationTargetInput!
  ): AddSubscriptionsToNotificationTargetPayload

  """Removes subscriptions from a notification target."""
  removeSubscriptionsFromNotificationTarget(
    """
    The input to remove subscriptions from a notification
    target.
    """
    input: RemoveSubscriptionsFromNotificationTargetInput!
  ): RemoveSubscriptionsFromNotificationTargetPayload

  """
  Rotate the signing keys for a notification target.
  Creates a new signing key and sets an expiration date on the old key.
  The old key will be valid for 24 hours after the new key is created.
  During that time, signatures for both keys will be sent in the notification payload.
  There is a maximum of 5 active keys at a time for a target.
  """
  rotateNotificationTargetSigningKey(
    """The ID of the notification target to rotate the signing key for."""
    input: RotateNotificationTargetSigningKeyInput!
  ): RotateNotificationTargetSigningKeyPayload

  """
  Add a `CollaborativeAuthorizationEndpoint` for use in real-time transaction authorization.
  
  You are able to create up to 5 `CollaborativeAuthorizationEndpoints`, but only one may be active at a time.
  
  By default, the created endpoint is _not_ active. You must call the `activateCollaborativeAuthorizationEndpoint` mutation.
  """
  addCollaborativeAuthorizationEndpoint(input: AddCollaborativeAuthorizationEndpointInput!): AddCollaborativeAuthorizationEndpointPayload

  """Activate a `CollaborativeAuthorizationEndpoint`."""
  activateCollaborativeAuthorizationEndpoint(input: ActivateCollaborativeAuthorizationEndpointInput!): ActivateCollaborativeAuthorizationEndpointPayload

  """Enable the collaborative authorization feature for a `CardProduct`."""
  enableCollaborativeAuthorizationFeature(input: EnableCollaborativeAuthorizationFeatureInput!): EnableCollaborativeAuthorizationFeaturePayload

  """Deactivate a `CollaborativeAuthorizationEndpoint`."""
  deactivateCollaborativeAuthorizationEndpoint(input: DeactivateCollaborativeAuthorizationEndpointInput!): DeactivateCollaborativeAuthorizationEndpointPayload

  """Remove a `CollaborativeAuthorizationEndpoint`."""
  removeCollaborativeAuthorizationEndpoint(input: RemoveCollaborativeAuthorizationEndpointInput!): RemoveCollaborativeAuthorizationEndpointPayload

  """Rename a `CollaborativeAuthorizationEndpoint`."""
  renameCollaborativeAuthorizationEndpoint(input: RenameCollaborativeAuthorizationEndpointInput!): RenameCollaborativeAuthorizationEndpointPayload

  """
  Move funds from an employer `FinancialAccount` to an employee `FinancialAccount` as a payroll advance.
  Requires the following `FinancialAccountFeatureType`s to be enabled:
  - `PayrollEmployerAdvanceFinancialAccountFeature` on the employer `FinancialAccount`
  - `PayrollAdvanceFinancialAccountFeature` on the employee `FinancialAccount`
  """
  initiatePayrollAdvance(input: InitiatePayrollAdvanceInput!): InitiatePayrollAdvancePayload

  """
  Add funds to account holder `FinancialAccount` from funding account .
  Account holder financial account that has PrepaidCardAccountFeature or DebitCardAccountFeature as enabled
  Origination account is either a Product financial account that has ProductFundingFeature as enabled or account that has CardFundingAccountFeature enabled
  """
  initiateFundPaymentCardFinancialAccountTransfer(input: InitiateFundPaymentCardFinancialAccountTransferInput!): InitiateFundPaymentCardFinancialAccountTransferPayload @deprecated(reason: "Use initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount instead.")

  """
  Update Credit Limit for the account holder from product funding account.
  Account Holder financial account has FleetCardFeature as enabled
  Product has Product Funding Feature as enabled
  """
  initiateFinancialAccountCreditLimitUpdateFromProductFunding(input: InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput!): InitiateFinancialAccountCreditLimitUpdateFromProductFundingPayload

  """
  Add funds to payment card holder `FinancialAccount` from funding account .
  Payment Card Holder financial account has PrepaidCardAccountFeature or DebitCardAccountFeature as enabled
  Origination account is either a Business financial account that has ProductFundingFeature as enabled or account has CardFundingAccountFeature enabled
  """
  initiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccount(input: InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput!): InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPayload

  """
  Add funds to funding account from payment card holder `FinancialAccount`.
  Payment Card Holder financial account has PrepaidCardAccountFeature or DebitCardAccountFeature as enabled
  Target account is either a Business financial account that has ProductFundingFeature as enabled or account has CardFundingAccountFeature enabled
  """
  initiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccount(input: InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountInput!): InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountPayload

  """
  Transfer funds between `FinancialAccount`s.
  - When the transfer purpose is `REWARD` or `EARNED_CREDIT`.
    - Origination account is either a Business financial account with ProductFundingFeature enabled, or an account with CardFundingAccountFeature enabled.
    - Payment Card Holder financial account has PrepaidCardAccountFeature or DebitCardAccountFeature enabled.
  
  - When the transfer purpose is `REWARD_REVERSAL` or `EARNED_CREDIT_REVERSAL`.
    - Payment Card Holder financial account has PrepaidCardAccountFeature or DebitCardAccountFeature enabled.
    - Target account is either a Business financial account with ProductFundingFeature enabled, or an account with CardFundingAccountFeature enabled.
  
  - When the transfer purpose is `GENERAL`, both financial accounts have the PrepaidCardFeature,
  DebitCardFeature, ProductFundingFeature, or CardFundingAccountFeature enabled.
  """
  initiateTransferBetweenFinancialAccounts(input: InitiateTransferBetweenFinancialAccountsInput!): InitiateTransferBetweenFinancialAccountsPayload

  """
  Add funds to an Organization's account in the Highnote test environment.
  """
  simulateDeposit(input: SimulateDepositInput!): SimulateDepositPayload

  """
  Transfer funds from an `ExternalFinancialAccount` to an internal `FinancialAccount` via ACH for a secure deposit.
  
  [ACH](https://en.wikipedia.org/wiki/Automated_clearing_house) is a method of transferring funds between banks.
  """
  initiateSecureDepositACHTransfer(input: InitiateSecureDepositACHTransferInput!): InitiateSecureDepositACHTransferPayload

  """
  Send funds from a `FinancialAccount` to an `ExternalFinancialAccount` using ACH.
  
  [ACH](https://en.wikipedia.org/wiki/Automated_clearing_house) is a method of transferring funds between banks.
  """
  initiateFundsWithdrawalACHTransfer(input: InitiateFundsWithdrawalACHTransferInput!): InitiateFundsWithdrawalACHTransferPayload

  """
  Send funds from an `ExternalFinancialAccount` to a `FinancialAccount` using ACH.
  
  [ACH](https://en.wikipedia.org/wiki/Automated_clearing_house) is a method of transferring funds between banks.
  """
  initiateFundsDepositACHTransfer(input: InitiateFundsDepositACHTransferInput!): InitiateFundsDepositACHTransferPayload

  """Confirm that the specified ACH deposit is a payroll deposit."""
  confirmPayrollDeposit(input: ConfirmPayrollDepositInput!): ConfirmPayrollDepositPayload

  """
  Change the status of an `IntegratorInitiatedACHTransfer` from `INITIATED` to `PROCESSING`.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateProcessingIntegratorInitiatedStatusChange(input: SimulateProcessingIntegratorInitiatedStatusChangeInput!): SimulateProcessingIntegratorInitiatedStatusChangePayload

  """
  Change the status of an `IntegratorInitiatedACHTransfer` from `PROCESSING` to `PROCESSED`.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateProcessedIntegratorInitiatedStatusChange(input: SimulateProcessedIntegratorInitiatedStatusChangeInput!): SimulateProcessedIntegratorInitiatedStatusChangePayload

  """
  Change the status of an `IntegratorInitiatedACHTransfer` from `PROCESSING` to `RETURNED`.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateReturnedIntegratorInitiatedStatusChange(input: SimulateReturnedIntegratorInitiatedStatusChangeInput!): SimulateReturnedIntegratorInitiatedStatusChangePayload

  """
  Simulate initiating a new `ExternallyInitiatedACHTransfer`.
  
  This is only used for testing purposes.
  """
  simulateExternallyInitiatedACHTransfer(input: SimulateExternallyInitiatedACHTransferInput!): ExternallyInitiatedACHTransferPayload

  """
  Change the status of an `ExternallyInitiatedACHTransfer` from `PENDING` to `PROCESSING`.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateProcessingExternallyInitiatedStatusChange(input: SimulateProcessingExternallyInitiatedStatusChangeInput!): ExternallyInitiatedACHTransferPayload

  """Create a one time ACH transfer between financial accounts."""
  createOneTimeACHTransfer(input: CreateOneTimeACHTransferInput!): CreateOneTimeACHTransferPayload

  """Create a recurring ACH transfer between financial accounts."""
  createRecurringACHTransfer(input: CreateRecurringACHTransferInput!): CreateRecurringACHTransferPayload

  """Cancel a scheduled transfer between financial accounts."""
  cancelScheduledTransfer(input: CancelScheduledTransferInput!): CancelScheduledTransferPayload

  """
  Push or pull funds between a Highnote `FinancialAccount` and an external financial account
  (`ExternalFinancialBankAccount` or `NonVerifiedExternalUSFinancialBankAccount`) via ACH transfer.
  """
  initiateAchTransfer(input: InitiateAchTransferInput!): InitiateAchTransferPayload

  """
  Simulate receiving a new `NonOriginatedACHTransfer`.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateNonOriginatedAchTransfer(input: SimulateNonOriginatedAchTransferInput!): SimulateNonOriginatedAchTransferPayload

  """
  Simulates processing of an `OriginatedAchTransfer` or `NonOriginatedAchTransfer`. The status is updated to `PROCESSED`.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateAchTransferProcessing(input: SimulateAchTransferProcessingInput!): SimulateAchTransferProcessingPayload

  """
  Simulates return of an `OriginatedAchTransfer` or `NonOriginatedAchTransfer`. The status will be updated to `RETURNED`.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateAchTransferReturn(input: SimulateAchTransferReturnInput!): SimulateAchTransferReturnPayload

  """Initiate add funds to a `FinancialAccount` via wire."""
  initiateAddWiredFundsToFinancialAccount(input: InitiateAddWiredFundsToFinancialAccountInput!): InitiateAddWiredFundsPayload

  """Initiates a session to allow multiple files to be uploaded."""
  startDocumentUploadSession(input: StartDocumentUploadSessionInput!): StartDocumentUploadSessionPayload

  """Create a link to upload a document to Highnote."""
  createDocumentUploadLink(input: CreateDocumentUploadLinkInput!): CreateDocumentUploadLinkPayload

  """
  Ends the session.
  The session no longer accepts additional files to be uploaded.
  """
  endDocumentUploadSession(input: EndDocumentUploadSessionInput!): EndDocumentUploadSessionPayload

  """Creates a new `RewardMerchantCategoryEarnRule`."""
  createRewardMerchantCategoryEarnRule(input: CreateRewardMerchantCategoryEarnRuleInput!): CreateRewardMerchantCategoryEarnRulePayload

  """Creates a new `RewardDefaultEarnRule`."""
  createRewardDefaultEarnRule(input: CreateRewardDefaultEarnRuleInput!): CreateRewardDefaultEarnRulePayload

  """Attach a reward earn rule to a product."""
  attachRewardEarnRuleToProduct(input: AttachRewardEarnRuleToProductInput!): AttachRewardEarnRuleToProductPayload

  """
  Update a `RewardRuleAttachment`. Note: only the effective through date is modifiable.
  """
  updateRewardRuleAttachment(input: UpdateRewardRuleAttachmentInput!): UpdateRewardRuleAttachmentPayload

  """Creates a new `RewardRedemptionConfiguration`."""
  createRewardRedemptionConfiguration(input: CreateRewardRedemptionConfigurationInput!): CreateRewardRedemptionConfigurationPayload

  """Attach Reward `RewardRedemptionConfiguration` to a `CardProduct`."""
  attachRewardRedemptionConfigurationToProduct(input: AttachRewardRedemptionConfigurationToProductInput!): AttachRewardRedemptionConfigurationToProductPayload

  """
  Update a `RewardRedemptionConfigurationAttachment`. Note: only the effective through date is modifiable.
  """
  updateRewardRedemptionConfigurationAttachment(input: UpdateRewardRedemptionConfigurationAttachmentInput!): UpdateRewardRedemptionConfigurationAttachmentPayload

  """Redeem reward points accrued."""
  redeemRewardsForStatementCredit(input: RedeemRewardsForStatementCreditInput!): RewardPointsTransferPayload

  """Manually Deduct reward points from reward point balance."""
  createRewardPointsAdjustment(input: CreateRewardPointsAdjustmentInput!): RewardPointsTransferPayload

  """
  Shift the statement end period of the current statement for an account to now.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateShiftCurrentFinancialAccountStatementPeriod(input: SimulateShiftCurrentFinancialAccountStatementPeriodInput!): SimulateFinancialAccountStatementPayload

  """
  Rollover the current/next statements. This will simultaneously close the
  current open statement and open the next statement. If the current open
  statement's end period is in the future, this will fail. Use
  simulateShiftCurrentFinancialAccountStatementPeriod mutation to
  move the end period to now.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateRolloverCurrentFinancialAccountStatementPeriod(input: SimulateRolloverCurrentFinancialAccountStatementPeriodInput!): SimulateFinancialAccountStatementPayload

  """
  Initiate `PaymentCardTransactionDispute` on a valid card transaction event.
  """
  initiateCustomerCardTransactionDispute(input: InitiateCustomerCardTransactionDisputeInput!): PaymentCardTransactionDisputePayload

  """Simulate initiating the dispute for the card transaction."""
  simulateInitiateCardTransactionDispute(input: SimulateInitiateCardTransactionDisputeInput!): SimulatePaymentCardTransactionDisputePayload

  """Simulate updating the dispute for the card transaction."""
  simulateUpdateCardTransactionDispute(input: SimulateUpdateCardTransactionDisputeInput!): SimulatePaymentCardTransactionDisputePayload

  """Simulate initiating the chargeback for the card transaction dispute."""
  simulateInitiateCardTransactionChargeback(input: SimulateInitiateCardTransactionChargebackInput!): SimulatePaymentCardTransactionDisputePayload

  """
  Simulate issuing the Credit for a Dispute that has been decided in favor of the Account Holder for cases
  where the Dispute was not sent as a Chargeback to the Network due to not meeting
  the DisputeChargebackCardProductFeature.chargebackMinimumThreshold.
  """
  simulateIssueCreditForCardTransactionDispute(input: SimulateIssueCreditForCardTransactionDisputeInput!): SimulatePaymentCardTransactionDisputePayload

  """
  Simulate issuing provisional credit for the card transaction dispute when the disputed amount
  meets the DisputeChargebackCardProductFeature.chargebackMinimumThreshold.
  """
  simulateIssueProvisionalCreditForCardTransactionDispute(input: SimulateIssueProvisionalCreditForCardTransactionDisputeInput!): SimulatePaymentCardTransactionDisputePayload

  """
  Simulate resolving the payment card transaction chargeback for the dispute.
  If received amount is 0, the chargeback is resolved as a loss.
  """
  simulateResolvePaymentCardTransactionChargeback(input: SimulateResolvePaymentCardTransactionChargebackInput!): SimulatePaymentCardTransactionDisputePayload

  """
  Simulate updating the payment card transaction chargeback for the dispute.
  If received amount is 0, the chargeback is resolved as a loss.
  """
  simulateUpdatePaymentCardTransactionChargeback(input: SimulateUpdatePaymentCardTransactionChargebackInput!): SimulatePaymentCardTransactionDisputePayload

  """
  Simulate finalizing the provisional credit for the card transaction dispute.
  """
  simulateFinalizeProvisionalCreditForCardTransactionDispute(input: SimulateFinalizeProvisionalCreditForCardTransactionDisputeInput!): PaymentCardTransactionDisputePayload

  """Simulate creating the application documents upload sessions."""
  simulateCreateApplicationDocumentsUploadSessions(input: SimulateCreateApplicationDocumentsUploadSessionsInput!): SimulateApplicationManualReviewPayload

  """Suspends a `FinancialAccount`."""
  suspendFinancialAccount(input: SuspendFinancialAccountInput!): FinancialAccountPayload

  """Unsuspends a `FinancialAccount`."""
  unsuspendFinancialAccount(input: UnsuspendFinancialAccountInput!): FinancialAccountPayload

  """
  Request encrypted and activation data required to push provision a `PaymentCard` directly from your mobile application to an Apple Pay enabled device.
  """
  addPaymentCardToApplePayByDevicePushProvisioning(input: AddPaymentCardToApplePayByDevicePushProvisioningInput!): AddPaymentCardDigitalWalletTokenApplePayDevicePushProvisioningPayload

  """
  Request encrypted and activation data required to push provision a `PaymentCard` directly from your mobile application to a Google Pay enabled device.
  """
  addPaymentCardToGooglePayByDevicePushProvisioning(input: AddPaymentCardToGooglePayByDevicePushProvisioningInput!): AddPaymentCardDigitalWalletTokenGooglePayPushProvisioningPayload

  """
  Simulate the card digital wallet token activation flow.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateCardDigitalWalletTokenActivation(input: SimulateCardDigitalWalletTokenActivationInput!): SimulateCardDigitalWalletTokenPayload

  """
  Simulate the card digital wallet token activated flow.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateCardDigitalWalletTokenActivated(input: SimulateCardDigitalWalletTokenActivatedInput!): SimulateCardDigitalWalletTokenPayload

  """Deletes an existing spend rule."""
  deleteSpendRule(input: DeleteSpendRuleInput!): DeleteSpendRulePayload

  """Deletes an existing velocity rule."""
  deleteVelocityRule(input: DeleteVelocityRuleInput!): DeleteVelocityRulePayload

  """Update an existing `VelocityRule`"""
  updateVelocityRule(input: UpdateVelocityRuleInput!): UpdateVelocityRulePayload

  """
  Attaches a spend rule to the given `FinancialAccount`. The spend control rule will be evaluated for every authorization.
  """
  attachSpendRuleToFinancialAccount(input: AttachSpendRuleToFinancialAccountInput!): AttachSpendRuleToFinancialAccountPayload

  """
  Detaches, or removes, a spend rule from the given `FinancialAccount`. The spend rule will **not** be evaluated for future authorizations.
  """
  detachSpendRuleFromFinancialAccount(input: DetachSpendRuleFromFinancialAccountInput!): DetachSpendRuleFromFinancialAccountPayload

  """Attach a `VelocityRule` to a `FinancialAccount`"""
  attachVelocityRuleToFinancialAccount(input: AttachVelocityRuleToFinancialAccountInput!): AttachVelocityRuleToFinancialAccountPayload

  """Detach a `VelocityRule` from a `FinancialAccount`"""
  detachVelocityRuleFromFinancialAccount(input: DetachVelocityRuleFromFinancialAccountInput!): DetachVelocityRuleFromFinancialAccountPayload

  """
  Create a `CreditPlan` for a `CardProduct` based on a `CreditPlanTemplate`. For plans with a `CreditBalanceType` of `INSTALLMENT`, please use `createCardProductInstallmentCreditPlan`.
  """
  createCardProductCreditPlan(input: CreateCardProductCreditPlanInput!): CreateCardProductCreditPlanPayload

  """
  Create a `CreditPlan` with a `CreditBalanceType` of `INSTALLMENT` for a `CardProduct` based on a `CreditPlanTemplate`.
  """
  createCardProductInstallmentCreditPlan(input: CreateCardProductInstallmentCreditPlanInput!): CreateCardProductInstallmentCreditPlanPayload

  """
  Shift the statement end period of the current statement for a Financial Account
  n periods backward, and age the account.
  
  The `FinancialAccount` must have an `OUTSTANDING_BALANCE_PAYABLE` > 0, and it
  cannot have any closed billing statements more recent than the `numberOfCyclesToShiftCurrentStatementBackward`
  input.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriod(input: SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput!): SimulateFinancialAccountAgingPayload

  """
  Create a `CreditCardProductConfiguration` for a revolving `CardProduct`, specifying details about the number of days until an account ages into states like `DELINQUENT`, `SUSPENDED`, and `CLOSING`, what is included in the minimum payment, and how repayments are applied.
  """
  createRevolvingCreditCardProductConfiguration(input: CreateRevolvingCreditCardProductConfigurationInput!): CreateCreditCardProductConfigurationPayload

  """
  Create a `CreditCardProductConfiguration` for a charge `CardProduct`, specifying details about the number of days until an account ages into states like `DELINQUENT`, `SUSPENDED`, and `CLOSING`, what is included in the minimum payment, and how repayments are applied.
  """
  createChargeCreditCardProductConfiguration(input: CreateChargeCreditCardProductConfigurationInput!): CreateCreditCardProductConfigurationPayload

  """Activate a `CreditPlan` for a `CardProduct`."""
  activateCardProductCreditPlan(input: ActivateCardProductCreditPlanInput!): ActivateCardProductCreditPlanPayload

  """
  Activate an `InstallmentAgreement` for a `Transaction` by providing a `TransactionEvent`.
  """
  activateInstallmentAgreementForTransactionEvent(input: ActivateInstallmentAgreementForTransactionEventInput!): ActivateInstallmentAgreementForTransactionEventPayload

  """Attach a fee to a `CreditPlan`."""
  attachFeeToCreditPlan(input: AttachFeeToCreditPlanInput!): AttachFeeToCreditPlanPayload

  """
  Simulated create new fee schedule in the Highnote test environment.
  
  **Note:** This feature is only available in the `TEST` environment.
  """
  simulateCreateAndActivateFeeSchedule(input: SimulateCreateAndActivateFeeScheduleInput!): SimulateCreateAndActivateFeeSchedulePayload

  """
  Waive fee of a fee transfer event.
  
  This will waive fee of already charged fee transfer event.
  """
  waiveFeeTransfer(input: WaiveFeeTransferInput!): FeeTransferEventPayload

  """
  Initiates an asynchronous operation to generate a report
  for an Organization.
  """
  initiateOrganizationReport(input: InitiateOrganizationReportInput!): InitiateOrganizationReportPayload

  """Authorizes a `PaymentCard` for later capture."""
  authorizePaymentCard(input: AuthorizePaymentCardInput!): AuthorizePaymentCardPayload

  """Authorizes a `PaymentMethodToken` for later capture."""
  authorizePaymentMethodToken(input: AuthorizePaymentMethodTokenInput!): AuthorizePaymentMethodTokenPayload

  """Captures a previously authorized payment."""
  capturePaymentTransaction(input: CapturePaymentTransactionInput!): CapturePaymentTransactionPayload

  """One step authorization and capture of an `Order`."""
  chargePaymentOrder(input: ChargePaymentOrderInput!): ChargePaymentOrderPayload

  """One step authorization and capture of an `PaymentOrder`."""
  chargePaymentOrderFromPaymentMethodToken(input: ChargePaymentOrderPaymentMethodTokenInput!): ChargePaymentOrderPayload

  """One step authorization and capture of a payment card."""
  chargePaymentCard(input: ChargePaymentCardInput!): ChargePaymentCardPayload

  """One step authorization and capture of a `PaymentMethodToken`."""
  chargePaymentMethodToken(input: ChargePaymentMethodTokenInput!): ChargePaymentMethodTokenPayload

  """Cancels remaining held authorized amount."""
  cancelPaymentTransaction(input: CancelPaymentTransactionInput!): CancelPaymentTransactionPayload

  """Refunds a previously captured payment."""
  refundPaymentTransaction(input: RefundPaymentTransactionInput!): RefundPaymentTransactionPayload

  """
  Verifies that the `PaymentCardInput` is a valid payment card, and able to be used authroization.
  """
  verifyPaymentCard(input: VerifyPaymentCardInput!): VerifyPaymentCardPayload

  """Updates `CustomFields` for an object."""
  updateCustomFields(input: UpdateCustomFieldsInput!): CustomFieldsPayload

  """Deletes all `CustomFields` for an object."""
  deleteCustomFields(input: DeleteCustomFieldsInput!): CustomFieldsPayload

  """Creates a single use payment method from a card."""
  tokenizeCardPaymentMethod(input: TokenizeCardPaymentMethodInput!): TokenizeCardPaymentMethodPayload

  """Validate provided address."""
  validateAddress(input: ValidateAddressInput!): ValidateAddressPayload

  """A workflow which provisions an Account Holder"""
  provisionAccountHolder(input: ProvisionAccountHolderInput!): ProvisionAccountHolderPayload

  """Creates a new `PaymentOrder`."""
  createPaymentOrder(input: CreatePaymentOrderInput!): CreatePaymentOrderPayload

  """Initiate the process of sending a physical check."""
  initiatePhysicalCheckPayment(input: InitiatePhysicalCheckPaymentInput!): InitiatePhysicalCheckPaymentPayload

  """Creates a document upload session for check documents."""
  createCheckPaymentDocumentUploadSession(input: CreateCheckPaymentDocumentUploadSessionInput!): CreateCheckPaymentDocumentUploadSessionPayload

  """
  Simulates a `CheckPaymentEvent` for an initiated physical check payment. This will only work in the prod-test environment.
  """
  simulateCheckPaymentEvent(input: SimulateCheckPaymentEventInput!): SimulateCheckPaymentEventChangePayload

  """
  Starts the process by creating a `UnifiedFundsTransferQuote`, which the end user can then accept.
  
  Once the quote is accepted, call `initiateUnifiedFundsTransfer` with the `UnifiedFundsTransferQuote.id` to initiate the transfer.
  """
  createUnifiedFundsTransferQuote(input: CreateUnifiedFundsTransferQuoteInput!): CreateUnifiedFundsTransferQuotePayload

  """Accepts a `UnifiedFundsTransferQuote` initiating the transfer process."""
  initiateUnifiedFundsTransfer(input: InitiateUnifiedFundsTransferInput!): InitiateUnifiedFundsTransferPayload
}

"""The schema changes for a specific deploy timestamp."""
type SchemaChangelog {
  """Globally unique identifier for a `SchemaChangelog`"""
  id: ID!

  """Timestamp associated with a specific deployment"""
  createdAt: String

  """The schema changes associated with the specified timestamp"""
  changes: [SchemaChangesForRootPath!]
}

"""The connection type for `SchemaChangelogs`."""
type SchemaChangelogConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SchemaChangelogEdge!]
}

"""The edge type for `SchemaChangelogs`."""
type SchemaChangelogEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `SchemaChangelog`."""
  node: SchemaChangelog
}

"""The schema changes for a specified schema `rootPath`"""
type SchemaChangesForRootPath {
  """Root path of associated `changes`."""
  rootPath: String!

  """
  Schema changes for the specified root path
  ? Change field name to rootPathChanges?
  """
  changes: [SchemaChange!]
}

"""Details of a change to a specific schema path"""
type SchemaChange {
  """The criticality of the `SchemaChange`."""
  criticality: SchemaChangeCriticality

  """
  Description of schema change, e.g. `Field 'bar' was added to object type 'Foo'.
  """
  message: String

  """The schema path of the change e.g. `Foo.bar`."""
  path: String

  """The type of the schema change, e.g. `FIELD_ADDED`."""
  changeType: String
}

"""The criticality of the `SchemaChange`"""
type SchemaChangeCriticality {
  """This code represents the level of criticality of the `SchemaChange`."""
  level: SchemaChangeCriticalityLevel
}

"""The level of the `SchemaChange`"""
enum SchemaChangeCriticalityLevel {
  NON_BREAKING
  DANGEROUS
  BREAKING
}

"""
The error type surfaced when you do not have permissions to access a field.
"""
type AccessDeniedError {
  """A human-readable message detailing the error."""
  message: String!
}

interface Node {
  """Globally unique ID to fetch a Node."""
  id: ID!
}

"""The different environments available on the Highnote platform."""
enum IntegrationEnvironment {
  TEST
  LIVE
}

"""Available regions to persist data."""
enum ComputeRegion {
  USA
  EUROPE
  ASIA
}

"""Type representing the parts of an address."""
type Address {
  """The number and street of the address."""
  streetAddress: String

  """Additional data about the address, e.g. apartment or unit numbers."""
  extendedAddress: String

  """The postal code of the address."""
  postalCode: String

  """A region for the address."""
  region: String

  """The locality of the address (e.g. town, city)"""
  locality: String

  """The three letter country code where the address resides."""
  countryCodeAlpha3: String
}

"""Input representing the parts of an address."""
input AddressInput {
  """
  The number and street of the address.
  
  The validation for the `address` uses the following regex pattern `^\s*\S+(?:\s+\S+){1,3}`.
  
  This pattern matches two to four groups of non-whitespace characters. These can include special characters like dashes or slashes. For example, 'Cozy Cottage', '200 Lake Rd', '123 Second Street NW', and '111 1/2 Center Street' all match.
  
  When the field is used for creating an application, it will also validate that a PO Box is not included using this regex pattern `^(?:((\S([^pPOo])+)|(?:[0-9]+)))\s(?:[0-9A-Za-z\.]|[^\S\r\n])+$`.
  
  When the field is used for creating a physical payment card order or physical payment card group order, it will also support mailing to a PO Box using this regex pattern `^(?:(?:(?:\S[^pPOo\r\n]+)|(?:[0-9\/#]+)))\s(?:[0-9A-Za-z\.]|[^\S\r\n])+$|^\b[P|p]*(?:OST|ost)*\.*\s*[O|o|0]*(?:ffice|FFICE)*\.*\s*[B|b][O|o|0][X|x]\s[0-9A-Za-z]+\b$`.
  """
  streetAddress: String!

  """
  Additional data about the address, e.g. apartment or unit numbers.
  
  The validation for the `extendedAddress` uses the following regex pattern `^[a-zA-Z\d',. \-#]+(([',. \-#\/][a-zA-Z \d])?[a-zA-Z.]*)*$`.
  
  It checks for numeric string with special characters and whitespace.
  """
  extendedAddress: String

  """
  The postal code of the address.  The value can include 5 numbers only or a hyphen - and 4 numbers
  """
  postalCode: String!

  """
  A region for the address based on the two letter state [IS0 3166 standard](https://en.wikipedia.org/wiki/ISO_3166-2:US), including districts and outlying areas.
  """
  region: String!

  """
  The locality of the address (e.g. town, city)
  
  The validation for the `locality` uses the following regex pattern `^['\p{L}]+(?:[ \p{L},'-:])*$`.
  
  It checks to ensure it begins with a single quote or any letter, followed by whitespace, commas, single quote, any letter, or character in this set '()*+,-./0123456789: .
  """
  locality: String!

  """
  The [three letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) where the address resides.
  """
  countryCodeAlpha3: String!
}

"""
Monetary amount where the currency is used to express the expectations for the number of decimal places. See [ISO Standard Currency Codes](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) for more information.
"""
type Amount {
  """
  Value of the amount as an integer. The number of decimal places [varies by currency](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) so the value will be an integer accounting for the minor units.
  
  For example, a US dollar value of $10.99 will be returned as `1099`. A US dollar value of $10 will be returned as `1000`.
  
  Currencies with zero decimal places (such as `JPY`) or those with more than 2 (such as `JOD`) will be returned as `1099` and `10990` respectively.
  
  | Currency | Value
  | --- | --- |
  | USD | 1099 |
  | JPY | 1099 |
  | JOD | 10990 |
  """
  value: UnsignedInt

  """
  Three-character [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
  
  **Examples:** `"USD", "EUR", "GBP"`
  """
  currencyCode: String

  """
  The number of decimal places for this `Amount`. This value is used to determine the decimal place for the `value` field.
  This value will always be at least the number of decimal places for the `currencyCode` provided.
  
  **Examples:**
  A value of `1099`, a currencyCode of `USD`, and a decimalPlaces of `2` as a string representation would be $10.99.
  A value of `1099`, a currencyCode of `USD`, and a decimalPlaces of `3` as a string representation would be $1.099.
  """
  decimalPlaces: UnsignedInt
}

"""
Monetary amount where the currency is used to express the expectations for the number of decimal places. See [ISO Standard Currency Codes](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) for more information.
"""
input AmountInput {
  """
  Value of the amount as an integer. The number of decimal places [varies by currency](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) so the value should be an integer accounting for the minor units.
  
  For example, a US dollar value of $10.99 should be provided as `1099`. A US dollar value of $10 should be provided as `1000`.
  
  Currencies with zero decimal places (such as `JPY`) or those with more than 2 (such as `JOD`) should be provided as `1099` and `10990` respectively.
  
  | Currency | Value
  | --- | --- |
  | USD | 1099 |
  | JPY | 1099 |
  | JOD | 10990 |
  """
  value: UnsignedInt!

  """
  Three-character [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
  
  **Examples:** `"USD", "EUR", "GBP"`
  """
  currencyCode: ISO4217Alpha3SupportedCurrency!
}

"""The range type for `Amount`."""
type AmountRange {
  """The minimum value (inclusive)."""
  minimumInclusive: Amount

  """The minimum value (exclusive)."""
  minimumExclusive: Amount

  """The maximum value (inclusive)."""
  maximumInclusive: Amount

  """The maximum value (exclusive)."""
  maximumExclusive: Amount
}

"""The range type for `UnsignedInt`."""
type UnsignedIntegerRange {
  """The minimum value (inclusive)."""
  minimumInclusive: UnsignedInt

  """The minimum value (exclusive)."""
  minimumExclusive: UnsignedInt

  """The maximum value (inclusive)."""
  maximumInclusive: UnsignedInt

  """The maximum value (exclusive)."""
  maximumExclusive: UnsignedInt
}

"""Information about the paginated result set."""
type PageInfo {
  """Whether or not edges prior to `before` or `after` exist."""
  hasNextPage: Boolean!

  """Whether or not edges further from `before` or `after` exist."""
  hasPreviousPage: Boolean!

  """When paginating backward, the cursor to use for your next request."""
  startCursor: String!

  """When paginating forward, the cursor to use for your next request."""
  endCursor: String!
}

"""Result type when user errors are present on the request."""
type UserError {
  """The user errors present on the request."""
  errors: [FieldUserError!]
}

"""A validation error for a specific field or input path."""
type FieldUserError {
  """The path to the input field which has an error."""
  path: [String!] @deprecated(reason: "`path` does not provide index information for list input errors. Use `errorPath` instead.")

  """A machine-readable code for the specific error."""
  code: String

  """A human-friendly description for the specific error."""
  description: String

  """The path to the input field which has an error, including indices."""
  errorPath: [String!]
}

"""Representation of a unique location on a georgraphic plane."""
type Coordinates {
  """The north–south position of a point on the Earth's surface."""
  latitude: String!

  """The east–west position of a point on the Earth's surface."""
  longitude: String!
}

"""A representation of size and unit of measurement of a distance."""
type Distance {
  """The length of the measurement."""
  length: Float!

  """The unit of measurement."""
  unit: DistanceUnit!
}

"""A unit of distance measurement."""
enum DistanceUnit {
  """A British imperial unit and US customary unit of distance."""
  MILE

  """A unit of distance in the metric system."""
  KILOMETER
}

"""Representation of a unique location on a georgraphic plane."""
input CoordinatesInput {
  """The north–south position of a point on the Earth's surface."""
  latitude: String!

  """The east–west position of a point on the Earth's surface."""
  longitude: String!
}

"""A representation of size and unit of measurement of a distance."""
input DistanceInput {
  """The length of the measurement."""
  length: Float!

  """The unit of measurement."""
  unit: DistanceUnit!
}

"""A month in the calendar year."""
enum Month {
  """
  The month of January
  
  Represented numerically as `01`
  """
  JANUARY

  """
  The month of February
  
  Represented numerically as `02`
  """
  FEBRUARY

  """
  The month of March
  
  Represented numerically as `03`
  """
  MARCH

  """
  The month of April
  
  Represented numerically as `04`
  """
  APRIL

  """
  The month of May
  
  Represented numerically as `05`
  """
  MAY

  """
  The month of June
  
  Represented numerically as `06`
  """
  JUNE

  """
  The month of July
  
  Represented numerically as `07`
  """
  JULY

  """
  The month of August
  
  Represented numerically as `08`
  """
  AUGUST

  """
  The month of September
  
  Represented numerically as `09`
  """
  SEPTEMBER

  """
  The month of October
  
  Represented numerically as `10`
  """
  OCTOBER

  """
  The month of November
  
  Represented numerically as `11`
  """
  NOVEMBER

  """
  The month of December
  
  Represented numerically as `12`
  """
  DECEMBER
}

"""Represents the direction funds are moving in an accounting context."""
enum AccountingDirection {
  """Indicates a debit. The money is moving out of an account."""
  DEBIT

  """Indicates a credit. The money is moving into an account."""
  CREDIT
}

"""The input for creating a minimal `USAuthorizedPerson`"""
input MinimalUSAuthorizedPersonInput {
  """The authorized person's legal name."""
  name: USAssociatedPersonNameInput!

  """
  The authorized person's e-mail address.
  
  **Note:** Highnote does not verify the e-mail address.
  """
  email: String

  """The primary phone number for this authorized person."""
  phoneNumber: PhoneInput

  """The authorized person's U.S. physical address."""
  homeAddress: AddressInput

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 18 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  """
  dateOfBirth: String!

  """The identification document used to verify the authorized person."""
  identificationDocument: USIdentificationDocumentInput

  """Percentage ownership of this authorized person in business if any."""
  percentageOwnership: Int

  """Authorized person's title."""
  authorizingPersonTitle: BusinessTitle
}

"""The input for creating a minimal `USBusinessAccountHolder`"""
input CreateMinimalUSBusinessAccountHolderInput {
  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!

  """The details of the person authorized to act on behalf of business."""
  primaryAuthorizedPerson: MinimalUSAuthorizedPersonInput!

  """The details of the business."""
  businessProfile: MinimalUSBusinessProfileInput!

  """
  An ID representing this account holder in an external system. Provide this field if you create identifiers for this business that you would like us to store for easy access to their information.
  """
  externalId: String
}

"""The input for canceling a `RequestedIdentityUpdate`."""
input CancelRequestedIdentityUpdateInput {
  """The Global ID of the requested identity update."""
  id: ID!
}

"""The input for confirming a `RequestedIdentityUpdate`."""
input ConfirmRequestedIdentityUpdateInput {
  """The Global ID of the requested identity update."""
  id: ID!
}

"""
The input for initiating an `USBusinessProfileRequestedIdentityUpdate`.
"""
input InitiateUSBusinessProfileRequestedIdentityUpdateInput {
  """The Global ID of the requested identity update."""
  requestedIdentityUpdateId: ID!

  """Details for updating the `USBusinessProfile`."""
  businessProfile: USBusinessProfileUpdateInput!
}

"""
The input for initiating an `USBusinessAuthorizedPersonRequestedIdentityUpdate`.
"""
input InitiateUSBusinessAuthorizedPersonRequestedIdentityUpdateInput {
  """The Global ID of the requested identity update."""
  requestedIdentityUpdateId: ID!

  """Details for updating the `USAuthorizedPerson`."""
  primaryAuthorizedPerson: USAuthorizedPersonUpdateInput!
}

"""
The input for initiating an `USBusinessUltimateBeneficialOwnerRequestedIdentityUpdate`.
"""
input InitiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdateInput {
  """The Global ID of the requested identity update."""
  requestedIdentityUpdateId: ID!

  """Details for updating the `USUltimateBeneficialOwner`."""
  ultimateBeneficialOwner: USUltimateBeneficialOwnerUpdateInput!
}

"""An explanation given as to why the application was denied."""
input AdverseActionReasonInput {
  """The reason why the application was denied."""
  code: AdverseActionCodeInput!
}

"""
The input for denying a credit-based `AccountHolderCardProductApplication`.
"""
input DenyCreditProductApplicationUnderwritingInput {
  """Global id of the application"""
  applicationId: ID!

  """
  Optional input to accept an Open Offer on the application as an alternative to the primary underwritten offer that is being denied.
  """
  counterOffer: AcceptCounterOfferInput

  """
  The date and time, in ISO 8601 format, marking when the underwriting decision was made.
  For example, `2023-01-01T22:00:00.000Z`.
  """
  decisionDate: String!

  """A list of reasons why the underwriting decision was adverse."""
  adverseActionReasons: [AdverseActionReasonInput!]!
}

"""The Accepted Counter Offer input"""
input AcceptCounterOfferInput {
  """
  The AccountHolder's consent and acceptance to the counter offer agreement.
  """
  consentAgreement: ConsentInput!

  """The ID of the offer to accept."""
  offerIdentifier: String!
}

"""
The input to request to update `AccountHolderCardProductApplicationOffer` on an `AccountHolderCardProductApplication`
"""
input UpdateAccountHolderCardProductApplicationOffersInput {
  """Global ID of the `AccountHolderCardProductApplication`"""
  applicationId: ID!

  """
  The list of updates to the `AccountHolderCardProductApplicationOffer`s on the Application
  """
  offerUpdates: [UpdateApplicationOfferInput!]!
}

"""A single offer update."""
input UpdateApplicationOfferInput {
  """The ID of the offer to accept."""
  offerId: ID!

  """The requested status update to the offer."""
  offerStatus: CardProductApplicationOfferStatus!
}

"""
The input to accept an extended `AccountHolderCardProductApplicationOffer` on an `AccountHolderCardProductApplication`
"""
input AcceptAccountHolderCardProductApplicationOfferInput {
  """Global ID of the `AccountHolderCardProductApplication`"""
  applicationId: ID!

  """The AccountHolder's consent and acceptance to the offer agreement."""
  consentAgreement: ConsentInput!

  """The ID of the `AccountHolderCardProductApplicationOffer` to accept."""
  offerId: ID!
}

"""
The input for approving a credit-based `AccountHolderCardProductApplication`.
"""
input ApproveCreditProductApplicationUnderwritingInput {
  """Global id of the application"""
  applicationId: ID!

  """
  The date and time, in ISO 8601 format, marking when the underwriting decision was made.
  For example, `2023-01-01T22:00:00.000Z`.
  """
  decisionDate: String!

  """Standard purchase credit limit"""
  standardPurchaseCreditLimit: AmountInput!
}

"""
The input for confirming a credit freeze is lifted for a credit-based `AccountHolderCardProductApplication`.
"""
input ConfirmCreditReportUnfrozenInput {
  """Global identifier of the application in question."""
  applicationId: ID!

  """
  Optionally, subscribers may track details about this application using this field. Maximum length of 2048 characters.
  """
  subscriberNote: String
}

"""
The input for confirming the details of a credit-based `AccountHolderCardProductApplication` in the case of a fraud alert on the applicant's credit report.
"""
input ConfirmVerificationOfCreditProductApplicationForFraudAlertInput {
  """Global identifier of the application in question."""
  applicationId: ID!

  """
  The `AccountHolderCardProductApplication` fields that were confirmed. These must all be confirmed in order to move forward with this application. These fields will also be persisted to the `AccountHolderCardProductApplication` type under the `creditReportFraudAlertVerificationResult` field.
  """
  verificationResult: VerifiedApplicationFieldsForFraudAlertInput

  """An optional note related to this confirmation."""
  memo: String
}

"""
The `AccountHolderCardProductApplication` fields that were confirmed. These must all be confirmed in order to move forward with this application.
"""
input VerifiedApplicationFieldsForFraudAlertInput {
  """Whether or not the `AccountHolder` initiated this application."""
  accountHolderInitiatedApplication: Boolean!

  """
  Whether or not the `AccountHolder` name on the application matches the applicant.
  """
  name: Boolean!

  """
  Whether or not the `AccountHolder` date of birth on the application matches the applicant.
  """
  dateOfBirth: Boolean!

  """
  Whether or not the `AccountHolder` mailing address on the application matches the applicant.
  """
  address: Boolean!
}

"""
The response type for approving a credit-product `AccountHolderCardProductApplication`.
"""
union ApproveCreditProductApplicationUnderwritingPayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""
The response type for denying a credit-product `AccountHolderCardProductApplication`.
"""
union DenyCreditProductApplicationUnderwritingPayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""
The response type for confirming a credit freeze is lifted for a credit-product `AccountHolderCardProductApplication`.
"""
union ConfirmCreditReportUnfrozenPayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""
The response type for verifying a credit-product `AccountHolderCardProductApplication` in the case of a fraud alert.
"""
union ConfirmVerificationOfCreditProductApplicationForFraudAlertPayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""
The response type when initiating an update for a `USBusinessProfileRequestedIdentityUpdate`
"""
union InitiateUSBusinessProfileRequestedIdentityUpdatePayload = RequestedIdentityUpdate | UserError | AccessDeniedError

"""
The response type when applying an update for a `USBusinessAuthorizedPersonRequestedIdentityUpdate`
"""
union InitiateUSBusinessAuthorizedPersonRequestedIdentityUpdatePayload = RequestedIdentityUpdate | UserError | AccessDeniedError

"""
The response type when applying an update for a `USBusinessUltimateBeneficialOwnerRequestedIdentityUpdate`
"""
union InitiateUSBusinessUltimateBeneficialOwnerRequestedIdentityUpdatePayload = RequestedIdentityUpdate | UserError | AccessDeniedError

"""The response type when confirming a `RequestedIdentityUpdate`"""
union ConfirmRequestedIdentityUpdatePayload = RequestedIdentityUpdate | UserError | AccessDeniedError

"""The response type when canceling a `RequestedIdentityUpdate`"""
union CancelRequestedIdentityUpdatePayload = RequestedIdentityUpdate | UserError | AccessDeniedError

"""Response type for creating a minimal `USBusinessAccountHolder`."""
union CreateMinimalUSBusinessAccountHolderPayload = USBusinessAccountHolder | UserError | AccessDeniedError

"""
The response type for updating `AccountHolderCardProductApplicationOffer` on an `AccountHolderCardProductApplication`.
"""
union AccountHolderCardProductApplicationOffersPayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""
The input for creating a new USPersonAccountHolder from tokenized data.
"""
input CreateUSPersonAccountHolderFromTokenInput {
  """
  The token from `tokenizeUSPersonAccountHolder` to use to create the USPersonAccountHolder.
  """
  token: String!
}

"""
The input for creating a new USBusinessAccountHolder from tokenized data.
"""
input CreateUSBusinessAccountHolderFromTokenInput {
  """
  The token from `tokenizeUSBusinessAccountHolder` to use to create the USBusinessAccountHolder.
  """
  token: String!
}

"""
The input for creating a new USPersonAuthorizedUser from tokenized data.
"""
input CreateUSPersonAuthorizedUserFromTokenInput {
  """
  The token from `tokenizeUSPersonAuthorizedUser` to use to create the USPersonAuthorizedUser.
  """
  token: String!
}

"""Type representing common fields of a person's name."""
type Name {
  """The part of the name that identifies a person."""
  givenName: String

  """Additional part of name that identifies a person."""
  middleName: String

  """Part of a personal name that identifies a family, tribe, or community."""
  familyName: String

  """Provides additional information about the person (e.g. Jr., Sr.)"""
  suffix: String

  """One or more words used before the person's name (e.g. Mx., Dr.)."""
  title: String
}

"""Type representing common name fields of a business."""
type BusinessName {
  """The business' legal name."""
  legalBusinessName: String!

  """The business' doing business as (DBA) name."""
  doingBusinessAsName: String
}

"""
Type representing a verification attempt on an Account Holder. Not all attempts are successful.
"""
type AccountHolderVerification {
  """Current status of the verification attempt."""
  status: AccountHolderVerificationStatusCode

  """Current status of the risk verification attempt."""
  riskStatus: AccountHolderRiskVerificationStatusCode

  """The reason for the current status of the verification attempt."""
  reason: AccountHolderVerificationStatusReasonCode

  """Results from the verification attempt."""
  results: [AccountHolderVerificationResult!]

  """Documents required to support manual verification of the application."""
  requiredDocuments: [AccountHolderApplicationRequiredDocument]

  """A list of Adverse Action Reasons explaining the Application Denial."""
  adverseActionReasons: [AdverseActionReason!]

  """Requested Updates to the Identity"""
  requestedUpdates: [RequestedIdentityUpdate!]
}

"""Type representing one result on a verification."""
type AccountHolderVerificationResult {
  """The specific result of a verification requirement."""
  code: AccountHolderVerificationResultCode

  """A description for the resulting code of a verification requirement."""
  description: String
}

"""Type representing parts of a phone number."""
type Phone {
  """The assigned country code for the number."""
  countryCode: String

  """The phone number in a country specific format."""
  number: String

  """
  A classification for the type of the device the phone number is attached or how the phone number is used (e.g. home or work)
  """
  label: PhoneLabel
}

"""The US identification documents attached to a Person."""
type USIdentificationDocument {
  """
  A person's social security number (USA only).
  
  Must have 9 digits divided into 3 parts by hyphen. For example, `123-45-6789`.
  The first part should have 3 digits and should not be 000, 666, or between 900 and 999.
  The second part should have 2 digits and it should be from 01 to 99.
  The third part should have 4 digits and it should be from 0001 to 9999.
  
  The validation for the input uses the following regex pattern `^(?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4}$`.
  """
  socialSecurityNumber: TaxIdentificationDocument
}

"""
A type representing the parts of a tax identification number (e.g. SSN, TIN, EIN).
"""
type TaxIdentificationDocument {
  """A cryptographically hashed representation of the number."""
  numberHash: String

  """The three character country code of the issuing country."""
  countryCodeAlpha3: String

  """The type of tax identification number."""
  taxIdentificationNumberType: TaxIdentificationNumberType

  """Whether a tax identification number has been previously stored"""
  taxIdentificationNumberStored: Boolean
}

"""The type of tax identification number."""
enum TaxIdentificationNumberType {
  """Social Security Number"""
  SSN

  """Employer Identification Number"""
  EIN

  """Individual Taxpayer Identification Number"""
  ITIN
}

"""The connection type for USBusinessAccountHolder."""
type USBusinessAccountHolderConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [USBusinessAccountHolderEdge!]
}

"""The edge type for a USBusinessAccountHolder."""
type USBusinessAccountHolderEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The account holder."""
  node: USBusinessAccountHolder
}

"""The connection type for USPersonAccountHolder."""
type USPersonAccountHolderConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [USPersonAccountHolderEdge!]
}

"""The edge type for a USPersonAccountHolder."""
type USPersonAccountHolderEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The account holder."""
  node: USPersonAccountHolder
}

"""The connection type for AccountHolder."""
type AccountHolderConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountHolderEdge!]
}

"""The edge type for an `AccountHolder`."""
type AccountHolderEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The account holder."""
  node: AccountHolder
}

"""Account holder types"""
union AccountHolder = USBusinessAccountHolder | USPersonAccountHolder | Organization

"""
The base fields for all PersonAccountHolders (regardless of region or snapshot)
"""
interface PersonAccountHolder {
  """The account holder's name, represented as different parts."""
  name: Name

  """The default billing addresses of the account holder"""
  billingAddress: Address
}

"""
The base fields for all PersonAuthorizedUser (regardless of region or snapshot)
"""
interface PersonAuthorizedUser {
  """The authorized user's name, represented as different parts."""
  name: Name

  """The default billing addresses of the authorized user."""
  billingAddress: Address
}

"""A USPersonAccountHolder."""
type USPersonAccountHolder implements Node & PersonAccountHolder {
  """Global ID used to reference the account holder in operations."""
  id: ID!

  """The account holder's name, represented as different parts."""
  name: Name

  """The email address of the account holder."""
  email: String

  """List of phone numbers associated with the account holder."""
  phoneNumbers: [Phone!]

  """The default billing addresses of the account holder"""
  billingAddress: Address

  """
  The date of birth of the account holder represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """Identification Document associated with the account holder."""
  identificationDocument: USIdentificationDocument

  """
  An ID associated with the account holder provided by an external party. Highnote does not validate the ID.
  """
  externalId: String

  """The date and time, in ISO 8601 format, the account holder was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the account holder was last updated.
  """
  updatedAt: String

  """The credit risk attributes for the `USPersonAccountHolder`."""
  personCreditRiskAttributes: PersonCreditRiskAttributes

  """The Applications for this Account Holder."""
  cardProductApplications(
    """The number of Applications to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): AccountHolderCardProductApplicationConnection @deprecated(reason: "Use applications instead.")

  """The Applications for this Account Holder."""
  applications(
    """The number of Applications to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): CardProductApplicationConnection

  """
  The Payment Cards issued for this Account Holder.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCards(
    first: Int = 20
    after: String

    """Filter results to specific Payment Cards."""
    filterBy: AccountHolderPaymentCardsFilterInput
  ): PaymentCardConnection

  """The external financial account for this Account Holder."""
  externalFinancialAccounts(
    """The number of external financial accounts to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): ExternalFinancialAccountConnection

  """
  The `FinancialAccount`s associated with the `AccountHolder`.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  financialAccounts(
    """The number of `FinancialAccount` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `FinancialAccount`."""
    filterBy: AccountHolderFinancialAccountsFilterInput
  ): FinancialAccountConnection

  """
  The `FinancialAccount`s for authorized user's managed by `AccountHolder`.
  """
  authorizedUserFinancialAccounts(
    """Number of records to return"""
    first: Int = 20

    """Cursor for pagination"""
    after: String
  ): FinancialAccountConnection

  """All global notes for this `USPersonAccountHolder`."""
  globalNotes(first: Int = 20, after: String): GlobalNoteConnectionPayload
}

"""A USPersonAuthorizedUser."""
type USPersonAuthorizedUser implements Node & PersonAuthorizedUser {
  """ID used to reference the authorized user in operations."""
  id: ID!

  """The authorized user's name, represented as different parts."""
  name: Name

  """The email address of the authorized user."""
  email: String

  """List of phone numbers associated with the authorized user."""
  phoneNumbers: [Phone!]

  """The default billing addresses of the authorized user."""
  billingAddress: Address

  """
  The date of birth of the authorized user represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """Identification Document associated with the authorized user."""
  identificationDocument: USIdentificationDocument

  """
  An ID associated with the authorized user provided by an external party. Highnote does not validate the ID.
  """
  externalId: String

  """
  The date and time, in ISO 8601 format, the authorized user was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the authorized user was last updated.
  """
  updatedAt: String

  """The Applications for this authorized user."""
  cardProductApplications(
    """The number of Applications to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): AuthorizedUserCardProductApplicationConnection

  """
  The Payment Cards issued for this authorized user.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCards(
    first: Int = 20
    after: String

    """Filter results to specific Payment Cards."""
    filterBy: AuthorizedUserPaymentCardsFilterInput
  ): PaymentCardConnection

  """
  The account holders associated with the authorized user.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  associatedAccountHolders(
    """The number of financial accounts to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific financial accounts."""
    filterBy: AccountHolderFinancialAccountsFilterInput
  ): AccountHolderConnection
}

"""Response type for onboarding a USPersonAccountHolder."""
union CreateUSPersonAccountHolderPayload = USPersonAccountHolder | UserError | AccessDeniedError

"""
Response type for onboarding a USPersonAccountHolder from a token.

User error paths returned match paths for `CreateUSPersonAccountHolderInput`.
"""
union CreateUSPersonAccountHolderFromTokenPayload = USPersonAccountHolder | UserError | AccessDeniedError

"""
Response type for onboarding a USBusinessAccountHolder from a token.

User error paths returned match paths for `CreateUSBusinessAccountHolderInput`.
"""
union CreateUSBusinessAccountHolderFromTokenPayload = USBusinessAccountHolder | UserError | AccessDeniedError

"""
Response type for onboarding a USPersonAuthorizedUser from a token.

User error paths returned match paths for `CreateUSPersonAuthorizedUserInput`.
"""
union CreateUSPersonAuthorizedUserFromTokenPayload = USPersonAuthorizedUser | UserError | AccessDeniedError

"""Response type for tokenizing a USPersonAccountHolder."""
union TokenizeUSPersonAccountHolderPayload = USPersonAccountHolderToken | UserError | AccessDeniedError

"""Response type for tokenizing a USBusinessAccountHolder."""
union TokenizeUSBusinessAccountHolderPayload = USBusinessAccountHolderToken | UserError | AccessDeniedError

"""Response type for tokenizing a USPersonAuthorizedUser."""
union TokenizeUSPersonAuthorizedUserPayload = USPersonAuthorizedUserToken | AccessDeniedError

"""Response type for onboarding a USPersonAuthorizedUser."""
union CreateUSPersonAuthorizedUserPayload = USPersonAuthorizedUser | UserError | AccessDeniedError

"""A reference to a tokenized USPersonAccountHolder."""
type USPersonAccountHolderToken {
  """
  The reference to the tokenized USPersonAccountHolder.
  
  The tokenized `USPersonAccountHolder` data to be used as input to subsequent mutations (e.g. `createUSPersonAccountHolderFromToken`).
  
  Expires after 1 hour.
  """
  token: String!
}

"""A reference to a tokenized USBusinessAccountHolder."""
type USBusinessAccountHolderToken {
  """
  The reference to the tokenized UsBusinessAccountHolder.
  
  The tokenized `USBusinessAccountHolder` data to be used as input to subsequent mutations (e.g. `createUSBusinessAccountHolderFromToken`).
  
  Expires after 1 hour.
  """
  token: String!
}

"""A reference to a tokenized USPersonAuthorizedUser."""
type USPersonAuthorizedUserToken {
  """
  The reference to the tokenized USPersonAuthorizedUser.
  
  The tokenized `USPersonAuthorizedUser` data to be used as input to subsequent mutations (e.g. `createUSPersonAuthorizedUserFromToken`).
  
  Expires after 1 hour.
  """
  token: String!
}

"""Input fields for creating PersonAccountHolder."""
input CreateUSPersonAccountHolderInput {
  """The details of the account holder."""
  personAccountHolder: USPersonAccountHolderInput!
}

"""Input fields for creating PersonAuthorizedUser."""
input CreateUSPersonAuthorizedUserInput {
  """The details of the account holder."""
  personAuthorizedUser: USPersonAuthorizedUserInput!

  """
  The identifier of the business account holder for which authorized user should be created.
  """
  accountHolderId: ID!
}

"""The details of the PersonAccountHolder."""
input USPersonAccountHolderInput {
  """The account holder's legal name."""
  name: PersonAccountHolderNameInput!

  """
  The account holder's e-mail address.
  
  **Note:** Highnote does not verify the e-mail address.
  """
  email: String

  """The primary phone number for this account holder."""
  phoneNumber: PhoneInput

  """The account holder's U.S. billing address."""
  billingAddress: AddressInput!

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 10 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  """
  dateOfBirth: String!

  """The identification documents used to verify the account holder."""
  identificationDocument: USIdentificationDocumentInput

  """
  The credit risk attributes used to verify the `USPersonAccountHolder`'s underwriting details.
  """
  personCreditRiskAttributes: PersonCreditRiskAttributesInput

  """
  An ID representing this account holder in an external system. Provide this field if you create identifiers for this person that you would like us to store for easy access to their information.
  **Maximum length:** 255 characters.
  
  The validation for the `externalId` uses the following regex pattern `^([a-zA-Z\d[\s][_][=][,][-][.][^;]])+$`.
  """
  externalId: String
}

"""The details of the PersonAuthorizedUser."""
input USPersonAuthorizedUserInput {
  """The authorized user's legal name."""
  name: PersonAuthorizedUserNameInput!

  """
  The authorized user's e-mail address.
  
  **Note:** Highnote does not verify the e-mail address.
  """
  email: String!

  """The primary phone number for this authorized user."""
  phoneNumber: PhoneInput!

  """The authorized user's U.S. billing address."""
  billingAddress: AddressInput!

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 18 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  """
  dateOfBirth: String!

  """The identification documents used to verify the authorized user."""
  identificationDocument: USIdentificationDocumentInput

  """
  An ID representing this authorized user in an external system. Provide this field if you create identifiers for this person that you would like us to store for easy access to their information.
  **Maximum length:** 255 characters.
  
  The validation for the `externalId` uses the following regex pattern `^([a-zA-Z\d[\s][_][=][,][-][.][^;]])+$`.
  """
  externalId: String
}

"""Input representing common fields of a PersonAuthorizedUser's name."""
input PersonAuthorizedUserNameInput {
  """
  The part of the name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  givenName: String!

  """
  Additional part of name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  middleName: String

  """
  Part of a personal name that identifies a family, tribe, or community.
  
  **Minimum length:** 2 characters
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  familyName: String!

  """Provides additional information about the person (e.g. Jr., Sr.)"""
  suffix: String

  """One or more words used before the person's name (e.g. Mx., Dr.)."""
  title: String
}

"""Input representing common fields of a PersonAccountHolder's name."""
input PersonAccountHolderNameInput {
  """
  The part of the name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  givenName: String!

  """
  Additional part of name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  middleName: String

  """
  Part of a personal name that identifies a family, tribe, or community.
  
  **Minimum length:** 2 characters
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  familyName: String!

  """Provides additional information about the person (e.g. Jr., Sr.)"""
  suffix: String

  """One or more words used before the person's name (e.g. Mx., Dr.)."""
  title: String
}

"""
Input representing common fields of the name of a person associated with a business.
"""
input USAssociatedPersonNameInput {
  """
  The part of the name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  givenName: String!

  """
  Additional part of name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  middleName: String

  """
  Part of a personal name that identifies a family, tribe, or community.
  
  **Minimum length:** 2 characters
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  familyName: String!

  """Provides additional information about the person (e.g. Jr., Sr.)"""
  suffix: String

  """One or more words used before the person's name (e.g. Mx., Dr.)."""
  title: String
}

"""
Input representing common fields to update the name of a person associated with a business.
"""
input USAssociatedPersonNameUpdateInput {
  """
  The part of the name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  givenName: String

  """
  Additional part of name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  middleName: String

  """
  Part of a personal name that identifies a family, tribe, or community.
  
  **Minimum length:** 2 characters
  **Maximum length:** 255 characters
  **Allowed characters:** Lower and upper case Latin letters (without [diacritical marks](https://en.wikipedia.org/wiki/Diacritic)) and any of: ''', ',', '.', ' ','-'
  """
  familyName: String

  """Provides additional information about the person (e.g. Jr., Sr.)"""
  suffix: String

  """One or more words used before the person's name (e.g. Mx., Dr.)."""
  title: String
}

"""
The base fields for all BusinessAccountHolders (regardless of region or snapshot).
"""
interface BusinessAccountHolder {
  """The details of the person authorized to act on behalf of business."""
  primaryAuthorizedPerson: AuthorizedPerson

  """Information about the business."""
  businessProfile: BusinessProfile
}

"""Person authorized to act on behalf of the business."""
interface AuthorizedPerson {
  """The authorized person's name."""
  name: Name

  """The default physical address of the authorized person."""
  homeAddress: Address
}

"""Information about the business."""
interface BusinessProfile {
  """The business' legal name."""
  name: BusinessName

  """The primary address of the business."""
  billingAddress: Address

  """Operating Details"""
  operatingDetails: BusinessPlanOperatingDetails
}

"""A USBusinessAccountHolder."""
type USBusinessAccountHolder implements Node & BusinessAccountHolder {
  """Global ID used to reference the business in operations."""
  id: ID!

  """The details of the person authorized to act on behalf of business."""
  primaryAuthorizedPerson: USBusinessAuthorizedPerson

  """Information about the business."""
  businessProfile: USBusinessProfile

  """
  An ID associated with the account holder provided by an external party. Highnote does not validate the ID.
  """
  externalId: String

  """
  The date and time, in ISO 8601 format, the business account holder was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the business account holder was last updated.
  """
  updatedAt: String

  """The Applications for this Account Holder."""
  cardProductApplications(
    """The number of Applications to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): AccountHolderCardProductApplicationConnection

  """
  The Payment Cards issued for this Account Holder.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCards(
    first: Int = 20
    after: String

    """Filter results to specific Payment Cards."""
    filterBy: AccountHolderPaymentCardsFilterInput
  ): PaymentCardConnection

  """The external financial account for this Account Holder."""
  externalFinancialAccounts(
    first: Int = 20
    after: String

    """Filter results to a specific External Financial Account."""
    externalFinancialAccountId: ID
  ): ExternalFinancialAccountConnection

  """
  The financial accounts associated with the account holder.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  financialAccounts(
    """The number of financial accounts to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific financial accounts."""
    filterBy: AccountHolderFinancialAccountsFilterInput
  ): FinancialAccountConnection

  """All global notes for this `USBusinessAccountHolder`."""
  globalNotes(first: Int = 20, after: String): GlobalNoteConnectionPayload
}

"""The US business identification document attached to a Business."""
type USBusinessIdentificationDocument {
  """Employer Identification Number (USA only)."""
  employerIdentificationNumber: TaxIdentificationDocument
}

"""The details of the person authorized to act on behalf of business."""
type USBusinessAuthorizedPerson implements AuthorizedPerson {
  """Global ID used to reference the authorized person."""
  id: ID!

  """The authorized person's name."""
  name: Name

  """Percentage ownership of authorized person."""
  percentageOwnership: Int

  """Authorized person's business title."""
  authorizingPersonTitle: BusinessTitle

  """The email address of the authorized person."""
  email: String

  """List of phone numbers associated with the authorized person."""
  phoneNumbers: [Phone!]

  """The default physical address of the authorized person."""
  homeAddress: Address

  """
  The date of birth of the authorized person represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """Identification Document associated with the authorized person."""
  identificationDocument: USIdentificationDocument

  """
  The date and time, in ISO 8601 format, the authorized person was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the authorized person was last updated.
  """
  updatedAt: String
}

"""
Ultimate beneficial owner for the business owning 25% or more of the business.
"""
type USBusinessUltimateBeneficialOwner {
  """Global ID used to reference the ultimate beneficial owner."""
  id: ID!

  """The ultimate beneficial owner's full name."""
  name: Name

  """Percentage ownership of ultimate beneficial owner."""
  percentageOwnership: Int

  """The default physical address of the ultimate beneficial owner."""
  homeAddress: Address

  """
  The date of birth of the ultimate beneficial owner represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """The email address of the ultimate beneficial owner."""
  email: String

  """List of phone numbers associated with the ultimate beneficial owner."""
  phoneNumbers: [Phone!]

  """Identification Document associated with the ultimate beneficial owner."""
  identificationDocument: USIdentificationDocument

  """
  The date and time, in ISO 8601 format, the ultimate beneficial owner was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the ultimate beneficial owner was last updated.
  """
  updatedAt: String
}

"""Information about the US business."""
type USBusinessProfile implements BusinessProfile {
  """Global ID used to reference the business."""
  id: ID!

  """Name of the business."""
  name: BusinessName

  """
  A short description of what the business does, its purpose, and the products or services it provides.
  """
  businessDescription: String

  """Type of business."""
  businessType: BusinessStructure

  """
  The business' credit risk attributes such as annual revenue, used for underwriting decisions.
  """
  creditRiskAttributes: CreditRiskAttributes @deprecated(reason: "Use businessCreditRiskAttributes instead.")

  """
  The business' credit risk attributes such as annual revenue, used for underwriting decisions.
  """
  businessCreditRiskAttributes: BusinessCreditRiskAttributes

  """Business website."""
  website: String

  """The default physical address of the business."""
  billingAddress: Address

  """The address supplied for the business' registration."""
  legalAddress: Address

  """List of phone numbers associated with the business."""
  phoneNumbers: [Phone!]

  """Identification document associated with the business."""
  identificationDocument: USBusinessIdentificationDocument

  """Ultimate beneficial owners of the business."""
  ultimateBeneficialOwners: [USBusinessUltimateBeneficialOwner]

  """Authorized users of the business."""
  authorizedUsers(first: Int = 20, after: String): AuthorizedUserConnection

  """Operating Details"""
  operatingDetails: BusinessPlanOperatingDetails

  """The date and time, in ISO 8601 format, the business was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the business was last updated."""
  updatedAt: String
}

"""The details of the person authorized to act on behalf of business."""
type USBusinessAuthorizedPersonSnapshot implements AuthorizedPerson {
  """The authorized person's name."""
  name: Name

  """Percentage ownership of authorized person."""
  percentageOwnership: Int

  """Authorized person's business title."""
  authorizingPersonTitle: BusinessTitle

  """The email address of the authorized person."""
  email: String

  """List of phone numbers associated with the authorized person."""
  phoneNumbers: [Phone!]

  """The default physical address of the authorized person."""
  homeAddress: Address

  """
  The date of birth of the authorized person represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """Identification Document associated with the authorized person."""
  identificationDocument: USIdentificationDocument

  """Verification status of authorized person."""
  verificationState: AccountHolderVerificationStatusCode @deprecated(reason: "Use currentVerification instead.")

  """The current verification attempt, if any, of the authorized person."""
  currentVerification: AccountHolderVerification

  """
  The date and time, in ISO 8601 format, the authorized person was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the authorized person was last updated.
  """
  updatedAt: String
}

"""A snapshot of the Ultimate beneficial owner for the business."""
type USBusinessUltimateBeneficialOwnerSnapshot {
  """Global ID used to reference the ultimate beneficial owner."""
  ultimateBeneficialOwnerId: ID!

  """The ultimate beneficial owner's full name."""
  name: Name

  """Percentage ownership of ultimate beneficial owner."""
  percentageOwnership: Int

  """The default physical address of the ultimate beneficial owner."""
  homeAddress: Address

  """
  The date of birth of the ultimate beneficial owner represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """The email address of the ultimate beneficial owner."""
  email: String

  """List of phone numbers associated with the ultimate beneficial owner."""
  phoneNumbers: [Phone!]

  """Identification Document associated with the ultimate beneficial owner."""
  identificationDocument: USIdentificationDocument

  """Verification status of ultimate beneficial owner."""
  verificationState: AccountHolderVerificationStatusCode @deprecated(reason: "Use currentVerification instead.")

  """
  The current verification attempt, if any, of the ultimate beneficial owner.
  """
  currentVerification: AccountHolderVerification

  """
  The date and time, in ISO 8601 format, the ultimate beneficial owner was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the ultimate beneficial owner was last updated.
  """
  updatedAt: String
}

"""Information about the US business."""
type USBusinessProfileSnapshot implements BusinessProfile {
  """Name of the business."""
  name: BusinessName

  """
  A short description of what the business does, its purpose, and the products or services it provides.
  """
  businessDescription: String

  """Type of business."""
  businessType: BusinessStructure

  """
  The business' credit risk attributes, such as annual revenue. Used for underwriting decisions.
  """
  creditRiskAttributes: CreditRiskAttributes @deprecated(reason: "Use businessCreditRiskAttributes instead.")

  """Operating Details"""
  operatingDetails: BusinessPlanOperatingDetails

  """
  The business' credit risk attributes, such as annual revenue. Used for underwriting decisions.
  """
  businessCreditRiskAttributes: BusinessCreditRiskAttributes

  """The business' current credit underwriting status and details."""
  currentCreditUnderwritingVerification: CreditUnderwritingVerification

  """Business website."""
  website: String

  """The default physical addresses of the business."""
  billingAddress: Address

  """The address supplied for the business' registration."""
  legalAddress: Address

  """List of phone numbers associated with the business."""
  phoneNumbers: [Phone!]

  """Identification document associated with the business."""
  identificationDocument: USBusinessIdentificationDocument

  """Verification status of business."""
  verificationState: AccountHolderVerificationStatusCode @deprecated(reason: "Use currentVerification instead.")

  """The current verification attempt, if any, on the business profile."""
  currentVerification: AccountHolderVerification

  """Ultimate beneficial owners of the business."""
  ultimateBeneficialOwners: [USBusinessUltimateBeneficialOwnerSnapshot]

  """The date and time, in ISO 8601 format, the business was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the business was last updated."""
  updatedAt: String
}

"""Response type for creating a USBusinessAccountHolder."""
union CreateUSBusinessAccountHolderPayload = USBusinessAccountHolder | UserError | AccessDeniedError

"""
A type representing the current state in the credit underwriting process.
"""
type CreditUnderwritingVerification {
  """The current underwriting status."""
  status: UnderwriterVerificationStatusCode

  """
  Details about an `IN_REVIEW` `UnderwritingVerificationStatusCode`. Only present if `IN_REVIEW`.
  """
  reviewReasonDetails: CreditUnderwritingVerificationReviewReasonDetails

  """The credit underwriting decision."""
  decision: UnderwriterDecision

  """
  The date and time, in ISO 8601 format for a given application underwriting decision date.
  """
  decisionDate: String

  """A list of results from the credit decision."""
  decisionResults: [CreditDecisionResult!]

  """Details about the credit score associated with this decision."""
  creditScoreDetails: CreditUnderwritingVerificationCreditScoreDetails
}

"""Details about the factors considered behind specific credit scores."""
type CreditUnderwritingVerificationCreditScoreDetails {
  """Credit Bureau that sourced this credit score"""
  creditBureau: CreditBureau

  """Credit Score Model"""
  creditScoreModels: [CreditScoreModel!]
}

"""Details about the factors considered behind specific credit scores."""
type CreditScoreModel {
  """Credit Score Type"""
  creditScoreType: String

  """Credit Score at time of underwriting."""
  creditScore: String

  """
  A list of reasons from the credit decision for a specific credit score.
  """
  creditScoreReasons: [String!]
}

"""Credit Bureaus"""
enum CreditBureau {
  """Experian"""
  EXPERIAN
}

"""
Details about why a `CreditUnderwritingVerification` is in `IN_REVIEW` status.
"""
type CreditUnderwritingVerificationReviewReasonDetails {
  """The reason for `CreditUnderwritingVerification` to be `IN_REVIEW`."""
  reviewReason: CreditUnderwritingVerificationReviewStatusReasonCode

  """
  Optional memo field for the reason for `CreditUnderwritingVerification` to be `IN_REVIEW`.
  """
  memo: String
}

"""Reasons for `CreditUnderwritingVerification` to be `IN_REVIEW` status."""
enum CreditUnderwritingVerificationReviewStatusReasonCode {
  """
  The account holder has placed a fraud alert on their credit report. Their application data must be verified by phone.
  """
  AWAITING_FRAUD_ALERT_REVIEW

  """
  The account holder has placed a freeze on their credit report. Their report must be unfrozen in order to process an application.
  """
  AWAITING_CREDIT_REPORT_TO_BE_UNFROZEN
}

"""A result from a credit decision."""
enum CreditDecisionResult {
  """The cardholder has recent inquiries that exceed the set threshold."""
  RECENT_INQUIRIES

  """The cardholder has had a bankruptcy discharged or dismissed recently."""
  RECENT_BANKRUPTCY

  """The cardholder has an active bankruptcy."""
  ACTIVE_BANKRUPTCY

  """The cardholder has had an account charge off recently."""
  RECENT_CHARGE_OFF

  """The cardholder has had a delinquent account recently."""
  RECENT_DELINQUENCY

  """
  The cardholder has current debt obligations that exceed the set threshold.
  ***Note** This attribute is deprecated and will be removed in a future release. Please refer to the `EXCESSIVE_DEBT_OBLIGATIONS`.
  """
  CURRENT_DEBT_OBLIGATIONS

  """The cardholder is eligible for Military Lending Act (MLA) privileges."""
  MLA_ELIGIBLE

  """The cardholder has placed a fraud alert on their credit report."""
  CREDIT_REPORT_FRAUD_ALERT

  """The cardholder has placed a freeze on their credit report."""
  CREDIT_REPORT_FREEZE

  """
  The cardholder has current debt obligations that exceed the set threshold.
  """
  EXCESSIVE_DEBT_OBLIGATIONS

  """The cardholder has credit obligations that are delinquent."""
  DELINQUENT_CREDIT_OBLIGATIONS

  """
  The cardholder has applied for lines of credit a number of times that exceed the set threshold.
  """
  RECENT_CREDIT_APPLICATIONS

  """
  The cardholder has opened lines of credit a number of times that exceed the set threshold.
  """
  RECENT_CREDIT_ACCOUNTS

  """The cardholder has filed for bankruptcy in the past."""
  BANKRUPTCY

  """The cardholder does not meet the minimum credit score requirement."""
  MIN_CREDIT_SCORE

  """The cardholder does not meet the minimum income requirement."""
  INSUFFICIENT_INCOME

  """The cardholder has limited credit references or history"""
  LIMITED_CREDIT_EXPERIENCE

  """
  The cardholder has excessive payment obligations in relation to their income.
  """
  EXCESSIVE_OBLIGATIONS_TO_INCOME

  """The cardholder has had a tradeline sent to collections in the past."""
  COLLECTIONS

  """
  The age of the oldest tradeline in the cardholders's credit report is too recent.
  """
  AGE_OF_OLDEST_TRADELINE

  """The cardholder currently has delinquent tradelines."""
  CURRENT_DELINQUENT_CREDIT_OBLIGATIONS

  """The cardholder currently has tradelines more than 30 days delinquent."""
  CURRENT_DELINQUENT_CREDIT_OBLIGATIONS_30

  """The cardholder currently has tradelines more than 90 days delinquent."""
  CURRENT_DELINQUENT_CREDIT_OBLIGATIONS_90

  """The cardholder is deceased."""
  DECEASED

  """The cardholder has a foreclosure on their credit report."""
  FORECLOSURE

  """The cardholder has high credit card utilization."""
  HIGH_CREDIT_CARD_UTILIZATION

  """The cardholder has a high debt-to-income ratio."""
  HIGH_DEBT_TO_INCOME

  """The cardholder has high revolving credit card utilization."""
  HIGH_REVOLVING_CREDIT_CARD_UTILIZATION

  """The cardholder has no credit history."""
  NO_CREDIT_HISTORY

  """The cardholder has too many open accounts."""
  NUMBER_OF_OPEN_ACCOUNTS

  """The cardholder has tradeline chargeoffs on their credit report."""
  PAST_CHARGE_OFFS

  """The cardholder has had delinquent tradelines in the past."""
  PAST_DELINQUENT_CREDIT_OBLIGATIONS

  """
  The date of birth provided does not match the date of birth of the cardholder.
  """
  DOB_MISMATCH

  """The name provided does not match any known names for the cardholder."""
  NAME_MISMATCH

  """
  The cardholder's social security number could not be verified as provided.
  """
  SSN_MISMATCH

  """The cardholder's address could not be verified as provided."""
  ADDRESS_MISMATCH

  """
  The cardholder has a high debt-to-income ratio (excluding monthly housing payments).
  """
  HIGH_DEBT_TO_INCOME_EXCLUDING_HOUSING
}

"""The underwriting decision. Can be positive or adverse."""
union UnderwriterDecision = UnderwriterPositiveDecision | UnderwriterAdverseDecision

"""A type representing a positive underwriting decision."""
type UnderwriterPositiveDecision {
  """The approved credit line, based on pre-defined rules."""
  creditLine: Amount!

  """
  Terms such as interest rates for each `CreditPlan` associated with this application.
  """
  creditPlanTerms: [CreditPlanTerms!]
}

"""A type representing an adverse underwriting decision."""
type UnderwriterAdverseDecision {
  """A list of reasons why the underwriting decision was adverse."""
  adverseActionReasons: [AdverseActionReason]
}

"""An explanation given as to why the application was denied."""
type AdverseActionReason {
  """The reason why the application was denied."""
  code: AdverseActionCode

  """A human friendly description for the `code`."""
  description: String
}

"""A type representing credit risk attributes."""
type CreditRiskAttributes {
  """Annual revenue expressed as an Amount."""
  annualRevenue: [Amount]
}

"""A type representing credit risk attributes."""
type BusinessCreditRiskAttributes {
  """Annual revenue expressed as an Amount."""
  annualRevenue: [Amount]
}

"""A type representing credit risk attributes for person underwriting."""
type PersonCreditRiskAttributes {
  """Total annual income expressed as an Amount."""
  totalAnnualIncome: [Amount!]

  """Current debt obligations expressed as an Amount."""
  currentDebtObligations: [Amount!]

  """Person's employment status."""
  employmentStatus: EmploymentStatus

  """
  The rent, mortgage, or other type of housing payment made on a monthly basis as an `Amount`.
  """
  monthlyHousingPayment: [Amount!]
}

"""Input fields for creating a USBusinessAccountHolder."""
input CreateUSBusinessAccountHolderInput {
  """The details of the person authorized to act on behalf of business."""
  primaryAuthorizedPerson: USAuthorizedPersonInput!

  """The details of the business."""
  businessProfile: USBusinessProfileInput!

  """
  An ID representing this account holder in an external system. Provide this field if you create identifiers for this business that you would like us to store for easy access to their information.
  **Maximum length:** 255 characters.
  
  The validation for the `externalId` uses the following regex pattern `^([a-zA-Z\d[\s][_][=][,][-][.][^;]])+$`.
  """
  externalId: String
}

"""The details of the USAuthorizedPersonInput."""
input USAuthorizedPersonInput {
  """The authorized person's legal name."""
  name: USAssociatedPersonNameInput!

  """
  The authorized person's e-mail address.
  
  **Note:** Highnote does not verify the e-mail address.
  """
  email: String!

  """The primary phone number for this authorized person."""
  phoneNumber: PhoneInput!

  """The authorized person's U.S. physical address."""
  homeAddress: AddressInput!

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 18 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  """
  dateOfBirth: String!

  """The identification document used to verify the authorized person."""
  identificationDocument: USIdentificationDocumentInput!

  """Percentage ownership of this authorized person in business if any."""
  percentageOwnership: Int

  """Authorized person's title."""
  authorizingPersonTitle: BusinessTitle
}

"""Input fields for updating a USAuthorizedPerson."""
input USAuthorizedPersonUpdateInput {
  """
  The authorized person's legal name.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  name: USAssociatedPersonNameUpdateInput

  """
  The authorized person's U.S. physical address.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  homeAddress: AddressInput

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 18 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  dateOfBirth: String

  """
  The identification document used to verify the authorized person.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  identificationDocument: USIdentificationDocumentInput
}

"""
Input fields for creating a `USBusinessProfile` with minimum required details.
"""
input MinimalUSBusinessProfileInput {
  """The business' name fields."""
  name: BusinessAccountHolderNameInput!

  """
  A short description of what the business does, its purpose, and the products or services it provides.
  
  Max length: 140 characters.
  Min length: 1 character.
  Input Regex Validation: `^[a-zA-Z\d$ ',.\-\_!@#$%^&*+=`?"\n]+$`
  """
  businessDescription: String

  """The primary phone number for this business."""
  phoneNumber: PhoneInput

  """The business' U.S. billing address."""
  billingAddress: AddressInput!

  """
  The address supplied for the business' registration.
  Supplying the address associated with the business primary SOS filing location is recommended.
  
  **Note**:  Depending on the product that the Account Holder is applying for, the legal entity address may be required.
  During your implementation review, requirements around conditionally mandatory fields will be outlined.
  """
  legalAddress: AddressInput

  """
  Business website URL.
  
  The validation for the `website` URL uses the following regex pattern `^((((https?|ftps?|gopher|telnet|nntp)://)|(mailto:|news:))(%[0-9A-Fa-f]{2}|[-()_.!~*';/?:@&=+$,A-Za-z0-9])+)([).!';/?:,][[:blank:|:blank:]])?$`
  """
  website: String

  """Type of business."""
  businessType: BusinessStructure!

  """
  The business' credit risk attributes. Only used for unsecured credit applications.
  """
  businessCreditRiskAttributes: BusinessCreditRiskAttributesInput

  """
  Business identification document such as employer identification number in USA.
  
  A business identification document is not required for SOLE_PROPRIETORSHIP.
  
  Highnote recommends passing an identification document when available to streamline the onboarding and future product approval processes.
  """
  identificationDocument: USBusinessIdentificationDocumentInput

  """Ultimate beneficial owners of business information"""
  ultimateBeneficialOwners: [MinimalUSUltimateBeneficialOwnerInput!]
}

"""Input fields for creating a USBusinessProfile."""
input USBusinessProfileInput {
  """The business' name fields."""
  name: BusinessAccountHolderNameInput!

  """
  A short description of what the business does, its purpose, and the products or services it provides.
  
  Max length: 140 characters.
  Min length: 1 character.
  Input Regex Validation: `^[a-zA-Z\d$ ',.\-\_!@#$%^&*+=`?"\n]+$`
  """
  businessDescription: String

  """The primary phone number for this business."""
  phoneNumber: PhoneInput!

  """The business' U.S. billing address."""
  billingAddress: AddressInput!

  """
  The address supplied for the business' registration.
  Supplying the address associated with the business primary SOS filing location is recommended.
  
  **Note**:  Depending on the product that the Account Holder is applying for, the legal entity address may be required.
  During your implementation review, requirements around conditionally mandatory fields will be outlined.
  """
  legalAddress: AddressInput

  """
  Business website URL.
  
  The validation for the `website` URL uses the following regex pattern `^((((https?|ftps?|gopher|telnet|nntp)://)|(mailto:|news:))(%[0-9A-Fa-f]{2}|[-()_.!~*';/?:@&=+$,A-Za-z0-9])+)([).!';/?:,][[:blank:|:blank:]])?$`
  """
  website: String

  """Type of business."""
  businessType: BusinessStructure!

  """
  The business' credit risk attributes. Only used for unsecured credit applications.
  ***Note** This attribute is deprecated and will be removed in a future release. Please use `businessCreditRiskAttributes`.
  """
  creditRiskAttributes: CreditRiskAttributesInput

  """
  The business' credit risk attributes. Only used for unsecured credit applications.
  """
  businessCreditRiskAttributes: BusinessCreditRiskAttributesInput

  """
  Business identification document such as employer identification number in USA.
  
  A business identification document is not required for SOLE_PROPRIETORSHIP.
  
  Highnote recommends passing an identification document when available to streamline the onboarding and future product approval processes.
  """
  identificationDocument: USBusinessIdentificationDocumentInput

  """Ultimate beneficial owners of business information"""
  ultimateBeneficialOwners: [USUltimateBeneficialOwnerInput]
}

"""Input fields for updating a `USBusinessProfile`."""
input USBusinessProfileUpdateInput {
  """
  The business' name fields.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  name: BusinessAccountHolderNameUpdateInput

  """
  The business' U.S. billing address.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  billingAddress: AddressInput

  """
  Business identification document such as employer identification number in USA.
  
  A business identification document is not required for SOLE_PROPRIETORSHIP.
  
  Highnote recommends passing an identification document when available to streamline the onboarding and future product approval processes.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  identificationDocument: USBusinessIdentificationDocumentInput
}

"""
Input fields for creating a `USUltimateBeneficialOwner` with minimal information.
"""
input MinimalUSUltimateBeneficialOwnerInput {
  """The ultimate beneficial owner's legal name."""
  name: USAssociatedPersonNameInput!

  """The ultimate beneficial owner's U.S. physical address."""
  homeAddress: AddressInput

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 18 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  """
  dateOfBirth: String!

  """
  The ultimate beneficial owner's e-mail address.
  
  **Note:** Highnote does not verify the e-mail address.
  """
  email: String

  """The primary phone number for this ultimate beneficial owner."""
  phoneNumber: PhoneInput

  """
  The identification document used to verify the ultimate beneficial owner.
  """
  identificationDocument: USIdentificationDocumentInput

  """
  Percentage ownership of this ultimate beneficial owner in business if any.
  **Minimum percentage ownership:** 25%
  """
  percentageOwnership: Int
}

"""Input fields for creating a USUltimateBeneficialOwner."""
input USUltimateBeneficialOwnerInput {
  """The ultimate beneficial owner's legal name."""
  name: USAssociatedPersonNameInput!

  """The ultimate beneficial owner's U.S. physical address."""
  homeAddress: AddressInput!

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 18 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  """
  dateOfBirth: String!

  """
  The ultimate beneficial owner's e-mail address.
  
  **Note:** Highnote does not verify the e-mail address.
  """
  email: String!

  """The primary phone number for this ultimate beneficial owner."""
  phoneNumber: PhoneInput!

  """
  The identification document used to verify the ultimate beneficial owner.
  """
  identificationDocument: USIdentificationDocumentInput!

  """
  Percentage ownership of this ultimate beneficial owner in business if any.
  **Minimum percentage ownership:** 25%
  """
  percentageOwnership: Int
}

"""Input fields for updating a `USUltimateBeneficialOwner`."""
input USUltimateBeneficialOwnerUpdateInput {
  """
  The ultimate beneficial owner's legal name.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  name: USAssociatedPersonNameUpdateInput

  """
  The ultimate beneficial owner's U.S. physical address.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  homeAddress: AddressInput

  """
  Date of birth in YYYY-MM-DD format.
  **Minimum age:** 18 years. **Maximum age:** 100 years, in place to combat fraud and potential elder financial abuse.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  dateOfBirth: String

  """
  The identification document used to verify the ultimate beneficial owner.
  
  Note: Only fields provided as part of the input will be updated. Fields not provided will remain unchanged.
  """
  identificationDocument: USIdentificationDocumentInput
}

"""A document upload for an account holder application"""
type AccountHolderApplicationRequiredDocument {
  """
  A reference identifier for the account holder application document session
  **Note: ** This is not a Global ID
  """
  referenceIdentifier: ID

  """A document upload session"""
  documentUploadSession: AccountHolderApplicationDocumentUploadSession

  """The status of the application's document upload session"""
  status: ApplicationDocumentUploadSessionStatus

  """Documents submitted for the application"""
  uploadedDocuments: [ApplicationDocument]

  """
  The date and time, in ISO 8601 format, this `application document` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `application document` was last updated.
  """
  updatedAt: String
}

"""Return types for an account holder application document upload session"""
union AccountHolderApplicationDocumentUploadSession = USAccountHolderApplicationDocumentUploadSession

"""Return types for an account holder application document"""
union ApplicationDocument = AccountHolderApplicationDocument

"""An uploaded document for an application"""
type AccountHolderApplicationDocument implements Node {
  """The ID of the document uploaded"""
  id: ID!

  """The status of the document uploaded by the applicant"""
  status: ApplicationDocumentUploadStatus

  """The document type uploaded"""
  type: DocumentType

  """Revisions on the applicant's document"""
  revisions: [AccountHolderApplicationDocumentRevision]

  """
  The date and time, in ISO 8601 format, this `application document` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `application document` was last updated.
  """
  updatedAt: String

  """The given reasons for the file review status."""
  fileReviewReasons: [ApplicationDocumentReviewReason!]
}

"""A revision of an uploaded document for an application"""
type AccountHolderApplicationDocumentRevision {
  """The status of the document uploaded by the applicant"""
  status: ApplicationDocumentUploadStatus

  """The document type uploaded"""
  type: DocumentType

  """
  The date and time, in ISO 8601 format, this `application document revision` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `application document revision` was last updated.
  """
  updatedAt: String

  """The given reasons for the file review status."""
  fileReviewReasons: [ApplicationDocumentReviewReason!]
}

"""Input representing common fields of a BusinessAccountHolder's name."""
input BusinessAccountHolderNameInput {
  """
  The business' legal name.
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  """
  legalBusinessName: String!

  """
  The business' doing business as name.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  """
  doingBusinessAsName: String
}

"""Input representing updatable fields of a BusinessAccountHolder's name."""
input BusinessAccountHolderNameUpdateInput {
  """
  The business' legal name.
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  """
  legalBusinessName: String

  """
  The business' doing business as name.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  """
  doingBusinessAsName: String
}

"""The connection type for FinancialAccount."""
type FinancialAccountConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinancialAccountEdge!]
}

"""The edge type for a FinancialAccount."""
type FinancialAccountEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The financial account."""
  node: FinancialAccount
}

"""The connection type for AccountHolderCardProductApplication."""
type AccountHolderCardProductApplicationConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountHolderCardProductApplicationEdge!]
}

"""The connection type for `CardProductApplication`."""
type CardProductApplicationConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardProductApplicationEdge!]
}

"""The connection type for `CardProductApplication` search."""
type SearchCardProductApplicationConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchCardProductApplicationEdge!]
}

"""The edge type for an `AccountHolderCardProductApplication`."""
type AccountHolderCardProductApplicationEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The account holder card product application."""
  node: AccountHolderCardProductApplication
}

"""The edge type for an `CardProductApplication`."""
type CardProductApplicationEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `CardProductApplication`."""
  node: CardProductApplication
}

"""The edge type for a `CardProductApplication`."""
union SearchCardProductApplicationEdge = AccountHolderCardProductApplicationEdge | AuthorizedUserCardProductApplicationEdge

"""The connection type for AuthorizedUserCardProductApplication."""
type AuthorizedUserCardProductApplicationConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorizedUserCardProductApplicationEdge!]
}

"""The edge type for AuthorizedUserCardProductApplication."""
type AuthorizedUserCardProductApplicationEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The account holder card product application."""
  node: AuthorizedUserCardProductApplication
}

"""The connection type for AuthorizedUser."""
type AuthorizedUserConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorizedUserEdge!]
}

"""The edge type for AuthorizedUser."""
type AuthorizedUserEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Authorized User."""
  node: USPersonAuthorizedUser
}

"""A type representing a state of the account holder application."""
type AccountHolderApplicationState {
  """Status of application."""
  status: AccountHolderApplicationStatusCode!
}

"""A type representing a state of the authorized user application."""
type AuthorizedUserApplicationState {
  """Status of application."""
  status: AuthorizedUserApplicationStatusCode!
}

"""An AccountHolderCardProductApplication."""
type AccountHolderCardProductApplication implements Node {
  """Global ID used to reference the application in operations."""
  id: ID!

  """The current state of the application."""
  applicationState: AccountHolderApplicationState

  """
  A prioritized list of Adverse Action Reasons explaining the Application Deal.
  """
  adverseActionReasons: [AdverseActionReason!]

  """The Denial Reason for an Application"""
  applicationDenialReason: ApplicationDenialReason

  """The account holder's data at the time of application."""
  accountHolderSnapshot: AccountHolderSnapshot

  """The Card Product to which the account holder is applying."""
  cardProduct: CardProduct

  """Past states of the application"""
  applicationHistory(
    """The number of application snapshots to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): AccountHolderCardProductApplicationSnapshotConnection

  """The date and time, in ISO 8601 format, the application was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the application was last updated.
  """
  updatedAt: String

  """
  The financial accounts associated with this account holder application.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  financialAccounts(
    """The number of financial accounts to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific financial accounts."""
    filterBy: AccountHolderFinancialAccountsFilterInput
  ): FinancialAccountConnection

  """
  A paginated list of `AccountHolderCardProductApplicationOffer` associated with the `AccountHolderCardProductApplication`
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  offers(
    """The number of offers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """The search filters available on offers"""
    filterBy: AccountHolderCardProductApplicationOfferFilterByInput
  ): AccountHolderCardProductApplicationOfferConnection

  """
  Fields that were verified in response to a fraud alert on the applicant's credit report. Only present in the case of a fraud alert.
  """
  creditReportFraudAlertVerificationResult: CreditReportFraudAlertVerificationResult

  """The date and time, in ISO 8601 format, the application was decisioned."""
  decisionedAt: String

  """
  The approximate date and time, in ISO 8601 format, the application is set to expire if not decisioned.
  """
  expiresAt: String

  """All global notes for this `AccountHolderCardProductApplication`."""
  globalNotes(first: Int = 20, after: String): GlobalNoteConnectionPayload
}

"""
The `AccountHolderCardProductApplication` fields that were confirmed in response to a fraud alert on the applicant's credit report.
"""
type CreditReportFraudAlertVerificationResult {
  """Whether or not the `AccountHolder`initiated this application."""
  accountHolderInitiatedApplication: Boolean!

  """
  Whether or not the `AccountHolder` name on the application matches the applicant.
  """
  name: Boolean!

  """
  Whether or not the `AccountHolder` date of birth on the application matches the applicant.
  """
  dateOfBirth: Boolean!

  """
  Whether or not the `AccountHolder` mailing address on the application matches the applicant.
  """
  address: Boolean!
}

"""An AuthorizedUserCardProductApplication."""
type AuthorizedUserCardProductApplication implements Node {
  """Global ID used to reference the application in operations."""
  id: ID!

  """The current state of the application."""
  applicationState: AuthorizedUserApplicationState

  """
  A prioritized list of Adverse Action Reasons explaining the Application Deal.
  """
  adverseActionReasons: [AdverseActionReason!]

  """The Denial Reason for an Application"""
  applicationDenialReason: ApplicationDenialReason

  """The authorized user's data at the time of application."""
  authorizedUserSnapshot: AuthorizedUserSnapshot

  """
  The linked Account Holder Application to which authorized user is applying.
  """
  accountHolderCardProductApplication: AccountHolderCardProductApplication

  """The Financial Account to which the account holder is applying."""
  financialAccount: FinancialAccount

  """Past states of the application"""
  applicationHistory(
    """The number of application snapshots to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): AuthorizedUserCardProductApplicationSnapshotConnection

  """The date and time, in ISO 8601 format, the application was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the application was last updated.
  """
  updatedAt: String
}

"""An AccountHolderCardProductApplicationSnapshot."""
type AccountHolderCardProductApplicationSnapshot {
  """The current state of the application."""
  applicationState: AccountHolderApplicationState!

  """A list of Adverse Action Reasons explaining the Application Denial."""
  adverseActionReasons: [AdverseActionReason!]

  """The account holder's data at the time of application."""
  accountHolderSnapshot: AccountHolderSnapshot

  """The Card Product to which the account holder is applying."""
  cardProduct: CardProduct

  """The date and time, in ISO 8601 format, the application was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the application was last updated.
  """
  updatedAt: String
}

"""An AuthorizedUserCardProductApplicationSnapshot."""
type AuthorizedUserCardProductApplicationSnapshot {
  """The current state of the application."""
  applicationState: AuthorizedUserApplicationState!

  """A list of Adverse Action Reasons explaining the Application Denial."""
  adverseActionReasons: [AdverseActionReason!]

  """The authorized user's data at the time of application."""
  authorizedUserSnapshot: AuthorizedUserSnapshot

  """
  The linked Account Holder Application to which authorized user is applying.
  """
  accountHolderCardProductApplication: AccountHolderCardProductApplication

  """The Financial Account to which the account holder is applying."""
  financialAccount: FinancialAccount

  """The date and time, in ISO 8601 format, the application was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the application was last updated.
  """
  updatedAt: String
}

"""The connection type for AccountHolderCardProductApplicationSnapshot."""
type AccountHolderCardProductApplicationSnapshotConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountHolderCardProductApplicationSnapshotEdge]
}

"""The edge type for an AccountHolderCardProductApplicationSnapshot."""
type AccountHolderCardProductApplicationSnapshotEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Account Holder Card Product Application Snapshot."""
  node: AccountHolderCardProductApplicationSnapshot
}

"""The connection type for AuthorizedUserCardProductApplicationSnapshot."""
type AuthorizedUserCardProductApplicationSnapshotConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorizedUserCardProductApplicationSnapshotEdge]
}

"""The edge type for an AuthorizedUserCardProductApplicationSnapshot."""
type AuthorizedUserCardProductApplicationSnapshotEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Authorized User Card Product Application Snapshot."""
  node: AuthorizedUserCardProductApplicationSnapshot
}

"""The details of the PersonAccountHolder at the time of application."""
type USPersonAccountHolderSnapshot implements PersonAccountHolder {
  """The account holder."""
  accountHolderCurrent: USPersonAccountHolder

  """The account holder's name, represented as different parts."""
  name: Name

  """The default billing addresses of the account holder"""
  billingAddress: Address

  """The email address of the account holder."""
  email: String

  """List of phone numbers associated with the account holder."""
  phoneNumbers: [Phone!]

  """
  The date of birth of the account holder represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """Identification Document associated with the account holder."""
  identificationDocument: USIdentificationDocument

  """The current verification attempt, if any, of the account holder."""
  currentVerification: AccountHolderVerification

  """
  The `USPersonAccountHolder`'s current credit underwriting status and details.
  """
  currentCreditUnderwritingVerification: CreditUnderwritingVerification

  """
  The `USPersonAccountHolder`'s credit risk attributes, such as annual income. Used for underwriting decisions.
  """
  personCreditRiskAttributes: PersonCreditRiskAttributes
}

"""The details of a USBusinessAccountHolder at the time of application."""
type USBusinessAccountHolderSnapshot implements BusinessAccountHolder {
  """The account holder."""
  accountHolderCurrent: USBusinessAccountHolder

  """Business."""
  businessProfile: USBusinessProfileSnapshot

  """Authorized person"""
  primaryAuthorizedPerson: USBusinessAuthorizedPersonSnapshot

  """
  The current verification attempt, if any, of the account holder.
  Deprecated. Check the `currentVerification` field under `USBusinessProfileSnapshot` instead.
  """
  currentVerification: AccountHolderVerification @deprecated(reason: "use `businessProfile.currentVerification` instead.")
}

"""The details of the AuthorizedUser at the time of application."""
type USPersonAuthorizedUserSnapshot implements PersonAuthorizedUser {
  """The authorized user."""
  authorizedUserCurrent: USPersonAuthorizedUser

  """The authorized user's name, represented as different parts."""
  name: Name

  """The default billing addresses of the authorized user"""
  billingAddress: Address

  """The email address of the account holder."""
  email: String

  """List of phone numbers associated with the authorized user."""
  phoneNumbers: [Phone!]

  """
  The date of birth of the authorized user represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """Identification Document associated with the authorized user."""
  identificationDocument: USIdentificationDocument
}

"""A snapshot of an account holder's data at time of application."""
union AccountHolderSnapshot = USPersonAccountHolderSnapshot | USBusinessAccountHolderSnapshot

"""A snapshot of an authorized user's data at time of application."""
union AuthorizedUserSnapshot = USPersonAuthorizedUserSnapshot | USPersonAccountHolderSnapshot

"""Response type for creating an Account Holder Card Product Application."""
union CreateAccountHolderCardProductApplicationPayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""Input fields for creating an Account Holder Card Product Application."""
input CreateAccountHolderCardProductApplicationInput {
  """
  The ID of the Card Product for which the account holder is applying to use.
  """
  cardProductId: ID!

  """The ID of the account holder applicant."""
  accountHolderId: ID!

  """The IP address details of the account holder applicant."""
  ipAddress: IPAddressInput

  """
  Details on the acceptance of terms and conditions of the card holder agreement.
  """
  cardHolderAgreementConsent: ConsentInput!

  """
  Details on the account holder's consent to pull their credit report as part of the card product application.
  """
  accountHolderCreditReportPullConsent: ConsentInput
}

"""
Response type for creating an Authorized User Card Product Application.
"""
union CreateAuthorizedUserCardProductApplicationPayload = AuthorizedUserCardProductApplication | UserError | AccessDeniedError

"""Input fields for creating an Authorized User Card Product Application."""
input CreateAuthorizedUserCardProductApplicationInput {
  """The ID of the authorized user."""
  authorizedUserId: ID!

  """
  The ID of the account holder application linked to this application.
  **Note:** The Application must be APPROVED.
  """
  accountHolderCardProductApplicationId: ID!

  """
  The ID of the financial account for which the authorized user is applying to use.
  """
  financialAccountId: ID!

  """The IP address details of the authorized user applicant."""
  ipAddress: IPAddressInput

  """
  Details on the acceptance of terms and conditions of the card holder agreement.
  """
  cardHolderAgreementConsent: ConsentInput!
}

"""
Details on the acceptance of terms and conditions of the card holder agreement.
"""
input ConsentInput {
  """
  The ID of the primary authorized person of the business or the person card holder. For authorized user applications, the primaryAuthorizedPersonId is the authorized user id.
  """
  primaryAuthorizedPersonId: ID!

  """
  The date and time, in ISO 8601 format, marking when the primary authorized person or person card holder accepted card holder agreement.
  
  For example, `2022-01-01T22:00:00.000Z`.
  """
  consentTimestamp: String!

  """
  The `IPAddress` of the consenting party when they accepted the agreement.
  """
  consentIpAddress: IPAddressInput
}

"""Represents a consenting party"""
union ConsentingParty = USBusinessAuthorizedPerson | USPersonAuthorizedUser | USPersonAccountHolder

"""Details on the acceptance of terms and conditions"""
type ConsentAgreement {
  """This field represents the consenting party"""
  primaryAuthorizedPerson: ConsentingParty

  """
  The date and time, in ISO 8601 format, marking when the `ConsentingParty` accepted the agreement
  
  For example, `2022-01-01T22:00:00.000Z`.
  """
  consentTimestamp: String

  """
  The `IPAddress` of the `ConsentingParty` when they accepted the agreement.
  """
  consentIpAddress: IPAddress
}

"""Input fields for credit risk attributes."""
input CreditRiskAttributesInput {
  """Annual revenue expressed as an AmountInput."""
  annualRevenue: [AmountInput]
}

"""Input fields for business credit risk attributes."""
input BusinessCreditRiskAttributesInput {
  """Annual revenue expressed as an AmountInput."""
  annualRevenue: [AmountInput!]
}

"""Input representing credit risk attributes for person underwriting."""
input PersonCreditRiskAttributesInput {
  """Total annual income expressed as an Amount."""
  totalAnnualIncome: [AmountInput!]

  """Current debt obligations expressed as an Amount."""
  currentDebtObligations: [AmountInput!]

  """Person's employment status."""
  employmentStatus: EmploymentStatus

  """
  The rent, mortgage, or other type of housing payment made on a monthly basis as an `Amount`.
  """
  monthlyHousingPayment: [AmountInput!]
}

"""Input fields for IP address details."""
input IPAddressInput {
  """
  By providing the IPv4 address, Highnote can provide higher confidence during identity verification of the account holder. The IPv4 address provided should be the IP address of your customer and not your hosted server.
  """
  v4: String

  """
  By providing the IPv6 address, Highnote can provide higher confidence during identity verification of the account holder. The IPv6 address provided should be the IP address of your customer and not your hosted server.
  """
  v6: String
}

"""IP address details."""
type IPAddress {
  """
  The IPv4 address of the consenting party at the time they accepted the agreement.
  """
  v4: String

  """
  The IPv6 address. The IPv6 address provided should be the IP address of your customer and not your hosted server.
  """
  v6: String
}

"""Input representing common fields of a person's name."""
input NameInput {
  """
  The part of the name that identifies a person.
  
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  
  The validation for the input uses the following regex pattern `^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$`.
  """
  givenName: String!

  """
  Additional part of name that identifies a person.
  
  **Maximum length:** 255 characters
  
  The validation for the input uses the following regex pattern `^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$`.
  """
  middleName: String

  """
  Part of a personal name that identifies a family, tribe, or community.
  
  **Minimum length:** 2 character
  **Maximum length:** 255 characters
  
  The validation for the input uses the following regex pattern `^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$`.
  """
  familyName: String!

  """
  Provides additional information about the person (e.g. Jr., Sr.)
  
  **Maximum length:** 10 characters
  
  The validation for the input uses the following regex pattern `^[a-zA-Z.]+$`.
  """
  suffix: String

  """
  One or more words used before the person's name (e.g. Mx., Dr.).
  
  **Maximum length:** 10 characters
  
  The validation for the input uses the following regex pattern `^[a-zA-Z.]+$`.
  """
  title: String
}

"""Input representing parts of a phone number."""
input PhoneInput {
  """The assigned country code for the number."""
  countryCode: String!

  """The phone number in a country specific format."""
  number: String!

  """
  A number representing a specific phone on the same number as the main line.
  """
  extension: String

  """
  A classification for the type of the device the phone number is attached or how the phone number is used (e.g. home or work)
  """
  label: PhoneLabel!
}

"""The US identification documents for verification."""
input USIdentificationDocumentInput {
  """
  A person's social security number (USA only).
  
  Can be one of
  1. 9 digits divided into 3 parts by hyphen. For example, `123-45-6789`.
  2. 9 concurrent digits such as 123456789. When supplied, the SSN will be formatted to 123-45-6789 to enforce social security number validity.
  
  The following outlines rules around a valid social security number:
  1. The first part should have 3 digits and should not be 000, 666, or between 900 and 999.
  2. The second part should have 2 digits and it should be from 01 to 99.
  3. The third part should have 4 digits and it should be from 0001 to 9999.
  
  The validation for the input uses the following regex pattern `^((?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4})|(\d{9})$`.
  """
  socialSecurityNumber: TaxIdentificationDocumentInput!
}

"""The US Business identification documents for verification."""
input USBusinessIdentificationDocumentInput {
  """
  Business's employer identification number (USA only).
  
  The validation for the input uses the following regex pattern `^\d{2}-\d{7}$`.
  """
  employerIdentificationNumber: TaxIdentificationDocumentInput!
}

"""
An input representing the parts of a tax identification number (e.g. SSN, TIN, EIN).
"""
input TaxIdentificationDocumentInput {
  """The full tax identification number."""
  number: String!

  """The three character country code of the issuing country."""
  countryCodeAlpha3: String!

  """The type of tax identification number."""
  taxIdentificationNumberType: TaxIdentificationNumberType
}

"""
An input representing the parts of an update for a person account holder billing address
"""
input UpdateUSPersonAccountHolderBillingAddressInput {
  """The account holder's U.S. billing address."""
  billingAddress: AddressInput!

  """The global ID  of an Account holder"""
  accountHolderId: ID!

  """
  Setting this value to `true` will update the billing address for all payment cards belonging to this account holder.
  
  **Note:** The update to the payment card may not be reflected immediately.
  """
  updatePaymentCardBillingAddress: Boolean = false
}

"""
An input representing the parts of an update for a person account holder phone
"""
input UpdateUSPersonAccountHolderPhoneInput {
  """The account holder's phone."""
  phoneNumber: PhoneInput!

  """The global ID  of an Account holder"""
  accountHolderId: ID!
}

"""
An input representing the parts of an update for a person authorized user email
"""
input UpdateUSPersonAuthorizedUserEmailInput {
  """The authorized user's email."""
  email: String!

  """The Id of an authorized user."""
  authorizedUserId: ID!

  """
  The identifier of the business account holder that the authorized user falls under
  """
  accountHolderId: ID!
}

"""
An input representing the parts of an update for a person authorized user billing address
"""
input UpdateUSPersonAuthorizedUserBillingAddressInput {
  """The authorized user's U.S. billing address."""
  billingAddress: AddressInput!

  """
  Setting this value to `true` will update the billing address for all payment cards belonging to this authorized user.
  
  **Note:** The update to the payment card may not be reflected immediately.
  """
  updatePaymentCardBillingAddress: Boolean = false

  """The Id of an authorized user."""
  authorizedUserId: ID!

  """
  The identifier of the business account holder that the authorized user falls under
  """
  accountHolderId: ID!
}

"""
An input representing the parts of an update for a person authorized user phone
"""
input UpdateUSPersonAuthorizedUserPhoneInput {
  """The authorized user's phone."""
  phoneNumber: PhoneInput!

  """The Id of an authorized user."""
  authorizedUserId: ID!

  """
  The identifier of the business account holder that the authorized user falls under
  """
  accountHolderId: ID!
}

"""
An input representing the parts of an update for a person account holder email
"""
input UpdateUSPersonAccountHolderEmailInput {
  """The account holder's email."""
  email: String!

  """The global ID  of an Account holder"""
  accountHolderId: ID!
}

"""
Response type for updating a USPersonAccountHolder containing the updates or errors.
"""
union UpdateUSPersonAccountHolderPayload = USPersonAccountHolder | UserError | AccessDeniedError

"""Response type for update of a `USPersonAuthorizedUser`."""
union UpdateUSPersonAuthorizedUserPayload = USPersonAuthorizedUser | UserError | AccessDeniedError

"""
An input representing the parts of an update for a business account holder billing address
"""
input UpdateUSBusinessAccountHolderBillingAddressInput {
  """The account holder's U.S. billing address."""
  billingAddress: AddressInput!

  """The identifier of an account holder"""
  accountHolderId: ID!

  """
  Setting this value to `true` will update the billing address for all payment cards belonging to this account holder.
  
  **Note:** The update to the payment card may not be reflected immediately.
  """
  updatePaymentCardBillingAddress: Boolean = false
}

"""
An input representing the parts of an update for a business account holder phone
"""
input UpdateUSBusinessAccountHolderPhoneInput {
  """The account holder's phone."""
  phoneNumber: PhoneInput!

  """The identifier of an account holder"""
  accountHolderId: ID!
}

"""
An input representing the parts of an update for a business account holder website
"""
input UpdateUSBusinessAccountHolderWebsiteInput {
  """The account holder's website."""
  website: String!

  """The identifier of an account holder"""
  accountHolderId: ID!
}

"""
An input representing the parts of an update for a business account holder credit risk attributes
"""
input UpdateUSBusinessAccountHolderCreditRiskAttributeInput {
  """
  The credit risk attributes of a business. Only used for unsecured credit applications.
  """
  businessCreditRiskAttributes: BusinessCreditRiskAttributesInput!

  """The identifier of an account holder"""
  accountHolderId: ID!
}

"""
An input representing the parts of an update for a person account holder credit risk attributes
"""
input UpdateUSPersonAccountHolderCreditRiskAttributeInput {
  """
  The `USPersonAccountHolder`'s credit risk attributes. Only used for unsecured credit applications.
  """
  personCreditRiskAttributes: PersonCreditRiskAttributesInput!

  """The identifier of an account holder"""
  accountHolderId: ID!
}

"""
Response type for updating a USBusinessAccountHolder containing the updates or errors.
"""
union UpdateUSBusinessAccountHolderPayload = USBusinessAccountHolder | UserError | AccessDeniedError

"""
An input representing the parts of an update for an associated person's account holder home address
"""
input UpdateUSAssociatedPersonAccountHolderHomeAddressInput {
  """The account holder's U.S. home address."""
  homeAddress: AddressInput!

  """The identifier of an account holder"""
  accountHolderId: ID!

  """
  The identifier of the business account holder that the associated person falls under
  """
  businessAccountHolderId: ID!

  """
  Setting this value to `true` will update the billing address for all payment cards belonging to this account holder.
  
  **Note:** The update to the payment card may not be reflected immediately.
  """
  updatePaymentCardBillingAddress: Boolean = false
}

"""
An input representing the parts of an update for an associated person's account holder phone
"""
input UpdateUSAssociatedPersonAccountHolderPhoneInput {
  """The account holder's phone."""
  phoneNumber: PhoneInput!

  """The identifier of an account holder"""
  accountHolderId: ID!

  """
  The identifier of the business account holder that the associated person falls under
  """
  businessAccountHolderId: ID!
}

"""
An input representing the parts of an update for an associated person's account holder email
"""
input UpdateUSAssociatedPersonAccountHolderEmailInput {
  """The account holder's email."""
  email: String!

  """The identifier of an account holder"""
  accountHolderId: ID!

  """
  The identifier of the business account holder that the associated person falls under
  """
  businessAccountHolderId: ID!
}

"""
Response type for update of a USAssociatedPersonAccountHolder containing the updates or errors.
"""
union UpdateUSAssociatedPersonAccountHolderPayload = USBusinessAuthorizedPerson | UserError | AccessDeniedError

"""
Response type for a simulated update to an `AccountHolderCardProductApplication`.
"""
union SimulateApplicationUpdatePayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""
An input representing the parts of a simulated update to verification status for an Account Holder on a previously created Card Product Application.
"""
input SimulateApplicationVerificationStatusChangeInput {
  """
  The ID of the application containing the applicant whose verification status will be updated.
  """
  applicationId: ID!

  """The ID of the applicant whose verification status will be updated."""
  applicantId: ID!

  """
  The target verification status for the specified applicant representing the outcome of manual identity review by an Agent.
  """
  newVerificationStatus: AccountHolderVerificationStatusReasonCode!
}

"""
An input representing the parts of a simulated update to application status on a previously created Card Product Application.
"""
input SimulateApplicationStatusChangeInput {
  """The ID of the application to be updated."""
  applicationId: ID!

  """
  The target application status for the specified application representing the outcome of manual identity review by an Agent.
  """
  newApplicationStatus: AccountHolderApplicationStatusCode!
}

"""Response type for a simulated update to an `ApplicationDocument`."""
union SimulateApplicationDocumentReviewPayload = AccountHolderApplicationDocument | UserError | AccessDeniedError

"""
An input representing the parts of a simulated update to review status on a previously created AccountHolderApplicationDocument.
"""
input SimulateApplicationDocumentReviewInput {
  """The ID of the application containing the document to be reviewed."""
  applicationId: ID!

  """
  The ID for an initiated `DocumentUploadSession` containing the document to be reviewed.
  """
  documentUploadSessionId: ID!

  """
  The ID for a `DocumentUploadLink` returned by `createDocumentUploadLink`. This ID represents an `AccountHolderApplicationDocument` and serves to specify the document being reviewed.
  """
  documentUploadLinkId: ID!

  """
  The target status representing the decision made by an Agent after reviewing the applicant's uploaded document.
  """
  newReviewStatus: ApplicationDocumentUploadStatus!

  """The given reasons for the file review status."""
  fileReviewReasons: [ApplicationDocumentReviewReason!]
}

"""The connection type for `AccountHolderCardProductApplicationOffer`."""
type AccountHolderCardProductApplicationOfferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountHolderCardProductApplicationOfferEdge!]
}

"""An edge for `AccountHolderCardProductApplicationOffer`"""
type AccountHolderCardProductApplicationOfferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String

  """The node representing an `AccountHolderCardProductApplicationOffer`."""
  node: AccountHolderCardProductApplicationOffer
}

"""An Offer associated with an `AccountHolderCardProductApplication`."""
type AccountHolderCardProductApplicationOffer implements Node {
  """
  The global ID used to reference the `AccountHolderCardProductApplicationOffer`.
  """
  id: ID!

  """The offer name."""
  name: String

  """The offer status."""
  status: CardProductApplicationOfferStatus

  """The offer category"""
  category: CardProductApplicationOfferCategory
}

"""
Input to filter a paginated search for `AccountHolderCardProductApplicationOffer`.
"""
input AccountHolderCardProductApplicationOfferFilterByInput {
  """A offer status filter input"""
  offerStatus: CardProductApplicationOfferStatusFilterInput!
}

"""`CardProductApplicationOfferStatus` filter input"""
input CardProductApplicationOfferStatusFilterInput {
  includes: [CardProductApplicationOfferStatus!]
}

"""The types of employment status."""
enum EmploymentStatus {
  """The person account holder is currently employed by an employer."""
  EMPLOYED

  """The person account holder is currently self-employed."""
  SELF_EMPLOYED

  """The person account holder is not employed and currently retired."""
  RETIRED

  """The person account holder is not employed and currently a student."""
  STUDENT

  """The person account holder is not employed."""
  UNEMPLOYED

  """The person account holder has another employment status."""
  OTHER
}

"""The types or usages of a phone number."""
enum PhoneLabel {
  """The phone number is attached to a mobile or cellular device."""
  MOBILE

  """The phone number is attached to a residence."""
  HOME

  """The phone number is attached to a place of business."""
  WORK

  """The phone number represents a support number"""
  SUPPORT
}

"""High-level account holder application states."""
enum AccountHolderApplicationStatusCode {
  """The application was denied."""
  DENIED

  """The application was approved."""
  APPROVED

  """The application is currently being processed."""
  PENDING

  """The application requires further review."""
  IN_REVIEW

  """The application was closed."""
  CLOSED
}

"""High-level authorized user application states."""
enum AuthorizedUserApplicationStatusCode {
  """The application was denied."""
  DENIED

  """The application was approved."""
  APPROVED

  """The application is currently being processed."""
  PENDING

  """The application requires further review."""
  IN_REVIEW

  """The application was closed."""
  CLOSED
}

"""High-level account holder underwriting verification states."""
enum UnderwriterVerificationStatusCode {
  """
  The account holder was denied. See the results of the underwriter verification for more details.
  """
  DENIED

  """The account holder passed the underwriter verification requirements."""
  PASSED

  """The account holder is currently being verified by underwriter."""
  PENDING

  """The account holder is currently being reviewed by underwriter."""
  IN_REVIEW
}

"""High-level account holder verification states."""
enum AccountHolderVerificationStatusCode {
  """
  The account holder was denied. See the results of the verification for more details.
  """
  DENIED

  """The account holder passed the verification requirements."""
  PASSED

  """The account holder is currently being verified."""
  PENDING
}

"""High-level account holder risk verification states."""
enum AccountHolderRiskVerificationStatusCode {
  """
  The account holder was denied. See the results of the risk verification for more details.
  """
  DENIED

  """The account holder passed the risk verification requirements."""
  PASSED

  """The account holder is currently being verified."""
  PENDING

  """The account holder is currently undergoing manual review."""
  IN_REVIEW
}

"""The specific reason for being in an account holder verification state."""
enum AccountHolderVerificationStatusReasonCode {
  """
  The account holder was denied. See the results of the verification for more details.
  """
  DENIED

  """The account holder passed the verification requirements."""
  PASSED

  """The account holder is currently being verified."""
  PENDING

  """
  A manual review of the account holder is required to continue the verification process.
  """
  REVIEW_REQUIRED

  """The account holder is currently being reviewed."""
  IN_REVIEW

  """
  The account holder is required to answer automated questions to complete verification.
  """
  KBA_REQUIRED

  """Documents are needed to verify the account holder."""
  DOCUMENT_UPLOAD_REQUIRED

  """
  An identity update has been requested to correct the information provided on the application.
  """
  IDENTITY_UPDATE_REQUESTED
}

"""The verification attempt results."""
enum AccountHolderVerificationResultCode {
  """
  The account holder's device has been previously flagged for fraudulent activity.
  """
  DEVICE_WARNING

  """The account holder is being reviewed."""
  FRAUD_REVIEW

  """
  The social security number has been previously flagged for fraudulent activity.
  """
  SSN_WARNING

  """
  The account holder's social security number may have been accidentally miskeyed.
  """
  SSN_MISKEY

  """
  The account holder's date of birth may have been accidentally miskeyed.
  """
  DOB_MISKEY

  """
  The account holder's email has previously been found to be part of previous fraudulent activity.
  """
  EMAIL_WARNING

  """
  The account holder's address has previously been found to be part of previous fraudulent activity.
  """
  ADDRESS_WARNING

  """
  The account holder has been previously reported for fraud and has repeated fraudulent activity. This is a high risk warning.
  """
  FRAUD_RISK

  """
  The account holder's data provided has resulted in suspected fraudulent activity. This is a medium risk warning.
  """
  FRAUD_WARNING

  """
  The account holder may be verified but was denied due to fraudulent activity.
  """
  DENIED_FRAUD

  """
  The account holder could not be verified with the information provided.
  """
  DENIED_KYC

  """The account holder's device has not been used in the past."""
  FOREIGN_DEVICE

  """The account holder is currently on an active watchlist."""
  WATCHLIST_WARNING

  """
  The business name provided does not match a registered business name (Applicable to Business Onboarding).
  """
  BUSINESS_NAME_MISMATCH

  """
  The business name provided matches a registered business name (Applicable to Business Onboarding).
  """
  BUSINESS_NAME_MATCH

  """
  The business must provide a document to verify their employer identification number (Applicable to Business Onboarding).
  """
  FEIN_DOCUMENT_REQUIRED

  """The account holder's address was able to be verified."""
  ADDRESS_MATCH

  """The account holder's address could not be verified as provided."""
  ADDRESS_MISMATCH

  """The account holder's date of birth was able to be verified."""
  DOB_MATCH

  """
  The date of birth provided does not match the date of birth of the account holder.
  """
  DOB_MISMATCH

  """The account holder's name was able to be verified."""
  NAME_MATCH

  """
  The name provided does not match any known names for the account holder.
  """
  NAME_MISMATCH

  """The account holder's social security number was able to be verified."""
  SSN_MATCH

  """
  The account holder's social security number could not be verified as provided.
  """
  SSN_MISMATCH

  """The account holder's phone number was able to be verified."""
  PHONE_MATCH

  """
  The phone number provided does not match any known phone numbers for the account holder.
  """
  PHONE_MISMATCH

  """
  The business' provided employer identification number matches their registered employer identification number (Applicable to Business Onboarding).
  """
  FEIN_MATCH

  """
  The business' provided employer identification number does not match their registered employer identification number (Applicable to Business Onboarding).
  """
  FEIN_MISMATCH

  """The account holder is currently on an active watchlist."""
  WATCHLIST_HIT

  """High probability of synthetic fraud."""
  HIGH_ABUSE_SCORE

  """High probability of third party fraud."""
  HIGH_THEFT_SCORE

  """Moderate probability of synthetic fraud."""
  MEDIUM_ABUSE_SCORE

  """Moderate probability of third party fraud."""
  MEDIUM_THEFT_SCORE

  """Low probability of synthetic fraud."""
  LOW_ABUSE_SCORE

  """Low probability of third party fraud."""
  LOW_THEFT_SCORE

  """
  The account holder's data has been verified and is not associated with prior fraudulent activity.
  """
  KYC_FRAUD_PASS

  """The account holder's data was unable to be fully verified."""
  KYC_WARNING

  """
  The primary authorized person is verified as representative of the business.
  """
  REPRESENTATIVE_MATCH

  """
  The primary authorized person could not be verified as representative of the business.
  """
  REPRESENTATIVE_MISMATCH

  """The business data was found to be listed in the Treasury's OFAC list."""
  OFAC_MATCH

  """
  The overall verification score for the business was below the passing limit.
  """
  BUSINESS_VERIFICATION_SCORE_FAILED

  """
  The business data was verified and overall verification score was above the passing.
  """
  BUSINESS_VERIFICATION_SCORE_PASSED

  """
  The business has an active and registered Secretary of State (SOS) filing. The business address provided matches the Secretary of State (SOS) registration address.
  """
  SOS_MATCH

  """The business could not be verified with the Secretary of State (SOS)."""
  SOS_MISMATCH

  """
  The business has registered with the Secretary of State (SOS), but does not have an active filing.
  """
  SOS_INACTIVE

  """
  The business has an active registration with the Secretary of State (SOS).
  """
  SOS_ACTIVE

  """
  The business' registration with the Secretary of State (SOS) has been flagged or the filing status is unknown
  """
  SOS_UNKNOWN

  """
  The Social Security Number provided is associated with multiple identities.
  """
  SSN_MULTI_IDENTITY
}

"""Reasons behind adverse actions for credit underwriting."""
enum AdverseActionCode {
  """Income insufficient for the amount of credit requested"""
  INSUFFICIENT_INCOME

  """Delinquent past or present credit obligations"""
  DELINQUENT_CREDIT_OBLIGATIONS

  """Unable to verify the Account Holder's identity."""
  UNABLE_TO_VERIFY_IDENTITY

  """Unable to verify applicant’s income"""
  UNABLE_TO_VERIFY_INCOME

  """Collections action or judgment"""
  COLLECTIONS

  """Bankruptcy"""
  BANKRUPTCY

  """Does not meet lien position requirement"""
  LIEN_POSITION

  """We do not offer credit to this industry"""
  UNACCEPTED_BUSINESS_INDUSTRY

  """Applicant credit score does not meet the minimum score requirements"""
  MIN_CREDIT_SCORE

  """High credit utilization ratio"""
  HIGH_UTILIZATION

  """Too many recent credit applications"""
  RECENT_CREDIT_APPLICATIONS

  """Does not meet the minimum length of business incorporation"""
  MIN_YEARS_INCORPORATION

  """Incomplete company or owners’ identity information"""
  INCOMPLETE_IDENTITY_INFORMATION

  """Applicant has limited credit references or history"""
  LIMITED_CREDIT_EXPERIENCE

  """Applicant has excessive debt obligations"""
  EXCESSIVE_DEBT_OBLIGATIONS

  """Unable to verify applicant's employment"""
  UNABLE_TO_VERIFY_EMPLOYMENT

  """Length of employment is limited or unstable"""
  LENGTH_OF_EMPLOYMENT

  """Length of time at residence is limited or unstable"""
  LENGTH_OF_RESIDENCE

  """Too many accounts opened recently"""
  RECENT_CREDIT_ACCOUNTS

  """Unable to verify applicant's credit references"""
  UNABLE_TO_VERIFY_CREDIT_REFERENCES

  """The account holder has withdrawn their card product application"""
  WITHDRAWN

  """
  The cardholder has excessive payment obligations in relation to their income.
  """
  EXCESSIVE_OBLIGATIONS_TO_INCOME

  """The cardholder is deceased."""
  DECEASED
}

"""
Inputs values for possible reasons for behind adverse actions for credit underwriting.
"""
enum AdverseActionCodeInput {
  """Income insufficient for the amount of credit requested"""
  INSUFFICIENT_INCOME

  """Delinquent past or present credit obligations"""
  DELINQUENT_CREDIT_OBLIGATIONS

  """Unable to verify the Account Holder's identity."""
  UNABLE_TO_VERIFY_IDENTITY

  """Unable to verify applicant’s income"""
  UNABLE_TO_VERIFY_INCOME

  """Collections action or judgment"""
  COLLECTIONS

  """Bankruptcy"""
  BANKRUPTCY

  """Does not meet lien position requirement"""
  LIEN_POSITION

  """We do not offer credit to this industry"""
  UNACCEPTED_BUSINESS_INDUSTRY

  """Applicant credit score does not meet the minimum score requirements"""
  MIN_CREDIT_SCORE

  """High credit utilization ratio"""
  HIGH_UTILIZATION

  """Too many recent credit applications"""
  RECENT_CREDIT_APPLICATIONS

  """Does not meet the minimum length of business incorporation"""
  MIN_YEARS_INCORPORATION

  """Incomplete company or owners’ identity information"""
  INCOMPLETE_IDENTITY_INFORMATION

  """Applicant has limited credit references or history"""
  LIMITED_CREDIT_EXPERIENCE

  """Applicant has excessive debt obligations"""
  EXCESSIVE_DEBT_OBLIGATIONS

  """Unable to verify applicant's employment"""
  UNABLE_TO_VERIFY_EMPLOYMENT

  """Length of employment is limited or unstable"""
  LENGTH_OF_EMPLOYMENT

  """Length of time at residence is limited or unstable"""
  LENGTH_OF_RESIDENCE

  """Too many accounts opened recently"""
  RECENT_CREDIT_ACCOUNTS

  """Unable to verify applicant's credit references"""
  UNABLE_TO_VERIFY_CREDIT_REFERENCES

  """The account holder has withdrawn their card product application"""
  WITHDRAWN

  """
  Applicant has excessive payment obligations in relation to their income
  """
  EXCESSIVE_OBLIGATIONS_TO_INCOME
}

"""Business Type."""
enum BusinessStructure {
  """Corporation."""
  CORPORATION

  """Partnership."""
  PARTNERSHIP

  """Sole Proprietorship."""
  SOLE_PROPRIETORSHIP

  """Non profit."""
  NON_PROFIT

  """Limited Liability Company (LLC)."""
  LLC

  """A private corporation"""
  PRIVATE_CORPORATION

  """A publicly traded corporation"""
  PUBLIC_CORPORATION
}

"""Authorizing officer's business title."""
enum BusinessTitle {
  """President."""
  PRESIDENT

  """Vice President."""
  VICE_PRESIDENT

  """Treasurer."""
  TREASURER

  """Owner."""
  OWNER

  """Chief Executive Officer."""
  CEO

  """Chief Financial Officer."""
  CFO

  """Chief Operating Officer."""
  COO
}

"""A status for a document uploaded by the applicant"""
enum ApplicationDocumentUploadStatus {
  """
  The document has been uploaded by the applicant and is awaiting verification processing
  """
  UPLOADED

  """The document is in review by a Highnote Agent"""
  IN_REVIEW

  """The document has been approved by a Highnote Agent"""
  APPROVED

  """The document has been denied by a Highnote Agent"""
  DENIED
}

"""
"Possible reasons for an `AccountHolderApplicationDocument`'s `ApplicationDocumentUploadStatus`"
"""
enum ApplicationDocumentReviewReason {
  """
  The document uploaded does not meet the necessary business or person verification requirements
  """
  INCORRECT_DOCUMENT

  """The document uploaded is outdated or expired."""
  EXPIRED_DOCUMENT

  """The document uploaded is blurry or uneasy to read."""
  ILLEGIBLE_DOCUMENT

  """
  The document uploaded is not a full or complete document - there may be missing information.
  """
  PARTIAL_DOCUMENT

  """The document uploaded could not have its authenticity verified."""
  UNACCEPTABLE_DOCUMENT

  """
  The document uploaded is a duplicate of a previously uploaded document.
  """
  DUPLICATE_DOCUMENT

  """The document uploaded is a blank document."""
  BLANK_DOCUMENT
}

"""A status for an applicant's document upload session"""
enum ApplicationDocumentUploadSessionStatus {
  """The document upload session is created but has not been initiated."""
  CREATED

  """
  A session has expired due to inactivity. A session can result in an expired state if it is never transitioned to submitted.
  Files can no longer be attached to the application's document upload session.
  
  **Note: ** This is a terminal state.
  """
  EXPIRED

  """
  A review has been submitted by a Highnote Agent and the review of the files are complete. A decision has been made for the application's status.
  
  **Note: ** This is a terminal state.
  """
  SUBMITTED
}

"""Application denial reasons."""
enum ApplicationDenialReason {
  """
  The Application was denied due to the inability to decision on the Application within the timeframe as defined in the cardholder agreement due to missing information.
  """
  DENIED_DUE_TO_APPLICATION_INACTIVITY

  """The Application was denied due to other factors."""
  DENIED_DUE_TO_OTHER
}

"""Detailed information about the business"""
type BusinessDetail {
  """The details of the person authorized to act on behalf of business."""
  primaryAuthorizedPerson: AuthorizedPerson

  """Information about the business."""
  businessProfile: BusinessProfile
}

"""Details about the business plan operating model."""
union BusinessPlanOperatingModelDetail = BusinessPlanOperatingModelSeasonal | BusinessPlanOperatingModelForwardCommitment | BusinessPlanOperatingModelGoodsAndService

"""The business' reported operating details."""
type BusinessPlanOperatingDetails {
  """Gross annual revenues per reported year."""
  annualVolumes: [BusinessPlanReportedAmount!]

  """Largest anticipated sales per reported year."""
  largestTickets: [BusinessPlanReportedAmount!]

  """Average anticipated sales per reported year."""
  averageTickets: [BusinessPlanReportedAmount!]

  """Largest monthly volumes per reported year."""
  largestMonthlyVolumes: [BusinessPlanReportedAmount!]

  """
  The different points of interaction the business has with their customers.
  """
  interactionMethods: [BusinessCustomerInteractionMethod!]

  """Reported Employee Count"""
  employeeCounts: [BusinessPlanReportedValue!]

  """Reported Business Operating Models"""
  operatingModels: [BusinessPlanOperatingModel!]

  """Details on the business' customer support contact information"""
  customerSupportContactInformation: BusinessPlanCustomerSupportContactInformation
}

"""Details on the business' customer support contact information"""
type BusinessPlanCustomerSupportContactInformation {
  """A support URL"""
  url: String

  """A support email"""
  email: String

  """A support phone"""
  phone: Phone

  """A support address"""
  address: Address
}

"""Reporting amount for a business plan"""
type BusinessPlanReportedAmount {
  """A collection of amounts to report"""
  reportedAmounts: [Amount!]

  """
  The close-out date of the preceding fiscal year in ISO 8601 format.
  
  Format: `YYYY-MM-DD`
  """
  reportedOn: Date
}

"""Reporting value for a business plan"""
type BusinessPlanReportedValue {
  """A value, represented as an Unsigned Integer"""
  value: UnsignedInt

  """
  The close-out date of the preceding fiscal year in ISO 8601 format.
  
  Format: `YYYY-MM-DD`
  """
  reportedOn: Date
}

"""Describes conditions on how the business operates."""
enum BusinessPlanOperatingModelType {
  """Whether the business sells physical goods."""
  PHYSICAL_GOODS_SOLD

  """Whether the business is seasonal."""
  SEASONAL_BUSINESS

  """Whether the business has a forward commitment for delivery of sale."""
  FORWARD_COMMITMENT
}

"""Business Plan Operating Model."""
type BusinessPlanOperatingModel {
  """The business plan operating model."""
  type: BusinessPlanOperatingModelType

  """
  Indicates whether the `BusinessPlanOperatingModelType` is a reported operating model.
  """
  reportedAsOperatingModel: Boolean

  """Details of the `BusinessPlanOperatingModelType`."""
  operatingModelDetails: [BusinessPlanOperatingModelDetail!]
}

"""A method of customer interaction"""
enum BusinessCustomerInteractionMethod {
  """An eCommerce business with a website selling goods/services."""
  ONLINE

  """A business selling goods/services at a physical location."""
  IN_PERSON

  """A business selling goods/services via an Android or iOS app."""
  MOBILE

  """A business selling goods/services through mail or telephone orders."""
  MAIL_ORDER_TELEPHONE_ORDER
}

"""
Captures when the business operates and whether they have seasonal peaks. Capture the open season or the peak season.
"""
type BusinessPlanOperatingModelSeasonal {
  """A collection of seasonal ranges describing the business operations."""
  seasonalRanges: [BusinessPlanOperatingModelSeasonalMonthlyRange!]

  """Highest grossing month(s) for the business."""
  peakMonths: [Month!]

  """
  The date the seasonal operating models were reported.
  
  Format: `YYYY-MM-DD`
  """
  reportedOn: Date
}

"""Good and/or service provided by the business."""
enum BusinessPlanOperatingGoodsAndServiceCategory {
  """Offers farm management services or participates in farming operations."""
  AGRICULTURAL_SERVICES

  """
  Provides general or specialized construction, publishing, or printing services.
  """
  CONTRACTED_SERVICES

  """
  Offers products and services related to booking and providing travel experiences such as flights, hotels, and rental vehicles.
  """
  TRAVEL

  """
  Provides consumer, commercial, and medical transportation services for Passengers and Cargo.
  """
  TRANSPORTATION_SERVICES

  """
  Constructs or operates public and private utilities such as electricity, phone service, and Internet service.
  """
  UTILITY_SERVICES

  """
  Sells products or services for business-to-business, wholesale, or business-to-consumer markets.
  """
  RETAIL_OUTLET_SERVICES

  """Sells clothing, footwear, accessories, or clothing-related services."""
  CLOTHING_STORES

  """
  A broad range of products and services such as home goods, appliances, musical instruments, computers, marketing, or medical supplies.
  """
  MISCELLANEOUS_STORES

  """
  Provides products and services that enable other businesses such as printing, cleaning, software development, or consulting.
  """
  BUSINESS_SERVICES

  """
  Provides medical, dental, and vision services as well as hospitals and clinics.
  """
  PROFESSIONAL_SERVICES_OR_MEMBERSHIP_ORGANIZATIONS

  """
  Provides products and services related to government and legal organizations and operations.
  """
  GOVERNMENT_SERVICES

  """Provides products and services related to charity"""
  CHARITABLE_ORGANIZATIONS
}

"""Captures the types of goods and services provided by the business."""
type BusinessPlanOperatingModelGoodsAndService {
  """The list of products and/or services sold to your customers."""
  goodsAndServicesProvided: [BusinessPlanOperatingGoodsAndServiceCategory!]

  """
  The date the goods and services offered were reported.
  
  Format: `YYYY-MM-DD`
  """
  reportedOn: Date
}

"""Represents a monthly start and ending range for seasonality."""
type BusinessPlanOperatingModelSeasonalMonthlyRange {
  """Start of the peak season"""
  startMonth: Month

  """End of the peak season"""
  endMonth: Month
}

"""
For those that engage in forward commitments, identifies the timeframe
for when contractually obligated sales will be completed
"""
type BusinessPlanOperatingModelForwardCommitment {
  """Minimum possible days for the forward commitment"""
  minimumDays: UnsignedInt

  """Maximum possible days for the forward commitment"""
  maximumDays: UnsignedInt

  """
  The date the forward commitment operating model was reported.
  
  Format: `YYYY-MM-DD`
  """
  reportedOn: Date
}

"""The status of an `AccountHolderCardProductApplicationOffer`"""
enum CardProductApplicationOfferStatus {
  """The offer has been extended and Accepted by the Applicant"""
  ACCEPTED

  """The offer has not been extended or decisioned yet"""
  OPEN

  """The offer has been rejected by the Applicant"""
  REJECTED

  """
  The offer has been disqualified and cannot be extended to the Applicant
  """
  DISQUALIFIED

  """The offer has been extended to the Applicant"""
  EXTENDED

  """The offer has expired"""
  EXPIRED
}

"""The offer category of an `AccountHolderCardProductApplicationOffer`"""
enum CardProductApplicationOfferCategory {
  """A Secured Credit type offer"""
  SECURED_CREDIT

  """An Unsecured Credit type offer"""
  UNSECURED_CREDIT
}

"""
Indicates that the identifying information of a `USPersonAccountHolder` has been updated.
"""
type PersonAccountHolderIdentityUpdatedEvent {
  """The `USPersonAccountHolder` which was updated."""
  personAccountHolder: USPersonAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The type of each update made, indicating which fields were modified on the `USPersonAccountHolder`.
  """
  updateTypes: [PersonAccountHolderIdentityUpdateType!]
}

"""
The type of identifying information which has been modified in a `PersonAccountHolderIdentityUpdatedEvent`.
"""
enum PersonAccountHolderIdentityUpdateType {
  """The full legal name was modified."""
  FULL_LEGAL_NAME

  """The billing address was modified."""
  BILLING_ADDRESS

  """The total annual income was modified."""
  TOTAL_ANNUAL_INCOME

  """The current debt obligations were modified."""
  CURRENT_DEBT_OBLIGATIONS

  """The employment status was modified."""
  EMPLOYMENT_STATUS

  """The social security number was modified."""
  SOCIAL_SECURITY_NUMBER

  """The date of birth was modified."""
  DATE_OF_BIRTH
}

"""
Indicates that the identifying information of a `USBusinessAccountHolder` has been updated.
"""
type BusinessAccountHolderIdentityUpdatedEvent {
  """The `USBusinessAccountHolder` which was updated."""
  businessAccountHolder: USBusinessAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The type of each update made, indicating which fields were modified on the `USBusinessAccountHolder`.
  """
  updateTypes: [BusinessAccountHolderIdentityUpdateType!]
}

"""
The type of identifying information which has been modified in a `BusinessAccountHolderIdentityUpdatedEvent`.
"""
enum BusinessAccountHolderIdentityUpdateType {
  """The employer identification number was modified."""
  EMPLOYER_IDENTIFICATION_NUMBER

  """The legal business name was modified."""
  LEGAL_BUSINESS_NAME

  """The billing address was modified."""
  BILLING_ADDRESS

  """The annual revenue was modified."""
  ANNUAL_REVENUE
}

"""
Indicates that the identifying information of a `USBusinessAuthorizedPerson` has been updated.
"""
type BusinessAuthorizedPersonIdentityUpdatedEvent {
  """The `USBusinessAuthorizedPerson` which was updated."""
  businessAuthorizedPerson: USBusinessAuthorizedPerson

  """
  The `USBusinessAccountHolder` for which the `USBusinessAuthorizedPerson` was updated.
  """
  businessAccountHolder: USBusinessAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The type of each update made, indicating which fields were modified on the `USBusinessAuthorizedPerson`.
  """
  updateTypes: [BusinessAssociatedPersonIdentityUpdateType!]
}

"""
Indicates that the identifying information of a `USBusinessUltimateBeneficialOwner` has been updated.
"""
type BusinessUltimateBeneficialOwnerIdentityUpdatedEvent {
  """The `USBusinessUltimateBeneficialOwner` which was updated."""
  businessUltimateBeneficialOwner: USBusinessUltimateBeneficialOwner

  """
  The `USBusinessAccountHolder` for which a `USBusinessUltimateBeneficialOwner` was updated.
  """
  businessAccountHolder: USBusinessAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The type of each update made, indicating which fields were modified on the `USBusinessUltimateBeneficialOwner`.
  """
  updateTypes: [BusinessAssociatedPersonIdentityUpdateType!]
}

"""
The type of identifying information which has been modified in a `BusinessAuthorizedPersonIdentityUpdatedEvent` or `BusinessUltimateBeneficialOwnerIdentityUpdatedEvent`.
"""
enum BusinessAssociatedPersonIdentityUpdateType {
  """The full legal name was modified."""
  FULL_LEGAL_NAME

  """The home address was modified."""
  HOME_ADDRESS

  """The social security number was modified."""
  SOCIAL_SECURITY_NUMBER

  """The date of birth was modified."""
  DATE_OF_BIRTH
}

"""Sources that can refer a requested identity update."""
union RequestedIdentityUpdateSource = AccountHolderCardProductApplication | AuthorizedUserCardProductApplication

"""Identities that qualify for a requested update."""
union RequestedIdentityUpdateParty = USBusinessProfile | USBusinessAuthorizedPerson | USBusinessUltimateBeneficialOwner | USPersonAccountHolder | USPersonAuthorizedUser

"""Changes applied to a requested identity update."""
type RequestedIdentityAppliedUpdate {
  """The change types for the applied update."""
  appliedChanges: [RequestedIdentityUpdateType!]

  """
  The supplied information to update on the `RequestedIdentityUpdateParty`.
  """
  requestedChange: RequestedIdentityUpdateParty

  """
  The date and time, in ISO 8601 format, the requested update was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the requested update was last updated.
  """
  updatedAt: String
}

"""A status representing the state of the `RequestedIdentityUpdate`"""
enum RequestedIdentityUpdateStatus {
  """The requested update is `OPEN` and awaiting input."""
  OPEN

  """The requested update is `INITIATED` and has received input."""
  INITIATED

  """
  The requested update is confirmed, and the individual or business has acknowledged the accuracy and correctness of the supplied information.
  """
  CONFIRMED

  """
  The requested update is canceled, indicating that no updates were supplied even though requested.
  """
  CANCELED
}

"""The types of identity updates requested."""
enum RequestedIdentityUpdateType {
  """Request to update the employer identification number."""
  EMPLOYER_IDENTIFICATION_NUMBER

  """Request to update the legal business name."""
  LEGAL_BUSINESS_NAME

  """Request to update the full legal name."""
  FULL_LEGAL_NAME

  """Request to update the home address."""
  HOME_ADDRESS

  """Request to update the billing address."""
  BILLING_ADDRESS

  """Request to update the social security number."""
  SOCIAL_SECURITY_NUMBER

  """Request to update the date of birth."""
  DATE_OF_BIRTH
}

"""A request to update an identity."""
type RequestedIdentityUpdate implements Node {
  """The Global ID for the requested Identity Update"""
  id: ID!

  """The status of the identity update request"""
  status: RequestedIdentityUpdateStatus

  """The referring system that originated this `RequestedIdentityUpdate`."""
  referredBy: RequestedIdentityUpdateSource

  """The identity which has a requested update."""
  requestedFor: RequestedIdentityUpdateParty

  """The changes requested on the identity."""
  changesRequested: [RequestedIdentityUpdateType!]

  """
  The date and time, in ISO 8601 format, when the identity update request was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, when the identity update request was last updated.
  """
  updatedAt: String

  """
  Changes applied to the identity as part of this `RequestedIdentityUpdate`.
  """
  appliedUpdates: [RequestedIdentityAppliedUpdate!]
}

"""Methods for advertising a business."""
enum AdvertisingMethod {
  """Internet"""
  INTERNET

  """Word of mouth"""
  WORD_OF_MOUTH

  """Mass/Direct mail"""
  MASS_DIRECT_MAIL

  """Telemarketing"""
  TELEMARKETING

  """Catalog and/or publications"""
  CATALOG_PUBLICATIONS

  """Yellow pages"""
  YELLOW_PAGES
}

"""Public stock exchanges."""
enum StockExchange {
  """New York Stock Exchange"""
  NYSE

  """
  Nasdaq (National Association of Securities Dealers Automated Quotation System)
  """
  NASDAQ
}

"""A representation of a passport identification document."""
type PassportIdentificationDocument {
  """The three character country code of the issuing country."""
  countryCodeAlpha3: String!

  """The passport issue date."""
  issueDate: Date!

  """The passport expiration date."""
  expirationDate: Date!

  """Whether the passport identification number has been previously saved."""
  identificationNumberPreviouslySaved: Boolean
}

"""Business information collected for a subscriber application"""
type OnboardingBusinessOrganizationInformation implements Node {
  """The Global ID of the business organization info."""
  id: ID!

  """The person to contact about questions regarding this application"""
  applicantContact: OnboardingApplicantContact

  """The details of the business"""
  businessDetails: OnboardingBusinessDetails

  """The type of business"""
  businessType: OnboardingBusinessType

  """The history of the business"""
  businessHistory: OnboardingBusinessHistory

  """The operating details of the business"""
  operatingDetails: OnboardingBusinessProcessingAttributes

  """Ownership information for the business"""
  ownershipInformation: BusinessOwnershipInformation

  """
  The beneficial owner who has significant responsibility to control, manage, or direct the business.
  """
  controlProng: OnboardingControlProng

  """
  The details recorded at time of submission for business organization information
  """
  eSignature: OnboardingESignature

  """The date and time, in ISO 8601 format, when this object was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, when this object was last updated.
  """
  updatedAt: String

  """
  Status of collection and processing of OnboardingBusinessOrganizationInformation
  """
  status: OnboardingBusinessOrganizationInformationStatus
}

"""
The initial business information collected from a potential business customer
"""
type OnboardingPreliminaryBusinessInformation implements Node {
  """The Global ID of the preliminary business info."""
  id: ID!

  """The legal name of the business"""
  businessName: String!

  """
  A region for the address based on the codes for identifying the principle subdivisions, e.g. provinces and states, of countries
  [IS0 3166 standard](https://en.wikipedia.org/wiki/ISO_3166-2), including districts and outlying areas.
  """
  regionOfFormation: String

  """
  Business website URL.
  
  The validation for the `website` URL uses the following regex pattern `^((((https?|ftps?|gopher|telnet|nntp)://)|(mailto:|news:))(%[0-9A-Fa-f]{2}|[-()_.!~*';/?:@&=+$,A-Za-z0-9])+)([).!';/?:,][[:blank:|:blank:]])?$`
  """
  businessWebsite: String!

  """
  The permitted types of transactions, e.g goods and services. If empty, this will be populated from the contract's capabilities which match attributes of this MID.
  """
  goodsAndServicesProvided: BusinessPlanOperatingGoodsAndServiceCategory!

  """A brief description of of the products or services it provides."""
  productDescription: String

  """The primary contact email to use during the onboarding process"""
  primaryContactEmail: String!

  """Whether subscriber has been pre-approved for acquiring"""
  preApproved: Boolean

  """
  Current status of the preliminary decision on the business onboarding application
  """
  status: OnboardingPreApprovalStatus

  """The date and time, in ISO 8601 format, when this object was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, when this object was last updated.
  """
  updatedAt: String

  """The average processing volume for the business"""
  averageMonthlyVolume: OnboardingAverageMonthlyVolumeRange @deprecated(reason: "Use averageMonthlyPaymentVolume instead.")

  """The global region the business operates in"""
  globalRegion: OnBoardingBusinessGlobalRegion

  """The location of the business' customers"""
  customerLocation: OnboardingCustomerLocation @deprecated(reason: "No longer supported.")

  """The desired solution for the business"""
  solution: OnboardingBusinessPaymentSolution @deprecated(reason: "Use desiredSolutions instead.")

  """Consent to store the preliminary business information"""
  consent: ConsentAgreement

  """The primary contact name to use during the onboarding process"""
  primaryContactName: String

  """The average processing volume for the business"""
  averageMonthlyPaymentVolume: OnboardingAverageMonthlyPaymentVolumeRange

  """All applicable desired solutions for the business"""
  desiredSolutions: [OnboardingDesiredPaymentSolution!]
}

"""
Status of the preliminary decision on the merchant onboarding application
"""
enum OnboardingPreApprovalStatus {
  """No decision yet made"""
  NOT_DECISIONED

  """Approved to move forward"""
  APPROVED

  """Denied from moving forward in the onboarding process"""
  DENIED

  """Redirect the request to issuing product"""
  REDIRECT_TO_ISSUING

  """
  Approved to move forward, but outreach should also be done to confirm needs of new business
  """
  APPROVED_WITH_OUTREACH
}

"""Overall status on the business onboarding application"""
enum OnboardingBusinessOrganizationInformationStatus {
  """Update of the BusinessOrganizationInformation is still in progress"""
  UPDATE_IN_PROGRESS

  """Updates to the BusinessOrganizationInformation have been completed"""
  UPDATE_COMPLETE

  """
  Processing the merchant information within BusinessOrganizationInformation has been started
  """
  PROCESSING_STARTED
}

"""Status of an individual step of the business onboarding application"""
enum OnboardingApplicationStepStatus {
  """No data has yet been received"""
  NOT_STARTED

  """Data has been entered and saved"""
  SUBMITTED
}

"""Business information collected for an application"""
type OnboardingBusinessType implements OnboardingApplicationStep {
  """
  Business website URL.
  
  The validation for the `website` URL uses the following regex pattern `^((((https?|ftps?|gopher|telnet|nntp)://)|(mailto:|news:))(%[0-9A-Fa-f]{2}|[-()_.!~*';/?:@&=+$,A-Za-z0-9])+)([).!';/?:,][[:blank:|:blank:]])?$`
  """
  businessWebsite: String!

  """The high-level categorization of the business"""
  industry: BusinessPlanOperatingGoodsAndServiceCategory

  """Description of goods and services provided"""
  goodsAndServicesProvided: String!

  """Additional information about your specific use-case"""
  productDescription: String!

  """
  The description that will appear on a consumer's bank statement and will help them identify the transaction.
  """
  billingDescriptor: String

  """The status of type of business information being collected"""
  stepStatus: OnboardingApplicationStepStatus

  """A set of suggestions for the billing descriptor"""
  billingDescriptorSuggestions: [String!]
}

interface OnboardingApplicationStep {
  """The status of the individual step of the application"""
  stepStatus: OnboardingApplicationStepStatus
}

"""The person to contract for questions about this application"""
type OnboardingApplicantContact implements OnboardingApplicationStep {
  """Name of person to contact"""
  name: Name!

  """The phone number for the person to contact"""
  phoneNumber: Phone!

  """The email address for the person to contact"""
  emailAddress: String

  """The business title of the person to contact"""
  title: String

  """The status of applicant contact information being collected"""
  stepStatus: OnboardingApplicationStepStatus
}

"""Information about a business' ownership"""
type BusinessOwnershipInformation implements OnboardingApplicationStep {
  """
  Whether the business is publicly traded or a government entity.  If set to true, then ultimate beneficial owner information is not required.
  """
  isPubliclyTradedOrGovernmentEntity: Boolean!

  """
  Whether the business has an owner with more than 25% stake in the business.
  """
  hasOwnerWithMoreThan25PercentStake: Boolean!

  """
  Ultimate beneficial owners for the business, owning 25% or more of the business.
  """
  owners: [OnboardingBusinessAuthorizedPerson!]

  """The status of ownership information being collected"""
  stepStatus: OnboardingApplicationStepStatus
}

"""Breakdown of seasonal volumme by month"""
type SeasonalVolumeBreakdown {
  """January volume for each currency the business transacts with"""
  january: [Amount!]

  """February volume for each currency the business transacts with"""
  february: [Amount!]

  """March volume for each currency the business transacts with"""
  march: [Amount!]

  """April volume for each currency the business transacts with"""
  april: [Amount!]

  """May volume for each currency the business transacts with"""
  may: [Amount!]

  """June volume for each currency the business transacts with"""
  june: [Amount!]

  """July volume for each currency the business transacts with"""
  july: [Amount!]

  """August volume for each currency the business transacts with"""
  august: [Amount!]

  """September volume for each currency the business transacts with"""
  september: [Amount!]

  """October volume for each currency the business transacts with"""
  october: [Amount!]

  """November volume for each currency the business transacts with"""
  november: [Amount!]

  """December volume for each currency the business transacts with"""
  december: [Amount!]
}

"""The percentage breakdown of how the business accepts card payments"""
type CardAcceptanceMethodBreakdown {
  """The percentage of transactions that are card-present"""
  cardPresent: UnsignedInt!

  """
  The percentage of transactions in which card information is provided over the phone or through mail
  """
  moto: UnsignedInt!

  """The percentage of transactions that are card-not-present"""
  eCommerce: UnsignedInt!
}

"""The business' reported operating details."""
type OnboardingBusinessProcessingAttributes implements OnboardingApplicationStep {
  """
  Gross annual revenues for each currency the business transacts with, per the most recent fiscal year
  """
  annualVolume: [Amount!]

  """
  Largest single order amount for each currency the business transacts with, per the most recent fiscal year
  """
  largestTicket: [Amount!]

  """
  Average single order amount for each currency the business transacts with, per the most recent fiscal year
  """
  averageTicket: [Amount!]

  """
  Largest monthly volumes for each currency the business transacts with, per the most recent fiscal year
  """
  largestMonthlyVolume: [Amount!]

  """Whether a business experiences seasonality in its operations."""
  isSeasonalBusiness: Boolean!

  """Breakdown of volumme by month"""
  seasonalVolumeBreakdown: SeasonalVolumeBreakdown

  """
  Card brands that are currently being accepted or would like to accept with their new program
  """
  cardAcceptance: [OnboardingPaymentCardBrand!]

  """Name as it appears on bank account"""
  nameOnBankAccount: String!

  """Whether an account number was previously stored for this object"""
  accountNumberStored: Boolean

  """Routing number of bank account 6-9 digits"""
  routingNumber: String

  """
  The fiscal year end date for the financial numbers reported numbers reported here
  
  Format: `YYYY-MM-DD`
  """
  fiscalYearEndDate: Date

  """The status of processing attributes information being collected"""
  stepStatus: OnboardingApplicationStepStatus
}

"""Business information collected for an application"""
type OnboardingBusinessDetails implements OnboardingApplicationStep {
  """Business name"""
  legalBusinessName: String!

  """The legal address of the business"""
  legalBusinessAddress: Address

  """The mailing address of the business (if different from legal address)"""
  mailingBusinessAddress: Address

  """The name of the business as it appears on tax returns"""
  businessNameOnTaxReturns: String!

  """Business address on tax returns"""
  businessAddressOnTaxReturns: Address!

  """Business identifier used for business tax returns"""
  taxIdentifier: TaxIdentificationDocument

  """Does the business accept tips?"""
  acceptsTips: Boolean!

  """Doing Business As name"""
  doingBusinessAsName: String!

  """Email address for tax returns"""
  emailAddressForTaxReturns: String!

  """The physical address for customer support"""
  supportAddress: Address!

  """The phone nunmber for customer support"""
  supportPhone: Phone!

  """Email address for customer support"""
  supportEmail: String!

  """
  Customer support website URL.
  
  The validation for the `website` URL uses the following regex pattern `^((((https?|ftps?|gopher|telnet|nntp)://)|(mailto:|news:))(%[0-9A-Fa-f]{2}|[-()_.!~*';/?:@&=+$,A-Za-z0-9])+)([).!';/?:,][[:blank:|:blank:]])?$`
  """
  customerSupportWebsite: String!

  """The address that customer's are familiar with'"""
  dbaAddress: Address

  """Is the mailing address the same as the legal address"""
  isMailingAddressTheSameAsLegal: Boolean

  """Is the DBA address the same as the legal address"""
  isDbaAddressTheSameAsLegal: Boolean

  """Is the address for tax purposes the same as the legal address"""
  isTaxAddressTheSameAsLegal: Boolean

  """The status of business details information being collected"""
  stepStatus: OnboardingApplicationStepStatus
}

"""
Business history related to incorporaton, history, and goods and services provided.
"""
type OnboardingBusinessHistory implements OnboardingApplicationStep {
  """The type of business"""
  businessStructure: BusinessStructure

  """
  A region for the address based on the codes for identifying the principle subdivisions, e.g. provinces and states, of countries
  [IS0 3166 standard](https://en.wikipedia.org/wiki/ISO_3166-2), including districts and outlying areas.
  """
  regionOfFormation: String!

  """(If applicable) The stock exchange where the business is listed"""
  stockExchange: StockExchange

  """Whether the business has filed for bankruptcy in the past"""
  previousBankruptcy: Boolean!

  """The number of years this business has been in operation"""
  yearsOfOperation: UnsignedInt

  """The number of years this business has been owned by its current owners"""
  yearsOfOwnership: UnsignedInt

  """The number of physical locations for this business"""
  numberOfBusinessLocations: UnsignedInt

  """Whether the business is using one or more fulfillment partners"""
  usingFulfillmentPartners: Boolean!

  """
  (If applicable) The names of the fulfillment partners used by the business
  """
  fulfillmentPartnersNames: [String!]

  """Whether the business bills its customers prior to shipping goods"""
  forwardCommittment: Boolean!

  """
  Details regarding how long the business holds onto funds before shipping goods
  """
  forwardCommittmentBreakdown: ForwardCommittmentBreakdown

  """The phone number in a country specific format."""
  businessPhoneNumber: Phone!

  """The fax number in a country specific format."""
  businessFaxNumber: Phone

  """The percentage of transactions broken down by acceptance methods"""
  cardAcceptanceBreakdown: CardAcceptanceMethodBreakdown

  """The advertising methods used by the business"""
  advertisingMethods: [AdvertisingMethod!]

  """
  3-4 sentences about overall company answeering "Who is your target market?", "What type of products/services do you specialize in?", "What differentitates you from your competitors?"
  """
  businessDescription: String!

  """Whether the business has previously accepted credit cards"""
  creditCardsPreviouslyAccepted: Boolean!

  """
  The name of the previous card processor used by the business (if applicable)
  """
  previousCardProcessorName: String

  """The number of people employed by the business"""
  employeeCount: UnsignedInt

  """Whether the business sells physical goods"""
  physicalGoodsSold: Boolean!

  """
  The date this business was formed
  
  Format: `YYYY-MM-DD`
  """
  dateOfFormation: Date

  """The type of business entity"""
  businessEntity: BusinessEntityType

  """Whether the business was terminated by a previous payment processor"""
  terminatedByPreviousPaymentProcessor: Boolean

  """
  (If applicable) details about the termination by a previous payment processor, including reasoning
  """
  paymentProcessorTerminationReason: String

  """The status of business history information being collected"""
  stepStatus: OnboardingApplicationStepStatus

  """
  (If applicable) ticker symbol from the stock exchange where this company is traded
  """
  stockTickerSymbol: String
}

"""The percentage breakdown of forward comittments"""
type ForwardCommittmentBreakdown {
  """
  The percentage of transactions that are shipped within 0-7 days of collecting payment
  """
  percentageOfTransactionZeroToSevenDays: UnsignedInt!

  """
  The percentage of transactions that are shipped within 8-14 days of collecting payment
  """
  percentageOfTransactionEightToFourteenDays: UnsignedInt!

  """
  The percentage of transactions that are shipped within 15-30 days of collecting payment
  """
  percentageOfTransactionFIfteenToThirtyDays: UnsignedInt!

  """
  The percentage of transactions that are shipped more than 30 days past payment collection
  """
  percentageOfTransactionMoreThanThirtyDays: UnsignedInt!
}

"""
Under the control prong, the beneficial owner is a single individual who has significant responsibility to control, manage, or direct the business.
"""
type OnboardingControlProng implements OnboardingApplicationStep {
  """
  Whether the Control Prong is one of the ultimate beneficial owners of the company
  """
  isControlProngAnUltimateBeneficialOwner: Boolean!

  """
  (if applicable) The ID of the ultimate beneficial owner who is the Control Prong
  """
  ultimateBeneficialOwnerID: ID

  """
  If not an ultimate beneficial owner, the person who is the Control Prong
  """
  authorizedPerson: OnboardingBusinessAuthorizedPerson

  """The status of the controlling individual information being collected"""
  stepStatus: OnboardingApplicationStepStatus
}

"""The details of the person authorized to act on behalf of business."""
type OnboardingBusinessAuthorizedPerson {
  """The ID of the authorized person."""
  id: ID

  """The authorized person's name."""
  name: Name

  """Percentage ownership of authorized person."""
  percentageOwnership: UnsignedInt

  """Authorized person's business title."""
  businessTitle: OnboardingBusinessTitle

  """The email address of the authorized person."""
  email: String

  """List of phone numbers associated to the authorized person."""
  phoneNumbers: [Phone!]

  """The default physical address of the authorized person."""
  homeAddress: Address

  """
  The date of birth of the authorized person represented in YYYY-MM-DD format.
  """
  dateOfBirth: String

  """Identification Document associated with the authorized person."""
  identificationDocument: OnboardingIdentificationDocument

  """Identification Document associated with the authorized person."""
  yearsAtCurrentAddress: UnsignedInt

  """Indicates who is the primary applicant of the application"""
  isPrimaryApplicant: Boolean

  """Is this person a US citizen or resident?"""
  isUsPerson: Boolean
}

"""The identification documents attached to a Person."""
type OnboardingIdentificationDocument {
  """
  A person's social security number (USA only).
  
  Must have 9 digits divided into 3 parts by hyphen. For example, `123-45-6789`.
  The first part should have 3 digits and should not be 000, 666, or between 900 and 999.
  The second part should have 2 digits and it should be from 01 to 99.
  The third part should have 4 digits and it should be from 0001 to 9999.
  
  The validation for the input uses the following regex pattern `^(?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4}$`.
  """
  socialSecurityNumber: TaxIdentificationDocument

  """A person's passport information"""
  passport: PassportIdentificationDocument
}

"""The range of monthly average volume for a business"""
enum OnboardingAverageMonthlyVolumeRange {
  """Under $500,000 USD average monthly volume"""
  UNDER_500_000

  """Between $500,000 and $1,000,000 USD average monthly volume"""
  BETWEEN_500_000_AND_1_000_000

  """Between $1,000,000 and $5,000,000 USD average monthly volume"""
  BETWEEN_1_000_000_AND_5_000_000

  """Between $5,000,000 and $10,000,000 USD average monthly volume"""
  BETWEEN_5_000_000_AND_10_000_000

  """Between $10,000,000 and $50,000,000 USD average monthly volume"""
  BETWEEN_10_000_000_AND_50_000_000

  """Over $50,000,000 USD average monthly volume"""
  OVER_50_000_000
}

"""Region of the world"""
enum OnBoardingBusinessGlobalRegion {
  """United States"""
  UNITED_STATES

  """Canada"""
  CANADA

  """Latin America"""
  LATIN_AMERICA

  """Europe"""
  EUROPE

  """Asia Pacific"""
  APAC

  """Other Region"""
  OTHER
}

"""Location where customers are based"""
enum OnboardingCustomerLocation {
  """100% of customers are based in the United States"""
  UNITED_STATES

  """Majority are based in the Unided States"""
  MAJORITY_UNITED_STATES

  """50% are based in the United States"""
  HALF_UNITED_STATES

  """Majority are based outside of the United States"""
  MAJORITY_OUTSIDE_UNITED_STATES
}

"""The types of payment solutions desired by the business"""
enum OnboardingBusinessPaymentSolution {
  """Accept payments online"""
  ACCEPT_PAYMENTS_ONLINE

  """Accept swiped payments at point-of-sale, kiosk, etc"""
  ACCEPT_SWIPED_PAYMENTS

  """Accept payments online and swiped payments at point-of-sale"""
  ACCEPT_PAYMENTS_ONLINE_AND_SWIPED

  """Accept payments as a marketplace or platform"""
  ACCEPT_PAYMENTS_AS_MARKETPLACE

  """Issue virtual cards or physical cards"""
  ISSUE_VIRTUAL_CARDS
}

"""The types of payment solutions desired by the business"""
enum OnboardingDesiredPaymentSolution {
  """Accept payments online"""
  ACCEPT_PAYMENTS_ONLINE

  """Accept in-person payments at point-of-sale, kiosk, etc"""
  ACCEPT_IN_PERSON_PAYMENTS

  """Issue virtual cards or physical cards"""
  ISSUE_PAYMENT_CARDS
}

"""The range of monthly average volume for a business"""
enum OnboardingAverageMonthlyPaymentVolumeRange {
  """Under $500,000 USD average monthly volume"""
  UNDER_500_000

  """Between $500,000 and $1,000,000 USD average monthly volume"""
  BETWEEN_500_000_AND_1_000_000

  """Between $1,000,000 and $5,000,000 USD average monthly volume"""
  BETWEEN_1_000_000_AND_5_000_000

  """Between $5,000,000 and $25,000,000 USD average monthly volume"""
  BETWEEN_5_000_000_AND_25_000_000

  """Over $25,000,000 USD average monthly volume"""
  OVER_25_000_000
}

"""The type of business entity"""
enum BusinessEntityType {
  """A publicly traded company"""
  PUBLIC

  """A privately held company"""
  PRIVATE

  """A government organization"""
  GOVERNMENT
}

"""eSignature and date"""
type OnboardingESignature implements OnboardingApplicationStep {
  """eSignature"""
  eSignature: String

  """Confirmation of eSignature"""
  confirmationOfESignature: Boolean

  """Submission date"""
  submissionDate: Date

  """Acceptance of Privacy Policy"""
  acceptanceOfPrivacyPolicy: Boolean

  """Acceptance of Terms & Conditions"""
  acceptanceOfTermsAndConditions: Boolean

  """Acceptance of Acquirer Terms"""
  acceptanceOfAcquirerTerms: Boolean

  """Acceptance date of Privacy Policy"""
  acceptanceDateOfPrivacyPolicy: Date

  """Acceptance date of Terms and Conditions"""
  acceptanceDateOfTermsAndConditions: Date

  """Acceptance date of Acquirer Terms"""
  acceptanceDateOfAcquirerTerms: Date

  """The status of eSignature information being collected"""
  stepStatus: OnboardingApplicationStepStatus
}

"""Possible Payment Card Brand types"""
enum OnboardingPaymentCardBrand {
  """Maestro card brand."""
  MAESTRO

  """Visa card brand."""
  VISA

  """Mastercard card brand."""
  MASTERCARD

  """American Express card brand."""
  AMERICAN_EXPRESS

  """Diners card brand."""
  DINERS_CLUB

  """Discover card brand."""
  DISCOVER

  """JCB card brand."""
  JCB
}

"""The title held by the business representative"""
enum OnboardingBusinessTitle {
  """Authorized Signatory"""
  AUTHORIZED_SIGNATORY

  """CEO"""
  CEO

  """CFO"""
  CFO

  """COO"""
  COO

  """President"""
  PRESIDENT

  """Vice President"""
  VICE_PRESIDENT

  """Treasurer"""
  TREASURER

  """Owner"""
  OWNER
}

"""The payment card transaction dispute."""
type PaymentCardTransactionDispute implements Node {
  """The Global ID of the dispute."""
  id: ID!

  """The disputed amount."""
  amount: Amount

  """The status of the dispute."""
  status: PaymentCardDisputeStatus

  """The category type of the dispute."""
  category: PaymentCardDisputeCategoryType

  """The chargebacks for the dispute."""
  chargebacks: [PaymentCardTransactionChargeback!]

  """The payment card transaction event for the dispute."""
  transactionEvent: TransactionEvent

  """
  The date, in YYYY-MM-DD format, from which this dispute is initiated by the customer.
  """
  customerInitiatedOn: String

  """The customer claim type of the dispute."""
  customerClaimType: PaymentCardDisputeCustomerClaimType

  """The customer contact information of the dispute."""
  customerContact: PaymentCardDisputeCustomerContact

  """The subscriber note of the dispute."""
  subscriberNote: String

  """The payment card transaction provisional credit for the dispute."""
  provisionalCreditHistory: [PaymentCardTransactionDisputeProvisionalCredit!]

  """The payment card transaction credit status for the dispute."""
  disputeCreditHistory: [PaymentCardTransactionDisputeCredit!]

  """Whether the issuer is liable for the dispute."""
  liability: PaymentCardDisputeLiability

  """
  The date and time, in ISO 8601 format, from which this dispute is effective.
  """
  fromDate: String

  """
  The date and time, in ISO 8601 format, through which this dispute is effective.
  """
  throughDate: String

  """The date and time, in ISO 8601 format, this dispute was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, this dispute was most recently updated.
  """
  updatedAt: String
}

"""The payment card transaction dispute credit."""
type PaymentCardTransactionDisputeCredit {
  """The credit status of the dispute credit."""
  creditStatus: PaymentCardDisputeCreditStatus

  """The amount for the dispute credit."""
  creditAmount: Amount

  """
  The date and time, in ISO 8601 format, from which this dispute credit is created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, from which this dispute credit is updated.
  """
  updatedAt: String
}

"""The payment card transaction chargeback credit."""
type PaymentCardTransactionDisputeProvisionalCredit {
  """The credit status of the dispute credit."""
  creditStatus: PaymentCardProvisionalCreditStatus

  """The amount for the chargeback credit."""
  creditAmount: Amount

  """
  The date and time, in ISO 8601 format, from which this chargeback credit is created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, from which this chargeback credit is updated.
  """
  updatedAt: String
}

"""The provisional credit status of the dispute."""
enum PaymentCardProvisionalCreditStatus {
  """A chargeback credit has not been issued."""
  NOT_ISSUED

  """The chargeback provisional credit is pending issued."""
  PENDING_ISSUE

  """The Provisional Credit for the chargeback has been issued."""
  ISSUED

  """The chargeback provisional credit is pending finalized."""
  PENDING_FINALIZATION

  """The Provisional Credit for is not finalized"""
  FINALIZATION_FAILED

  """The Provisional Credit for is finalized"""
  FINALIZED
}

"""The credit status of the dispute credit."""
enum PaymentCardDisputeCreditStatus {
  """A dispute credit has not been issued."""
  NOT_ISSUED

  """The dispute credit is pending issuing."""
  PENDING_ISSUE

  """The dispute credit is issued."""
  ISSUED
}

"""The payment card transaction chargeback."""
type PaymentCardTransactionChargeback implements Node {
  """The Global ID of the chargeback."""
  id: ID!

  """The requested amount for the chargeback."""
  requestedAmount: Amount

  """The received amount for the chargeback."""
  receivedAmount: Amount

  """The status of the chargeback."""
  status: PaymentCardChargebackStatus

  """The credit status of the chargeback."""
  creditStatus: PaymentCardChargebackCreditStatus

  """The payment card transaction dispute for the chargeback."""
  dispute: PaymentCardTransactionDispute

  """The external network id of the chargeback."""
  chargebackExternalNetwork: ChargebackExternalNetwork

  """The external network reason code of the chargeback."""
  networkReasonCode: PaymentCardChargebackNetworkReasonCode

  """
  The date and time, in ISO 8601 format, from which this chargeback is submitted.
  """
  fromDate: String

  """
  The date and time, in ISO 8601 format, through which this chargeback is resolved.
  """
  throughDate: String

  """
  The date and time, in ISO 8601 format, from which this chargeback credit is issued.
  """
  creditIssueFromDate: String

  """
  The date and time, in ISO 8601 format, through which this chargeback credit is issued.
  """
  creditIssueThroughDate: String

  """The date and time, in ISO 8601 format, this chargeback was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, this chargeback was most recently updated.
  """
  updatedAt: String
}

"""Organization that controls a set of card programs."""
type Organization implements Node {
  """
  A paginated list of `PaymentCardTransactionDispute` for this `Organization`.
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCardTransactionDisputes(
    """The number of `PaymentCardTransactionDispute` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `PaymentCardTransactionDispute`."""
    filterBy: PaymentCardTransactionDisputesFilterInput
  ): PaymentCardTransactionDisputeConnection

  """
  A paginated list of `PaymentCardTransactionChargeback` for this `Organization`.
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCardTransactionChargebacks(
    """The number of `PaymentCardTransactionChargeback` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `PaymentCardTransactionChargeback`."""
    filterBy: PaymentCardTransactionChargebacksFilterInput
  ): PaymentCardTransactionChargebackConnection

  """ID of the Organization"""
  id: ID!

  """Details of the Organization"""
  profile: OrganizationProfile!

  """All API Keys associated to this Organization."""
  apiKeys(first: Int, after: String): APIKeyConnection

  """The financial accounts backing this Organization."""
  financialAccounts: [FinancialAccount!] @deprecated(reason: "Use accounts instead.")

  """All Users with access to the Organization."""
  users(first: Int = 20, after: String): UserConnection

  """All financial accounts associated with this organization."""
  accounts(first: Int, after: String, filterBy: AccountHolderFinancialAccountsFilterInput): FinancialAccountConnection

  """Detailed information about the organization"""
  businessDetail: BusinessDetail

  """`FinancialAccount` balances associated with this `Organization`."""
  searchFinancialAccountBalances(first: Int = 20, after: String, filterBy: FinancialAccountBalanceSearchFilterInput): FinancialAccountBalanceSearchResultPayload

  """Onboarding information associated with this organization"""
  onboardingPreliminaryBusinessInformation: OnboardingPreliminaryBusinessInformation

  """Business information collected during onboarding"""
  onboardingBusinessOrganizationInformationByOrganization: OnboardingBusinessOrganizationInformation

  """A paginated list of Card Products for this Organization."""
  cardProducts(first: Int = 10, after: String): CardProductConnection

  """A paginated list of spend rules."""
  spendRules(
    """
    The number of SpendRules to return.
    
    Max: 20
    Min: 1
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """A paginated list of VelocityRules."""
  velocityRules(
    """
    The number of VelocityRules to return.
    
    Max: 20
    Min: 1
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityRuleConnection

  """A paginated list of `RewardEarnRule`s."""
  rewardEarnRules(
    """
    The number of `RewardEarnRule`s to return.
    
    Max: 20
    Min: 1
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardEarnRuleConnection

  """A paginated list of `RewardRedemptionConfiguration`s."""
  rewardRedemptionConfigurations(
    """
    The number of `RewardRedemptionConfiguration` to return.
    
    Max: 20
    Min: 1
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardRedemptionConfigurationConnection

  """
  The inter financial account transfer rules belonging to this `Organization`.
  """
  interFinancialAccountTransferRules(
    """The number of inter financial account transfer rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): InterFinancialAccountTransferRuleConnectionPayload

  """The internal velocity transfer rules belonging to this `Organization`."""
  velocityInterFinancialAccountTransferRules(
    """
    The number of velocity inter financial account transfer rules to return.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityInterFinancialAccountTransferRuleConnectionPayload

  """
  A paginated list of Physical Payment Card Orders
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  physicalPaymentCardOrders(
    first: Int = 20
    after: String

    """Filter results to specific Physical Payment Card Order."""
    filterBy: PhysicalPaymentCardOrderFilterInput
  ): PhysicalPaymentCardOrderConnection

  """
  A paginated list of Physical Card Group Orders
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  physicalCardGroupOrders(
    first: Int = 20
    after: String

    """Filter results to specific physical payment card group order."""
    filterBy: PhysicalCardGroupOrderFilterInput
  ): PhysicalCardGroupOrderConnection @deprecated(reason: "Use physicalPaymentCardGroupOrders instead.")

  """
  A paginated list of Physical Card Group Orders
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  physicalPaymentCardGroupOrders(
    first: Int = 20
    after: String

    """Filter results to specific physical payment card group order."""
    filterBy: PhysicalPaymentCardGroupOrderFilterInput
  ): PhysicalCardGroupOrderConnection

  """A paginated list of Webhook Notification Target."""
  webhookNotificationTargets(first: Int = 20, after: String): WebhookNotificationTargetConnection

  """A paginated list of `CollaborativeAuthorizationEndpoints`."""
  collaborativeAuthorizationEndpoints(first: Int = 20, after: String): CollaborativeAuthorizationEndpointConnection
}

"""A shared configuration for a group of cards."""
type CardProduct implements Node {
  """
  A paginated list of `PaymentCardTransactionChargeback` for this `CardProduct`.
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCardTransactionChargebacks(
    """The number of `PaymentCardTransactionChargeback` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `PaymentCardTransactionChargeback`."""
    filterBy: CardProductPaymentCardTransactionChargebacksFilterInput
  ): PaymentCardTransactionChargebackConnection

  """Global ID used to reference the Card Product in operations."""
  id: ID!

  """Human-friendly name of the Card Product."""
  name: String

  """
  Whether the cards issued for this product are `MULTI_USE` or `SINGLE_USE`
  """
  usage: CardUsage

  """The business use case for the Card Product."""
  vertical: CardProductVertical

  """Indicates Card Product usage is for commercial purposes."""
  commercial: Boolean

  """
  The Payment Cards issued to this Card Product.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCards(
    """The number of Payment Cards to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Payment Cards."""
    filterBy: CardProductPaymentCardsFilterInput
  ): PaymentCardConnection

  """
  A paginated list of `Transaction` Events.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  transactionEvents(
    """The number of Transaction Events to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Transaction Card Events."""
    filterBy: CardProductTransactionEventsFilterInput
  ): TransactionEventConnection

  """The spend rules attached to this Card Product."""
  attachedSpendRules(
    """The number of Spend Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """A paginated list of Attached `RewardEarnRule`s."""
  attachedRewardRules(
    """
    The number of `RewardEarnRule`s to return.
    
    Max: 20
    Min: 1
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardRuleAttachmentConnection

  """A paginated list of Attached RewardRedemptionConfigs."""
  attachedRewardRedemptionConfigurations(
    """
    The number of attached `RewardRedemptionConfiguration`s to return.
    
    Max: 20
    Min: 1
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardRedemptionConfigurationAttachmentConnection

  """The Applications for this Card Product."""
  cardProductApplications(
    """The number of Applications to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): AccountHolderCardProductApplicationConnection @deprecated(reason: "Use searchCardProductApplications instead.")

  """
  Search Applications for this Card Product with a filter.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  searchCardProductApplications(
    """The number of Applications to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """The filter to apply to the search."""
    filterBy: CardProductApplicationFilterInput
  ): SearchCardProductApplicationConnection

  """The financial account backing this CardProduct."""
  financialAccounts: [FinancialAccount!] @deprecated(reason: "Use accounts instead.")

  """
  The financial accounts associated with this `CardProduct`.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  accounts(first: Int, after: String, filterBy: AccountHolderFinancialAccountsFilterInput): FinancialAccountConnection

  """The list of features for this CardProduct."""
  features: [CardProductFeature!]

  """The physical card group orders for this CardProduct."""
  groupOrders(
    """The number of group orders to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): PhysicalCardGroupOrderConnection

  """The velocity rules attached to this Card Product."""
  attachedVelocityRules(
    """The number of Velocity Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityRuleConnection

  """
  The platform spend rules attached to this `CardProduct`.
  These are READ ONLY and cannot be modified.
  """
  attachedPlatformSpendRules(
    """The number of Platform Spend Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """
  The platform velocity rules attached to this `CardProduct`.
  These are READ ONLY and cannot be modified.
  """
  attachedPlatformVelocityRules(
    """The number of Platform Velocity Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityRuleConnection

  """
  A paginated list of `PaymentCardTransactionDispute` for this `CardProduct`.
  """
  paymentCardTransactionDisputes(
    """The number of `PaymentCardTransactionDispute` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """
    Filter results to specific `PaymentCardTransactionDispute`.
    For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
    """
    filterBy: CardProductPaymentCardTransactionDisputesFilterInput
  ): PaymentCardTransactionDisputeConnectionPayload

  """
  A paginated list of Integrator Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  integratorACHTransfers(
    """The number of Integrator Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Integrator Initiated ACH Transfers."""
    filterBy: IntegratorInitiatedACHTransferFilterInput
  ): IntegratorInitiatedACHTransferConnection

  """
  A paginated list of Externally Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  externalACHTransfers(
    """The number of Externally Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Externally Initiated ACH Transfers."""
    filterBy: ExternallyInitiatedACHTransferFilterInput
  ): ExternallyInitiatedACHTransferConnection

  """
  A paginated list of originated ACH transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  originatedAchTransfers(
    """The number of originated ACH transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific originated ACH transfers."""
    filterBy: OriginatedAchTransferFilterInput
  ): OriginatedAchTransferPayload

  """
  A paginated list of non-originated ACH transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  nonOriginatedAchTransfers(
    """The number of non-originated ACH transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific non-originated ACH transfers."""
    filterBy: NonOriginatedAchTransferFilterInput
  ): NonOriginatedAchTransferPayload

  """
  The Fee schedules for this Card Product.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  feeSchedules(
    """The number of fee configurations to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific fee schedule."""
    filterBy: FeeScheduleFilterInput
  ): FeeScheduleConnection

  """
  The inter financial account transfer rules attached to this Card Product.
  """
  attachedInterFinancialAccountTransferRules(
    """The number of inter financial account transfer rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): InterFinancialAccountTransferRuleConnectionPayload

  """
  The velocity inter financial account transfer rules belonging to this Card Product.
  """
  attachedVelocityInterFinancialAccountTransferRules(
    """
    The number of velocity inter financial account transfer rules to return.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityInterFinancialAccountTransferRuleConnectionPayload

  """
  The `InterfinancialAccountTransfers` belonging to this `CardProduct`
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  interFinancialAccountTransfers(
    """The number of inter financial account transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific inter financial account transfers."""
    filterBy: InterFinancialAccountTransferFilterInput
  ): InterFinancialAccountTransferConnection

  """
  A paginated list of `CreditPlanTemplate`s available on this `CardProduct`.
  """
  creditPlanTemplates(
    """The number of `CreditPlanTemplate`s to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `CreditPlanTemplates`s."""
    filterBy: CreditPlanTemplateFilterInput
  ): CreditPlanTemplateConnection

  """A paginated list of `CreditPlan`s available on this `CardProduct`."""
  creditPlans(
    """The number of `CreditPlan`s to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `CreditPlan`s."""
    filterBy: CreditPlanFilterInput
  ): CreditPlanConnection

  """
  A paginated list of all card profile sets filtered by name, status
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  cardProfileSets(
    """The number of `CardProfileSet`s to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
    filterBy: FilteredCardProductCardProfileSetsInput
  ): CardProfileSetConnectionPayload

  """The credit configuration for this `CardProduct`."""
  creditConfiguration: CreditCardProductConfiguration

  """The ID for the source template that created this `CardProduct`."""
  sourceTemplateId: String
}

"""
A financial account allows you to move money into the Highnote platform and move funds to other accounts.
"""
type FinancialAccount implements Node {
  """
  A paginated list of `PaymentCardTransactionChargeback` for this `FinancialAccount`.
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCardTransactionChargebacks(
    """The number of `PaymentCardTransactionChargeback` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `PaymentCardTransactionChargeback`."""
    filterBy: FinancialAccountPaymentCardTransactionChargebacksFilterInput
  ): PaymentCardTransactionChargebackConnection

  """All global notes pertaining to this `FinancialAccount`."""
  globalNotes(first: Int = 20, after: String): GlobalNoteConnectionPayload

  """
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  accountReviewHistory(
    """The number of items to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): AccountReviewConnectionPayload

  """Global ID used to reference the Financial Account in operations."""
  id: ID!

  """
  Externally provided ID (255 character limit) that is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The ledgers backing this financial account."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The primary owner of this `FinancialAccount`."""
  owner: FinancialAccountOwner

  """
  Will be the same as `owner` if the `FinancialAccount` is owned by the primary user, otherwise this will link to the authorized user.
  """
  accountHolder: FinancialAccountOwner

  """The name of this account."""
  name: String

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """The Card Product Application used to issue this Financial Account."""
  application: AccountHolderCardProductApplication @deprecated(reason: "Use cardProductApplication instead.")

  """The Card Product Application used to issue this Financial Account."""
  cardProductApplication: CardProductApplication

  """
  The date and time, in ISO 8601 format, the Financial Account was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the Financial Account was last updated.
  """
  updatedAt: String

  """The list of features for a Financial Account."""
  features: [FinancialAccountFeature!]

  """The direct deposit details for this financial account."""
  directDepositDetails: DirectDepositDetail

  """The active billing cycle configuration for this financial account."""
  activeBillingCycleConfiguration: BillingCycleConfiguration

  """Current account balance snapshot"""
  statementSnapshot: FinancialAccountStatementSnapshot

  """
  A paginated list of FinancialAccountStatements.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statements(
    """The number of statements to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific statements."""
    filterBy: FinancialAccountStatementFilterInput
  ): FinancialAccountStatementConnection

  """
  The Activities that occurred on this Financial Account.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  financialAccountActivities(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountActivitiesFilterInput
  ): FinancialAccountActivityConnection

  """
  A paginated list of Integrator Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated.
  """
  integratorInitiatedAchTransfers(
    """The number of Integrator Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Integrator Initiated ACH Transfers."""
    filterBy: IntegratorInitiatedACHTransferFilterInput
  ): ACHTransactionConnection @deprecated(reason: "ACHTransactionConnection is deprecated in favor of IntegratorInitiatedACHTransferConnection and/or ExternallyInitiatedACHTransferConnection.")

  """
  A paginated list of Integrator Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated, in favor of integratorACHTransfers
  """
  integratorInitiatedACHTransfer(
    """The number of Integrator Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Integrator Initiated ACH Transfers."""
    filterBy: IntegratorInitiatedACHTransferFilterInput
  ): IntegratorInitiatedACHTransferConnection @deprecated(reason: "integratorInitiatedACHTransfer is deprecated in favor of integratorACHTransfers.")

  """
  A paginated list of Integrator Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  integratorACHTransfers(
    """The number of Integrator Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Integrator Initiated ACH Transfers."""
    filterBy: IntegratorInitiatedACHTransferFilterInput
  ): IntegratorInitiatedACHTransferConnection

  """
  A paginated list of Externally Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated
  """
  externallyInitiatedAchTransfers(
    """The number of Externally Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Externally Initiated ACH Transfers."""
    filterBy: ExternallyInitiatedACHTransferFilterInput
  ): ACHTransactionConnection @deprecated(reason: "ACHTransactionConnection is deprecated in favor of IntegratorInitiatedACHTransferConnection and/or ExternallyInitiatedACHTransferConnection.")

  """
  A paginated list of Externally Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated, in favor of externalACHTransfers
  """
  externallyInitiatedACHTransfer(
    """The number of Externally Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Externally Initiated ACH Transfers."""
    filterBy: ExternallyInitiatedACHTransferFilterInput
  ): ExternallyInitiatedACHTransferConnection @deprecated(reason: "externallyInitiatedACHTransfer is deprecated in favor of externalACHTransfers.")

  """
  A paginated list of Externally Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  externalACHTransfers(
    """The number of Externally Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Externally Initiated ACH Transfers."""
    filterBy: ExternallyInitiatedACHTransferFilterInput
  ): ExternallyInitiatedACHTransferConnection

  """
  A paginated list of originated ACH transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  originatedAchTransfers(
    """The number of originated ACH transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific originated ACH transfers."""
    filterBy: OriginatedAchTransferFilterInput
  ): OriginatedAchTransferPayload

  """
  A paginated list of non-originated ACH transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  nonOriginatedAchTransfers(
    """The number of non-originated ACH transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific non-originated ACH transfers."""
    filterBy: NonOriginatedAchTransferFilterInput
  ): NonOriginatedAchTransferPayload

  """Incoming Scheduled Transfers for the financial account"""
  incomingScheduledTransfers(
    """The number of `Incoming Scheduled Transfers` to return."""
    first: Int = 20

    """The cursor to start the page"""
    after: String
  ): ScheduledTransferConnection

  """
  A paginated list of TransactionEvents.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  transactionEvents(
    """The number of TransactionEvents to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Transaction Card Events."""
    filterBy: TransactionEventsFilterInput
  ): TransactionEventConnection

  """
  The `InterFinancialAccountTransfers` belonging to this `FinancialAccount`
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  interFinancialAccountTransfers(
    """The number of inter financial account transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific inter financial account transfers."""
    filterBy: InterFinancialAccountTransferFilterInput
  ): InterFinancialAccountTransferConnection

  """A list of states which could block account closure."""
  accountClosureBlockers: [AccountClosureBlocker] @deprecated(reason: "Legacy, unused field")

  """
  The reason(s) for closure of the `FinancialAccount`. Currently only available for revolving `CardProduct`s.
  """
  accountClosureReasons: [FinancialAccountClosureReason!]

  """The `FinancialAccountStatus`."""
  accountStatus: FinancialAccountStatus

  """
  A List of `FinancialAccountAttribute` associated with this `FinancialAccount`.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  accountAttributes: [FinancialAccountAttribute]

  """The attributes and reasons for the `FinancialAccount`."""
  financialAccountAttributesWithReason: [FinancialAccountAttributeWithReason!]

  """The Payment Cards issued to this Financial Account."""
  paymentCards(
    """The number of Payment Cards to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Payment Cards."""
    filterBy: FinancialAccountPaymentCardsFilterInput
  ): PaymentCardConnection

  """
  The balances of the VelocityRules that pertain to this `FinancialAccount`
  """
  velocityRuleBalances: [VelocityRuleBalance] @deprecated(reason: "Use velocitySpendRuleBalances instead")

  """
  The balances of the VelocityRules that pertain to this `FinancialAccount`
  """
  velocitySpendRuleBalances: [VelocitySpendRuleBalance]

  """The name of our bank partner associated to this `FinancialAccount`"""
  partnerBankName: PartnerBankName

  """The delinquency details of this `FinancialAccount`"""
  delinquency: FinancialAccountDelinquency

  """The current delinquency state of this `FinancialAccount`"""
  delinquencyState: CurrentFinancialAccountDelinquencyState

  """
  A paginated list of billing cycles for this `FinancialAccount`
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  billingCycleHistory(
    """The number of Billing Cycles to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Billing Cycles."""
    filterBy: BillingCycleFilterInput
  ): BillingCycleConnection

  """The credit configuration for this `FinancialAccount`."""
  creditConfiguration: CreditFinancialAccountConfiguration

  """
  A list of `CreditPlan`s with a `CreditBalanceType` of `PURCHASE` configured for this `FinancialAccount`.
  """
  purchasePlans: [FinancialAccountPurchaseCreditPlan!]

  """
  A paginated list of installment agreement for this `FinancialAccount`
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  installmentAgreements(
    """The number of Installment Agreement to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Installment Agreement Status."""
    filterBy: InstallmentAgreementFilterInput
  ): InstallmentAgreementConnection

  """
  A paginated list of FeeTransferEvents.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  feeTransferEvents(
    """The number of FeeTransferEvents to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Transaction Card Events."""
    filterBy: FeeTransferEventFilterInput
  ): FeeTransferEventConnection

  """
  A paginated list of `PaymentCardTransactionDispute` for this `FinancialAccount`.
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  paymentCardTransactionDisputes(
    """The number of `PaymentCardTransactionDispute` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific `PaymentCardTransactionDispute`."""
    filterBy: FinancialAccountPaymentCardTransactionDisputesFilterInput
  ): PaymentCardTransactionDisputeConnectionPayload

  """The customFields associated with this `FinancialAccount`."""
  customFields: [CustomField!]

  """A paginated list of revisions made to this `FinancialAccount`."""
  revisionSnapshots(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): FinancialAccountSnapshotConnection

  """The spend rules attached to this Financial Account."""
  attachedSpendRules(
    """The number of Spend Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The velocity rules attached to this Financial Account."""
  attachedVelocityRules(
    """The number of Velocity Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityRuleConnection

  """
  The `FinancialAccount`s for authorized user's managed by this `FinancialAccount`.
  """
  authorizedUserFinancialAccounts(
    """Cursor for pagination"""
    after: String

    """Number of records to return"""
    first: Int = 20
  ): FinancialAccountConnection

  """The reward points transfers associated to this `FinancialAccount`."""
  rewardPointsTransfers(
    """The number of transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardPointsTransferConnectionPayload @deprecated(reason: "Please query the REWARDS_POINTS ledger on your FinancialAccount for ledger entries, which include RewardPointsTransfer financial events.")

  """
  The balances of VelocityInterFinancialAccountTransferRules that pertain to this `FinancialAccount`
  """
  velocityInterFinancialAccountTransferRuleBalances(
    """The number of balances to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityInterFinancialAccountTransferRuleBalanceConnectionPayload

  """A paginated list of `CheckPayment`s."""
  checkPayments(first: Int = 20, after: String): CheckPaymentsConnection
}

"""Input for filtering `PaymentCardTransactionDispute`"""
input PaymentCardTransactionDisputesFilterInput {
  """Input to filter by `CardProduct` ID."""
  productId: IDFilterInput

  """Input to filter by `FinancialAccount` ID."""
  accountId: IDFilterInput

  """Input to filter by `PaymentCardTransactionDispute` ID."""
  disputeId: IDFilterInput

  """Input to filter by `PaymentCardTransactionDispute` status."""
  disputeStatus: PaymentCardDisputeStatusFilterInput

  """Input to filter by `PaymentCardTransactionDispute` created date."""
  disputeCreatedAt: TimestampFilterInput

  """
  Input to filter disputes by whether a `PaymentCardTransactionDispute` has an associated `PaymentCardTransactionChargeback`.
  """
  disputeHasChargeback: BooleanFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` ID."""
  chargebackId: IDFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` status."""
  chargebackStatus: PaymentCardChargebackStatusFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` created date."""
  chargebackCreatedAt: TimestampFilterInput

  """Chargeback externalNetworkId filter"""
  externalNetworkId: StringFilterInput
}

"""Input for filtering `PaymentCardTransactionChargeback`"""
input PaymentCardTransactionChargebacksFilterInput {
  """Input to filter by `CardProduct` ID."""
  productId: IDFilterInput

  """Input to filter by `FinancialAccount` ID."""
  accountId: IDFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` ID."""
  chargebackId: IDFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` status."""
  chargebackStatus: PaymentCardChargebackStatusFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` created date."""
  chargebackCreatedAt: TimestampFilterInput

  """Chargeback externalNetworkId filter"""
  externalNetworkId: StringFilterInput
}

"""Input for filtering `PaymentCardTransactionDispute` on `CardProduct`"""
input CardProductPaymentCardTransactionDisputesFilterInput {
  """Input to filter by `PaymentCardTransactionDispute` ID."""
  disputeId: IDFilterInput

  """Input to filter by `PaymentCardTransactionDispute` status."""
  disputeStatus: PaymentCardDisputeStatusFilterInput

  """Input to filter by `PaymentCardTransactionDispute` created date."""
  disputeCreatedAt: TimestampFilterInput

  """
  Input to filter disputes by whether a `PaymentCardTransactionDispute` has an associated `PaymentCardTransactionChargeback`.
  """
  disputeHasChargeback: BooleanFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` ID."""
  chargebackId: IDFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` status."""
  chargebackStatus: PaymentCardChargebackStatusFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` created date."""
  chargebackCreatedAt: TimestampFilterInput

  """Chargeback externalNetworkId filter"""
  externalNetworkId: StringFilterInput
}

"""
Input for filtering `PaymentCardTransactionChargeback` on `CardProduct`
"""
input CardProductPaymentCardTransactionChargebacksFilterInput {
  """Input to filter by `PaymentCardTransactionChargeback` ID."""
  chargebackId: IDFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` status."""
  chargebackStatus: PaymentCardChargebackStatusFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` created date."""
  chargebackCreatedAt: TimestampFilterInput

  """Chargeback externalNetworkId filter"""
  externalNetworkId: StringFilterInput
}

"""
Input for filtering `PaymentCardTransactionDispute` on `FinancialAccount`
"""
input FinancialAccountPaymentCardTransactionDisputesFilterInput {
  """Input to filter by `PaymentCardTransactionDispute` ID."""
  disputeId: IDFilterInput

  """Input to filter by `PaymentCardTransactionDispute` status."""
  disputeStatus: PaymentCardDisputeStatusFilterInput

  """Input to filter by `PaymentCardTransactionDispute` created date."""
  disputeCreatedAt: TimestampFilterInput

  """
  Input to filter disputes by whether a `PaymentCardTransactionDispute` has an associated `PaymentCardTransactionChargeback`.
  """
  disputeHasChargeback: BooleanFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` ID."""
  chargebackId: IDFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` status."""
  chargebackStatus: PaymentCardChargebackStatusFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` created date."""
  chargebackCreatedAt: TimestampFilterInput

  """Chargeback externalNetworkId filter"""
  externalNetworkId: StringFilterInput
}

"""
Input for filtering `PaymentCardTransactionChargeback` on `FinancialAccount`
"""
input FinancialAccountPaymentCardTransactionChargebacksFilterInput {
  """Input to filter by `PaymentCardTransactionChargeback` ID."""
  chargebackId: IDFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` status."""
  chargebackStatus: PaymentCardChargebackStatusFilterInput

  """Input to filter by `PaymentCardTransactionChargeback` created date."""
  chargebackCreatedAt: TimestampFilterInput

  """Chargeback externalNetworkId filter"""
  externalNetworkId: StringFilterInput
}

"""Input to filter by `PaymentCardDisputeStatus`."""
input PaymentCardDisputeStatusFilterInput {
  equals: PaymentCardDisputeStatus
  notEquals: PaymentCardDisputeStatus
  includes: [PaymentCardDisputeStatus!]
  excludes: [PaymentCardDisputeStatus!]
}

"""Input to filter by `PaymentCardChargebackStatus`."""
input PaymentCardChargebackStatusFilterInput {
  equals: PaymentCardChargebackStatus
  notEquals: PaymentCardChargebackStatus
  includes: [PaymentCardChargebackStatus!]
  excludes: [PaymentCardChargebackStatus!]
}

"""
The possible return types of `PaymentCardTransactionDisputeConnectionPayload`.
"""
union PaymentCardTransactionDisputeConnectionPayload = PaymentCardTransactionDisputeConnection | UserError | AccessDeniedError

"""The external network of the chargeback."""
type ChargebackExternalNetwork {
  """The external network of the chargeback."""
  networkType: ChargebackExternalNetworkType

  """The external network id of the chargeback."""
  externalNetworkId: ID!
}

"""The connection type for a `PaymentCardTransactionDispute`."""
type PaymentCardTransactionDisputeConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentCardTransactionDisputeEdge!]
}

"""The connection type for a `PaymentCardTransactionChargeback`."""
type PaymentCardTransactionChargebackConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentCardTransactionChargebackEdge!]
}

"""The edge type for the `PaymentCardTransactionDispute`."""
type PaymentCardTransactionDisputeEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The payment card transaction dispute."""
  node: PaymentCardTransactionDispute
}

"""The edge type for the `PaymentCardTransactionChargeback`."""
type PaymentCardTransactionChargebackEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The payment card transaction chargeback."""
  node: PaymentCardTransactionChargeback
}

"""The customer contact information of the dispute."""
type PaymentCardDisputeCustomerContact {
  """The given name of the customer."""
  givenName: String

  """The family name of the customer."""
  familyName: String

  """The phone number of the customer."""
  phone: Phone

  """The email of the customer."""
  email: String
}

"""The external network type of the chargeback."""
enum ChargebackExternalNetworkType {
  """Mastercard Network Gateway Online Manager Case ID"""
  NGOM

  """Visa Resolve Online Case ID"""
  VROL
}

"""The status of the dispute."""
enum PaymentCardDisputeStatus {
  """The dispute has been initiated."""
  INITIATED

  """The dispute has been cancelled."""
  CANCELLED

  """The dispute is in progress."""
  IN_PROGRESS

  """The dispute has been rejected."""
  REJECTED

  """The dispute has been won."""
  WON

  """The dispute has been lost."""
  LOST

  """
  The dispute is pending resolution without a chargeback to the network by issuing credit.
  """
  PENDING_RESOLUTION

  """
  The dispute has been resolved without a chargeback to the network by issuing credit.
  """
  RESOLVED
}

"""The type of dispute category."""
enum PaymentCardDisputeCategoryType {
  """
  The Account Holder has claimed a transaction to be fraudulent on their Account.
  """
  FRAUD

  """
  The Program attempted to collect money that the Account Holder has spent (e.g. clearing transaction without an authorization).
  """
  AUTHORIZATION

  """The transaction data is incorrect."""
  PROCESSING_ERROR

  """
  The Account Holder claims they did not receive the goods and services they paid for from the Merchant.
  """
  MERCHANT_DISPUTE
}

"""The status of the chargeback."""
enum PaymentCardChargebackStatus {
  """The chargeback has been submitted to the network."""
  SUBMITTED

  """The chargeback has been received by the network."""
  RECEIVED

  """The chargeback has been resolved by the network."""
  RESOLVED

  """The chargeback has been cancelled."""
  CANCELLED

  """The chargeback has been rejected."""
  REJECTED

  """The chargeback has been won."""
  WON

  """The chargeback is partially won."""
  PARTIALLY_WON

  """The chargeback has been lost."""
  LOST
}

"""The credit status of the chargeback."""
enum PaymentCardChargebackCreditStatus {
  """A chargeback credit has not been issued."""
  CREDIT_NOT_ISSUED

  """
  The chargeback credit is pending award following the win of the chargeback.
  """
  CREDIT_PENDING_WIN

  """
  The chargeback credit has been awarded following the win of the chargeback.
  """
  CREDIT_WON

  """
  The chargeback credit is pending partial award following the partial win of the chargeback.
  """
  CREDIT_PENDING_PARTIAL_WIN

  """
  The chargeback credit has been partially awarded following the partial win of the chargeback.
  """
  CREDIT_PARTIALLY_WON

  """The chargeback provisional credit is pending issued."""
  PROVISIONAL_CREDIT_PENDING_ISSUE

  """The Provisional Credit for the chargeback has been issued."""
  PROVISIONAL_CREDIT_ISSUED

  """
  The Provisional Credit for the chargeback is pending revocation following the loss of the chargeback.
  """
  PROVISIONAL_CREDIT_PENDING_REVOCATION

  """
  The Provisional Credit for the chargeback has been revoked following the loss of the chargeback.
  """
  PROVISIONAL_CREDIT_REVOKED

  """
  The Provisional Credit for the chargeback is pending award following the win of the chargeback.
  """
  PROVISIONAL_CREDIT_PENDING_WIN

  """
  The Provisional Credit for the chargeback has been awarded following the win of the chargeback.
  """
  PROVISIONAL_CREDIT_WON

  """
  The Provisional Credit for the chargeback is pending partial award following the partial win of the chargeback.
  """
  PROVISIONAL_CREDIT_PENDING_PARTIAL_WIN

  """
  The Provisional Credit for the chargeback has been partially awarded following the partial win of the chargeback.
  """
  PROVISIONAL_CREDIT_PARTIALLY_WON
}

"""The external network reason code of the chargeback."""
enum PaymentCardChargebackNetworkReasonCode {
  """The issuing bank can’t find an account with the number used."""
  ACCOUNT_NUMBER_NOT_ON_FILE

  """
  A Cardholder Dispute for Dual Message System transactions and Mainland China domestic transactions.
  """
  AUTHORIZATION_RELATED_FOR_DUAL_MESSAGE_SYSTEM

  """
  Cardholder claims the merchant continued to bill the card after a recurring transaction was cancelled, or without explicit consent from the cardholder.
  """
  CANCELLED_RECURRING_TRANSACTION

  """A Cardholder Dispute."""
  CARDHOLDER_DISPUTE

  """A Cardholder Dispute, not elsewhere classified (U.S. Region Only)."""
  CARDHOLDER_DISPUTE_US_ONLY

  """
  A fraudulent transaction was processed using a counterfeit EMV chip card, but the chip was not used, which allowed fraud.
  """
  CHIP_LIABILITY_SHIFT

  """
  A fraudulent transaction was processed using a lost, stolen, or never received EMV chip card, but the chip was not used, which allowed the fraud.
  """
  CHIP_PIN_LIABILITY_SHIFT_LOST_STOLEN

  """
  The transaction was not deposited within 30 days of the date a valid authorization code was obtained.
  """
  CHIP_READ_POS_LATE_PRESENTMENT

  """The Cardholder did not receive an expected credit."""
  CREDIT_NOT_PROCESSED

  """
  The Cardholder contacted the issuer claiming a travel service has not, or will not, be provided, and the merchant is seeking protection from creditors, insolvent, bankrupt or in liquidation.
  """
  DOMESTIC_CHARGEBACK_INTRA_EUROPEAN_USE

  """
  The merchant failed to provide adequate currency information or properly process a credit.
  """
  INCORRECT_CURRENCY

  """the merchant processed a transaction using the wrong transaction code."""
  INCORRECT_TRANSACTION_CODE

  """
  The merchant failed to provide adequate currency information or properly process a credit or processed a transaction using the wrong transaction code.
  """
  INCORRECT_CURRENCY_OR_TRANSACTION_CODE

  """
  The amount the Cardholder was charged doesn’t match what’s on the receipt.
  """
  INCORRECT_TRANSACTION_AMOUNT_OR_ACCOUNT_NUMBER

  """
  The Cardholder claims an installment charge made to their account was incorrect.
  """
  INSTALLMENT_BILLING_DISPUTE

  """
  The transaction was not deposited within 30 days of the date a valid authorization code was obtained.
  """
  LATE_PRESENTMENT

  """The Cardholder claims he or she did not authorize the transaction."""
  NO_AUTHORIZATION

  """
  The Cardholder claims to have been charged a no-show fee when they cancelled with a hotel participating in the Mastercard Guaranteed Reservation Service
  or this is a ATM dispute.
  """
  NO_SHOW_ADDENDUM_OR_ATM_DISPUTE

  """A Cardholder Dispute with non-receipt of cash at an ATM."""
  NON_RECEIPT_OF_CASH_OR_LOAD_TRANSACTION_VALUE_AT_ATM

  """
  A Cardholder disputes a credit card charge made in a card-not-present environment.
  """
  NOT_AUTHORIZED_CARD_PRESENT

  """
  A Cardholder is claiming that they did not authorize or participate in a card-not-present transaction, and therefore it must be fraudulent.
  """
  NOT_AUTHORIZED_CARD_ABSENT

  """
  The cardholder claims the merchandise received (or service provided) differs greatly from the description provided at the time of purchase.
  """
  NOT_AS_DESCRIBED_OR_DEFECTIVE_MERCHANDISE

  """A single transaction was processed more than one time."""
  POINT_OF_INTERACTION_ERRORS

  """
  This transaction violates Mastercard’s rules or the merchant was on a Mastercard security list.
  """
  QUESTIONABLE_MERCHANT_ACTIVITY

  """The product never arrived, or the service wasn’t completed."""
  SERVICE_NOT_PROVIDED_MERCHANDISE_NOT_RECEIVED

  """
  Issuer is unable to verify that an authorization code was obtained at the time of the transaction.
  """
  WARNING_BULLETIN_FILE
}

"""The customer claim type of the dispute."""
enum PaymentCardDisputeCustomerClaimType {
  """Customer submitted a dispute with written documentation."""
  WRITTEN

  """Customer submitted a dispute verbally."""
  VERBAL
}

"""The input details of the `GlobalNote` being created."""
input CreateGlobalNoteInput {
  """
  The message for the `GlobalNote`.
  
  Regex: ^[a-zA-Z\d$ ',.\-\_!@#$%^&*+=`?"\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\n]+$
  Note has a max length of 2048 characters.
  For compliance and security reasons, note should not contain any sensitive information, such as PII or PCI.
  """
  message: String!

  """The primary entity input for the `GlobalNote`."""
  primaryEntity: GlobalNotePrimaryEntityInput!

  """The aggregate entity input for the `GlobalNote`."""
  aggregateEntity: GlobalNoteAggregateEntityInput
}

"""The input details for a primary entity of a `GlobalNote`."""
input GlobalNotePrimaryEntityInput {
  """The primary entity id for the `GlobalNote`."""
  primaryEntityId: ID!

  """The primary entity type for the `GlobalNote`."""
  primaryEntityType: GlobalNotePrimaryEntityType!
}

"""The input details for a aggregate entity of a `GlobalNote`."""
input GlobalNoteAggregateEntityInput {
  """
  The aggregate entity id for the `GlobalNote`. You can use this ID to group notes together that do not have the same primaryEntityId.
  """
  aggregateEntityId: ID

  """The aggregate entity type for the `GlobalNote`."""
  aggregateEntityType: GlobalNoteAggregateEntityType
}

"""The return types when creating a `GlobalNote`."""
union GlobalNotePayload = GlobalNote | UserError | AccessDeniedError

"""The potential types for a `GlobalNote` primary entity."""
union GlobalNotePrimaryEntity = FinancialAccount | AccountHolderCardProductApplication

"""The potential types for a `GlobalNote` aggregate entity"""
union GlobalNoteAggregateEntity = USPersonAccountHolder | USBusinessAccountHolder

"""A `GlobalNote`"""
type GlobalNote {
  """The ID used to reference the `GlobalNote` in operations."""
  id: ID!

  """The user who added this `GlobalNote`."""
  createdBy: User

  """The message of the `GlobalNote`."""
  message: String!

  """The date and time, in ISO 8601 format, the `GlobalNote` was created."""
  createdAt: String

  """The primary entity for the `GlobalNote`."""
  primaryEntity: GlobalNotePrimaryEntity

  """The aggregate entity for the `GlobalNote`."""
  aggregateEntity: GlobalNoteAggregateEntity
}

"""The connection object for a `GlobalNote`"""
type GlobalNoteConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GlobalNoteEdge!]
}

union GlobalNoteConnectionPayload = GlobalNoteConnection | UserError | AccessDeniedError

"""The edge object for a `GlobalNote`"""
type GlobalNoteEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The global note."""
  node: GlobalNote
}

"""The allowable primary entities for creating a `GlobalNote`."""
enum GlobalNotePrimaryEntityType {
  """
  The financial account primary type. When using this type you can resolve global notes on the `FinancialAccount` object.
  """
  FINANCIAL_ACCOUNT

  """
  The account holder card product application primary type. When using this type you can resolve global notes on the `AccountHolderCardProductApplication` object.
  """
  ACCOUNT_HOLDER_CARD_PRODUCT_APPLICATION
}

"""The allowable aggregate entities for creating a `GlobalNote`."""
enum GlobalNoteAggregateEntityType {
  """
  The account holder aggregate type. When using this type you can resolve all global notes on the `AccountHolder`.
  """
  ACCOUNT_HOLDER
}

"""The input type for creating a `CreditLimitChangeRequest`."""
input CreateCreditLimitChangeRequestInput {
  """The identifier for the `FinancialAccount` to review."""
  financialAccountId: ID!

  """Details about the `CreditLimitChangeRequest`."""
  requestedChange: CreditLimitChangeRequestDetailsInput
}

"""
The input type for specifying details about the `CreditLimitChangeRequest`.
"""
input CreditLimitChangeRequestDetailsInput {
  """
  The type of `CreditLimitChangeRequest`, whether `INCREASE` or `DECREASE`.
  """
  requestedChangeType: CreditLimitChangeRequestType

  """
  The requested credit limit. Optional; can be omitted if the credit limit amount will be determined during the review process.
  """
  requestedCreditLimit: AmountInput

  """The type of requestor, whether `CUSTOMER` or `SUBSCRIBER`."""
  requestor: CreditLimitChangeRequestor
}

"""
The input type for approving a credit limit increase for a `CreditLimitChangeRequest`.
"""
input ApproveCreditLimitIncreaseInput {
  """The identifier for the `CreditLimitChangeRequest` to approve."""
  creditLimitChangeRequestId: ID!

  """The credit limit after the review."""
  updatedCreditLimit: AmountInput!

  """
  Details collected about the customer, such as their current debt obligations and annual income.
  """
  customerDetails: CreditLimitChangeRequestCustomerDetailsInput
}

"""
The input type for denying a credit limit increase for a `CreditLimitChangeRequest`.
"""
input DenyCreditLimitIncreaseInput {
  """The identifier for the `CreditLimitChangeRequest` to deny."""
  creditLimitChangeRequestId: ID!

  """
  If the customer requested this credit limit increase, please provide at least one adverse action reason for the deny.
  """
  adverseActionReasons: [AdverseActionCodeInput!]

  """
  Details collected about the customer, such as their current debt obligations and annual income.
  """
  customerDetails: CreditLimitChangeRequestCustomerDetailsInput
}

"""
The input type for approving a credit limit decrease for a `CreditLimitChangeRequest`.
"""
input ApproveCreditLimitDecreaseInput {
  """The identifier for the `CreditLimitChangeRequest` to approve."""
  creditLimitChangeRequestId: ID!

  """The credit limit after the review."""
  updatedCreditLimit: AmountInput

  """If needed, please provide any adverse action reasons for the deny."""
  adverseActionReasons: [AdverseActionCodeInput!]!

  """
  Details collected about the customer, such as their current debt obligations and annual income.
  """
  customerDetails: CreditLimitChangeRequestCustomerDetailsInput
}

"""
The input type for denying a credit limit decrease for a `CreditLimitChangeRequest`.
"""
input DenyCreditLimitDecreaseInput {
  """The identifier for the `CreditLimitChangeRequest` to deny."""
  creditLimitChangeRequestId: ID!

  """
  Details collected about the customer, such as their current debt obligations and annual income.
  """
  customerDetails: CreditLimitChangeRequestCustomerDetailsInput
}

"""The input type for details collected about the customer."""
input CreditLimitChangeRequestCustomerDetailsInput {
  """The current debt obligations amount used for this decision."""
  currentDebtObligations: AmountInput

  """The annual income amount used for this decision."""
  annualIncome: AmountInput

  """
  The annual revenue amount used for this decision. Only applicable for business accounts.
  """
  annualRevenue: AmountInput

  """The external bank balance used for this decision."""
  externalFinancialAccountBalance: AmountInput
}

"""Account Review"""
interface AccountReview {
  """The Global ID of this `AccountReview`."""
  id: ID!

  """The Global ID of the `FinancialAccount` in review."""
  financialAccountId: ID!

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, this was closed."""
  closedAt: String
}

"""
A review of the credit limit on a `FinancialAccount` to either increase or decrease it.
"""
type CreditLimitChangeRequest implements Node & AccountReview {
  """The Global ID of this `CreditLimitChangeRequest`"""
  id: ID!

  """The Global ID of the `FinancialAccount` in review."""
  financialAccountId: ID! @deprecated(reason: "use financialAccount instead")

  """The `FinancialAccount` in review."""
  financialAccount: FinancialAccount

  """The status of the `CreditLimitChangeRequest`."""
  status: CreditLimitChangeRequestStatus

  """The status history of the `CreditLimitChangeRequest`."""
  statusHistory: [CreditLimitChangeRequestStatusHistory!]

  """Details about the `CreditLimitChangeRequest`."""
  requestedChange: CreditLimitChangeRequestDetails

  """The credit limit before the review."""
  existingCreditLimit: Amount

  """The updated credit limit."""
  updatedCreditLimit: Amount

  """Details collected about the customer."""
  customerDetails: CreditLimitChangeRequestCustomerDetails

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, this was closed."""
  closedAt: String
}

"""Details about the requested credit limit change."""
type CreditLimitChangeRequestDetails {
  """
  The type of `CreditLimitChangeRequest`, whether `INCREASE` or `DECREASE`.
  """
  requestedChangeType: CreditLimitChangeRequestType

  """The requested credit limit."""
  requestedCreditLimit: Amount

  """The type of requestor, whether `CUSTOMER` or `SUBSCRIBER`."""
  requestor: CreditLimitChangeRequestor
}

"""Details collected about the customer."""
type CreditLimitChangeRequestCustomerDetails {
  """The current debt obligations amount used for this decision."""
  currentDebtObligations: [Amount!]

  """The annual income amount used for this decision."""
  annualIncome: [Amount!]

  """
  The annual revenue amount used for this decision. Only applicable for business accounts.
  """
  annualRevenue: [Amount!]

  """
  The adverse action reason(s) why an increase request is denied or if a decrease request is approved.
  """
  adverseActionReasons: [AdverseActionReason!]

  """The external bank balance used for this decision."""
  externalFinancialAccountBalance: [Amount!]
}

"""The payload for listing `AccountReview`s for a `FinancialAccount`."""
union AccountReviewConnectionPayload = AccountReviewConnection | UserError | AccessDeniedError

"""The connection type for an `AccountReview`."""
type AccountReviewConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccountReviewEdge!]
}

"""The edge type for an `AccountReview`."""
type AccountReviewEdge {
  """The cursor for this edge to use in pagination."""
  cursor: String!

  """The `AccountReview`."""
  node: AccountReview
}

"""Types that can be returned for `CreditLimitChangeRequest`."""
union CreditLimitChangeRequestPayload = CreditLimitChangeRequest | UserError | AccessDeniedError

"""Types of `CreditLimitChangeRequest`."""
enum CreditLimitChangeRequestType {
  INCREASE
  DECREASE
}

"""Possible `CreditLimitChangeRequest` statuses."""
enum CreditLimitChangeRequestStatus {
  INITIATED
  APPROVED
  DENIED
  CLOSED
  PENDING
  FAILED
}

"""Possible reasons for a `CreditLimitChangeRequestStatus` of `FAILED`."""
enum CreditLimitChangeRequestFailureReason {
  NSF
  OTHER
}

"""`CreditLimitChangeRequest` status history."""
type CreditLimitChangeRequestStatusHistory {
  """The previous status."""
  previousStatus: CreditLimitChangeRequestStatus

  """The new status."""
  newStatus: CreditLimitChangeRequestStatus

  """The date and time when the status changed, in ISO 8601 format."""
  createdAt: String
}

"""Possible requestors of `CreditLimitChangeRequest`."""
enum CreditLimitChangeRequestor {
  CUSTOMER
  SUBSCRIBER
}

"""
An event that occurs when a `CreditLimitChangeRequest` has a change in status.
"""
type CreditLimitChangeRequestStatusChangedEvent {
  """Unique identifier for the `CreditLimitChangeRequest`."""
  creditLimitChangeRequestId: ID

  """The identifier of the `FinancialAccount` associated with this request."""
  financialAccountId: ID

  """The type of change request, whether `INCREASE` or `DECREASE`."""
  creditLimitChangeRequestType: CreditLimitChangeRequestType

  """The status of the change request."""
  creditLimitChangeRequestStatus: CreditLimitChangeRequestStatus

  """Details about a failure status."""
  creditLimitChangeRequestFailureReason: CreditLimitChangeRequestFailureReason

  """The date and time in ISO 8601 format this was created."""
  createdAt: String

  """The date and time in ISO 8601 format this was updated."""
  updatedAt: String
}

"""The possible return types of `revokeAPIKey`."""
union RevokeAPIKeyPayload = APIKey | UserError | AccessDeniedError

"""The possible return types from `createSecretAPIKey`."""
union CreateSecretAPIKeyPayload = APIKey | UserError | AccessDeniedError

"""The possible return types of `updateUser`."""
union UpdateUserPayload = User | UserError | AccessDeniedError

"""The possible return types of `inviteUser`."""
union InviteUserPayload = User | UserError | AccessDeniedError

"""The possible return types of `removeUser`."""
union RemoveUserPayload = User | UserError | AccessDeniedError

"""The possible return types of `generatePaymentCardClientToken`"""
union GeneratePaymentCardClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""The possible return types of `generateDirectDepositDetailClientToken`"""
union GenerateDirectDepositDetailClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""The possible return types of `generateDirectDepositDetailClientToken`"""
union GenerateExternalBankAccountDetailClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""
The possible return types of `generateTokenizeAuthorizedUserClientToken`
"""
union GenerateTokenizeAuthorizedUserClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""
The possible return types of `generateTokenizeAccountHolderClientToken`
"""
union GenerateTokenizeAccountHolderClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""The possible return types of `generateDocumentUploadClientToken`"""
union GenerateDocumentUploadClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""The possible return types of `generatePersonAccountHolderClientToken`"""
union GeneratePersonAccountHolderClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""
The possible return types of `generateBusinessAccountHolderClientToken`
"""
union GenerateBusinessAccountHolderClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""The possible return types of `generatePersonAuthorizedUserClientToken`"""
union GeneratePersonAuthorizedUserClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""The possible return types of `generateSecureDepositClientToken`"""
union GenerateSecureDepositClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""
The possible return types of `generateInitiateSecureDepositClientToken`
"""
union GenerateInitiateSecureDepositClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""
The possible return types of `generateCreateScheduledTransferClientToken`
"""
union GenerateCreateScheduledTransferClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""
The possible return types of `generateFinancialAccountSingleUseClientToken`
"""
union GenerateFinancialAccountSingleUseClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""
The possible return types of `generatePaymentMethodTokenizationClientToken`
"""
union GeneratePaymentMethodTokenizationClientTokenPayload = ClientToken | UserError | AccessDeniedError

"""Data needed to revoke an API Key."""
input RevokeAPIKeyInput {
  """The ID of the API Key to revoke."""
  apiKeyId: ID!
}

"""Data needed to invite a new User."""
input InviteUserInput {
  """E-mail of the user to invite."""
  email: String!

  """
  The list of users' roles that determine a user's permissions within the organization.
  """
  roles: [UserRole!]!
}

"""Data needed to remove a new User."""
input RemoveUserInput {
  """E-mail of the user to remove."""
  email: String!
}

"""Input for updating organization display name."""
input UpdateOrganizationProfileDisplayNameInput {
  """The ID of the organization to update."""
  id: ID!

  """
  The new display name for the Organization profile. This value must be at least one character.
  """
  displayName: String!
}

union UpdateOrganizationProfileDisplayNamePayload = Organization | UserError | AccessDeniedError

"""Details of the Organization"""
type OrganizationProfile {
  """Display name of the Organization."""
  displayName: String

  """The environment for the organization."""
  environment: IntegrationEnvironment

  """Geographic region where organization data is persisted."""
  region: ComputeRegion

  """ID of the Tenant"""
  tenantId: ID

  """The feature permissions for this Organization"""
  featurePermissions(first: Int = 20, after: String): FeaturePermissionConnection
}

"""Organization that an Admin Agent can access."""
type AdminAgentOrganization implements Node {
  """ID of the Organization"""
  id: ID!

  """ID of the Tenant"""
  tenantId: ID!

  """Details of the Organization"""
  profile: OrganizationProfile!

  """Detailed information about the organization"""
  businessDetail: BusinessDetail
}

"""The connection type for APIKey."""
type APIKeyConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [APIKeyEdge!]
}

"""The connection type for User."""
type UserConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge!]
}

"""The edge type for an APIKey."""
type APIKeyEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The API key."""
  node: APIKey
}

"""The edge type for a User."""
type UserEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The User."""
  node: User
}

"""Data needed to login a User."""
input UpdateUserInput {
  """The external ID of the User."""
  externalId: ID

  """The email address of the User."""
  email: String!

  """
  The list of users' roles that determine a user's permissions within the organization. All roles must be present.
  """
  roles: [UserRole!]!
}

"""A human User of the Highnote Platform."""
type User implements Node {
  """The Global ID of the User."""
  id: ID!

  """The email address of the User."""
  email: String

  """
  A list of credentials for the User that can be used to make client-side requests.
  """
  clientCredentials: [UserClientCredential!]

  """
  The list of users' roles that determine a user's permissions within the organization.
  """
  roles: [UserRole!]
}

"""
Types of User Roles, full details can be found [here](https://highnote.com/docs/basics/core-concepts/team-members)
"""
enum UserRole {
  """Unspecified role for users with no role"""
  UNSPECIFIED

  """Admin role. This role gives the user all permissions available"""
  ADMIN

  """
  A role given to an individual who is a developer in your organization. Similar to admin without organization settings permission.
  """
  DEVELOPER

  """
  Support role. This role gives the user permissions for cards, transactions, applications, financial accounts, and account holders.
  """
  SUPPORT

  """
  Finance role. This role gives the user all permissions except developer settings and organization settings.
  """
  FINANCE

  """User role. This is a generic role that should be applied to all users."""
  USER
}

"""
A credential for a User that can be used to make a client-side request. The credential is scoped to a specific Organization the User has access to.
"""
type UserClientCredential {
  """
  A token used to authenticate requests to Highnote's Platform. Set the `Authorization` HTTP header to `Bearer TOKEN`.
  """
  token: String

  """The Organization this credential is scoped to."""
  organization: Organization

  """A list of roles belonging to the user."""
  roles: [UserRole!]!
}

"""Top level Relay compatible input type."""
input CreateSecretAPIKeyInput {
  """Details of the new Secret Key"""
  secretKey: SecretAPIKeyInput!
}

"""Details of the new Secret Key"""
input SecretAPIKeyInput {
  """Human-friendly name of the Secret API Key."""
  name: String!
}

"""Details of an API Key."""
type APIKey implements Node {
  """Global ID"""
  id: ID!

  """Name given to the API Key."""
  name: String

  """
  Non-redacted, secret value. Will only be present after the initial call to create the API Key.
  """
  key: String

  """Redacted, or masked, secret value."""
  redactedKey: String

  """The date and time, in ISO 8601 format, the API Key was revoked."""
  revokedAt: String

  """The date and time, in ISO 8601 format, the API Key was created."""
  createdAt: String
}

"""Input for creating a Payment Card Client Token."""
input GeneratePaymentCardClientTokenInput {
  """The global ID of the Payment Card for this token."""
  paymentCardId: ID!

  """Specify permissions for this token."""
  permissions: [PaymentCardClientTokenPermission!]!
}

"""Input for creating a Direct Deposit Detail Client Token."""
input GenerateDirectDepositDetailClientTokenInput {
  """The global ID of the Direct Deposit Detail for this token."""
  directDepositDetailId: ID!

  """Specify permissions for this token."""
  permissions: [DirectDepositDetailClientTokenPermission!]!
}

"""Input for creating a Direct Deposit Detail Client Token."""
input GenerateExternalBankAccountDetailClientTokenInput {
  """The global ID of the Direct Deposit Detail for this token."""
  externalBankAccountDetailId: ID!

  """Specify permissions for this token."""
  permissions: [ExternalBankAccountDetailClientTokenPermission!]!
}

"""Input for creating a Document Upload Client Token."""
input GenerateDocumentUploadClientTokenInput {
  """The global ID of the Document Upload Session for this token."""
  documentUploadSessionId: ID!

  """Specify permissions for this token."""
  permissions: [DocumentUploadClientTokenPermission!]!
}

"""Input for creating a Person Account Holder Client Token."""
input GeneratePersonAccountHolderClientTokenInput {
  """The global ID of the Person Account holder for this token."""
  accountHolderId: ID!

  """Specify permissions for this token."""
  permissions: [PersonAccountHolderClientTokenPermission!]!
}

"""Input for creating a Business Account Holder Client Token."""
input GenerateBusinessAccountHolderClientTokenInput {
  """The global ID of the Business Account holder for this token."""
  accountHolderId: ID!

  """Specify permissions for this token."""
  permissions: [BusinessAccountHolderClientTokenPermission!]!
}

"""Input for creating a Person Authorized User Client Token."""
input GeneratePersonAuthorizedUserClientTokenInput {
  """The global ID of the Person Authorized User for this token."""
  authorizedUserId: ID!

  """Specify permissions for this token."""
  permissions: [PersonAuthorizedUserClientTokenPermission!]!
}

"""Input for creating a Secure Deposit Client Token."""
input GenerateSecureDepositClientTokenInput {
  """The global ID of the secure deposit transfer."""
  transactionId: ID!

  """Specify permissions for this token."""
  permissions: [SecureDepositClientTokenPermission!]!
}

"""Input for creating a Secure Deposit Client Token."""
input GenerateInitiateSecureDepositClientTokenInput {
  """
  The global ID of financial account.
  
  This must be an external financial account.
  """
  fromFinancialAccountId: ID!

  """
  The global ID of financial account.
  
  This must be an internal financial account.
  """
  toFinancialAccountId: ID!

  """Specify permissions for this token."""
  permissions: [InitiateSecureDepositClientTokenPermission!]!
}

"""Input for a Scheduled Transfer Client Token."""
input GenerateScheduledTransferClientTokenInput {
  """The global ID of the secure deposit transfer."""
  scheduledTransferId: ID!

  """Specify permissions for this token."""
  permissions: [ScheduledTransferClientTokenPermission!]!
}

"""Input for creating a Scheduled Transfer Client Token."""
input GenerateCreateScheduledTransferClientTokenInput {
  """
  The global ID of financial account.
  
  This must be an external financial account.
  """
  fromFinancialAccountId: ID!

  """
  The global ID of financial account.
  
  This must be an internal financial account.
  """
  toFinancialAccountId: ID!

  """Specify permissions for this token."""
  permissions: [CreateScheduledTransferClientTokenPermission!]!
}

"""Details for creating a Single Use Client Token for a Financial Account"""
input GenerateFinancialAccountSingleUseClientTokenInput {
  """The ID of the financial account."""
  financialAccountId: ID!

  """
  An optional arbitrary identifier to be passed to ensure the client token can only be used once.
  
  If not provided, Highnote will generate the nonce on behalf of the integrator.
  
  The `singleUseToken` can be any valid ASCII character and cannot exceed 255 characters.
  """
  singleUseToken: String

  """A set of permissions to be included on the client token."""
  permissions: [GenerateFinancialAccountSingleUseClientTokenPermission!]!
}

"""A token for use in a client-side integration."""
type ClientToken {
  """
  The value to send as an Authorization Bearer header or to provide to the SDK.
  """
  value: String!

  """
  The expiration date for the token in ISO 8601 format.
  
  Tokens expire after 15 minutes.
  """
  expirationDate: String

  """Describes how the client token can be used"""
  usage: ClientTokenUsage
}

"""Permissions for a Direct Deposit Details Client Token"""
enum DirectDepositDetailClientTokenPermission {
  """
  Read `accountNumber` for Direct Deposit Details.
  
  Setting this permission will allow using the token to query for a DirectDepositDetail and read its `restrictedDetails` property.
  """
  READ_RESTRICTED_DETAILS
}

"""Permissions for a Direct Deposit Details Client Token"""
enum ExternalBankAccountDetailClientTokenPermission {
  """
  Read `accountNumber` for Direct Deposit Details.
  
  Setting this permission will allow using the token to query for a DirectDepositDetail and read its `restrictedDetails` property.
  """
  READ_RESTRICTED_DETAILS
}

"""Permissions for a Document Upload Client Token"""
enum DocumentUploadClientTokenPermission {
  """
  Manage the lifecycle of a document upload session.
  
  Setting this permission will allow the using the token to start and end the session. Additionally, the client will be allowed to
  initiate file uploads for the specified session in the token.
  """
  MANAGE_DOCUMENT_UPLOAD_SESSION
}

"""Permissions for a PaymentCard Client Token"""
enum PaymentCardClientTokenPermission {
  """
  Read `number` and `cvv` for Payment Card.
  
  Setting this permission will allow using the token to query for a Payment Card and read its `restrictedDetails` property.
  """
  READ_RESTRICTED_DETAILS

  """
  Setting this permission will allow using the token to set the PIN number for a Payment Card.
  """
  SET_PAYMENT_CARD_PIN

  """Setting this permission will allow managing states for a Payment Card."""
  MANAGE_PAYMENT_CARD

  """
  Setting this permission allow initiating and managing of a card fulfillment.
  """
  MANAGE_CARD_FULFILLMENT

  """
  Read the card fulfillment details.
  
  Setting this permission will allow querying for fulfillment details.
  """
  READ_FULFILLMENT_DETAILS
}

"""Permissions for a `PersonAccountHolder` Client Token"""
enum PersonAccountHolderClientTokenPermission {
  """
  Read the person account holder information.
  
  Setting this permission will allow visibility to the account holder's information.
  """
  READ_PERSON_ACCOUNT_HOLDER_DETAILS
}

"""Permissions for a `BusinessAccountHolder` Client Token"""
enum BusinessAccountHolderClientTokenPermission {
  """
  Read the business account holder information.
  
  Setting this permission will allow visibility to the account holder's information.
  """
  READ_BUSINESS_ACCOUNT_HOLDER_DETAILS
}

"""Permissions for a `PersonAuthorizedUser` Client Token"""
enum PersonAuthorizedUserClientTokenPermission {
  """
  Read the person authorized user information.
  
  Setting this permission will allow visibility to the authorized user's information.
  """
  READ_PERSON_AUTHORIZED_USER_DETAILS
}

"""Permissions for a `InitiateSecureDeposit` Client Token"""
enum SecureDepositClientTokenPermission {
  """
  Setting this permission will enable management of the lifecycle of a secure deposit.
  """
  MANAGE_SECURE_DEPOSIT
}

"""Permissions for a `SecureDeposit` Client Token"""
enum InitiateSecureDepositClientTokenPermission {
  """
  Setting this permission will enable management of the lifecycle of a secure deposit.
  """
  INITIATE_SECURE_DEPOSIT
}

"""Permissions for a `ScheduledTransfer` Client Token"""
enum ScheduledTransferClientTokenPermission {
  """
  Setting this permission will enable management of the lifecycle of a scheduled transfer.
  """
  MANAGE_SCHEDULED_TRANSFER
}

"""Permissions for a `CreateScheduledTransfer` Client Token"""
enum CreateScheduledTransferClientTokenPermission {
  """Setting this permission will enable creation of a scheduled transfer."""
  CREATE_SCHEDULED_TRANSFER
}

"""Permissions for `generateFinancialAccountSingleUseClientToken`"""
enum GenerateFinancialAccountSingleUseClientTokenPermission {
  """Allows issuing a payment card for a financial account"""
  ISSUE_PAYMENT_CARD
}

"""Options for how the client token can be used"""
enum ClientTokenUsage {
  """The client token can be repeatedly used until its expiration date."""
  UNTIL_EXPIRATION

  """
  The client token can only be used once. Once used, the client token is no longer valid.
  
  **Note:**
  
  In the event of a failure to process the request, the client token will be invalidated.
  """
  SINGLE_USE
}

"""The connection object for a `FeaturePermission`"""
type FeaturePermissionConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeaturePermissionEdge!]
}

"""The edge object for a `FeaturePermission`"""
type FeaturePermissionEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The feature permission."""
  node: FeaturePermission
}

"""The `FeaturePermission` interface"""
interface FeaturePermission implements Node {
  """ID of the `FeaturePermission`"""
  id: ID!

  """The entity that created the feature permission"""
  createdBy: String

  """The entity that updated the feature permission"""
  updatedBy: String

  """When the entity was created"""
  createDate: String

  """When the entity was updated"""
  updateDate: String

  """Indicates if the permission is enabled"""
  enabled: Boolean

  """The list of revisions for this feature permission."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): FeaturePermissionRevisionConnection
}

"""The connection object for a `FeaturePermissionRevision`"""
type FeaturePermissionRevisionConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeaturePermissionRevisionEdge!]
}

"""The edge object for a `FeaturePermissionRevision`"""
type FeaturePermissionRevisionEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The feature permission revision."""
  node: FeaturePermissionRevision
}

"""The `FeaturePermissionRevision` interface"""
interface FeaturePermissionRevision implements Node {
  """ID of the `FeaturePermissionRevision`"""
  id: ID!

  """ID of the `FeaturePermission` that this entity is a revision of"""
  featurePermissionId: ID!

  """The entity that created the feature permission"""
  createdBy: String

  """The entity that updated the feature permission"""
  updatedBy: String

  """When the entity was created"""
  createDate: String

  """When the entity was updated"""
  updateDate: String

  """Indicates if the permission is enabled"""
  enabled: Boolean
}

"""The risk application sdk feature permission"""
type RiskApplicationSDK implements FeaturePermission & Node {
  """ID of the `FeaturePermission`"""
  id: ID!

  """The entity that created the feature permission"""
  createdBy: String

  """The entity that updated the feature permission"""
  updatedBy: String

  """When the entity was created"""
  createDate: String

  """When the entity was updated"""
  updateDate: String

  """Indicates if the permission is enabled"""
  enabled: Boolean

  """The list of revisions for this feature permission."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): FeaturePermissionRevisionConnection
}

"""A revision of the risk application sdk feature permission"""
type RiskApplicationSDKRevision implements FeaturePermissionRevision & Node {
  """ID of the `FeaturePermissionRevision`"""
  id: ID!

  """ID of the `FeaturePermission` that this entity is a revision of"""
  featurePermissionId: ID!

  """The entity that created the feature permission"""
  createdBy: String

  """The entity that updated the feature permission"""
  updatedBy: String

  """When the entity was created"""
  createDate: String

  """When the entity was updated"""
  updateDate: String

  """Indicates if the permission is enabled"""
  enabled: Boolean
}

"""
The possible return types from `generateRiskApplicationSDKSessionToken`.
"""
union GenerateRiskApplicationSDKSessionTokenPayload = RiskApplicationSDKSessionToken | AccessDeniedError | UserError

"""Details for creating a `ClientToken` for `generateRiskClientToken`"""
input GenerateRiskClientTokenInput {
  """The session id to correlate with a token."""
  sessionId: String!
}

"""The possible return types from `generateRiskClientToken`."""
union GenerateRiskClientTokenPayload = ClientToken | AccessDeniedError | UserError

"""
Contains the necessary information to pass into the risk application sdk.
"""
type RiskApplicationSDKSessionToken {
  """The session token to be used with the risk application sdk."""
  sessionToken: String
}

"""Input to generate a client token for payment method tokenization"""
input GeneratePaymentMethodTokenizationClientTokenInput {
  """
  Requested permissions for the `GeneratePaymentMethodTokenizationClientToken`
  """
  permissions: [GeneratePaymentMethodTokenizationClientTokenPermission!]!
}

"""Permissions for generating a `PaymentMethodTokenizationClientToken`."""
enum GeneratePaymentMethodTokenizationClientTokenPermission {
  """
  Setting this permission will enable the tokenization of a payment method via the Secure Inputs SDK.
  """
  TOKENIZE_PAYMENT_METHOD
}

"""
The return types when calling `enableCollaborativeApplicationUnderwritingFeature` on a `CardProduct`.
"""
union EnableCollaborativeApplicationUnderwritingFeaturePayload = CardProduct | UserError | AccessDeniedError

"""
The return types when calling `enableCreditCardFeature` on a `CardProduct`.
"""
union EnableCreditCardFeaturePayload = CardProduct | UserError | AccessDeniedError

"""
The return types when calling `updateFinancialAccountBillingCycleConfiguration`.
"""
union UpdateFinancialAccountBillingCycleConfigurationPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when calling `enableOnDemandFundingFeature` on a `CardProduct`.
"""
union EnableOnDemandFundingFeaturePayload = CardProduct | UserError | AccessDeniedError

"""
The return types when calling `enableAuthorizedUserFeature` on a `CardProduct`.
"""
union EnableAuthorizedUserFeaturePayload = CardProduct | UserError | AccessDeniedError

"""
The return types when calling `disableAuthorizedUserFeature` on a `CardProduct`.
"""
union DisableAuthorizedUserFeaturePayload = CardProduct | UserError | AccessDeniedError

"""
The external financial account created while adding bank account for account holder.
"""
union AddExternalBankAccountFromTokenPayload = ExternalFinancialBankAccount | UserError | AccessDeniedError

"""The return types when suspending a card digital wallet token."""
union SuspendCardDigitalWalletTokenPayload = CardDigitalWalletToken | UserError | AccessDeniedError

"""The return types when unsuspending a card digital wallet token."""
union UnsuspendCardDigitalWalletTokenPayload = CardDigitalWalletToken | UserError | AccessDeniedError

"""The return types when terminating a card digital wallet token."""
union TerminateCardDigitalWalletTokenPayload = CardDigitalWalletToken | UserError | AccessDeniedError

"""
The external financial account created for any external financial instrument of account holder.
"""
union ExternalFinancialAccount = ExternalFinancialBankAccount | NonVerifiedExternalUSFinancialBankAccount

"""
The external financial bank account closed while removing bank account for account holder.

The bank account details like routing number, last four and account type will be returned
as response to closeExternalFinancialBankAccount mutation.

Once the external financial bank account is closed, querying will not return bank account details.
"""
union CloseExternalFinancialBankAccountPayload = ExternalFinancialBankAccount | UserError | AccessDeniedError

"""
The return types for finding velocity inter financial account transfer rules
"""
union VelocityInterFinancialAccountTransferRuleConnectionPayload = VelocityInterFinancialAccountTransferRuleConnection | AccessDeniedError

"""The connection type for `VelocityInterFinancialAccountTransferRule`."""
type VelocityInterFinancialAccountTransferRuleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VelocityInterFinancialAccountTransferRuleEdge!]
}

"""The edge type for a `VelocityInterFinancialAccountTransferRule`."""
type VelocityInterFinancialAccountTransferRuleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `VelocityInterFinancialAccountTransferRule`."""
  node: VelocityInterFinancialAccountTransferRule
}

"""The details to add the bank account for account holder."""
input AddExternalBankAccountFromTokenInput {
  """The Global ID of the account holder for whom bank account is added."""
  accountHolderId: ID!

  """
  The external token that can be used to fetch bank account details of account holder.
  """
  externalToken: ExternalTokenInput!
}

"""
The external token that can be used to fetch bank account details of account holder.
"""
input ExternalTokenInput {
  """
  A token provided by a third-party (e.g. Plaid) that Highnote can use to securely fetch an account holder's bank details.
  """
  value: String!
}

"""The details needed in order to add an external bank account via Plaid."""
input AddExternalBankAccountVerifiedThroughPlaidInput {
  """The Global ID of the account holder for whom bank account is added."""
  accountHolderId: ID!

  """
  The external token that can be used to fetch bank account details of account holder.
  """
  externalToken: ExternalTokenInput!
}

"""
The input type to add an external bank account via a Third Party and Plaid.
"""
input AddExternalBankAccountVerifiedThroughPlaidUsingThirdPartyProcessorTokenInput {
  """
  The card product associated with this request. This mutation is only usable for specific products within the `CONSUMER_CREDIT` vertical.
  """
  cardProductId: ID!

  """The Global identifier of the relevant account holder."""
  accountHolderId: ID!

  """The Highnote processor token provided by Plaid."""
  externalToken: ExternalTokenInput!

  """The Third Party processor token provided by Plaid."""
  thirdPartyProcessorToken: ExternalTokenInput!
}

"""
The details needed in order to add an external bank account via Finicity.
"""
input AddExternalBankAccountVerifiedThroughFinicityInput {
  """The Global ID of the account holder for whom bank account is added."""
  accountHolderId: ID!

  """
  The account name from the institution that Finicity's Get Customer Account API must return.
  """
  name: String!

  """The type of bank account (Checking or Savings)"""
  bankAccountType: BankAccountType!

  """
  The external token that can be used to fetch bank account details of account holder.
  """
  externalToken: ExternalTokenFinicityInput!
}

"""Input for retrieving a link token."""
input GenerateVerifiedExternalBankAccountLinkTokenInput {
  """The global ID of the Person Account holder for this token."""
  accountHolderId: ID!

  """
  Optional link experience configuration. Highnote will default the integration to WEB_SDK if it is not provided.
  """
  linkExperience: VerifiedExternalBankAccountLinkExperience
}

"""Link experience configuration."""
input VerifiedExternalBankAccountLinkExperience {
  """The type of link experience."""
  flow: VerifiedExternalBankAccountLinkExperienceFlow!

  """
  An optional redirect URI used in the success callback.
  If a value is provided, it must match the configured URI in the Highnote platform.
  If no value is provided, we will use the configuration that matches the specified flow.
  """
  redirectUri: String
}

"""The type of link experience."""
enum VerifiedExternalBankAccountLinkExperienceFlow {
  """Used to support link experience in the browser."""
  WEB_SDK

  """Used to support link experience on IOS device."""
  IOS_SDK

  """Used to support link experience on Android device."""
  ANDROID_SDK

  """Used to support hosted link experience in the browser."""
  WEB_HOSTED
}

"""
The Finicity token that can be used to fetch bank account details of account holder.
"""
input ExternalTokenFinicityInput {
  """Proof of user consent to share financial data with Highnote."""
  receiptId: ID!

  """
  A pseudo customer ID that Highnote will use to retrieve data via Finicity's 3PA integration.
  """
  customerId: ID!

  """
  An array of products/api-endpoints that Highnote can use to retrieve users' financial data.
  """
  products: [FinicityProduct!]
}

"""
A single product/api-endpoint that Highnote can use to retrieve users' financial data.
"""
input FinicityProduct {
  """A specific product type represented by an api endpoint."""
  productType: FinicityProductType!

  """
  A pseudo account ID that Highnote will use to retrieve data via Finicity's 3PA integration.
  """
  accountId: ID!

  """A limit on how many times an api can be called."""
  callLimit: Int!

  """A time range that an api can be accessed."""
  expirationDetail: ExpirationDetail!
}

"""A time range that an api can be accessed."""
input ExpirationDetail {
  """
  The start date and time, in ISO 8601 format, that an API can be accessed.
  """
  start: String!

  """
  The end date and time, in ISO 8601 format, that an API can be accessed.
  """
  expiry: String!
}

"""A specific product type represented by an api endpoint."""
enum FinicityProductType {
  """Retrieves a customer's ACH routing and account numbers."""
  ACH_DETAILS

  """Retrieves a customer's up-to-date account balance."""
  CURRENT_BALANCE

  """
  Retrieves the latest cached available and cleared account balances for a single customer account.
  Faster than CURRENT_BALANCE.
  """
  APPROXIMATE_BALANCE

  """
  Retrieves the names and addresses of the account owner from a financial institution.
  """
  ACH_OWNER_DETAILS
}

"""The input to suspend a card digital wallet token."""
input SuspendCardDigitalWalletTokenInput {
  """The ID of the card digital wallet token to suspend."""
  cardDigitalWalletTokenId: ID!

  """The reason for the card digital wallet token to be suspended."""
  reason: SuspendCardDigitalWalletTokenReason!
}

"""The input to unsuspend a card digital wallet token."""
input UnsuspendCardDigitalWalletTokenInput {
  """The ID of the card digital wallet token to reactivate."""
  cardDigitalWalletTokenId: ID!

  """The reason for the card digital wallet token to be reactivated."""
  reason: UnsuspendCardDigitalWalletTokenReason!
}

"""The input to terminate a card digital wallet token."""
input TerminateCardDigitalWalletTokenInput {
  """The ID of the card digital wallet token to terminate."""
  cardDigitalWalletTokenId: ID!

  """The reason for the card digital wallet token to be terminated."""
  reason: TerminateCardDigitalWalletTokenReason!
}

"""Reasons for a card digital wallet token to be suspended."""
enum SuspendCardDigitalWalletTokenReason {
  """Device is reported as lost."""
  DEVICE_LOST

  """Device is reported as stolen."""
  DEVICE_STOLEN

  """
  Fraudulent transactions have been reported by `Highnote` or the account holder.
  """
  FRAUDULENT_TRANSACTIONS

  """Any other reason for suspending the card digital wallet token."""
  OTHER
}

"""Reasons for a card digital wallet token to be unsuspended/reactivated."""
enum UnsuspendCardDigitalWalletTokenReason {
  """A lost or stolen device has been found or recovered."""
  DEVICE_FOUND

  """
  After reviewing transaction history,
  the account holder or `Highnote` confirmed that there were no fraudulent transactions.
  """
  NON_FRAUDULENT_TRANSACTIONS

  """Any other reason for reactivating the card digital wallet token."""
  OTHER
}

"""Reasons for a card digital wallet token to be terminated."""
enum TerminateCardDigitalWalletTokenReason {
  """Device is reported as lost."""
  DEVICE_LOST

  """Device is reported as stolen."""
  DEVICE_STOLEN

  """
  Fraudulent transactions have been reported by `Highnote` or the account holder.
  """
  FRAUDULENT_TRANSACTIONS

  """Account holder has been deleted."""
  ACCOUNT_HOLDER_DELETED

  """Any other reason for terminating the card digital wallet token."""
  OTHER
}

"""States of a card digital wallet token."""
enum CardDigitalWalletTokenState {
  """
  The initial state of the card digital wallet token. The card digital wallet token is not yet available for use.
  """
  REQUESTED

  """
  The card digital wallet token has been provisioned and is available for transaction use.
  """
  ACTIVE

  """
  The card digital wallet token has been blocked from transaction use and action may be required by the account holder.
  Card digital wallet token can be suspended by the Issuer, Program owner, or Account holder.
  """
  SUSPENDED

  """
  The card digital wallet token has been deleted and is no longer available for transaction use.
  """
  TERMINATED
}

"""A reason for a card digital wallet token state transition."""
enum CardDigitalWalletTokenStateReason {
  """
  Account holder successfully authenticated with an activation method (activation
  code by text message, email, Issuer mobile application, etc.) prior to activation.
  """
  ACTIVATION_METHOD

  """Account holder called customer agent for verification."""
  CUSTOMER_SERVICE_AGENT

  """Device was reported as lost."""
  DEVICE_LOST

  """Device was reported as stolen."""
  DEVICE_STOLEN

  """
  Fraudulent transactions have been reported by `Highnote` or the account holder.
  """
  FRAUDULENT_TRANSACTIONS

  """A lost or stolen device has been found or recovered."""
  DEVICE_FOUND

  """
  After reviewing transaction history,
  the account holder or `Highnote` confirmed that there were no fraudulent transactions.
  """
  NON_FRAUDULENT_TRANSACTIONS

  """Account holder account closed."""
  ACCOUNT_CLOSED

  """Account holder has been deleted."""
  ACCOUNT_HOLDER_DELETED

  """State changed based on Card Network request."""
  NETWORK_INITIATED

  """Any other reason for the card digital wallet token state change."""
  OTHER
}

"""
The details to close the external financial bank account for account holder.
"""
input CloseExternalFinancialBankAccountInput {
  """The Global ID of the external financial bank account to be closed."""
  externalFinancialBankAccountId: ID!
}

"""The details of the Payment Card to activate."""
input ActivatePaymentCardInput {
  """The ID of the Payment Card to activate."""
  paymentCardId: ID!
}

"""The return types when activating a Payment Card."""
union ActivatePaymentCardPayload = PaymentCard | UserError | AccessDeniedError

"""The details of the Payment Card to suspend."""
input SuspendPaymentCardInput {
  """The ID of the Payment Card to suspend."""
  paymentCardId: ID!
}

"""The return types when suspending a Payment Card."""
union SuspendPaymentCardPayload = PaymentCard | UserError | AccessDeniedError

"""The details of the Payment Card to close."""
input ClosePaymentCardInput {
  """The ID of the Payment Card to close."""
  paymentCardId: ID!
}

"""The return types when closing a Payment Card."""
union ClosePaymentCardPayload = PaymentCard | UserError | AccessDeniedError

"""The details of the Card Product name change."""
input UpdateCardProductNameInput {
  """The ID of the Card Product to update."""
  cardProductId: ID!

  """
  The value to update the name to.
  
  Maximum length is 50 characters.
  """
  name: String!
}

"""Details for issuing a Payment Card against an Application."""
input IssuePaymentCardForApplicationInput {
  """
  The ID of the application to issue this Payment Card against.
  
  **Note:** The Application must be APPROVED.
  """
  applicationId: ID!

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """Options for the newly issued Payment Card."""
  options: IssuePaymentCardOptionsInput!

  """The `CustomFields` for the Payment Card."""
  customFields: [CustomFieldInput!]
}

"""
Details for issuing a Payment Card against an Authorized User Application.
"""
input IssuePaymentCardForAuthorizedUserApplicationInput {
  """
  The ID of the authorizecd user application to issue this Payment Card against.
  
  **Note:** The Application must be APPROVED.
  """
  applicationId: ID!

  """Options for the newly issued Payment Card."""
  options: IssuePaymentCardOptionsInput!

  """The `CustomFields` for the Payment Card."""
  customFields: [CustomFieldInput!]
}

"""Details for issuing a Payment Card against Financial Account."""
input IssuePaymentCardForFinancialAccountInput {
  """
  The ID of the financial account to issue this Payment Card against.
  
  **Note:** The Financial Account must have a payment card feature enabled.
  """
  financialAccountId: ID!

  """Options for the newly issued Payment Card."""
  options: IssuePaymentCardOptionsInput!

  """The `CustomFields` for the Payment Card."""
  customFields: [CustomFieldInput!]

  """
  A value to distinguish unique `IssuePaymentCardForFinancialAccount` request.
  This helps prevent duplicate cards from be issued. If a failure happens and it is unclear
  if an issue payment card request went through, it is safe to repeat the request with the same idempotency key.
  If card has already been issued, the request will be deduped and the original payment card response will be
  returned instead.
  
  **Minimum length:** 10 characters
  **Maximum length:** 255 characters
  """
  idempotencyKey: IdempotencyKey
}

"""Details for issuing a Financial Account against an Application."""
input IssueFinancialAccountForApplicationInput {
  """
  The ID of the application to issue this Financial Account against.
  
  **Note:** The Application must be APPROVED.
  """
  applicationId: ID!

  """
  Externally provided ID (255 character limit) that is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The name of the Financial Account."""
  name: String!

  """The `CustomFields` for the Financial Account."""
  customFields: [CustomFieldInput!]

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
Details for issuing a Financial Account against an on-demand funding source.
"""
input IssueFinancialAccountForApplicationWithOnDemandFundingSourceInput {
  """
  The ID of the application to issue this Financial Account against.
  
  **Note:** The Application must be APPROVED.
  """
  applicationId: ID!

  """
  The source `FinancialAccount` that will act as the on-demand funding source for this `FinancialAccount`.
  """
  sourceFinancialAccountId: ID!

  """
  Externally provided ID (255 character limit) that is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The name of the Financial Account."""
  name: String!

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
Details for issuing a `PaymentCard` against an on-demand funding source.
"""
input IssuePaymentCardForApplicationWithOnDemandFundingSourceInput {
  """
  The ID of the application to issue this `PaymentCard` against.
  
  **Note:** The Application must be APPROVED.
  """
  applicationId: ID!

  """
  The source `FinancialAccount` that will act as the on-demand funding source for this `PaymentCard`.
  """
  sourceFinancialAccountId: ID!

  """
  Externally provided ID (255 character limit) that is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey

  """Options for the newly issued `PaymentCard`."""
  options: IssuePaymentCardOptionsInput!
}

"""
Details for issuing a Funding Financial Account against an Application.
"""
input IssueFundingFinancialAccountForApplicationInput {
  """
  The ID of the application to issue this Financial Account against.
  
  **Note:** The Application must be APPROVED.
  """
  applicationId: ID!

  """The name of the Financial Account."""
  name: String!
}

"""
Details for issuing an Employer Financial Account against a Card Product.
"""
input IssueEmployerFinancialAccountForCardProductInput {
  """The ID of the Card Product to update."""
  cardProductId: ID!

  """
  The name of the Employer Advanced Account.
  **Minimum length:** 1 character
  **Maximum length:** 50 characters
  **Allowed characters:** All characters
  """
  name: String!

  """
  The companyIdentifier associated with Employer Advanced Account.
  **Maximum length:** 50 characters
  **Allowed characters:** All characters
  """
  companyIdentifier: String
}

"""Options for the newly issued Payment Card."""
input IssuePaymentCardOptionsInput {
  """
  The exact date and time the payment card will expire. e.g. 2026-01-01T23:59:59Z
  """
  expirationDate: String!

  """
  Whether or not to activate the card when created. If **not** activated on creation, the card must be activated separately before use.
  """
  activateOnCreate: Boolean!

  """
  The card profile set containing the card profile to use for the newly issued Payment Card.
  """
  cardProfileSetId: ID

  """
  Externally provided ID (255 character limit) that is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String
}

"""
Representation of `IssuePaymentCardOptionsInput`.

`IssuePaymentCardOptionsDetail` is used to safely return the values provided in `IssuePaymentCardOptionsInput`
"""
type IssuePaymentCardOptionsDetail {
  """
  The exact date and time the payment card will expire. e.g. 2026-01-01T23:59:59Z
  """
  expirationDate: String

  """
  Whether or not to activate the card when created. If **not** activated on creation, the card must be activated separately before use.
  """
  activateOnCreate: Boolean

  """The card profile set"""
  cardProfileSet: CardProfileSet
}

"""Details for issuing a new Payment Card based on an existing card."""
input ReissuePaymentCardInput {
  """
  The ID of the card to issue this Payment Card against.
  
  **Note:** The card cannot be CLOSED.
  """
  originalPaymentCardId: ID!

  """Options for the newly issued Payment Card."""
  options: ReissuePaymentCardOptionsInput!

  """The `CustomFields` for the Payment Card."""
  customFields: [CustomFieldInput!]

  """
  A value to distinguish unique reissue request.
  
  This helps prevent duplicate cards from be reissued. If a failure happens and it is unclear
  if a reissue payment card request went through, it is safe to repeat the request with the same idempotency key.
  If the reissue process has already happened, the request will be deduped and the original response will be
  returned instead.
  
  **Minimum length:** 10 characters
  **Maximum length:** 255 characters
  """
  idempotencyKey: IdempotencyKey
}

"""Options for the newly issued Payment Card."""
input ReissuePaymentCardOptionsInput {
  """
  The exact date and time the payment card will expire. e.g. 2026-01-01T23:59:59Z
  If copying the number, cannot be in the same month/year (in UTC timezone) as the original card.
  """
  expirationDate: String!

  """
  Whether or not to activate the card when created. If **not** activated on creation, the card must be activated separately before use.
  """
  activateOnCreate: Boolean!

  """
  Options for specifying which attributes of the original card should be copied.
  If not specified, no attributes will be copied.
  """
  reissueFeatures: ReissuePaymentCardFeaturesInput

  """The reason why a card is being reissued"""
  reason: ReissueReason

  """The date on which the card was lost. e.g. 2026-01-01T23:59:59Z"""
  cardLostDate: String
}

"""
Options for specifying which attributes of the original card should be copied.
"""
input ReissuePaymentCardFeaturesInput {
  """
  Whether or not to copy the number from the original card. False if not specified.
  """
  copyNumber: Boolean

  """
  Whether or not to copy the pin from the original card. False if not specified.
  """
  copyPin: Boolean
}

"""The details of the Card Product name change."""
input UpdateFinancialAccountNameInput {
  """The ID of the Financial Account to update."""
  financialAccountId: ID!

  """The value to update the name to."""
  name: String!
}

"""The return types when updating a Card Product name."""
union UpdateCardProductNamePayload = CardProduct | UserError | AccessDeniedError

"""
The return types when creating a new Payment Card against an Application.
"""
union IssuePaymentCardForApplicationPayload = PaymentCard | UserError | AccessDeniedError

"""
The return types when creating a new Payment Card against a Financial Account.
"""
union IssuePaymentCardForFinancialAccountPayload = PaymentCard | UserError | AccessDeniedError

"""
The return types when creating a new Financial Account against an Application.
"""
union IssueFinancialAccountForApplicationPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when creating a new Financial Account with an on-demand funding source.
"""
union IssueFinancialAccountForApplicationWithOnDemandFundingSourcePayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when creating a new `PaymentCard` with an on-demand funding source.
"""
union IssuePaymentCardForApplicationWithOnDemandFundingSourcePayload = PaymentCard | UserError | AccessDeniedError

"""
The return types when creating a new Funding Financial Account against an Application.
"""
union IssueFundingFinancialAccountForApplicationPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when creating a new Financial Account against an Application.
"""
union IssueEmployerFinancialAccountForCardProductPayload = EmployerFinancialAccount | UserError | AccessDeniedError

"""
The return types when creating a new Payment Card based on an existing card.
"""
union ReissuePaymentCardPayload = PaymentCard | UserError | AccessDeniedError

"""The return types when updating a Financial Account name."""
union UpdateFinancialAccountNamePayload = FinancialAccount | UserError | AccessDeniedError

"""A Payment Card which can be used for card transactions."""
type PaymentCard implements Node {
  """Global ID used to reference the Payment Card in operations."""
  id: ID!

  """
  Externally provided ID (255 character limit) that is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """
  The Bank Identification Number of the Payment Card. Usually the first 6 digits of the primary account number (PAN).
  """
  bin: String

  """The last four digits of the primary account number (PAN)."""
  last4: String

  """The exact date and time in UTC when the payment card expires."""
  expirationDate: String

  """
  The expiration month to display to the card holder. This value would be printed on the physical card.
  """
  expirationMonth: String

  """
  The expiration year to display to the card holder. This value would be printed on the physical card.
  """
  expirationYear: String

  """The card network that issued the Payment Card."""
  network: PaymentCardNetwork

  """The Card Product associated to the Payment Card."""
  cardProduct: CardProduct

  """The `CardProductApplication` used to issue this Payment Card."""
  cardProductApplication: CardProductApplication

  """The Card Product Application used to issue this Payment Card."""
  application: AccountHolderCardProductApplication @deprecated(reason: "Use `cardProductApplication` instead.")

  """The current status of the Payment Card."""
  status: PaymentCardStatus

  """Whether the card is `PHYSICAL` or `VIRTUAL`"""
  formFactor: CardFormFactor

  """The Payment card from which this card was reissued."""
  originalPaymentCard: PaymentCard

  """
  The decrypted values for this this card.
  
  **Note:** This is only available to users/organizations who have provided an AOC (attestation of compliance).
  """
  restrictedDetails: PaymentCardRestrictedDetailsResult

  """Search ATM locations for the Payment Card."""
  atmLocations(
    """
    Search for ATM locations based on a radius.
    
    **Note:** Use a radius when a coordinate location is available.
    """
    radius: ATMLocationRadiusInput

    """
    Search for ATM locations based on a viewport.
    
    **Note:** Use a viewport when searching within a boxed area.
    """
    viewport: ATMLocationViewportInput

    """Filters ATM locations based on available features"""
    atmFilter: ATMLocationFilterInput

    """
    The number of ATM locations to return.
    
    Default `limit` is set to `50`.
    
    Max `limit` is `50`.
    """
    limit: Int = 50
  ): AtmLocationsResult

  """The Transaction Events that occurred on this Payment Card."""
  transactionEvents(
    """The number of Transaction Events to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """
    Filter results to specific Transaction Events.
    
    For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
    """
    filterBy: PaymentCardTransactionEventsFilterInput
  ): TransactionEventConnection

  """The financial accounts backing this Payment Card."""
  financialAccounts: [FinancialAccount!]

  """The physical card orders for the Payment Card."""
  physicalPaymentCardOrders: [PhysicalPaymentCardOrder]

  """The spend rules attached to this Payment Card."""
  attachedSpendRules(
    """The number of Spend Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """Paginated list of card digital wallet tokens associated to a card."""
  cardDigitalWalletTokens(
    first: Int = 10

    """Paginate card digital wallet tokens after the specified record."""
    after: String
  ): CardDigitalWalletTokenConnection

  """The balances of the VelocityRules that pertain to this `PaymentCard`"""
  velocityRuleBalances: [VelocityRuleBalance] @deprecated(reason: "Use velocitySpendRuleBalances instead")

  """The balances of the VelocityRules that pertain to this `PaymentCard`"""
  velocitySpendRuleBalances: [VelocitySpendRuleBalance]

  """The velocity rules attached to this Payment Card."""
  attachedVelocityRules(
    """The number of Velocity Rules to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityRuleConnection

  """
  The billing address for AVS, identity of payment card holder and the associated account details.
  """
  paymentCardHolderDetails: PaymentCardHolderDetails

  """The customFields associated with this `PaymentCard`."""
  customFields: [CustomField!]

  """A paginated list of snapshotted revisions made to this `PaymentCard`."""
  revisionSnapshots(
    """The number of revision snapshots to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): PaymentCardSnapshotConnection

  """The `CardProfileSet` used to issue this `PaymentCard`."""
  cardProfileSet: CardProfileSet

  """PIN details for this `PaymentCard`."""
  pinDetails: PaymentCardPinDetails

  """The suspension flags on the `PaymentCard`."""
  suspensionFlags: [PaymentCardSuspensionFlag!]

  """The UTC date on which the card was lost. e.g. 2026-01-01T23:59:59Z"""
  cardLostDate: String

  """The external physical card orders for the Payment Card."""
  externalPhysicalPaymentCardOrders: [ExternalPhysicalPaymentCardOrder!]
}

"""PIN details for the `PaymentCard`."""
type PaymentCardPinDetails {
  """Denotes whether the `PaymentCard` has a PIN set."""
  isSet: Boolean

  """List of PIN updates."""
  pinUpdateHistory: [PaymentCardPinUpdate!]
}

"""Update details for the `PaymentCardPinDetails`."""
type PaymentCardPinUpdate {
  """The date and time, in ISO 8601 format, the PIN was updated."""
  updatedAt: String
}

"""A snapshot of the `PaymentCard` at the time of a transaction event."""
type PaymentCardSnapshot implements Node {
  """Global ID used to reference the `PaymentCardSnapshot`."""
  id: ID!

  """
  Source card for the `PaymentCard` if replaced. When this happens, a new card ID is generated.
  The source card tells us that card A came from card B through this attribute.
  """
  sourceCard: PaymentCard

  """The exact date and time in UTC when the `PaymentCard` expires."""
  expirationDate: String

  """
  The expiration month to display to the card holder. This value would be printed on the physical card.
  """
  expirationMonth: String

  """
  The expiration year to display to the card holder. This value would be printed on the physical card.
  """
  expirationYear: String

  """The status of the card when the snapshot was captured."""
  status: PaymentCardStatus

  """The reason for the status change."""
  statusChangeReason: PaymentCardStatusChangeReason

  """Memo for the change."""
  statusChangeMemo: String

  """Whether the card is `MULTI_USE` or `SINGLE_USE`."""
  usage: CardUsage

  """Whether the card is `PHYSICAL` or `VIRTUAL`."""
  formFactor: CardFormFactor

  """
  The date and time, in ISO 8601 format, when this snapshot was updated.
  This is also the date that the `PaymentCard` was modified.
  """
  updatedAt: String

  """
  The date and time, in ISO 8601 format, when this snapshot was created.
  This is also the date that the `PaymentCard` was created.
  """
  createdAt: String

  """The `PaymentCard`."""
  paymentCardCurrent: PaymentCard

  """The UTC date on which the card was lost. e.g. 2026-01-01T23:59:59Z"""
  cardLostDate: String
}

"""The connection type for `PaymentCardSnapshotConnection`."""
type PaymentCardSnapshotConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentCardSnapshotEdge!]
}

"""The edge type for a `PaymentCardSnapshot`."""
type PaymentCardSnapshotEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The details of the revision made to a `PaymentCard`."""
  node: PaymentCardSnapshot
}

"""A Card Digital Wallet Token which can be used for a card transactions."""
type CardDigitalWalletToken implements Node {
  """Global ID used to reference the Digital Wallet Token in operations."""
  id: ID!

  """The current status of the Digital Wallet Token."""
  status: CardDigitalWalletTokenState

  """
  The date and time, in ISO 8601 format, the Digital Wallet Token was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the Digital Wallet Token was last updated.
  """
  updatedAt: String

  """The name of the requester the Digital Wallet Token was created for."""
  requesterName: String

  """
  Paginated list of card digital wallet token state transitions associated to a token.
  """
  cardDigitalWalletTokenStateTransitions(
    first: Int = 10

    """
    Paginate card digital wallet token state transitions after the specified record.
    """
    after: String
  ): CardDigitalWalletTokenStateTransitionConnection

  """The `PaymentCard` that is associated to the `CardDigitalWalletToken`"""
  paymentCard: PaymentCard

  """The Card Digital Wallet Token type."""
  tokenType: CardDigitalWalletTokenType

  """The Card Digital Wallet Token source entry method."""
  sourceEntryMethod: CardDigitalWalletTokenSourceEntryMethod

  """
  The verification methods used to activate the Card Digital Wallet Token.
  """
  verificationMethods: [CardDigitalWalletTokenVerificationMethod!]

  """
  Additional Card Digital Wallet Token information.
  This field is restricted to Highnote internal users only.
  """
  additionalTokenInformation: CardDigitalWalletTokenAdditionalInformationRestricted
}

"""The possible owners of a `FinancialAccount`"""
union FinancialAccountOwner = Organization | PaymentCard | USPersonAccountHolder | USBusinessAccountHolder

"""An internal or external financial account."""
union AllFinancialAccount = FinancialAccount | ExternalFinancialBankAccount | NonVerifiedExternalUSFinancialBankAccount

"""The possible application types"""
union CardProductApplication = AccountHolderCardProductApplication | AuthorizedUserCardProductApplication

"""The connection type for `FinancialAccountSnapshot`."""
type FinancialAccountSnapshotConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinancialAccountSnapshotEdge!]
}

"""The edge type for a `FinancialAccountSnapshot`."""
type FinancialAccountSnapshotEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The details of the revision made to a `FinancialAccount`."""
  node: FinancialAccountSnapshot
}

"""The Attribute of a `FinancialAccount` with a reason."""
type FinancialAccountAttributeWithReason {
  """The attribute of the `FinancialAccount`."""
  attribute: FinancialAccountAttribute!

  """The reason for the attribute."""
  reason: FinancialAccountAttributeReason
}

"""
The initial details of the `FinancialAccount` before the revision was applied.
"""
type FinancialAccountSnapshot implements Node {
  """Global ID used to reference the `FinancialAccountSnapshot`."""
  id: ID!

  """The `FinancialAccount` that this is a revision of."""
  financialAccount: FinancialAccount

  """The attributes of the `FinancialAccount`."""
  financialAccountAttributes: [FinancialAccountAttribute!]

  """The status of the `FinancialAccount`."""
  accountStatus: FinancialAccountStatus

  """The card product associated to the `FinancialAccount`."""
  cardProduct: CardProduct

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The name of this account."""
  name: String

  """
  The Card Product Application used to issue this Employer Financial Account.
  """
  application: AccountHolderCardProductApplication @deprecated(reason: "Use cardProductApplication instead.")

  """The Card Product Application used to issue this Financial Account."""
  cardProductApplication: CardProductApplication

  """
  The date and time, in ISO 8601 format, when this snapshot was updated.
  This is also the date that the `FinancialAccount` was modified.
  """
  updatedAt: String

  """
  The date and time, in ISO 8601 format, when this snapshot was created.
  This is also the date that the `FinancialAccount` was created.
  """
  createdAt: String
}

"""
The status of a `FinancialAccount`.

Depending on the `CardProduct` and `FinancialAccountFeature` of this account there may be restrictions placed on the account when the status is anything other than `ACTIVE`.

For more information on `FinancialAccountStatuses` please check the developer documentation.
"""
enum FinancialAccountStatus {
  """The `FinancialAccount` is active and in good standing."""
  ACTIVE

  """
  The `FinancialAccount` is suspended and may have certain restrictions in effect.
  
  There may have been possible fraudulent activity associated with the `FinancialAccount`. The `AccountHolder` may need to contact customer support to resolve these issues prior to the `FinancialAccount` being reinstated.
  """
  SUSPENDED

  """
  The `FinancialAccount` is under review and may have certain restrictions in effect.
  
  There may have been possible fraudulent activity associated with the `FinancialAccount`. The `AccountHolder` may need to contact customer support to resolve these issues prior to the `FinancialAccount` being reinstated.
  """
  UNDER_REVIEW

  """
  The `FinancialAccount` is pending closure and will be restricted until it is closed.
  
  Once a `FinancialAccount` is marked for closure, it cannot be reversed. A `PENDING_CLOSURE` account status may become `CLOSED` when the Issuer completes checks on the account.
  """
  PENDING_CLOSURE

  """
  The Financial Account is Closed.
  
  This is a terminal state and cannot be reversed.
  """
  CLOSED
}

"""
An Attribute of a `FinancialAccount`.

Account Attributes are used to signal specific capability restrictions and/or substatuses.

For more information on `FinancialAccountAttribute` please check the developer documentation.
"""
enum FinancialAccountAttribute {
  """The account is being processed for closure."""
  PENDING_CLOSURE

  """
  The account’s payment is delinquent and may be reported to the credit bureaus as such based on the number of days set on your card product.
  """
  DELINQUENT

  """
  The account is suspended for authorizations for excessive delinquency based on the number of days set on your card product.
  """
  DELINQUENT_SUSPENDED

  """
  The account is charged off and suspended for excessive delinquency based on the number of days set on your card product.
  """
  CHARGE_OFF

  """
  The account is under investigation for unusual electronic funds transfer activity.
  """
  ACH_RISK_HOLD

  """The account is under investigation for suspected fraud."""
  SUSPECTED_FRAUD

  """The account is under investigation for a potential OFAC match."""
  OFAC_WARNING

  """The account is under investigation for potential account takeover."""
  ACCOUNT_TAKEOVER

  """The account is under investigation for potential identity theft."""
  IDENTITY_THEFT

  """The account is suspended due to program owner initiated suspension."""
  PROGRAM_OWNER_INITIATED_SUSPENSION

  """
  The account has been closed with an outstanding balance payable and repayment is required.
  """
  CLOSED_WITH_BALANCE
}

"""
All the possible states that could prevent a `FinancialAccount` from being
closed.
"""
enum AccountClosureBlocker {
  """
  The account holder has funds remaining on their `FinancialAccount` and money
  is due to the account holder. Required ledgers on the account must be $0 for
  the `FinancialAccount` to close.
  """
  ACCOUNT_BALANCE_PAYABLE

  """
  The account holder has funds remaining on their `FinancialAccount` and money
  is owed by the account holder. Required ledgers on the account must be $0 for
  the `FinancialAccount` to close.
  """
  ACCOUNT_BALANCE_RECEIVABLE

  """
  There is a scheduled `ElectronicFundsTransfer` on the account. The
  `ElectronicFundsTransfer` could be either a one time transfer or a recurring
  transfer.
  """
  SCHEDULED_TRANSFER

  """
  The `FinancialAccount` has a pending `ElectronicFundsTransfer` in progress.
  Accounts can be closed when all transfers are in a terminal state, such as
  `PROCESSED` or `FAILED`.
  """
  PENDING_TRANSFER

  """
  There is a pending authorization on the `FinancialAccount`. At least one of
  the 'AUTH', 'DEPOSIT_AUTH', 'REFUND_AUTH', or 'FEE_AUTH' `Ledger`s has a non
  zero balance.
  """
  PENDING_AUTHORIZATION

  """
  The `FinancialAccount` has an active `PaymentCard`. All `PaymentCard`s
  associated with the `FinancialAccount` should have a `PaymentCardStatus` of
  `SUSPENDED` or `CLOSED`.
  """
  ACTIVE_PAYMENT_CARD

  """
  There is no `ExternalFinancialAccount` available to transfer funds out to.
  The `owner` of the `FinancialAccount` must have at least one value in
  its `externalFinancialAccounts` field.
  
  This is currently only supported for `USPersonAccountHolder` and
  `USBusinessAccountHolder` type owners.
  """
  NO_EXTERNAL_FINANCIAL_ACCOUNT

  """
  There is a risk hold on an `ElectronicFundsTransfer` associated with this `FinancialAccount`.
  The 'RISK_HOLD' `Ledger` has a non-zero balance.
  """
  RISK_HOLD

  """
  The line of credit for this `FinancialAccount` has not been closed.
  The 'ACCOUNT_HOLDER_CREDIT_LIMIT' `Ledger` has a non-zero balance.
  """
  OPEN_LINE_OF_CREDIT

  """
  The `FinancialAccount` has an outstanding payroll advance. There is a nonzero balance on the `PAYROLL_ADVANCE_PAYABLE` ledger.
  """
  PAYROLL_ADVANCE_PAYABLE

  """
  The `FinancialAccount` has an active Servicemembers Civil Relief Act notice.
  """
  ACTIVE_SCRA

  """The `FinancialAccount` has an active Military Lending Act notice."""
  ACTIVE_MLA
}

"""
A employee financial account allows you to move money from Employer owned accounts to their customer accounts
"""
type EmployerFinancialAccount implements Node {
  """
  Global ID used to reference the Employer Advance Account in operations.
  """
  id: ID!

  """The name of this account."""
  name: String

  """The owner of this Employer Financial Account"""
  owner: FinancialAccountOwner

  """The Card Product associated to the Employer Financial Account."""
  cardProduct: CardProduct

  """
  The Card Product Application used to issue this Employer Financial Account.
  """
  application: AccountHolderCardProductApplication

  """
  The date and time, in ISO 8601 format, the Employer Financial Account was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the Employer Financial Account was last updated.
  """
  updatedAt: String

  """The list of features for a Employer Financial Account."""
  features: [FinancialAccountFeature!]

  """The company Identifier."""
  companyIdentifier: String
}

"""External financial account for external bank account."""
type ExternalFinancialBankAccount implements Node {
  """
  Global ID used to reference the External Financial Account in operations.
  """
  id: ID!

  """The ledgers backing this financial account."""
  ledgers: [Ledger!]

  """The owner of this financial account"""
  owner: FinancialAccountOwner

  """The name of this account."""
  name: String

  """The provider that Highnote used to verify this bank account."""
  provider: BankVerificationProvider

  """ExternalFinancialBankAccount status."""
  accountStatus: ExternalFinancialAccountStatus

  """The list of features for this financial account."""
  features: [FinancialAccountFeature!]

  """
  The date and time, in ISO 8601 format, the Financial Account was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the Financial Account was last updated.
  """
  updatedAt: String

  """The external bank account added to this external financial account."""
  externalBankAccountDetails: ExternalBankAccountDetail

  """
  A paginated list of Integrator Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated
  """
  integratorInitiatedAchTransfers(
    """The number of Integrator Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Integrator Initiated ACH Transfers."""
    filterBy: IntegratorInitiatedACHTransferFilterInput
  ): ACHTransactionConnection @deprecated(reason: "ACHTransactionConnection is deprecated in favor of IntegratorInitiatedACHTransferConnection and/or ExternallyInitiatedACHTransferConnection.")

  """
  A paginated list of Externally Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated
  """
  externallyInitiatedAchTransfers(
    """The number of Externally Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Externally Initiated ACH Transfers."""
    filterBy: ExternallyInitiatedACHTransferFilterInput
  ): ACHTransactionConnection @deprecated(reason: "ACHTransactionConnection is deprecated in favor of IntegratorInitiatedACHTransferConnection and/or ExternallyInitiatedACHTransferConnection.")

  """
  A paginated list of Integrator Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated, in favor of internalACHTransfers
  """
  integratorInitiatedACHTransfer(
    """The number of Integrator Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Integrator Initiated ACH Transfers."""
    filterBy: IntegratorInitiatedACHTransferFilterInput
  ): IntegratorInitiatedACHTransferConnection

  """
  A paginated list of Integrator Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  integratorACHTransfers(
    """The number of Integrator Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Integrator Initiated ACH Transfers."""
    filterBy: IntegratorInitiatedACHTransferFilterInput
  ): IntegratorInitiatedACHTransferConnection

  """
  A paginated list of Externally Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  
  Deprecated, in favor of externalACHTransfers
  """
  externallyInitiatedACHTransfer(
    """The number of Externally Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Externally Initiated ACH Transfers."""
    filterBy: ExternallyInitiatedACHTransferFilterInput
  ): ExternallyInitiatedACHTransferConnection

  """
  A paginated list of Externally Initiated ACH Transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  externalACHTransfers(
    """The number of Externally Initiated ACH Transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Externally Initiated ACH Transfers."""
    filterBy: ExternallyInitiatedACHTransferFilterInput
  ): ExternallyInitiatedACHTransferConnection

  """
  A paginated list of originated ACH transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  originatedAchTransfers(
    """The number of originated ACH transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific originated ACH transfers."""
    filterBy: OriginatedAchTransferFilterInput
  ): OriginatedAchTransferPayload

  """
  A paginated list of non-originated ACH transfers.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  nonOriginatedAchTransfers(
    """The number of non-originated ACH transfers to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific non-originated ACH transfers."""
    filterBy: NonOriginatedAchTransferFilterInput
  ): NonOriginatedAchTransferPayload

  """
  A paginated list of TransactionEvents.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  transactionEvents(
    """The number of TransactionEvents to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific TransactionEvents."""
    filterBy: TransactionEventsFilterInput
  ): TransactionEventConnection
}

"""Possible features of the Financial Accounts"""
enum FinancialAccountFeatureType {
  """The account and routing number can be used to deposit funds."""
  DIRECT_DEPOSIT

  """Whether or not the Financial Account supports a PrePaid Payment Card."""
  PREPAID_PAYMENT_CARD

  """Whether or not the Financial Account supports a Credit Payment Card."""
  CREDIT_PAYMENT_CARD

  """Whether or not the Financial Account supports a Debit Payment Card."""
  DEBIT_PAYMENT_CARD

  """Whether or not the Financial Account supports Payroll Advance."""
  PAYROLL_ADVANCE

  """
  Whether or not the Financial Account supports Payroll Employer Advance.
  """
  PAYROLL_EMPLOYER_ADVANCE

  """Whether or not the Financial Account supports Product Funding."""
  PRODUCT_FUNDING

  """
  Whether or not the Financial Account supports Negative Balance Reserve.
  """
  NEGATIVE_BALANCE_RESERVE

  """Whether or not the Financial Account supports Product Reserve."""
  PRODUCT_RESERVE

  """Whether or not the Financial Account supports Just-in-time Funding."""
  JUST_IN_TIME_FUNDING

  """
  Whether or not the Financial Account supports a Secured Deposit Funded Credit Payment Card.
  """
  SECURED_CREDIT_PAYMENT_CARD

  """Whether or not the Financial Account supports Point Rewards."""
  POINT_REWARDS

  """Whether or not the Financial Account supports Card Funding."""
  CARD_FUNDING_ACCOUNT

  """
  Whether or not the Financial Account supports the Income Account feature.
  """
  INCOME_ACCOUNT

  """Whether or not the Financial Account supports On-Demand Funding."""
  ON_DEMAND_FUNDING

  """
  Whether or not the `FinancialAccount` supports the repayment account feature.
  """
  REPAYMENT_ACCOUNT

  """
  Whether or not the `FinancialAccount` supports the preprinted card account feature.
  """
  PREPRINTED_CARD

  """
  Whether or not the `FinancialAccount` supports the secured deposit account feature.
  """
  SECURED_DEPOSIT

  """
  Whether or not the `FinancialAccount` supports the product secured deposit account feature.
  """
  PRODUCT_SECURED_DEPOSIT

  """
  Whether or not the `FinancialAccount` supports the merchant settlement account feature.
  """
  MERCHANT_SETTLEMENT

  """
  Whether or not the `FinancialAccount` is associated to the authorized user.
  """
  AUTHORIZED_USER
}

interface FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the Financial Account supports a backing account and routing number.

The account and routing number can be used to deposit funds.
"""
type DirectDepositFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports a PrePaid Payment Card."""
type PrePaidPaymentCardFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports a Debit Payment Card."""
type DebitPaymentCardFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
**Deprecated**. Please use `CreditCardAccountFeature` instead.

Whether or not the Financial Account supports a Credit Payment Card.
"""
type CreditPaymentCardFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean @deprecated(reason: "CreditPaymentCardFinancialAccountFeature is deprecated. Please use CreditCardAccountFeature instead.")

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String @deprecated(reason: "CreditPaymentCardFinancialAccountFeature is deprecated. Please use CreditCardAccountFeature instead.")

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String @deprecated(reason: "CreditPaymentCardFinancialAccountFeature is deprecated. Please use CreditCardAccountFeature instead.")

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String @deprecated(reason: "CreditPaymentCardFinancialAccountFeature is deprecated. Please use CreditCardAccountFeature instead.")

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String @deprecated(reason: "CreditPaymentCardFinancialAccountFeature is deprecated. Please use CreditCardAccountFeature instead.")
}

"""Whether or not the Financial Account supports Payroll Advance."""
type PayrollAdvanceFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the Financial Account supports Payroll Employer Advance.
"""
type PayrollEmployerAdvanceFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
The Negative Reserve is held to cover deficits in the product such as potential over limits, fraud, uncollectible negative balances, and losses due to disputes or network charges. Funds may not be transferred out of the Negative Reserve.
"""
type NegativeBalanceReserveFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
The Product Reserve is held to cover deficits in the product such as card activity settlement. Funds may not be transferred out of the Product Reserve
"""
type ProductReserveFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports Product Funding."""
type ProductFundingFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports Product Income."""
type IncomeAccountFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports Just-in-time Funding."""
type JustInTimeFundingFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean @deprecated(reason: "Access OnDemandFundingFinancialAccountFeature.enabled instead")

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String @deprecated(reason: "Access OnDemandFundingFinancialAccountFeature.createdAt instead")

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String @deprecated(reason: "Access OnDemandFundingFinancialAccountFeature.updatedAt instead")

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String @deprecated(reason: "Access OnDemandFundingFinancialAccountFeature.enabled instead")

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String @deprecated(reason: "Access OnDemandFundingFinancialAccountFeature.enabled instead")
}

"""Whether or not the Financial Account supports On-Demand Funding."""
type OnDemandFundingFinancialAccountFeature implements FinancialAccountFeature {
  """
  The source financial account that will act as the on-demand funding source for this financial account.
  """
  sourceFinancialAccount: FinancialAccount

  """
  The source financial account that will act as the on-demand funding source for this financial account.
  """
  sourceFinancialAccountId: ID @deprecated(reason: "Use sourceFinancialAccount.id instead.")

  """
  Whether or not pseudo balance should be enabled for this financial account.
  """
  pseudoBalanceEnabled: Boolean

  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the Financial Account supports a Secured Credit Deposit funded Credit Payment Card.
"""
type SecuredCreditPaymentCardFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """
  The credit limit on the `SecuredCreditPaymentCardFinancialAccountFeature`
  """
  creditLimit: Amount

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports a Fleet Card."""
type FleetCardAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The credit limit on the `FleetCardAccountFeature`"""
  creditLimit: Amount

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the Financial Account supports a Commercial Credit Pay In Full Card.
"""
type CommercialCreditPayInFullCardAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The credit limit on the `CommercialCreditPayInFullCardAccountFeature`"""
  creditLimit: Amount

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports a Credit Card."""
type CreditCardAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The credit limit on the `CreditCardAccountFeature`"""
  creditLimit: Amount

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports Card Funding."""
type CardFundingFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The credit limit on the `FleetCardAccountFeature`"""
  creditLimit: Amount

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account supports Point Rewards."""
type PointRewardFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account is a Non Verified account"""
type NonVerifiedFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account is a Non Verified account"""
type AchCapableFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the Financial Account is a Non Verified account"""
type VendorProvidedBankFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `FinancialAccount` supports partial funding."""
type PartialFundingFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """
  The maximum aggregate credit distribution limit amount on the `PartialFundingFinancialAccountFeature`
  """
  maximumAggregateCreditDistributionAmount: Amount

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the `FinancialAccount` supports repayment account feature.
"""
type RepaymentFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `FinancialAccount` supports preprinted cards."""
type PreprintedCardFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `FinancialAccount` supports secured deposits."""
type SecuredDepositFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the `FinancialAccount` supports product secured deposits.
"""
type ProductSecuredDepositFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `FinancialAccount` supports merchant settlement."""
type MerchantSettlementFinancialAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `FinancialAccount` is capable of sending checks."""
type CheckCapableAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the Financial Account."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `FinancialAccount` is for an authorized user."""
type AuthorizedUserAccountFeature implements FinancialAccountFeature {
  """Whether or not the feature is enabled for the `FinancialAccount`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String

  """The `FinancialAccount` of primary account holder."""
  primaryAccountHolderAccount: FinancialAccount

  """A reference to the primary account holder."""
  primaryAccountAccountHolderParty: AccountHolder
}

interface CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports collaborative authorization."""
type CollaborativeAuthorizationCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """
  Indicates usage of card product's default settings to determine authorization decision when a `CollaborativeAuthorizationEndpoint` fails to respond.
  """
  issuerStandInEnabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the `CardProduct` supports collaborative app underwriting.
"""
type CollaborativeApplicationUnderwritingCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the `CardProduct` supports Disputes and feature configurations for Dispute and Chargeback restrictions.
"""
type DisputeChargebackCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """
  The minimum `Amount` for a Dispute to qualify for a Chargeback with the Network.
  """
  chargebackMinimumThreshold: Amount

  """
  Whether or not a `Provisional Credit` will be granted when a Chargeback is filed to the Network.
  """
  chargebackProvisionalCreditEnabled: Boolean

  """
  The maximum number of days from the original `TransactionEvent` date that a Transaction can be disputed.
  """
  disputeMaximumDaySinceTransaction: UnsignedInt

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports on demand funding."""
type OnDemandFundingCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """Whether or not pseudo balance is enabled for the `CardProduct`."""
  pseudoBalanceEnabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the `CardProduct` supports Partial funding configurations for unsecured credit product funding.
"""
type PartialFundingCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """
  Whether or not Receivables Purchase Agreement functionality should be used.
  """
  receivablesPurchaseAgreementEnabled: Boolean

  """Whether or not credit processor only functionality should be used."""
  creditProcessorOnlyEnabled: Boolean

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""
Whether or not the `CardProduct` supports early direct deposit feature.
"""
type EarlyDirectDepositCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports Authorized Users."""
type AuthorizedUserCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports revolving."""
type RevolvingCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports charge."""
type ChargeCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports rewards."""
type PointRewardCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports secured deposits."""
type SecuredDepositCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports direct merchant acquiring."""
type DirectMerchantAcquiringCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

"""Whether or not the `CardProduct` supports external business management"""
type ExternalBusinessManagementCardProductFeature implements CardProductFeature {
  """Whether or not the feature is enabled for the `CardProduct`."""
  enabled: Boolean

  """The date and time, in ISO 8601 format, the feature was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the feature was last updated."""
  updatedAt: String

  """The date and time, in ISO 8601 format, the feature was effective from."""
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the feature was effective through.
  """
  effectiveThrough: String
}

union OriginatedAchTransferPayload = OriginatedAchTransferConnection | UserError | AccessDeniedError

union NonOriginatedAchTransferPayload = NonOriginatedAchTransferConnection | UserError | AccessDeniedError

union PaymentCardRestrictedDetailsResult = PaymentCardRestrictedDetails | AccessDeniedError

union DirectDepositDetailRestrictedDetailsResult = DirectDepositDetailRestrictedDetails | AccessDeniedError

"""Value for payment card secure credential."""
type PaymentCardSecureCredentialValue {
  """Value for payment card secure credential."""
  value: String
}

"""Response type for payment card secure credential."""
union PaymentCardSecureCredentialValuePayload = PaymentCardSecureCredentialValue | AccessDeniedError | UserError

"""
Secure credentials of a Payment Card. Specific values will only be made available to specific providers and not provided to all
users/organization who have provided an AOC (attestation of compliance).
"""
type PaymentCardSecureCredentials {
  """The CVC1 (Card Verification Code 1) of the Payment Card."""
  cvc1: PaymentCardSecureCredentialValuePayload

  """The CVC2 (Card Verification Code 2) of the Payment Card."""
  cvc2: PaymentCardSecureCredentialValuePayload

  """The iCvv (Integrated Card Verification Value) of the Payment Card."""
  iCvv: PaymentCardSecureCredentialValuePayload

  """
  The application expiration date of the Payment Card in yyyy-MM-dd format.
  """
  applicationExpirationDate: PaymentCardSecureCredentialValuePayload
}

"""Response type for payment card secure credentials in restricted data."""
union PaymentCardSecureCredentialsPayload = PaymentCardSecureCredentials | AccessDeniedError | UserError

"""
Raw payment card details.

**Note:** This is only available to users/organizations who have provided an AOC (attestation of compliance).
"""
type PaymentCardRestrictedDetails {
  """The primary account number for the payment card."""
  number: String

  """
  The card verification code for the payment card.
  
  [See this link for more](https://en.wikipedia.org/wiki/Card_security_code).
  """
  cvv: String

  """The secure credentails of the Payment Card."""
  secureCredentials: PaymentCardSecureCredentialsPayload
}

"""
A financial instrument with an associated account and routing number.

The direct deposit detail that can be used to deposit funds.
"""
type DirectDepositDetail implements Node {
  """Global ID used to reference the direct deposit detail in operations."""
  id: ID!

  """The decrypted account number for this direct deposit detail."""
  restrictedDetails: DirectDepositDetailRestrictedDetailsResult

  """
  The date and time, in ISO 8601 format, the direct deposit detail was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the direct deposit detail was last updated.
  """
  updatedAt: String
}

"""
A financial instrument with an associated account and routing number.

The direct deposit detail that can be used to deposit funds.

If ExternalFinancialBankAccount is CLOSED then ExternalBankAccountDetail will not be returned except during close mutation.
"""
type ExternalBankAccountDetail implements Node {
  """
  Global ID used to reference the external bank account detail in operations.
  """
  id: ID!

  """The last four digits of bank account number."""
  last4: String

  """The details about the type of bank account."""
  type: BankAccountType

  """The routing number for the bank account."""
  routingNumber: String

  """
  The date and time, in ISO 8601 format, the external bank account detail was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the external bank account detail was last updated.
  """
  updatedAt: String
}

"""Direct deposit details for a financial account."""
type DirectDepositDetailRestrictedDetails {
  """The primary account number for the financial account."""
  number: String

  """The routing number for the financial account."""
  routingNumber: String

  """The details about the backing bank."""
  bank: BankDetails

  """The details about the type of account."""
  type: BankAccountType
}

"""The details about the backing bank."""
type BankDetails {
  """The name of the financial institution."""
  name: BankName

  """The address of the financial institution."""
  address: Address
}

"""The possible bank names."""
enum BankName {
  """The value representing Sutton Bank."""
  SUTTON_BANK
}

"""
The card networks that the Highnote platform uses to issue Payment Cards.
"""
enum PaymentCardNetwork {
  """MASTERCARD"""
  MASTERCARD

  """VISA"""
  VISA
}

"""The provider that Highnote uses to verify bank accounts."""
enum BankVerificationProvider {
  """UNSPECIFIED"""
  UNSPECIFIED

  """SIMULATED"""
  SIMULATED

  """PLAID"""
  PLAID

  """FINICITY"""
  FINICITY

  """PLAID_RESELLER"""
  PLAID_RESELLER
}

"""Possible statuses of a Payment Card."""
enum PaymentCardStatus {
  """The Payment Card needs activation before it can be used successfully."""
  ACTIVATION_REQUIRED

  """The Payment Card is active and ready for use."""
  ACTIVE

  """
  The Payment Card has been suspended and authorizations will fail until the Payment Card is `ACTIVE` again.
  """
  SUSPENDED

  """
  The Payment Card has been closed and all future authorizations will fail.
  """
  CLOSED
}

"""The different reasons for a `PaymentCard` to be reissued"""
enum ReissueReason {
  """The `PaymentCard` expired and needs to be reissued"""
  EXPIRED

  """The `PaymentCard` was lost and needs to be reissued"""
  LOST

  """The `PaymentCard` was stolen and needs to be reissued"""
  STOLEN @deprecated(reason: "If card is stolen, terminate the old card and issue a new card to establish a new card lineage.")

  """The `PaymentCard` needs to be reissued for another reason"""
  OTHER
}

"""The different reasons for a `PaymentCard` status change"""
enum PaymentCardStatusChangeReason {
  """The `PaymentCard` created."""
  CREATED

  """The `PaymentCard` expired."""
  EXPIRED

  """The `PaymentCard` was lost."""
  LOST

  """The `PaymentCard` was stolen."""
  STOLEN

  """The `PaymentCard` state was changed for another reason."""
  OTHER

  """The `PaymentCard` state was changed for unknown reason."""
  UNSPECIFIED
}

"""Types which can be returned for Card Product operations."""
union CreateCardProductPayload = CardProduct | UserError | AccessDeniedError

"""The connection type for Card Product."""
type CardProductConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardProductEdge!]
}

"""The connection type for Payment Card."""
type PaymentCardConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentCardEdge!]
}

"""The connection type for External Financial Account."""
type ExternalFinancialAccountConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExternalFinancialAccountEdge!]
}

"""The connection type for InterFinancialAccountTransfers."""
type InterFinancialAccountTransferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InterFinancialAccountTransferEdge!]
}

"""The edge type for a CardProduct."""
type CardProductEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Card Product."""
  node: CardProduct
}

"""The edge type for a PaymentCard."""
type PaymentCardEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Payment Card."""
  node: PaymentCard
}

"""The edge type for a ExternalFinancialAccount."""
type ExternalFinancialAccountEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The External Financial Account."""
  node: ExternalFinancialAccount
}

"""The edge type for a InterFinancialAccountTransfer."""
type InterFinancialAccountTransferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Inter Financial Account Transfer."""
  node: InterFinancialAccountTransfer
}

"""The result of the ATM Locations."""
union AtmLocationsResult = ATMLocations | AccessDeniedError | UserError

"""A result of ATM locations for a Payment Card."""
type ATMLocations {
  """A list of ATM locations."""
  atmLocations: [ATMLocation!]
}

"""Location details for an ATM (Automated Teller Machine)."""
type ATMLocation {
  """The name of the ATM."""
  name: String

  """A description representing details about the ATM."""
  description: String

  """Details about the ATM location logo."""
  logo: ATMLocationLogoDetails

  """Features available at the ATM."""
  features: [ATMLocationFeature!]

  """The physical address of the ATM."""
  address: Address

  """The coordinates of the ATM."""
  coordinates: Coordinates

  """The relative distance of the ATM."""
  distance: Distance
}

"""Details about the ATM location Logo."""
type ATMLocationLogoDetails {
  """The brand of the ATM location."""
  brand: ATMLocationBrand
}

interface PaymentCardEvent {
  """
  The Bank Identification Number of the Payment Card. Usually the first 6 digits of the primary account number (PAN).
  """
  bin: String

  """The Card Product ID associated to the Payment Card."""
  cardProductId: ID

  """The exact date and time the payment card expires."""
  expirationDate: String

  """The last four digits of the primary account number (PAN)."""
  last4: String

  """The card network that issued the Payment Card."""
  network: PaymentCardNetwork

  """The current status of the Payment Card."""
  status: PaymentCardStatus

  """The previous status of the Payment Card."""
  previousStatus: PaymentCardStatus

  """
  The date and time, in ISO 8601 format that the status of the Payment Card was updated.
  """
  updatedAt: String
}

"""
The PaymentCardActivatedEvent is triggered when a Payment Card has been activated.
"""
type PaymentCardActivatedEvent implements Node & PaymentCardEvent {
  """Global ID used to reference the Payment Card in operations."""
  id: ID!

  """
  The Bank Identification Number of the Payment Card. Usually the first 6 digits of the primary account number (PAN).
  """
  bin: String

  """The Card Product ID associated to the Payment Card."""
  cardProductId: ID

  """The exact date and time the payment card expires."""
  expirationDate: String

  """Whether the card is PHYSICAL or VIRTUAL"""
  formFactor: CardFormFactor

  """The last four digits of the primary account number (PAN)."""
  last4: String

  """The card network that issued the Payment Card."""
  network: PaymentCardNetwork

  """The current status of the Payment Card."""
  status: PaymentCardStatus

  """The previous status of the Payment Card."""
  previousStatus: PaymentCardStatus

  """
  The date and time, in ISO 8601 format that the status of the Payment Card was updated.
  """
  updatedAt: String
}

"""
The PaymentCardSuspendedEvent is triggered when a Payment Card has been suspended.
"""
type PaymentCardSuspendedEvent implements Node & PaymentCardEvent {
  """Global ID used to reference the Payment Card in operations."""
  id: ID!

  """
  The Bank Identification Number of the Payment Card. Usually the first 6 digits of the primary account number (PAN).
  """
  bin: String

  """The Card Product ID associated to the Payment Card."""
  cardProductId: ID

  """The exact date and time the payment card expires."""
  expirationDate: String

  """Whether the card is PHYSICAL or VIRTUAL"""
  formFactor: CardFormFactor

  """The last four digits of the primary account number (PAN)."""
  last4: String

  """The card network that issued the Payment Card."""
  network: PaymentCardNetwork

  """The current status of the Payment Card."""
  status: PaymentCardStatus

  """The previous status of the Payment Card."""
  previousStatus: PaymentCardStatus

  """
  The date and time, in ISO 8601 format that the status of the Payment Card was updated.
  """
  updatedAt: String
}

"""
The PaymentCardUnsuspendedEvent is triggered when a Payment Card has been unsuspended.
"""
type PaymentCardUnsuspendedEvent implements Node & PaymentCardEvent {
  """Global ID used to reference the Payment Card in operations."""
  id: ID!

  """
  The Bank Identification Number of the Payment Card. Usually the first 6 digits of the primary account number (PAN).
  """
  bin: String

  """The Card Product ID associated to the Payment Card."""
  cardProductId: ID

  """The exact date and time the payment card expires."""
  expirationDate: String

  """Whether the card is PHYSICAL or VIRTUAL"""
  formFactor: CardFormFactor

  """The last four digits of the primary account number (PAN)."""
  last4: String

  """The card network that issued the Payment Card."""
  network: PaymentCardNetwork

  """The current status of the Payment Card."""
  status: PaymentCardStatus

  """The previous status of the Payment Card."""
  previousStatus: PaymentCardStatus

  """
  The date and time, in ISO 8601 format that the status of the Payment Card was updated.
  """
  updatedAt: String
}

"""
The PaymentCardClosedEvent is triggered when a Payment Card has been closed.
"""
type PaymentCardClosedEvent implements Node & PaymentCardEvent {
  """Global ID used to reference the Payment Card in operations."""
  id: ID!

  """
  The Bank Identification Number of the Payment Card. Usually the first 6 digits of the primary account number (PAN).
  """
  bin: String

  """The Card Product ID associated to the Payment Card."""
  cardProductId: ID

  """The exact date and time the payment card expires."""
  expirationDate: String

  """Whether the card is PHYSICAL or VIRTUAL"""
  formFactor: CardFormFactor

  """The last four digits of the primary account number (PAN)."""
  last4: String

  """The card network that issued the Payment Card."""
  network: PaymentCardNetwork

  """The current status of the Payment Card."""
  status: PaymentCardStatus

  """The previous status of the Payment Card."""
  previousStatus: PaymentCardStatus

  """
  The date and time, in ISO 8601 format that the status of the Payment Card was updated.
  """
  updatedAt: String
}

"""Details to search for ATM Locations by Radius."""
input ATMLocationRadiusInput {
  coordinates: CoordinatesInput!
  distance: DistanceInput!
}

"""Details to search for ATM Locations by Viewport."""
input ATMLocationViewportInput {
  coordinates: ViewportCoordinatesInput!
}

"""Filters the ATM Locations by available features per location."""
input ATMLocationFilterInput {
  includes: [ATMLocationFeature!]
}

"""An input of coordinates to form a viewport"""
input ViewportCoordinatesInput {
  """A latitude coordinate representing the northern point of the viewport."""
  northernLatitude: String!

  """
  A longitude coordinate representing the northern point of the viewport.
  """
  northernLongitude: String!

  """A latitude coordinate representing the southern point of the viewport."""
  southernLatitude: String!

  """
  A longitude coordinate representing the southern point of the viewport.
  """
  southernLongitude: String!
}

"""Top-level input type."""
input CreateCardProductInput {
  """Details about the Card Product to be created."""
  cardProduct: CardProductInput!
}

"""Details about the Card Product to be created."""
input CardProductInput {
  """Human-friendly name for the Card Product to be created."""
  name: String!

  """
  Whether the cards issued for this product will be `MULTI_USE` or `SINGLE_USE`
  """
  usage: CardUsage!

  """The business use case for the Card Product."""
  vertical: CardProductVertical!
}

"""
The input to configure the Collaborative Application Decisioning product feature.
"""
input EnableCollaborativeApplicationUnderwritingFeatureInput {
  """
  The Global ID of the `CardProduct` for which to enable the Collaborative Application Decisioning product feature.
  """
  cardProductId: ID!
}

"""The input to configure the credit card product feature."""
input EnableCreditCardFeatureInput {
  """
  The Global ID of the `CardProduct` for which to enable the credit card product feature.
  """
  cardProductId: ID!

  """
  Whether the feature assigned to this credit product will be `REVOLVING` or `CHARGE`
  """
  feature: CreditCardProductFeature!
}

"""
The input to update the billing cycle configuration for a `FinancialAccount`.
"""
input UpdateFinancialAccountBillingCycleConfigurationInput {
  """The Global ID of the `FinancialAccount` to update."""
  financialAccountId: ID!

  """
  The day of the month when payment will be due for this `FinancialAccount`. Must be an integer between 1 and 28.
  Must be different from the current due date. Any change will only apply to future billing cycles, not the current open cycle or any past cycles.
  """
  paymentDueDayOfMonth: UnsignedInt!
}

"""The input to configure the On demand product feature."""
input EnableOnDemandFundingFeatureInput {
  """
  The Global ID of the `CardProduct` for which to enable the On Demand product feature.
  """
  cardProductId: ID!

  """
  Whether or not a pseudo balance will be used for maximum spend on `FinancialAccount` associated to a card
  """
  pseudoBalanceEnabled: Boolean!
}

"""The input to enable the authorized user product feature."""
input EnableAuthorizedUserFeatureInput {
  """
  The Global ID of the `CardProduct` for which to enable authorized user product feature.
  """
  cardProductId: ID!
}

"""The input to disable the authorized user product feature."""
input DisableAuthorizedUserFeatureInput {
  """
  The Global ID of the `CardProduct` for which to disable authorized user product feature.
  """
  cardProductId: ID!
}

"""The product vertical for a card."""
enum CardProductVertical {
  """Cards issued to pay for invoices."""
  AP_INVOICE_AUTOMATION

  """Cards issued for commercial prepaid products."""
  COMMERCIAL_PREPAID

  """Cards issued to provide people with advances for earned wages."""
  EARNED_WAGE_ACCESS

  """Cards issued to provide fleet commercial cards."""
  FLEET

  """Cards issued to provide people with general reloadable cards."""
  GENERAL_PURPOSE_RELOADABLE

  """Cards issued to provide secured deposited funded cards."""
  SECURED_COMMERCIAL_CREDIT @deprecated(reason: "The SECURED_COMMERCIAL_CREDIT CardProductVertical is deprecated. Please use COMMERCIAL_CREDIT instead. Please reach out to Highnote support with any questions.")

  """Cards issued to provide commercial debit."""
  COMMERCIAL_DEBIT

  """Cards issued to provide consumer prepaid."""
  CONSUMER_PREPAID

  """Cards issued to proved commercial credit pay in full."""
  COMMERCIAL_CREDIT_PAY_IN_FULL

  """Cards issued for payroll products."""
  PAYROLL

  """Cards issued to provide commercial credit."""
  COMMERCIAL_CREDIT

  """Cards issued to provide consumer credit."""
  CONSUMER_CREDIT

  """
  This `CardProduct` supports acquiring.
  
  This `CardProduct` cannot be used with issuance, and would result in a validation error if it is.
  """
  ACQUIRING
}

"""Whether a card is (or will be) `VIRTUAL` or `PHYSICAL`."""
enum CardFormFactor {
  """A card which can only be used through virtual channels."""
  VIRTUAL

  """
  A card which is issued physically and can be used across multiple channels.
  """
  PHYSICAL
}

"""Whether a card is (or will be) `MULTI_USE` or `SINGLE_USE`."""
enum CardUsage {
  """Cards which can be used more than once."""
  MULTI_USE

  """Cards which can only be used once."""
  SINGLE_USE
}

"""Features available at an ATM Location."""
enum ATMLocationFeature {
  """The ATM is open 24 hours a day."""
  OPEN_24_HOURS

  """The ATM can accept monetary deposits."""
  DEPOSIT_AVAILABLE

  """The ATM is accessible."""
  ACCESSIBLE
}

"""Brands of different ATM providers."""
enum ATMLocationBrand {
  """An ATM that is powered by Money Pass."""
  MONEY_PASS
}

"""Type of bank accounts."""
enum BankAccountType {
  """Checking bank account."""
  CHECKING

  """Saving bank account."""
  SAVINGS
}

"""Type of credit card product feature."""
enum CreditCardProductFeature {
  """Revolving credit."""
  REVOLVING

  """Charge credit."""
  CHARGE
}

"""
A suspension flag on a `PaymentCard`.

Payment Card Suspension Flags are used to denote the type of suspension on a `PaymentCard`.
"""
enum PaymentCardSuspensionFlag {
  """
  The `PaymentCard` has been suspended by Highnote customer or account holder. This suspension can be lifted by Highnote customer or account holder.
  """
  PROGRAM_OWNER_INITIATED_SUSPENSION

  """
  The `PaymentCard` has been suspended by the issuer i.e. Highnote. This suspension can only be lifed by the issuer i.e. Highnote.
  """
  ISSUER_INITIATED_SUSPENSION
}

"""Billing cycle configuration for account"""
type BillingCycleConfiguration {
  """Global Id used to reference this billing configuration."""
  id: ID!

  """
  Payment due day of the month.
  
  Min: 1
  Max: 21
  """
  paymentDueDayOfMonth: Int

  """
  Billing cycle start day of the month. The billing cycle starts the day the Financial Account is created.
  
  The `billingCycleStartDayOfMonth` range is between 1 and 31.
  """
  billingCycleStartDayOfMonth: Int

  """
  Billing cycle end day of the month.
  
  Min: 4
  Max: 24
  """
  billingCycleEndDayOfMonth: Int

  """
  The date and time, in ISO 8601 format, from which the billing cycle configuration is valid.
  """
  from: String

  """
  The date and time, in ISO 8601 format, through which the billing cycle configuration is valid.
  """
  through: String

  """
  The anticipated configuration values for the next upcoming billing cycle.
  """
  upcomingBillingCycleConfiguration: UpcomingBillingCycleConfiguration
}

"""
The anticipated configuration values for the next upcoming billing cycle.
"""
type UpcomingBillingCycleConfiguration {
  """
  Payment due day of the month.
  
  Min: 1
  Max: 21
  """
  paymentDueDayOfMonth: Int

  """
  Billing cycle start day of the month. The billing cycle starts the day the Financial Account is created.
  
  The `billingCycleStartDayOfMonth` range is between 1 and 31.
  """
  billingCycleStartDayOfMonth: Int

  """
  Billing cycle end day of the month.
  
  Min: 4
  Max: 24
  """
  billingCycleEndDayOfMonth: Int
}

"""
The information of the US bank account to be added to an account holder that can only be transferred to
"""
input AddNonVerifiedExternalUSFinancialBankAccountInput {
  """The routing number of the bank account"""
  routingNumber: String!

  """The account number of the bank account"""
  accountNumber: String!

  """An optional nick name for the bank account"""
  name: String

  """The identifier of an Account holder"""
  accountHolderId: ID!

  """The type of bank account (Checking or Savings)"""
  bankAccountType: BankAccountType!
}

"""The input to update a pseudo balance for a financial account."""
input InitiateFinancialAccountPseudoBalanceUpdateInput {
  """The ID of the financial account to apply the pseudo balance against."""
  financialAccountId: ID!

  """
  A memo that can be tagged with this pseudo balance update. This field accepts up to 1024 alphanumeric characters.
  """
  memo: String

  """The amount to set as the pseudo balance."""
  amount: AmountInput!

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""A NonVerifiedExternalUSFinancialBankAccount"""
type NonVerifiedExternalUSFinancialBankAccount implements Node {
  """
  Global ID used to reference the External Financial Account in operations.
  """
  id: ID!

  """The name of this account"""
  name: String

  """ExternalFinancialBankAccount status."""
  accountStatus: ExternalFinancialAccountStatus

  """The external bank account added to this external financial account."""
  externalBankAccountDetails: NonVerifiedExternalUSFinancialBankAccountDetail

  """The owner of this financial account."""
  owner: FinancialAccountOwner

  """Features on the `NonVerifiedExternalUSFinancialBankAccount`"""
  features: [FinancialAccountFeature!]

  """The date and time, in ISO 8601 format, the account was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the account was last updated."""
  updatedAt: String
}

"""
A financial instrument with an associated account and routing number.

The direct deposit detail that can be used to deposit funds.
"""
type NonVerifiedExternalUSFinancialBankAccountDetail implements Node {
  """
  Global ID used to reference the external bank account detail in operations.
  """
  id: ID!

  """The last four digits of bank account number."""
  last4: String

  """The details about the type of bank account."""
  type: BankAccountType

  """The routing number for the bank account."""
  routingNumber: String

  """The decrypted account number for this external bank account detail."""
  restrictedDetails: NonVerifiedExternalUSFinancialBankAccountDetailRestrictedDetailsResult

  """
  The date and time, in ISO 8601 format, the external bank account detail was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the external bank account detail was last updated.
  """
  updatedAt: String
}

"""Non Verified External US Financial Bank Account Details."""
type NonVerifiedExternalUSFinancialBankAccountRestrictedDetails {
  """The bank account number."""
  number: String

  """The routing number for the bank account."""
  routingNumber: String
}

union NonVerifiedExternalUSFinancialBankAccountDetailRestrictedDetailsResult = NonVerifiedExternalUSFinancialBankAccountRestrictedDetails | AccessDeniedError

"""
Response type for adding a non verified bank account.
Will return the last four digits of the account and it's name
"""
union AddNonVerifiedExternalUSFinancialBankAccountPayload = NonVerifiedExternalUSFinancialBankAccount | UserError | AccessDeniedError

"""
One of the possible return types for FinancialAccountPseudoBalanceUpdatePayload.
"""
union FinancialAccountPseudoBalanceUpdatePayload = FinancialAccountPseudoBalanceUpdate | InterFinancialAccountTransfer | UserError | AccessDeniedError

"""Details for simulating initiation of `FinancialAccount` closure."""
input SimulateInitiateFinancialAccountClosureInput {
  """
  The ID of the `FinancialAccount` to move into `PENDING_CLOSURE` status.
  """
  financialAccountId: ID!

  """
  Whether to close the financial account with a balance.
  A value of `true` is only allowed for accounts with at least one credit `FinancialAccountFeature` (such as `CreditCardAccountFeature`) enabled.
  """
  closeWithBalance: Boolean
}

"""The return types for `simulateInitiateFinancialAccountClosure`"""
union SimulateInitiateFinancialAccountClosurePayload = FinancialAccount | UserError | AccessDeniedError

"""Details for simulating `FinancialAccount` closure."""
input SimulateCloseFinancialAccountInput {
  """The ID of the `FinancialAccount` to move into `CLOSED` status."""
  financialAccountId: ID!
}

"""
Input values for `IssuePreprintedPaymentCardFinancialAccountForApplication`
"""
input IssuePreprintedPaymentCardFinancialAccountForApplicationInput {
  """
  The ID of the `AccountHolderCardProductApplication` to issue a preprinted payment card `FinancialAccount`.
  
  **Note:** The Application must be APPROVED.
  """
  applicationId: ID!

  """
  The name of the `FinancialAccount` that will be created.
  
  **Minimum length:** 1 character
  **Maximum length:** 50 characters
  **Allowed characters:** All characters
  """
  name: String!

  """
  An optional externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String
}

"""Input values for `createCardProductWithTemplate`"""
input CreateCardProductWithTemplateCardProductInput {
  """The name of the card product."""
  name: String!

  """The ID of the card product template to use."""
  sourceTemplateId: ID!
}

"""Input values for `createCardProductWithTemplate`"""
input CreateCardProductWithTemplateInput {
  """The card product to create."""
  cardProduct: CreateCardProductWithTemplateCardProductInput!
}

"""The return types for `createCardProductWithTemplate`"""
union CreateCardProductWithTemplatePayload = CreateCardProductWithTemplate | UserError | AccessDeniedError

"""The return type for `createCardProductWithTemplate`"""
type CreateCardProductWithTemplate {
  """The resulting `CardProduct`."""
  cardProduct: CardProduct!
}

"""Options for assigning a `PaymentCard` to a `FinancialAccount`."""
input AssignPaymentCardToFinancialAccountOptionsInput {
  """
  Whether or not to activate the card when assigned to a `FinancialAccount`.
  If **not** activated on assignment, the card must be activated separately before use.
  """
  activateOnAssignment: Boolean!
}

"""Input values for `assignPaymentCardToFinancialAccount`"""
input AssignPaymentCardToFinancialAccountInput {
  """The ID of the `PaymentCard` to assign to a `FinancialAccount`."""
  paymentCardId: ID!

  """The ID of the `FinancialAccount` to assign the `PaymentCard` to."""
  assignToFinancialAccountId: ID!

  """Options for the newly assigned Payment Card."""
  options: AssignPaymentCardToFinancialAccountOptionsInput!

  """
  A value to distinguish unique assignPaymentCardToFinancialAccount request.
  
  This helps prevent duplicate cards from being assigned. If a failure happens and it is unclear
  if the assignment of a card went through, it is safe to repeat the request with the same idempotency key. If the
  card gas already been assigned to the `assignToFinancialAccountId`, the request will be deduped and the original
  response will be returned instead.
  
  **Minimum length:** 10 characters
  **Maximum length:** 255 characters
  """
  idempotencyKey: IdempotencyKey
}

"""The return types for `assignPaymentCardToFinancialAccount`"""
union AssignPaymentCardToFinancialAccountPayload = PaymentCard | UserError | AccessDeniedError

"""The return types for `simulateCloseFinancialAccount`"""
union SimulateCloseFinancialAccountPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types for `issuePreprintedPaymentCardFinancialAccountForApplication`
"""
union IssuePreprintedPaymentCardFinancialAccountForApplicationPayload = FinancialAccount | UserError | AccessDeniedError

"""State transitions for a card digital wallet token."""
type CardDigitalWalletTokenStateTransition {
  """A state of the card digital wallet token."""
  state: CardDigitalWalletTokenState

  """A reason for the state transition."""
  reason: CardDigitalWalletTokenStateReason

  """
  The date and time, in ISO 8601 format, the state transition was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the state transition was last updated.
  """
  updatedAt: String
}

"""The Card Digital Wallet Token device information."""
type CardDigitalWalletTokenDeviceInformation {
  """The device name."""
  name: String

  """The device serial number."""
  serialNumber: String

  """The IP address where the Card Digital Wallet Token is activated."""
  ip: IPAddress

  """The location where the Card Digital Wallet Token is activated."""
  location: Coordinates

  """The form factor of the device to be provisioned."""
  formFactor: String

  """The device operating system name."""
  osName: String

  """The device operating system version."""
  osVersion: String

  """The payment types of the Card Digital Wallet Token."""
  paymentTypes: [DevicePaymentType!]

  """The architecture or technology used for token storage."""
  cardStorageType: String

  """The technology used to capture the card details."""
  cardCaptureType: String
}

"""Additional Card Digital Wallet Token information."""
type CardDigitalWalletTokenAdditionalInformation {
  """The Card Digital Wallet Token unique reference."""
  tokenUniqueReference: String

  """The requester ID assigned to a the Digital Wallet Token."""
  requesterIdentifier: String

  """The number of active tokens of the current card."""
  numNetworkActiveTokens: Int

  """The number of activation attempts of the Card Digital Wallet Token."""
  numActivationAttempts: Int

  """Device information for the Card Digital Wallet Token."""
  deviceInformation: CardDigitalWalletTokenDeviceInformation

  """The decision reasons provided by provider."""
  walletProviderDeclineReasons: [String!]

  """The decision reason provided by issuer."""
  issuerDeclineReasons: [String!]
}

"""
Additional Card Digital Wallet Token information.
This field is restricted to Highnote internal users only.
"""
union CardDigitalWalletTokenAdditionalInformationRestricted = CardDigitalWalletTokenAdditionalInformation | AccessDeniedError | UserError

"""The Card Digital Wallet Token type."""
enum CardDigitalWalletTokenType {
  """The token is static and does not change."""
  STATIC

  """The token is stored in the cloud and can be used for transactions."""
  CLOUD_BASED

  """The token is used for ecommerce transactions."""
  ECOMMERCE

  """The token is stored in a secure element on the device."""
  DEVICE_SECURE_ELEMENT

  """The token is stored on file with the card network or issuer."""
  CARD_ON_FILE
}

"""
The method used to enter the card information when creating a digital wallet token.
"""
enum CardDigitalWalletTokenSourceEntryMethod {
  """
  The token is stored on the card network and can be used for transactions.
  """
  CARD_ON_FILE

  """The token is manually entered by the user or merchant."""
  MANUAL_ENTRY

  """The token is provisioned through an application."""
  APP_PROVISIONED

  """The token is generated by the card network or issuer."""
  TOKEN

  """The token is generated through a web browser."""
  BROWSER

  """CHIP_DATA: The token is generated from the chip data on the card."""
  CHIP_DATA
}

"""The Card Digital Wallet Token verification method."""
type CardDigitalWalletTokenVerificationMethod {
  """The verification method of the Card Digital Wallet Token activation."""
  type: String

  """The value of the verification method. e.g. xxx@gmail.com"""
  value: String
}

"""Different types of Payments supported for the token."""
enum DevicePaymentType {
  """Near Field Communication payment type."""
  NFC

  """Digital Secure Remote Payment"""
  DSRP

  """Ecommerce payment type."""
  ECOMMERCE
}

"""The connection type for card digital wallet token."""
type CardDigitalWalletTokenConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardDigitalWalletTokenEdge!]
}

"""The edge type for card digital wallet token."""
type CardDigitalWalletTokenEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The card digital wallet token."""
  node: CardDigitalWalletToken
}

"""The connection type for card digital wallet token state transition."""
type CardDigitalWalletTokenStateTransitionConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardDigitalWalletTokenStateTransitionEdge!]
}

"""The edge type for card digital wallet token state transition."""
type CardDigitalWalletTokenStateTransitionEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The card digital wallet token state transition."""
  node: CardDigitalWalletTokenStateTransition
}

"""The status of a `ExternalFinancialAccount`."""
enum ExternalFinancialAccountStatus {
  """The `ExternalFinancialAccount` is active and in good standing."""
  ACTIVE

  """
  The `ExternalFinancialAccount` is Closed.
  
  This is a terminal state and cannot be reversed.
  """
  CLOSED
}

interface AccountStatusEvent implements Node {
  """The ID of the `FinancialAccount` that has changed status."""
  id: ID!

  """The name of this `FinancialAccount`."""
  accountName: String

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String
}

"""
The `AccountStatusActiveEvent` notifies when an `FinancialAccount` is set to the Active Status.
"""
type AccountStatusActiveEvent implements Node & AccountStatusEvent {
  """The ID of the `FinancialAccount` that has changed status."""
  id: ID!

  """The name of this `FinancialAccount`."""
  accountName: String

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String
}

"""
The `AccountStatusSuspendedEvent` notifies when an `FinancialAccount` is set to the Suspended Status.
"""
type AccountStatusSuspendedEvent implements Node & AccountStatusEvent {
  """The ID of the `FinancialAccount` that has changed status."""
  id: ID!

  """The name of this `FinancialAccount`."""
  accountName: String

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String
}

"""
The `AccountStatusUnderReviewEvent` notifies when an `FinancialAccount` is set to the Under Review Status.
"""
type AccountStatusUnderReviewEvent implements Node & AccountStatusEvent {
  """The ID of the `FinancialAccount` that has changed status."""
  id: ID!

  """The name of this `FinancialAccount`."""
  accountName: String

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String
}

"""
The `AccountStatusPendingClosureEvent` notifies when an `FinancialAccount` is set to the Pending Closure Status.
"""
type AccountStatusPendingClosureEvent implements Node & AccountStatusEvent {
  """The ID of the `FinancialAccount` that has changed status."""
  id: ID!

  """The name of this `FinancialAccount`."""
  accountName: String

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String
}

"""
The `AccountStatusClosedEvent` notifies when an `FinancialAccount` is set to the Closed Status.
"""
type AccountStatusClosedEvent implements Node & AccountStatusEvent {
  """The ID of the `FinancialAccount` that has changed status."""
  id: ID!

  """The name of this `FinancialAccount`."""
  accountName: String

  """
  Externally provided ID (255 character limit) that can be used to refer to the issued payment card's' financial account.
  This ID is unique per organization and tenant. If not provided, Highnote will generate an ID (ten digit, Base58, all caps).
  """
  externalId: String

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String
}

"""External Bank Account Added Event"""
interface ExternalBankAccountEvent implements Node {
  """Id for the external account."""
  id: ID!

  """The name of this account."""
  accountName: String

  """The identifier of an Account holder"""
  accountHolderId: ID

  """The provider that Highnote used to verify this bank account."""
  provider: BankVerificationProvider

  """ExternalFinancialBankAccount status."""
  accountStatus: ExternalFinancialAccountStatus

  """The external bank account added to this external financial account."""
  externalBankAccountDetail: ExternalBankAccountDetail

  """
  The date and time, in ISO 8601 format, the external bank account was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the external bank account was last updated.
  """
  updatedAt: String
}

"""
Event generated when an external bank account is linked to an account holder.
"""
type ExternalBankAccountAddedEvent implements Node & ExternalBankAccountEvent {
  """Id for the external account."""
  id: ID!

  """The name of this account."""
  accountName: String

  """The identifier of an Account holder"""
  accountHolderId: ID

  """The provider that Highnote used to verify this bank account."""
  provider: BankVerificationProvider

  """ExternalFinancialBankAccount status."""
  accountStatus: ExternalFinancialAccountStatus

  """The external bank account added to this external financial account."""
  externalBankAccountDetail: ExternalBankAccountDetail

  """
  The date and time, in ISO 8601 format, the external bank account was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the external bank account was last updated.
  """
  updatedAt: String

  """
  The date and time, in ISO 8601 format, the external bank account was added.
  """
  addedAt: String
}

"""
Event generated when an external bank account was disconnected from an account holder.
"""
type ExternalBankAccountRemovedEvent implements Node & ExternalBankAccountEvent {
  """Id for the external account."""
  id: ID!

  """The name of this account."""
  accountName: String

  """The identifier of an Account holder"""
  accountHolderId: ID

  """The provider that Highnote used to verify this bank account."""
  provider: BankVerificationProvider

  """ExternalFinancialBankAccount status."""
  accountStatus: ExternalFinancialAccountStatus

  """
  The external bank account removed from this external financial account.
  """
  externalBankAccountDetail: ExternalBankAccountDetail

  """
  The date and time, in ISO 8601 format, the external bank account was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the external bank account was last updated.
  """
  updatedAt: String

  """
  The date and time, in ISO 8601 format, the external bank account was removed.
  """
  removedAt: String
}

"""
Event generated when a `FinancialAccountStatement` has an upcoming due date.
"""
type UpcomingStatementDueDateEvent {
  """The `FinancialAccount` with an upcoming due date."""
  financialAccount: FinancialAccount

  """
  The day of the month when payment is due. Will be an integer between 1 and 28.
  """
  paymentDueDayOfMonth: UnsignedInt

  """The date and time, in ISO 8601 format, of the upcoming due date."""
  upcomingStatementDueDate: String

  """
  The number of days remaining until the upcoming due date, as of this event creation.
  """
  numberOfDaysUntilDueDate: UnsignedInt

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String
}

"""
An enum used to represent the status of the pseudo balance update request.
"""
enum FinancialAccountPseudoBalanceUpdateStatus {
  """The platform is currently validating and executing the limit update."""
  PENDING

  """The platform has completed the pseudo balance update."""
  COMPLETED

  """
  The platform was not able to complete the limit update. See `statusReasonCode` for more information.
  """
  FAILED
}

"""
An enum used to represent the failure reasons for the pseudo balance update request.
"""
enum FinancialAccountPseudoBalanceUpdateStatusReason {
  """
  The account has been closed so the pseudo balance update can not be applied.
  """
  ACCOUNT_CLOSED

  """
  The financial account ID provided was not tied to a valid financial account. Double check the `financialAccountId` and try again.
  """
  ACCOUNT_NOT_FOUND
}

"""The pseudo balance update applied to a financial account ID."""
type FinancialAccountPseudoBalanceUpdate implements Node {
  """ID for the pseudo balance update."""
  id: ID!

  """The status of this pseudo balance update."""
  status: FinancialAccountPseudoBalanceUpdateStatus

  """In the case of a failed `status`, returns the failed reason."""
  statusReason: FinancialAccountPseudoBalanceUpdateStatusReason

  """The memo set when creating the pseudo balance update."""
  memo: String

  """The amount set for this pseudo balance."""
  amount: Amount

  """
  The date and time, in ISO 8601 format, at which this update was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, at which this update was modified.
  """
  updatedAt: String
}

"""The identity type of a payment card holder."""
union PaymentCardHolder = USBusinessAuthorizedPerson | USPersonAccountHolder | USPersonAuthorizedUser

"""Card holder details for a payment card."""
type PaymentCardHolderDetails {
  """
  The billing address on the card for AVS and Postal Code Matching. Depending on account holder updates, this could differ from billing address on the account.
  """
  billingAddressOnCard: Address

  """
  Identity of payment card holder. This may either be an account holder or an authorized user.
  """
  paymentCardHolder: PaymentCardHolder

  """
  The USBusinessAccountHolder or USPersonAccountHolder associated with the payment card.
  """
  associatedPaymentCardAccountHolder: AccountHolder
}

"""The details of the link token from the third-party provider."""
type GenerateVerifiedExternalBankAccountExternalLinkToken {
  """The link token generated by the third-party provider."""
  externalLinkToken: String

  """The hosted URL generated by the third-party provider."""
  externalLinkHostedUrl: String

  """The expiration date for the token in ISO 8601 format."""
  expirationDate: String

  """The account holder for whom bank account is linked."""
  accountHolder: AccountHolder
}

union GenerateVerifiedExternalBankAccountLinkTokenPayload = GenerateVerifiedExternalBankAccountExternalLinkToken | UserError | AccessDeniedError

"""Event generated when an external bank account linking is failed."""
type LinkVerifiedExternalBankAccountFailedEvent implements Node {
  """Id for the workflow."""
  id: ID!

  """The identifier of an Account holder"""
  accountHolderId: ID

  """The provider that Highnote used to verify this bank account."""
  provider: BankVerificationProvider

  """
  The date and time, in ISO 8601 format, the external bank account was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the external bank account was last updated.
  """
  updatedAt: String
}

"""The applicable rule user type for which a rule will be evaluated."""
enum ApplicableRuleUserType {
  """The associated rule will be evaluated for the authorized user."""
  AUTHORIZED_USER
}

"""The possible reasons for closure of a `FinancialAccount`."""
enum FinancialAccountClosureReason {
  """Account is closed due to unusual activity taking place on the account."""
  UNUSUAL_ACTIVITY

  """Account is closed due to inactivity."""
  INACTIVITY

  """Account is closed due to lost or stolen card."""
  LOST_OR_STOLEN_CARD

  """
  Requested information not received or there is suspect activity occurring on the account that could not be verified.
  """
  SECURITY_CONCERN

  """Account is closed at the request of the account holder."""
  ACCOUNT_HOLDER_REQUEST

  """Account is closed due to a negative balance on the account."""
  CHARGE_OFF

  """Account is closed due to bankruptcy."""
  BANKRUPTCY

  """Account is closed due to the business type."""
  PROHIBITED_BUSINESS_TYPE

  """
  Information has been provided that determines the account holder is deceased.
  """
  DECEASED
}

"""An identification as to where a payment initiated"""
enum PointOfServiceCategory {
  """A terminal used for administrative purposes."""
  ADMINISTRATIVE_TERMINAL

  """A terminal used for making a sale."""
  POS_TERMINAL

  """A terminal used at a home rather than a business location."""
  HOME_TERMINAL

  """A device used to process cash and payment card transactions."""
  ELECTRONIC_CASH_REGISTER

  """
  A terminal that processes payment card transactions over a standard phone line.
  """
  DIAL_TERMINAL

  """A terminal that processes travelers' checks."""
  TRAVELERS_CHECK_MACHINE

  """A terminal which produces or processes scrips."""
  SCRIP_MACHINE

  """A terminal which produces or processes coupons."""
  COUPON_MACHINE

  """A terminal which produces or processes tickets."""
  TICKET_MACHINE

  """
  A terminal utilized for general banking processing such as ATM withdrawals.
  """
  PERSONAL_BANKING

  """A terminal used by a public utility to process card payments."""
  PUBLIC_UTILITY

  """A terminal operated by the account holder to process a card payment."""
  SELF_SERVICE

  """
  The initial step in a card payment which defines whether the card payment may continue.
  """
  AUTHORIZATION

  """
  A transaction in which funds are transferred for goods and/or services.
  """
  PAYMENT

  """A Voice Response Unit that interacts with account holders."""
  VRU

  """A mobile phone that performs many functions of a personal computer."""
  SMART_PHONE

  """
  A television that accepts input from account holders for card payments.
  """
  INTERACTIVE_TELEVISION

  """
  A mobile device utilized for a variety of functions including card payments.
  """
  PERSONAL_DIGITAL_ASSISTANCE

  """A phone with a digital display."""
  SCREEN_PHONE

  """
  A terminal activated by an account holder for a card payment that does not require authorization.
  """
  UNATTENDED_CARDHOLDER_ACTIVATED_NO_AUTHORIZATION

  """
  A terminal activated by an account holder for a card payment that requires authorization.
  """
  UNATTENDED_CARDHOLDER_ACTIVATED_AUTHORIZED

  """A terminal activated by an account holder for a card payment."""
  UNATTENDED_CUSTOMER_TERMINAL

  """A device that provides telephone functions."""
  TELEPHONE_DEVICE

  """
  A mobile devices utilized to process card payments (Mobile Point of Sale).
  """
  MPOS

  """A machine that dispenses cash or performs other banking services."""
  AUTOMATED_TELLER_MACHINE

  """A terminal used for self-service fuel purchases."""
  AUTOMATED_FUEL_DISPENSER

  """
  A device presented at a teller where an account holder inserts their card for verification and authorization.
  """
  POINT_OF_BANKING_TERMINAL

  """
  A device used by financial instititions' bank branches to handle with customer transactions.
  """
  TELLER

  """
  A device used by franchised financial instititions' bank branches to handle with customer transactions.
  """
  FRANCHISE_TELLER

  """A machine that dispenses small goods, such as food and drinks."""
  VENDING

  """A commercial transaction conducted electronically online."""
  ECOMMERCE

  """A device used to convert an electronic check for deposits."""
  MICR_TERMINAL

  """A terminal used for unattended chip and PIN transactions."""
  UNATTENDED_CHIP_PIN_TERMINAL
}

"""
A condition for the point of service category, which serves as acceptable input arguments for creating an authorization control.
"""
enum PointOfServiceCategoryCondition {
  """A terminal used for administrative purposes."""
  ADMINISTRATIVE_TERMINAL

  """A terminal used for making a sale."""
  POS_TERMINAL

  """
  A machine that dispenses cash or performs other banking services when an account holder inserts a bank card.
  """
  AUTOMATED_TELLER_MACHINE

  """
  A device which allows account holders to pay for their gas and pump it themselves.
  """
  AUTOMATED_FUEL_DISPENSER

  """
  A device presented at a teller where an account holder inserts their card for verification and authorization.
  """
  POINT_OF_BANKING_TERMINAL

  """
  A device that enables a person employed at financial institition to deal with customers' transactions.
  """
  TELLER

  """
  A device that enables a person employed at franchised financial institition to deal with customers' transactions.
  """
  FRANCHISE_TELLER

  """
  A machine that dispenses small articles such as food, drinks, or cigarettes when a coin, bill, or token is inserted.
  """
  VENDING

  """A commercial transaction conducted electronically on the internet."""
  ECOMMERCE

  """A device used to convert an electronic check for deposits."""
  MICR_TERMINAL
}

"""The PAN entry mode."""
enum PanEntryMode {
  """Manual."""
  MANUAL

  """Magnetic stripe (full magnetic stripe data may not be present)."""
  MAGNETIC_STRIPE

  """Bar code or QR Code."""
  BAR_CODE_OR_QR_CODE

  """Optical Character Reader (OCR)"""
  OPTICAL_CHARACTER_READER

  """Integrated circuit card (contact chip)."""
  INTEGRATED_CIRCUIT_CARD

  """Manual (key-entered)."""
  MANUAL_KEY_ENTERED

  """Contactless via Chip rules."""
  CONTACTLESS_VIA_CHIP_RULES

  """
  PAN entry via electronic commerce, including remote chip for which data must be passed by the acquirer
  (although such remote chip data may not be present in transactions received by the issuer if cryptographic
  validation is being performed by a network or other entity on behalf of the issuer).
  """
  VIA_ELECTRONIC_COMMERCE

  """
  Chip card or chip-capable terminal was unable to process the transaction using the data on the chip or magnetic stripe,
  the PAN was entered manually, or the Acquirer is not certified to process the value CC_UNABLE_TO_PROCESS_ENTERED_VIA_MAGNETIC_STRIPE.
  """
  CHIP_CARD_UNABLE_TO_PROCESS_ENTERED_MANUALLY

  """
  Chip card or chip-capable terminal was unable to process the transaction using the data on the chip, the PAN was entered via magnetic stripe.
  The full track data was read from the data encoded on the card and transmitted within the authorization request on Track 2 Data
  or Track 1 Data without alteration or truncation.
  """
  CC_UNABLE_TO_PROCESS_ENTERED_VIA_MAGNETIC_STRIPE

  """From file; credentials on file"""
  CREDENTIALS_ON_FILE

  """
  PAN Auto Entry via Server (issuer, acquirer, or third party vendor system).
  """
  PAN_AUTO_ENTRY_VIA_SERVER

  """Secure cardless entry."""
  SECURE_CARD_LESS_ENTRY

  """Full magnetic stripe read (full magnetic stripe data will be present)."""
  FULL_MAGNETIC_STRIPE_READ

  """Contactless via magnetic stripe rules."""
  CONTACTLESS_VIA_MAGNETIC_STRIPE_RULES

  """Integrated circuit card, CVV data may be unreliable."""
  ICC_CARD_CVV_DATA_MAY_BE_UNRELIABLE

  """Reserved for ISO, national, or private use."""
  RESERVED
}

"""The PIN entry mode."""
enum PinEntryMode {
  """PIN entry capability"""
  PIN_ENTRY_CAPABILITY

  """No PIN entry capability"""
  NO_PIN_ENTRY_CAPABILITY

  """PIN pad inoperative"""
  PIN_PAD_INOPERATIVE

  """PIN verified by terminal device"""
  PIN_VERIFIED_BY_TERMINAL_DEVICE

  """Reserved for ISO, national, or private use"""
  RESERVED
}

"""The possible values for attendance at the terminal."""
enum TerminalAttendance {
  """The terminal was attended"""
  ATTENDED

  """The terminal was unattended"""
  UNATTENDED
}

"""Details to simulate the authorization reversal."""
input SimulateRefundInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """The `Amount` of the original `AuthorizationEvent` to refund."""
  amount: AmountInput

  """
  Details to set about a Merchant submitting the refund.
  
  You can use these details to test merchant specific spend rules.
  """
  merchantDetails: MerchantDetailsInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Fees to be reversed, if any."""
  fees: [TransactionFeeInput!]
}

"""Details to simulate the authorization reversal."""
input SimulateReversalInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """
  The `Amount` of the Authorization to reverse. Cannot be above the total amount of the related Authorizations.
  """
  amount: AmountInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Details to set about a Merchant submitting the reversal."""
  merchantDetails: MerchantDetailsInput

  """
  Determines whether this is an issuer initiated reversal for an expired authorization.
  """
  issuerExpiredAuthorization: Boolean

  """Fees to be reversed, if any."""
  fees: [TransactionFeeInput!]
}

"""Details to simulate the clearing."""
input SimulateClearingInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """
  The `Amount` of the Authorization to clear. Cannot be above the total amount of the related Authorizations.
  """
  amount: AmountInput

  """Details to set about a Merchant submitting the clearing."""
  merchantDetails: MerchantDetailsInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""Details to simulate the clearing of a Visa Fleet transaction."""
input SimulateVisaFleetClearingInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """
  The `Amount` of the Authorization to clear. Cannot be above the total amount of the related Authorizations.
  """
  amount: AmountInput!

  """Details to set about a merchant submitting the clearing."""
  merchantDetails: MerchantDetailsInput

  """Visa Fleet details to be simulated"""
  visaFleetL2TransactionData: VisaFleetL2TransactionDataInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""
Simulated Visa Fleet L2 transaction data. These are relevant additional transaction data items pertaining to a fleet transaction.
"""
input VisaFleetL2TransactionDataInput {
  """
  Describes the type of items included in the transaction. (Gas, non-fuel, fuel, and non-fuel)
  """
  visaFuelPurchaseType: VisaFuelPurchaseType

  """
  Indicates whether the transaction occurred at a self-service or a full-service station
  """
  visaFuelServiceType: VisaFuelServiceType

  """The variety of fuel purchased during the transaction"""
  visaFuelType: VisaFuelType

  """
  The amount of fuel purchased during the transaction.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelQuantity: UnsignedInt

  """The dimension utilized in conjunction with quantity"""
  visaFuelUnitOfMeasure: VisaFuelUnitOfMeasure

  """
  The price per unit of measure for the fuel.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelUnitCost: UnsignedInt

  """
  The fuel amount less any exempted taxes or discounts. The value will equal visaFuelQuantity * visaFuelUnitCost exclusive of taxes.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelNetAmount: UnsignedInt

  """
  The total amount for only the fuel purchased in the transaction. The value will equal visaFuelQuantity * visaFuelUnitCost inclusive of taxes.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelGrossAmount: UnsignedInt

  """
  The non-fuel amount less any exempted taxes or discounts. The value will equal the sum of the line item(s) exclusive of taxes.
  
  There are 2 implied decimal places, thus a value of “1” is populated in this field as 100.
  """
  visaNonFuelNetAmount: UnsignedInt

  """
  The total amount for only the non-fuel products purchased in the transaction. The value will equal the sum of the line item(s) inclusive of taxes.
  
  There are 2 implied decimal places, thus a value of “1” is populated in this field as 100.
  """
  visaNonFuelGrossAmount: UnsignedInt

  """
  The VAT or tax rate applied for the transaction
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaTaxRate: UnsignedInt

  """An additional identifier to further differentiate the fuel product"""
  visaExpandedFuelType: VisaFuelType

  """
  Indicates whether the Merchant will send more additional (Level 3) information in the future
  """
  visaAdditionalDataIndicator: Boolean

  """
  An alphanumeric value representing either a Vehicle, Driver, or Generic ID
  
  **Maximum length:** 255 characters
  """
  visaFleetIdentifier: String

  """
  A numeric value indicating the vehicle’s odometer reading at the time of the transaction.
  
  Up to 7 digits.
  """
  visaOdometerReading: UnsignedInt

  """Indicates whether Purchase Identifier is an order or invoice number"""
  visaPurchaseIdentifierFormat: VisaFleetPurchaseIdentifierFormat

  """
  An alphanumeric value representing an order or invoice number
  
  **Maximum length:** 255 characters
  """
  visaPurchaseIdentifier: String

  """
  An alphanumeric value representing the employee’s ID number
  
  **Maximum length:** 255 characters
  """
  visaFleetEmployeeNumber: String

  """
  An alphanumeric value representing the trailer’s ID number
  
  **Maximum length:** 255 characters
  """
  visaFleetTrailerNumber: String

  """
  An alphanumeric value representing the answer to a custom prompt
  
  **Maximum length:** 255 characters
  """
  visaFleetCustomPrompt1: String

  """
  An alphanumeric value representing the answer to a custom prompt
  
  **Maximum length:** 255 characters
  """
  visaFleetCustomPrompt2: String

  """
  A list of up to eight visaNonFuelProductCode values for products in the transaction
  """
  visaNonFuelProductCodes: [VisaNonFuelProductCode!]

  """Charging station power output capacity represented in kW"""
  visaChargingPowerCapacity: UnsignedInt

  """Specific charging reason code for this transaction"""
  visaEvChargingReasonCode: VisaEvChargingReasonCode

  """
  Estimate of the total distance added in km/miles, based on the kWh added and the type of vehicle engine charged
  """
  visaEstimatedKmMilesAdded: UnsignedInt

  """
  Carbon footprint avoidance (how much was saved from this charge) measurement for the purchase on the transaction – measured in grams of carbon dioxide equivalent (CO2e)
  """
  visaCarbonFootprintAvoided: UnsignedInt

  """
  Estimated range in Km/Miles the car will have, after completion of the charge, once it leaves the electric vehicle charging station
  """
  visaEstimatedKmMilesAvailable: UnsignedInt

  """
  Maximum power dispensed during the specific charge session from that charging station. This could be different to the power output capacity of the station based on power management by the site operator
  """
  visaMaxPowerDispensed: UnsignedInt

  """
  Visa-defined code for a specific connector type to identify the connection for the charge session
  """
  visaEvConnectorType: VisaEvConnectorType

  """
  A list of fuel products purchased if this transaction contained multiple fuel types
  """
  visaFleetFuelLineItems: [VisaFleetL2FuelLineItemInput!]

  """
  The national tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  visaNationalTaxRate: UnsignedInt

  """
  Other tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  visaOtherTaxRate: UnsignedInt

  """Discount method applied to the transaction"""
  visaDiscountMethod: VisaFleetDiscountMethod

  """Identifies the entity that calculated the discount"""
  visaDiscountAgent: VisaFleetDiscountAgent

  """
  Identifies the discount plan applied to the transaction
  
  **Maximum length:** 255 characters
  """
  visaDiscountPlanIdentifier: String

  """
  Identifies the fleet client
  
  **Maximum length:** 255 characters
  """
  visaClientIdentifier: String
}

"""
Details to simulate the authorization advice of a Visa Fleet transaction.
"""
input SimulateVisaFleetAuthorizationAdviceInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """
  The `Amount` of the Authorization to clear. Cannot be above the total amount of the related Authorizations.
  """
  amount: AmountInput!

  """
  Details to override about a `PaymentCard` or card holder to test Spend Control Rules.
  """
  verificationOverrides: VerificationOverridesInput

  """
  Details to set about a Merchant submitting the authorization.
  
  You can use these details to test merchant specific spend rules.
  """
  merchantDetails: MerchantDetailsInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Fleet specific details for this authorization advice."""
  fleetAuthorizationData: SimulateVisaFleetAuthorizationDataInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""The possible types of transactions."""
union Transaction = CreditTransaction | DebitTransaction

"""A Transaction which credits money to a PaymentCard."""
type CreditTransaction implements Node {
  """
  The ID of the transaction. This `id` can be used to later retrieve details of this Transaction.
  """
  id: ID!

  """The list of TransactionEvents related to this Transaction."""
  transactionEvents(
    """Scope results to specific types of TransactionEvents."""
    eventTypes: [TransactionEventFilter!]
  ): [TransactionEvent!]
}

"""A Transaction which debits money from a PaymentCard."""
type DebitTransaction implements Node {
  """
  The ID of the transaction. This `id` can be used to later retrieve details of this Transaction.
  """
  id: ID!

  """The list of TransactionEvents related to this Transaction."""
  transactionEvents(
    """Scope results to specific types of TransactionEvents."""
    eventTypes: [TransactionEventFilter!]
  ): [TransactionEvent!]
}

"""The filters used to scope the type of TransactionEvents returned."""
enum TransactionEventFilter {
  """Scope the results to contain `AuthorizationEvent`."""
  AUTHORIZATION_EVENT

  """Scope the results to contain `ReversalEvent`."""
  REVERSAL_EVENT

  """Scope the results to contain `ClearingEvent`."""
  CLEARING_EVENT

  """Scope the results to contain `AuthorizationAndClearEvent`."""
  AUTHORIZATION_AND_CLEAR_EVENT

  """Scope the results to contain `BalanceInquiryEvent`."""
  BALANCE_INQUIRY_EVENT

  """Scope the results to contain `VerificationEvent`."""
  VERIFICATION_EVENT

  """Scope the results to contain `IssuerPreliminaryAuthorizationEvent`."""
  ISSUER_PRELIMINARY_AUTHORIZATION_EVENT

  """Scope the results to contain `EnhancedDataEvent`."""
  ENHANCED_DATA_EVENT

  """Scope the results to contain `AdjustmentEvent`."""
  ADJUSTMENT_EVENT
}

"""
The filters used to scope TransactionEvents to specific types of Transactions.
"""
enum TransactionTypeFilter {
  """Scope the results to contain types related to `DebitTransaction`."""
  DEBIT

  """Scope the results to contain types related to `CreditTransaction`."""
  CREDIT
}

"""The connection type for `TransactionEvent`."""
type TransactionEventConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEventEdge!]
}

"""The edge type for a `TransactionEvent`."""
type TransactionEventEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Transaction Event."""
  node: TransactionEvent
}

interface TransactionEvent implements Node {
  """Globally unique id of the `TransactionEvent."""
  id: ID!

  """The associated Transaction."""
  transaction: Transaction

  """The `Amount` approved for this `TransactionEvent`."""
  approvedAmount: Amount

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """The `PaymentCard` associated to the `TransactionEvent`."""
  paymentCard: PaymentCard

  """The `CardProduct` associated to the `TransactionEvent`."""
  cardProduct: CardProduct

  """
  The date and time, in ISO 8601 format, this `ReversalEvent` was created.
  """
  createdAt: String

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """The `Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData
}

"""An ReversalEvent for a transaction."""
type ReversalEvent implements Node & TransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this Reversal or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction"""
  transactionId: ID @deprecated(reason: "Use transaction instead")

  """The `Transaction` for this event."""
  transaction: Transaction

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """The `Amount` approved for this `ReversalEvent`."""
  approvedAmount: Amount

  """
  The original `Amount` of the `AuthorizationEvent` related to this `ReversalEvent`.
  """
  originalAmount: Amount

  """
  The date and time, in ISO 8601 format, this `ReversalEvent` was created.
  """
  createdAt: String

  """The `PaymentCard` associated to this `ReversalEvent`."""
  paymentCard: PaymentCard

  """The `CardProduct` associated to this `ReversalEvent`."""
  cardProduct: CardProduct

  """The details about the merchant who requested the reversal."""
  merchantDetails: MerchantDetails

  """The `Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  Determines whether this is an issuer initiated reversal for an expired authorization.
  """
  issuerExpiredAuthorization: Boolean

  """
  Determines whether this is a partial or full reversal for an authorization.
  """
  partial: Boolean

  """A snapshot of the `PaymentCard` at the time of the `ReversalEvent`."""
  paymentCardSnapshot: PaymentCardSnapshot

  """Additional transaction data for this transaction"""
  additionalTransactionData: [AdditionalTransactionData!]

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail

  """Fees applied to the transaction, if any."""
  fees: [TransactionFee!]
}

"""A Clearing event for a transaction."""
type ClearingEvent implements Node & TransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `ClearingEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction"""
  transactionId: ID @deprecated(reason: "Use transaction instead")

  """The `Transaction` for this event."""
  transaction: Transaction

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """The `Amount` approved for this `ClearingEvent`."""
  approvedAmount: Amount

  """The `Amount` requested to be approved for this `ClearingEvent`."""
  requestedAmount: Amount

  """
  The original `Amount` of the `AuthorizationEvent` related to this `ClearingEvent`.
  """
  originalAmount: Amount

  """
  The date and time, in ISO 8601 format, this `ClearingEvent` was created.
  """
  createdAt: String

  """The `PaymentCard` associated to this `ClearingEvent`."""
  paymentCard: PaymentCard

  """The `CardProduct` associated to this `ClearingEvent`."""
  cardProduct: CardProduct

  """The details about the merchant who requested the clear."""
  merchantDetails: MerchantDetails

  """Level 2 / Level 3 transaction data for this transaction"""
  additionalTransactionData: [AdditionalTransactionData!]

  """The `Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """Disputes on this `ClearingEvent`."""
  disputes: [PaymentCardTransactionDispute!]

  """
  Determines whether this is a partial or full clear for an authorization.
  """
  partial: Boolean

  """A snapshot of the `PaymentCard` at the time of the `ClearingEvent`."""
  paymentCardSnapshot: PaymentCardSnapshot

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail

  """Fees applied to the transaction, if any."""
  fees: [TransactionFee!]
}

"""A event containing additional data related to a transaction."""
type EnhancedDataEvent implements Node & TransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `EnhancedDataEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """The `Transaction` for this event."""
  transaction: Transaction

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """Not used for this `EnhancedDataEvent`"""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """Not used for this `EnhancedDataEvent`"""
  approvedAmount: Amount

  """Not used for this `EnhancedDataEvent`"""
  requestedAmount: Amount

  """
  The date and time, in ISO 8601 format, this `EnhancedDataEvent` was created.
  """
  createdAt: String

  """Not used for this `EnhancedDataEvent`"""
  paymentCard: PaymentCard

  """Not used for this `EnhancedDataEvent`"""
  cardProduct: CardProduct

  """Not used for this `EnhancedDataEvent`"""
  merchantDetails: MerchantDetails

  """Level 2 / Level 3 transaction data for this transaction"""
  additionalTransactionData: [AdditionalTransactionData!]

  """Not used for this `EnhancedDataEvent`"""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """Not used for this `EnhancedDataEvent`"""
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Not used for this `EnhancedDataEvent`"""
  transactionProcessingType: CardTransactionProcessingType

  """Not used for this `EnhancedDataEvent`"""
  pointOfServiceDetails: PointOfServiceDetails

  """Not used for this `EnhancedDataEvent`"""
  additionalNetworkData: AdditionalNetworkData
}

union SimulateRefundPayload = ClearingEvent | UserError | AccessDeniedError

union SimulateReversalPayload = ReversalEvent | UserError | AccessDeniedError

union SimulateClearingPayload = ClearingEvent | UserError | AccessDeniedError

union SimulateAuthorizationPayload = AuthorizationEvent | UserError | AccessDeniedError

union SimulateAuthAndClearPayload = AuthorizationAndClearEvent | UserError | AccessDeniedError

union SimulateAuthorizationAdvicePayload = AuthorizationEvent | ReversalEvent | UserError | AccessDeniedError

union SimulateVisaFleetL3EnhancedDataPayload = EnhancedDataEvent | UserError | AccessDeniedError

union SimulateEnhancedDataPayload = EnhancedDataEvent | UserError | AccessDeniedError

"""An AuthorizationEvent for a transaction."""
type AuthorizationEvent implements Node & TransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `AuthorizationEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """ID of the transaction"""
  transactionId: ID @deprecated(reason: "Use transaction instead")

  """The `Transaction` for this event."""
  transaction: Transaction

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """The `Amount` approved for this `AuthorizationEvent`."""
  approvedAmount: Amount

  """The `Amount` requested to be approved for this `AuthorizationEvent`."""
  requestedAmount: Amount

  """The original `Amount` of this `AuthorizationEvent`."""
  originalAmount: Amount

  """
  The date and time, in ISO 8601 format, this `AuthorizationEvent` was created.
  """
  createdAt: String

  """The `PaymentCard` associated to this `AuthorizationEvent`."""
  paymentCard: PaymentCard

  """The `CardProduct` associated to this `AuthorizationEvent`."""
  cardProduct: CardProduct

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """Details if transaction supported collaborative auth"""
  collaborativeAuthorizationDetails: CollaborativeAuthorizationDetails

  """The date and time, in ISO 8601 format, the authorization will expire."""
  authorizationExpiration: String

  """The triggered spend rules and the results for the authorization."""
  spendRuleResults(
    """The number of results to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleResultConnection

  """The `Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  Determines whether this authorization was approved for partial or full amount.
  """
  partial: Boolean

  """
  A snapshot of the `PaymentCard` at the time of the `AuthorizationEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot

  """Additional transaction data for this transaction"""
  additionalTransactionData: [AdditionalTransactionData!]

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail

  """Fees applied to the transaction, if any."""
  fees: [TransactionFee!]
}

interface AdditionalTransactionData implements Node {
  """Globally unique id of a `AdditionalTransactionData`."""
  id: ID!
}

"""An Visa Fleet L2 additional transaction data"""
type VisaFleetL2TransactionData implements Node & AdditionalTransactionData {
  """Globally unique id of a `VisaFleetL2TransactionData`."""
  id: ID!

  """
  Describes the type of items included in the transaction. (Gas, non-fuel, fuel, and non-fuel)
  """
  visaFuelPurchaseType: VisaFuelPurchaseType

  """
  Indicates whether the transaction occurred at a self-service or a full-service station
  """
  visaFuelServiceType: VisaFuelServiceType

  """The variety of fuel purchased during the transaction"""
  visaFuelType: VisaFuelType

  """
  The amount of fuel purchased during the transaction.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelQuantity: UnsignedInt

  """The dimension utilized in conjunction with quantity"""
  visaFuelUnitOfMeasure: VisaFuelUnitOfMeasure

  """
  The price per unit of measure for the fuel.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelUnitCost: UnsignedInt

  """
  The fuel amount less any exempted taxes or discounts. The value will equal visaFuelQuantity * visaFuelUnitCost exclusive of taxes.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelNetAmount: UnsignedInt

  """
  The total amount for only the fuel purchased in the transaction. The value will equal visaFuelQuantity * visaFuelUnitCost inclusive of taxes.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaFuelGrossAmount: UnsignedInt

  """
  The non-fuel amount less any exempted taxes or discounts. The value will equal the sum of the line item(s) exclusive of taxes.
  
  There are 2 implied decimal places, thus a value of “1” is populated in this field as 100.
  """
  visaNonFuelNetAmount: UnsignedInt

  """
  The total amount for only the non-fuel products purchased in the transaction. The value will equal the sum of the line item(s) inclusive of taxes.
  
  There are 2 implied decimal places, thus a value of “1” is populated in this field as 100.
  """
  visaNonFuelGrossAmount: UnsignedInt

  """
  The VAT or tax rate applied for the transaction
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  visaTaxRate: UnsignedInt

  """An additional identifier to further differentiate the fuel product"""
  visaExpandedFuelType: VisaFuelType

  """
  Indicates whether the Merchant will send more additional (Level 3) information in the future
  """
  visaAdditionalDataIndicator: Boolean

  """
  An alphanumeric value representing either a Vehicle, Driver, or Generic ID
  """
  visaFleetIdentifier: String

  """
  A numeric value indicating the vehicle’s odometer reading at the time of the transaction.
  
  Up to 7 digits.
  """
  visaOdometerReading: UnsignedInt

  """Indicates whether Purchase Identifier is an order or invoice number"""
  visaPurchaseIdentifierFormat: VisaFleetPurchaseIdentifierFormat

  """An alphanumeric value representing an order or invoice number"""
  visaPurchaseIdentifier: String

  """An alphanumeric value representing the employee’s ID number"""
  visaFleetEmployeeNumber: String

  """An alphanumeric value representing the trailer’s ID number"""
  visaFleetTrailerNumber: String

  """An alphanumeric value representing the answer to a custom prompt"""
  visaFleetCustomPrompt1: String

  """An alphanumeric value representing the answer to a custom prompt"""
  visaFleetCustomPrompt2: String

  """
  A list of up to eight visaNonFuelProductCode values for products in the transaction
  """
  visaNonFuelProductCodes: [VisaNonFuelProductCode!]

  """Charging station power output capacity represented in kW"""
  visaChargingPowerCapacity: UnsignedInt

  """Specific charging reason code for this transaction"""
  visaChargingReasonCode: UnsignedInt @deprecated(reason: "Use visaEvChargingReasonCode instead")

  """Specific charging reason code for this transaction"""
  visaEvChargingReasonCode: VisaEvChargingReasonCode

  """
  Estimate of the total distance added in km/miles, based on the kWh added and the type of vehicle engine charged
  """
  visaEstimatedKmMilesAdded: UnsignedInt

  """
  Carbon footprint avoidance (how much was saved from this charge) measurement for the purchase on the transaction – measured in grams of carbon dioxide equivalent (CO2e)
  """
  visaCarbonFootprintAvoided: UnsignedInt

  """
  Estimated range in Km/Miles the car will have, after completion of the charge, once it leaves the electric vehicle charging station
  """
  visaEstimatedKmMilesAvailable: UnsignedInt

  """
  Maximum power dispensed during the specific charge session from that charging station. This could be different to the power output capacity of the station based on power management by the site operator
  """
  visaMaxPowerDispensed: UnsignedInt

  """
  Visa-defined code for a specific connector type to identify the connection for the charge session
  """
  visaConnectorType: String @deprecated(reason: "Use visaEvConnectorType instead")

  """
  Visa-defined code for a specific connector type to identify the connection for the charge session
  """
  visaEvConnectorType: VisaEvConnectorType

  """
  A list of fuel products purchased if this transaction contained multiple fuel types
  """
  visaFleetFuelLineItems: [VisaFleetL2FuelLineItem!]

  """
  The national tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  visaNationalTaxRate: UnsignedInt

  """
  Other tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  visaOtherTaxRate: UnsignedInt

  """Discount method applied to the transaction"""
  visaDiscountMethod: VisaFleetDiscountMethod

  """Identifies the entity that calculated the discount"""
  visaDiscountAgent: VisaFleetDiscountAgent

  """Identifies the discount plan applied to the transaction"""
  visaDiscountPlanIdentifier: String

  """Identifies the fleet client"""
  visaClientIdentifier: String
}

"""A `ManualAdjustmentEvent` for an event that triggers the ledger"""
type ManualAdjustmentEvent implements Node {
  """
  The ID of the manual adjustment event. This `id` can be used to later retrieve details of this `ManualAdjustmentEvent`.
  """
  id: ID!

  """The type of manual adjustment event."""
  adjustmentActivityType: ManualAdjustmentActivityType

  """
  The event encapsulate impacted account and amount for a `ManualAdjustment`.
  """
  manualAdjustmentDetails: [ManualAdjustmentDetail!]

  """Related original finanical event"""
  originalFinancialEvent: FinancialEvent @deprecated(reason: "Use originalFinancialEventId instead")

  """
  The date and time, in ISO 8601 format, this `ManualAdjustment` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `ManualAdjustment` was updated.
  """
  updatedAt: String

  """
  The ID of a financial event. This `id` can be used to later retrieve details of this `FinancialEvent` or correlate it with other events on this `ManualAdjustment`.
  """
  originalFinancialEventId: ID
}

union ManualAdjustmentDetail = CreditManualAdjustmentDetail | DebitManualAdjustmentDetail

"""
This event encapsulates the impacted account and credit amount for a `ManualAdjustmentEvent`.
"""
type CreditManualAdjustmentDetail {
  """The account that got impacted"""
  financialAccount: FinancialAccount

  """The `Amount` of the manual adjustment."""
  amount: Amount

  """The normal balance type of the `Ledger`."""
  normalBalance: NormalBalance

  """The name of the `Ledger`."""
  ledgerName: LedgerName
}

"""
This event encapsulates the impacted account and debit amount for a `ManualAdjustmentEvent`.
"""
type DebitManualAdjustmentDetail {
  """The account that got impacted"""
  financialAccount: FinancialAccount

  """The `Amount` of the manual adjustment."""
  amount: Amount

  """The normal balance type of the `Ledger`."""
  normalBalance: NormalBalance

  """The name of the `Ledger`."""
  ledgerName: LedgerName
}

"""The activity type for a `ManualAdjustmentEvent`"""
enum ManualAdjustmentActivityType {
  """This adjustment type is for account closure credit amount."""
  ACCOUNT_CLOSURE_CREDIT_AVAILABLE_CREDIT_SETTLEMENT

  """This adjustment type is for account closure credit amount."""
  ACCOUNT_CLOSURE_CREDIT_CHARGE_OFF

  """This adjustment type is for account closure secured amount."""
  ACCOUNT_CLOSURE_SECURED_DEPOSIT_SETTLEMENT

  """The adjustment type is for fee."""
  ADJUST_FEE

  """This adjustment type is for transaction amount."""
  CARD_TRANSACTION_ADJUSTMENT

  """This adjustment type is for chargeback."""
  CHARGEBACK

  """This adjustment type is for chargeback provisional credit amount."""
  CHARGEBACK_CREATE_PROVISIONAL_CREDIT

  """This adjustment type is for early wage account repayment amount."""
  EWA_REPAYMENT

  """This adjustment type is for general adjustment."""
  GENERAL_ADJUSTMENT

  """This adjustment type is for non-originating ACH amount."""
  NON_ORIGINATING_ACH_PAYROLL_LOAD

  """This adjustment type is for ACH unload amount."""
  NON_ORIGINATING_ACH_UNLOAD

  """This adjustment type is for originating ACH payment."""
  ORIGINATING_ACH_COMMERCIAL_SECURED_CREDIT_CARD_BALANCE_PAYMENT

  """This adjustment type is for originating ACH deposit."""
  ORIGINATING_ACH_COMMERCIAL_SECURED_CREDIT_DEPOSIT

  """This adjustment type is for originating ACH payment."""
  ORIGINATING_ACH_COMMERCIAL_SECURED_CREDIT_DEPOSIT_REPAYMENT

  """This adjustment type is for receivable purchase."""
  RECEIVABLE_PURCHASE

  """This adjustment type is for receivable purchase."""
  RECEIVABLE_PURCHASE_INTEREST

  """This adjustment type is for risk hold amount."""
  RISK_HOLD_CREDIT

  """This adjustment type is for wire transfer amount."""
  WIRE_TRANSFER_ACCOUNT_LOAD

  """This adjustment type is for wire transfer amount."""
  WIRE_TRANSFER_ACCOUNT_UNLOAD

  """`Transfer` for adjusting an EWA repayment"""
  REPAYMENT_ADJUSTMENT

  """This adjustment type is for interest waive amount."""
  INTEREST_CHARGED_ADJUSTMENT
}

"""
An `IssuerPreliminaryAuthorizationEvent` for a transaction. This event is created before subscriber's collaborative authorization endpoint is called. `AuthorizationEvent` is created after the subscribers response to collaborative request.
"""
type IssuerPreliminaryAuthorizationEvent implements Node & TransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `IssuerPreliminaryAuthorizationEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The `Transaction` for this event."""
  transaction: Transaction

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """Code representing the result of CVV (security code) verification"""
  cvvResponseCode: CVVResponseCode

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID

  """The `Amount` approved for this `IssuerPreliminaryAuthorizationEvent`."""
  approvedAmount: Amount

  """
  The `Amount` requested to be approved for this `IssuerPreliminaryAuthorizationEvent`.
  """
  requestedAmount: Amount

  """The original `Amount` of this `IssuerPreliminaryAuthorizationEvent`."""
  originalAmount: Amount

  """
  The date and time, in ISO 8601 format, this `IssuerPreliminaryAuthorizationEvent` was created.
  """
  createdAt: String

  """
  The `PaymentCard` associated to this `IssuerPreliminaryAuthorizationEvent`.
  """
  paymentCard: PaymentCard

  """
  The `CardProduct` associated to this `IssuerPreliminaryAuthorizationEvent`.
  """
  cardProduct: CardProduct

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The date and time, in ISO 8601 format, the authorization will expire."""
  authorizationExpiration: String

  """The triggered spend rules and the results for the authorization."""
  spendRuleResults(
    """The number of results to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleResultConnection

  """The `Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Service Input."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  A snapshot of the `PaymentCard` at the time of the `IssuerPreliminaryAuthorizationEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot
}

interface PaymentCardTransactionEvent {
  """The `Amount` approved for this `PaymentCardTransactionEvent`."""
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `AuthorizationEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The original `Amount` of this `PaymentCardTransactionEvent`."""
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be approved for this `PaymentCardTransactionEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData
}

"""
PaymentCardAuthorizationApprovedEvent indicates if a Payment Card Transaction Authorization has been approved.
"""
type PaymentCardAuthorizationApprovedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardAuthorizationApprovedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """
  The `Amount` approved for this `PaymentCardAuthorizationApprovedEvent`.
  """
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardAuthorizationApprovedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The original `Amount` of this `PaymentCardAuthorizationApprovedEvent`."""
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be approved for this `PaymentCardAuthorizationApprovedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  Determines whether this authorization was approved for partial or full amount.
  """
  partial: Boolean

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail
}

"""
PaymentCardAuthorizationCreatedEvent indicates if a Payment Card Transaction Authorization has been created.
"""
type PaymentCardAuthorizationCreatedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardAuthorizationCreatedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID! @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """The `Amount` approved for this `PaymentCardAuthorizationCreatedEvent`."""
  approvedAmount: Amount @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """
  The date and time, in ISO 8601 format, this `PaymentCardAuthorizationCreatedEvent` was created.
  """
  createdAt: String @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """The original `Amount` of this `PaymentCardAuthorizationCreatedEvent`."""
  originalAmount: Amount @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """
  The `Amount` requested to be approved for this `PaymentCardAuthorizationCreatedEvent`.
  """
  requestedAmount: Amount @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """ID of the transaction"""
  transactionId: ID @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """ID of the account holder for the card account"""
  accountHolderId: ID @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """ID of the financial account."""
  financialAccountId: ID @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """ID of the payment card."""
  cardId: ID @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """The `Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """
  Maximum balance allowed for the card account at the time of this transaction event
  """
  currentFinancialAccountMaximumBalanceAmount: Amount @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot @deprecated(reason: "`PaymentCardAuthorizationCreatedEvent` is no longer supported")
}

"""
PaymentCardAuthorizationDeclinedEvent indicates if a Payment Card Transaction Authorization has been declined.
"""
type PaymentCardAuthorizationDeclinedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardAuthorizationDeclinedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """
  The `Amount` approved for this `PaymentCardAuthorizationDeclinedEvent`.
  """
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardAuthorizationDeclinedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The original `Amount` of this `PaymentCardAuthorizationDeclinedEvent`."""
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be approved for this `PaymentCardAuthorizationDeclinedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot
}

"""
PaymentCardAuthorizationReversedEvent indicates that a PaymentCard Transaction Reversal has occurred.
"""
type PaymentCardAuthorizationReversedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardAuthorizationReversedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """
  The `Amount` approved for this `PaymentCardAuthorizationReversedEvent`.
  """
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardAuthorizationReversedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The original `Amount` of this `PaymentCardAuthorizationReversedEvent`."""
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be reversed for this `PaymentCardAuthorizationReversedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  Determines whether this is an issuer initiated reversal for an expired authorization.
  """
  issuerExpiredAuthorization: Boolean

  """
  Determines whether this is a partial or full reversal for an authorization.
  """
  partial: Boolean

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail
}

"""
PaymentCardClearedEvent indicates if a Payment Card Transaction has been cleared. This event will be conditionally fired after a `PaymentCardAuthorizationApprovedEvent` | `PaymentCardAuthorizationDeclinedEvent`. This event will not be triggered after a `PaymentCardAuthorizationAndClearApprovedEvent` | `PaymentCardAuthorizationAndClearDeclinedEvent`
"""
type PaymentCardClearedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardClearedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The `Amount` approved for this `PaymentCardClearedEvent`."""
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardClearedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The original `Amount` of this `PaymentCardClearedEvent`."""
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be approved for this `PaymentCardClearedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  Determines whether this is a partial or full clear for an authorization.
  """
  partial: Boolean

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail
}

"""
PaymentCardEnhancedDataEvent indicates if enhanced data for a Payment Card Transaction has been received. This event will be conditionally fired after a `PaymentCardClearedEvent`. This event will not be triggered after a `PaymentCardAuthorizationAndClearApprovedEvent` | `PaymentCardAuthorizationAndClearDeclinedEvent`
"""
type PaymentCardEnhancedDataEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardEnhancedDataEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The `Amount` approved for this `PaymentCardEnhancedDataEvent`."""
  approvedAmount: Amount

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardEnhancedDataEvent` was created.
  """
  createdAt: String

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  cvvResponseCode: CVVResponseCode

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  merchantDetails: MerchantDetails

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  originalAmount: Amount

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  pinResponseCode: PinResponseCode

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  postalCodeResponseCode: PostalCodeResponseCode

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction"""
  transactionId: ID

  """ID of the account holder for the card account"""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  currentFinancialAccountMaximumBalanceAmount: Amount

  """
  Represents the customer transaction type or the center function being processed.
  """
  transactionProcessingType: CardTransactionProcessingType

  """Not used for this `PaymentCardEnhancedDataEvent`"""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData
}

"""
PaymentCardAuthorizationAndClearApprovedEvent indicates that a PaymentCard Transaction Authorization and Clear has been approved.
"""
type PaymentCardAuthorizationAndClearApprovedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardAuthorizationAndClearApprovedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """
  The `Amount` approved for this `PaymentCardAuthorizationAndClearApprovedEvent`.
  """
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardAuthorizationAndClearApprovedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """
  The details about the merchant who requested the authorization and clear.
  """
  merchantDetails: MerchantDetails

  """
  The original `Amount` of this `PaymentCardAuthorizationAndClearApprovedEvent`.
  """
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be approved for this `PaymentCardAuthorizationAndClearApprovedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  Determines whether this authorization and clear was approved for partial or full amount.
  """
  partial: Boolean

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail
}

"""
PaymentCardAuthorizationAndClearDeclinedEvent indicates that a PaymentCard Transaction Authorization and Clear has been declined.
"""
type PaymentCardAuthorizationAndClearDeclinedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardAuthorizationAndClearDeclinedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """
  The `Amount` approved for this `PaymentCardAuthorizationAndClearDeclinedEvent`.
  """
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardAuthorizationAndClearDeclinedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """
  The details about the merchant who requested the authorization and clear.
  """
  merchantDetails: MerchantDetails

  """
  The original `Amount` of this `PaymentCardAuthorizationAndClearDeclinedEvent`.
  """
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be approved for this `PaymentCardAuthorizationAndClearDeclinedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot
}

"""
PaymentCardVerificationApprovedEvent indicates that a PaymentCard Transaction Verification has been approved.
"""
type PaymentCardVerificationApprovedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardVerificationApprovedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The `Amount` verified for this `PaymentCardVerificationApprovedEvent`."""
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardVerificationApprovedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The original `Amount` of this `PaymentCardVerificationApprovedEvent`."""
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be verified for this `PaymentCardVerificationApprovedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot
}

"""
PaymentCardVerificationDeclinedEvent indicates that a PaymentCard Transaction Verification has been declined.
"""
type PaymentCardVerificationDeclinedEvent implements Node & PaymentCardTransactionEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `PaymentCardVerificationDeclinedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The `Amount` verified for this `PaymentCardVerificationDeclinedEvent`."""
  approvedAmount: Amount

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """
  The date and time, in ISO 8601 format, this `PaymentCardVerificationDeclinedEvent` was created.
  """
  createdAt: String

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The details about the merchant who requested the authorization."""
  merchantDetails: MerchantDetails

  """The original `Amount` of this `PaymentCardVerificationDeclinedEvent`."""
  originalAmount: Amount

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """
  The `Amount` requested to be verified for this `PaymentCardVerificationDeclinedEvent`.
  """
  requestedAmount: Amount

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """ID of the transaction."""
  transactionId: ID

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """ID of the financial account."""
  financialAccountId: ID

  """ID of the payment card."""
  cardId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  A snapshot of the `PaymentCard` at the time of the `PaymentCardTransactionEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot
}

"""The details about the merchant who requested the authorization."""
type MerchantDetails {
  """The merchant identifier."""
  merchantId: String

  """The merchant category for the authorization."""
  category: MerchantCategory

  """The merchant category code for the authorization."""
  categoryCode: String

  """The merchant country code for the authorization."""
  countryCodeAlpha3: ISO3166Alpha3Country

  """The description. a.k.a. "Descriptor"."""
  description: String

  """The merchant or institution name."""
  name: String

  """The address of the merchant."""
  address: Address
}

"""
Details regarding your responses and settings for collaborative authorization on a transaction
"""
type CollaborativeAuthorizationDetails {
  """
  Response code returned by you in collaborative authorization flow. This Response code is set to TIMEOUT if the platform does not receive a response within the allotted time.
  If an error occurred while receiving your response, the response code will be set to ERROR
  """
  responseCode: CollaborativeAuthorizationResponseCode

  """
  The `Amount` you authorized for the transaction. Value will be ZERO if you responded with an invalid amount or did not provide an amount.
  """
  authorizedAmount: Amount

  """
  The state of the product's stand-in value at the time this event was processed, which determines whether transactions are approved or declined in the case of a timeout in the collaborative authorization flow.
  """
  currentProductStandIn: CollaborativeAuthorizationStandIn
}

"""
Determines whether transactions are approved or declined in the case of a timeout during collaborative authorization.
"""
enum CollaborativeAuthorizationStandIn {
  """
  Transactions should be approved if Subcriber does not respond to collaborative authorization request.
  """
  APPROVE

  """
  Transactions should be declined if the Subscriber does not respond to collaborative authorization request.
  """
  DECLINE
}

"""Details about the point of service for the transaction."""
type PointOfServiceDetails {
  """The point of service category."""
  category: PointOfServiceCategory

  """The PAN entry mode."""
  panEntryMode: PanEntryMode

  """The PIN entry mode."""
  pinEntryMode: PinEntryMode

  """The attendance at the terminal."""
  terminalAttendance: TerminalAttendance

  """Represents whether the cardholder is present or not."""
  isCardHolderPresent: Boolean

  """Represents whether the card is present or not."""
  isCardPresent: Boolean

  """Represents whether this transaction is recurring or not."""
  isRecurring: Boolean

  """Represents whether the terminal supports partial approval or not."""
  terminalSupportsPartialApproval: Boolean

  """Tha capabilities of the terminal to read card data"""
  cardDataInputCapability: CardDataInputCapability
}

"""Additional network transaction data."""
union AdditionalNetworkData = VisaData | MastercardData

"""Visa specific transaction data."""
type VisaData {
  """The transaction identifier sent by Visa."""
  transactionIdentifier: String

  """
  An alphanumeric value generated by Highnote and shared with Visa when an authorization is approved.
  """
  authorizationCode: String

  """A number used by Visa to identify the acquiring institution."""
  acquiringInstitutionIdentificationCode: String

  """
  A number assigned by the message initiator that uniquely identifies a transaction.
  """
  systemTraceAuditNumber: String

  """An value used to identify and track a transaction’s separate messages."""
  retrievalReferenceNumber: String

  """
  The date and time that the network transmitted the transaction. This value is expressed in Greenwich Mean Time (GMT) with format (MMDDhhmmss)
  """
  networkTransmissionDateAndTime: String

  """
  The risk score for the transaction provided by Visa. Values are between 0-99.
  """
  riskScore: UnsignedInt
}

"""Mastercard specific transaction data."""
type MastercardData {
  """
  Mastercard’s alphanumeric Banknet reference number used to identify the transaction.
  """
  banknetReferenceNumber: String

  """
  An alphanumeric value generated by Highnote and shared with Mastercard when an authorization is approved.
  """
  authorizationCode: String

  """A number used by Mastercard to identify the acquiring institution."""
  acquiringInstitutionIdentificationCode: String

  """
  A number assigned by the message initiator that uniquely identifies a transaction.
  """
  systemTraceAuditNumber: String

  """An value used to identify and track a transaction’s separate messages."""
  retrievalReferenceNumber: String

  """
  The date and time that the network transmitted the transaction. This value is expressed in Greenwich Mean Time (GMT) with format (MMDDhhmmss)
  """
  networkTransmissionDateAndTime: String

  """
  The fraud score for the transaction provided by Mastercard. Values are between 0-999.
  """
  fraudScore: UnsignedInt
}

"""Details to simulate the authorization."""
input SimulateAuthorizationInput {
  """
  The optional ID of a previous authorization.
  
  Typically, this is only used to simulate "incremental authorization".
  """
  id: ID

  """The ID of the payment card to be used."""
  cardId: ID!

  """
  The `Amount` of the authorization provided as per the specifications of the given currency.
  """
  amount: AmountInput!

  """
  Details to override about a `PaymentCard` or card holder to test Spend Control Rules.
  """
  verificationOverrides: VerificationOverridesInput

  """
  Details to set about a Merchant submitting the authorization.
  
  You can use these details to test merchant specific spend rules.
  """
  merchantDetails: MerchantDetailsInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""Details to simulate the authorization and clear."""
input SimulateSingleStepAuthAndClearInput {
  """The ID of the payment card to be used."""
  cardId: ID!

  """
  The `Amount` of the authorization provided as per the specifications of the given currency.
  """
  amount: AmountInput!

  """
  Details to override about a `PaymentCard` or card holder to test Spend Control Rules.
  """
  verificationOverrides: VerificationOverridesInput

  """
  Details to set about a Merchant submitting the authorization.
  
  You can use these details to test merchant specific spend rules.
  """
  merchantDetails: MerchantDetailsInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""
Details to simulate a Visa Fleet authorization. Allows for partial authorizations
"""
input SimulateVisaFleetAuthorizationInput {
  """
  The optional ID of a previous authorization.
  
  Typically, this is only used to simulate "incremental authorization".
  """
  id: ID

  """The ID of the payment card to be used."""
  cardId: ID!

  """
  The `Amount` of the authorization provided as per the specifications of the given currency.
  """
  amount: AmountInput!

  """
  Details to override about a `PaymentCard` or card holder to test Spend Control Rules.
  """
  verificationOverrides: VerificationOverridesInput

  """
  Details to set about a Merchant submitting the authorization.
  
  You can use these details to test merchant specific spend rules.
  """
  merchantDetails: MerchantDetailsInput

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Fleet specific details for this authorization."""
  fleetAuthorizationData: SimulateVisaFleetAuthorizationDataInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""A Authorization and Clear Event for a transaction."""
type AuthorizationAndClearEvent implements Node & TransactionEvent {
  """The ID of the transaction event."""
  id: ID!

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """The `Transaction` for this event."""
  transaction: Transaction

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """The `Amount` approved for this `AuthorizationAndClearEvent`."""
  approvedAmount: Amount

  """
  The `Amount` requested to be approved for this `AuthorizationAndClearEvent`.
  """
  requestedAmount: Amount

  """The original `Amount` of the `AuthorizationAndClearEvent`."""
  originalAmount: Amount

  """
  The date and time, in ISO 8601 format, this `AuthorizationAndClearEvent` was created.
  """
  createdAt: String

  """The `PaymentCard` associated to this `AuthorizationAndClearEvent`."""
  paymentCard: PaymentCard

  """The `CardProduct` associated to this `AuthorizationAndClearEvent`."""
  cardProduct: CardProduct

  """
  The details about the merchant who requested the authorization and clear.
  """
  merchantDetails: MerchantDetails

  """Details if transaction supported collaborative auth."""
  collaborativeAuthorizationDetails: CollaborativeAuthorizationDetails

  """
  The triggered spend rules and the results for the authorization and clear.
  """
  spendRuleResults(
    """The number of results to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleResultConnection

  """ID of the account holder for the card account."""
  accountHolderId: ID

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """Disputes on this `AuthorizationAndClearEvent`."""
  disputes: [PaymentCardTransactionDispute!]

  """
  Determines whether this authorization and clear was approved for partial or full amount.
  """
  partial: Boolean

  """
  A snapshot of the `PaymentCard` at the time of the `AuthorizationAndClearEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot

  """Determines whether this event is an advice."""
  advice: Boolean

  """Details if event is an advice."""
  adviceDetail: AdviceDetail

  """Fees applied to the transaction, if any."""
  fees: [TransactionFee!]
}

"""A Verification Event for a transaction."""
type VerificationEvent implements Node & TransactionEvent {
  """The ID of the transaction event."""
  id: ID!

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """The `Transaction` for this event."""
  transaction: Transaction

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """Code representing the result of CVV (security code) verification."""
  cvvResponseCode: CVVResponseCode

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """The `Amount` approved for this `VerificationEvent`."""
  approvedAmount: Amount

  """The `Amount` requested to be approved for this `VerificationEvent`."""
  requestedAmount: Amount

  """The original `Amount` of the `VerificationEvent`."""
  originalAmount: Amount

  """
  The date and time, in ISO 8601 format, this `VerificationEvent` was created.
  """
  createdAt: String

  """The `PaymentCard` associated to this `VerificationEvent`."""
  paymentCard: PaymentCard

  """The `CardProduct` associated to this `VerificationEvent`."""
  cardProduct: CardProduct

  """The details about the merchant who requested the verification."""
  merchantDetails: MerchantDetails

  """The triggered spend rules and the results for the verification."""
  spendRuleResults(
    """The number of results to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleResultConnection

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  A snapshot of the `PaymentCard` at the time of the `VerificationEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot
}

"""A Balance Inquiry Event for a transaction."""
type BalanceInquiryEvent implements Node & TransactionEvent {
  """The ID of the transaction event."""
  id: ID!

  """The Highnote response code."""
  responseCode: TransactionEventResponseCode

  """The `Transaction` for this event."""
  transaction: Transaction

  """The response code from the card network (e.g. Mastercard)."""
  networkResponseCode: String @deprecated(reason: "Use responseCode instead")

  """Code representing the result of AVS address verification."""
  avsResponseCode: AVSResponseCode

  """Code representing the result of PIN verification."""
  pinResponseCode: PinResponseCode

  """Code representing the result of AVS postal code verification."""
  postalCodeResponseCode: PostalCodeResponseCode

  """Code representing the result of CVV (security code) verification"""
  cvvResponseCode: CVVResponseCode

  """The transaction ID from the card network (e.g. Mastercard)."""
  networkTransactionId: ID @deprecated

  """The `Amount` approved for this `BalanceInquiryEvent`."""
  approvedAmount: Amount

  """The `Amount` requested to be approved for this `BalanceInquiryEvent`."""
  requestedAmount: Amount

  """The original `Amount` of the `BalanceInquiryEvent`."""
  originalAmount: Amount

  """
  The date and time, in ISO 8601 format, this `BalanceInquiryEvent` was created.
  """
  createdAt: String

  """The `PaymentCard` associated to this `BalanceInquiryEvent`."""
  paymentCard: PaymentCard

  """The `CardProduct` associated to this `BalanceInquiryEvent`."""
  cardProduct: CardProduct

  """The details about the merchant who requested the balance inquiry."""
  merchantDetails: MerchantDetails

  """The triggered spend rules and the results for the balance inquiry."""
  spendRuleResults(
    """The number of results to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleResultConnection

  """`Amount` available to spend after this transaction event."""
  currentFinancialAccountAvailableToSpendAmount: Amount

  """
  Maximum balance allowed for the card account at the time of this transaction event.
  """
  currentFinancialAccountMaximumBalanceAmount: Amount

  """Represents the customer transaction type being processed."""
  transactionProcessingType: CardTransactionProcessingType

  """The Point Of Service Details."""
  pointOfServiceDetails: PointOfServiceDetails

  """Network specific transaction data."""
  additionalNetworkData: AdditionalNetworkData

  """
  A snapshot of the `PaymentCard` at the time of the `BalanceInquiryEvent`.
  """
  paymentCardSnapshot: PaymentCardSnapshot
}

"""The capabilities of the terminal to read card data."""
enum CardDataInputCapability {
  """The terminal’s PAN entry capability is unknown."""
  CAPABILITY_UNKNOWN

  """The PAN was entered manually, and the terminal was not used."""
  MANUAL_NO_TERMINAL

  """The terminal supports reading the PAN via the card’s magnetic stripe."""
  MAGNETIC_STRIPE

  """The terminal supports reading the PAN via barcode or QR code."""
  BARCODE_OR_QR_CODE

  """
  The terminal supports reading the PAN via Optical Character Recognition.
  """
  OCR

  """
  The terminal supports reading the PAN via the Integrated Circuit Card (ICC - chip).
  """
  INTEGRATED_CIRCUIT_CARD

  """The terminal supports keyed entry of the PAN."""
  KEY_ENTERED

  """
  The terminal supports reading the PAN via the card’s contactless chip only. The terminal does not support reading the PAN via the card’s contact chip.
  """
  CONTACTLESS_ONLY_SUPPORTED

  """
  The terminal supports file reading, but does not supporting reading card data.
  """
  FILE

  """
  The terminal only supports reading the PAN via the magnetic stripe’s contactless method.
  """
  CONTACTLESS_READ_VIA_MAG_STRIPE_RULES

  """
  The terminal only supports reading the PAN via the card chip’s contactless method.
  """
  CONTACTLESS_READ_VIA_CHIP_RULES

  """
  The terminal supports reading the PAN from the magnetic stripe or keyed entry of the PAN only.
  """
  MAG_STRIPE_READER_AND_KEY_ENTRY

  """
  The terminal supports an Integrated Circuit Card (ICC) and can read the PAN via the card’s contact chip, magnetic stripe, or contactless chip.
  """
  MAG_STRIPE_READER_AND_EMV_ICC

  """
  The terminal supports reading the PAN from the magnetic stripe or the card’s chip only and keyed entry of the PAN.
  """
  MAG_STRIPE_READER_AND_KEY_ENTRY_AND_EMV_ICC

  """Secure Cardless Entry."""
  SECURE_CARDLESS_ENTRY
}

"""Details about the point of service for the transaction."""
input PointOfServiceDetailsInput {
  """The point of service category."""
  category: PointOfServiceCategory

  """The PAN entry mode."""
  panEntryMode: PanEntryMode

  """The PIN entry mode."""
  pinEntryMode: PinEntryMode

  """The attendance at the terminal."""
  terminalAttendance: TerminalAttendance

  """Represents whether the cardholder is present or not."""
  isCardHolderPresent: Boolean

  """Represents whether the card is present or not."""
  isCardPresent: Boolean

  """
  Represents whether this transaction is recurring or not.
  When this field is set to `true`, `isCardholderPresent` and `isCardPresent` should be false.
  """
  isRecurring: Boolean

  """Represents whether the terminal supports partial approval or not."""
  terminalSupportsPartialApproval: Boolean

  """Tha capabilities of the terminal to read card data."""
  cardDataInputCapability: CardDataInputCapability
}

"""
Details to set about a Merchant submitting the authorization.

You can use these details to test merchant specific spend rules.
"""
input MerchantDetailsInput {
  """The merchant category for the authorization."""
  category: MerchantCategory

  """The merchant country code for the authorization."""
  countryCodeAlpha3: ISO3166Alpha3Country

  """
  The description. a.k.a. "Descriptor"
  """
  description: String

  """
  The unique ID assigned by the merchant's acquirer to identify the merchant account. This is also referred to as the MID.
  """
  merchantId: String

  """
  The merchant or institution name.
  **Maximum length:** 25 characters
  """
  name: String

  """Represents the address of the merchant as sent by the acquirer."""
  address: MerchantDetailsAddressInput
}

"""
Input representing the parts of an address for a `MerchantDetails` input.
"""
input MerchantDetailsAddressInput {
  """
  The postal code of the address. The value can include 5 numbers only or a hyphen - and 4 numbers.
  """
  postalCode: String!

  """
  A region for the address based on the two letter state, including districts and outlying areas.
  """
  region: String!

  """
  The locality of the address up to 13 characters (e.g. town, city)
  
  The validation for the `locality` uses the following regex pattern `^['\p{L}]+(?:[ \p{L},'-:])*$`.
  
  It checks to ensure it begins with a single quote or any letter, followed by whitespace, commas, single quote, any letter, or character in this set '()*+,-./0123456789: .
  """
  locality: String!

  """
  The [three letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) where the address resides.
  """
  countryCodeAlpha3: ISO3166Alpha3Country!
}

"""
Verification details that can be overridden when simulating an Authorization.
"""
input VerificationOverridesInput {
  """
  Optional card security code value to verify (also referred to as CVV, CSC, CVC).
  Use this field to override the CVV generated when the `PaymentCard` was issued.
  
  **Minimum length:** 3 characters
  
  **Maximum length:** 4 characters
  """
  cvv: String

  """
  Optional card holder address to use for AVS verification.
  
  Use this field to override the address present on the card holder.
  """
  cardholderAddress: AddressInput

  """
  Optionally simulate a PIN entered during the transaction.
  
  **Minimum length:** 4 characters
  
  **Maximum length:** 4 characters
  """
  pin: String
}

"""
A ledger represents a record in an account used to collect related activity.
For example, an `Organization` will have a `CASH` ledger which tracks every transaction related to `CASH`.
"""
type Ledger implements Node {
  """Global ID used to reference the `Ledger` in operations."""
  id: ID!

  """The name of the `Ledger`."""
  name: LedgerName

  """A description of what activity the ledger is tracking."""
  description: String

  """
  The expected normal balance of the `Ledger`.
  
  In most cases the corresponding `creditBalance` and `debitBalance` field will have a non-zero value. If the corresponding `creditBalance` or `debitBalance` field has a zero value and the other `creditBalance` or `debitBalance` field has a value greater than zero, that greater than zero value represents a negative balance on the ledger.
  """
  normalBalance: NormalBalance

  """
  The credit balance of the `Ledger`.
  
  When the `Ledger`'s `normalBalance` is `CREDIT` this field should change based on activity. Otherwise, the `value` will stay zero. If the balance is negative, this amount will be zero, and the `DEBIT` amount will be positive. Refer to `normalBalance` definition to see information about possible negative balances.
  """
  creditBalance: Amount

  """
  The debit balance of the `Ledger`.
  
  When the `Ledger`'s `normalBalance` is `DEBIT` this field should change based on activity. Otherwise, the `value` will stay zero. If the balance is negative, this amount will be zero, and the `CREDIT` amount will be positive. Refer to `normalBalance` definition to see information about possible negative balances.
  """
  debitBalance: Amount

  """
  The date and time, in ISO 8601 format, the `debitBalance` and `creditBalance` were last calculated.
  """
  asOf: String

  """The financial account the ledger is backing."""
  financialAccount: FinancialAccount

  """
  The ledger entries that belong to this ledger
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  ledgerEntries(
    """The number of `LedgerEntry` to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Ledger Entries."""
    filterBy: LedgerEntriesFilterInput
  ): LedgerEntryConnection
}

"""
The possible values of a Ledger's name, based on the type of activity a ledger tracks.
"""
enum LedgerName {
  """
  The name of a ledger that tracks the credit limit for an Account Holder on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = CREDIT.
  """
  ACCOUNT_HOLDER_CREDIT_LIMIT

  """
  The name of a ledger that tracks an Account holder payment owed on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = CREDIT.
  """
  ACCOUNT_HOLDER_PAYMENT_PAYABLE

  """
  The name of a ledger that tracks an Account holder payment to be received on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = DEBIT.
  """
  ACCOUNT_HOLDER_PAYMENT_RECEIVABLE

  """
  The name of a ledger that tracks the current account holder pseudo limit funds on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = CREDIT.
  """
  ACCOUNT_HOLDER_PSEUDO_LIMIT

  """
  The name of a ledger that tracks the collateral in the form of a secured deposit associated to an Account Holder’s `FinancialAccount` associated to a Secured Credit Card Product. NormalBalanceType = DEBIT.
  """
  ACCOUNT_HOLDER_SECURED_DEPOSIT

  """
  The name of a ledger that tracks pending ACH Debits owed on a withdrawal for a `FinancialAccount`. NormalBalanceType = CREDIT.
  """
  ACH_DEBIT_PAYABLE

  """
  The name of a ledger that tracks pending ACH settlements on a `FinancialAccount` that have the `DirectDepositFinancialAccountFeature` enabled. NormalBalanceType = CREDIT.
  """
  ACH_PENDING_SETTLEMENT

  """
  The name of a ledger that tracks pending ACH settlements on a withdrawn for a `FinancialAccount`. NormalBalanceType = DEBIT.
  """
  ACH_PENDING_SETTLEMENT_OUT

  """
  The name of a ledger that tracks activity on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  ACTIVITY

  """
  The name of a ledger that tracks amount of credit allocated to Account Holders on a Card Product `FinancialAccount` associated to a credit Card Product. NormalBalanceType = DEBIT.
  """
  ALLOCATED_CREDIT_LIMIT

  """
  The name of a ledger that tracks the current allocated pseudo limit funds on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = DEBIT.
  """
  ALLOCATED_PSEUDO_LIMIT

  """
  The name of a ledger that tracks authorizations on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  AUTHORIZATION

  """
  The name of a ledger that tracks the money available to spend for an account. NormalBalanceType = CREDIT.
  """
  AVAILABLE_CASH

  """
  The name of a ledger that tracks the available credit on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = CREDIT.
  """
  AVAILABLE_CREDIT

  """
  The name of a ledger that tracks the amount owed by `PaymentCard` account to a card network (e.g., Mastercard, Visa, etc.). NormalBalanceType = CREDIT.
  """
  CARD_PAYABLE

  """
  The name of a ledger that tracks the amount owed to a `PaymentCard` from a card network (e.g., Mastercard, Visa, etc.). NormalBalanceType = DEBIT.
  """
  CARD_RECEIVABLE

  """
  The name of a ledger that tracks card transaction credit holds on a `PaymentCard`. NormalBalanceType = DEBIT.
  """
  CARD_TRANSACTION_CREDIT_HOLD

  """
  The name of a ledger that tracks the actual money in the account. The ledger can be impacted by any money movement, including cleared transactions and transfers. NormalBalanceType = DEBIT.
  """
  CASH

  """
  The name of a ledger that tracks cash expense on a `PaymentCard`. NormalBalanceType = DEBIT.
  """
  CASH_EXPENSE

  """
  The name of a ledger that tracks the initiation of a `CheckPayment` on a `FinancialAccount`. NormalBalanceType = CREDIT.
  """
  CHECK_PAYABLE

  """
  The name of a ledger that tracks the processing of a `CheckPayment`. NormalBalanceType = CREDIT.
  """
  CHECK_PROCESSING

  """
  The name of a ledger that tracks the settlement of `CheckPayment` funds. NormalBalanceType = DEBIT.
  """
  CHECK_SETTLEMENT_DEPOSIT

  """
  The name of a ledger that tracks cleared authorizations on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  CLEARED

  """
  The name of a ledger that tracks credit authorizations on a `PaymentCard`. These are authorizations that are typically associated with a refund. NormalBalanceType = DEBIT.
  """
  CREDIT_AUTHORIZATION

  """
  The name of a ledger that tracks credit holds on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  CREDIT_HOLD

  """
  The name of a ledger that tracks the Credit Limit minus the outstanding balance on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = DEBIT.
  """
  CREDIT_OUTSTANDING

  """
  The name of a ledger that tracks deposit authorizations on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  DEPOSIT_AUTHORIZATION

  """
  The name of a ledger that tracks deposit holds on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  DEPOSIT_HOLD

  """
  The name of a ledger that tracks deposits waiting to be received on a `FinancialAccount` that have the `DirectDepositFinancialAccountFeature` enabled. NormalBalanceType = DEBIT.
  """
  DEPOSIT_RECEIVABLE

  """
  The name of a ledger that tracks the amount issued to a `FinancialAccount` for a dispute. NormalBalanceType = CREDIT.
  """
  DISPUTE_CREDIT

  """
  The name of a ledger that tracks the amount owed by the issuer for a dispute on a `FinancialAccount`. NormalBalanceType = DEBIT.
  """
  DISPUTE_EXPENSE

  """
  The name of a ledger that tracks surcharge fee authorizations on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  FEE_AUTHORIZATION

  """
  The name of a ledger that tracks cleared surcharge fee authorizations on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  FEE_CLEARED

  """
  The name of a ledger that tracks funding hold on an account. NormalBalanceType = CREDIT.
  """
  FUND_IN_HOLD

  """
  The name of a ledger that tracks interchange revenue from payment card transactions. NormalBalanceType = CREDIT.
  """
  INTERCHANGE_REVENUE

  """
  The name of a ledger that tracks the amount owed to an account from a card network due to a refunds or adjustments. NormalBalanceType = DEBIT.
  """
  NETWORK_CREDIT_RECEIVABLE

  """
  The name of a ledger that tracks the amount paid to a card network (e.g., Mastercard, Visa, etc.). NormalBalanceType = DEBIT.
  """
  NETWORK_EXPENSE

  """
  The name of a ledger that tracks the amount owed to a card network (e.g., Mastercard, Visa, etc.). NormalBalanceType = CREDIT.
  """
  NETWORK_PAYABLE

  """
  The name of a ledger that tracks the amount owed to an account from a card network (e.g., Mastercard, Visa, etc.). NormalBalanceType = DEBIT.
  """
  NETWORK_RECEIVABLE

  """
  The name of a ledger that tracks outstanding balance owed on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = CREDIT.
  """
  OUTSTANDING_BALANCE_PAYABLE

  """
  The name of a ledger that tracks outstanding balance to be received on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = DEBIT.
  """
  OUTSTANDING_BALANCE_RECEIVABLE

  """
  The name of a ledger that tracks the current payment interchange fee payable funds on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = CREDIT.
  """
  PAYMENT_INTERCHANGE_FEE_PAYABLE

  """
  The name of a ledger that tracks the current payment network fee payable funds on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = CREDIT.
  """
  PAYMENT_NETWORK_FEE_PAYABLE

  """
  The name of a ledger that tracks the current payment payout payable funds on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = CREDIT.
  """
  PAYMENT_PAYOUT_PAYABLE

  """
  The name of a ledger that tracks the current payment platform fee payable funds on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = CREDIT.
  """
  PAYMENT_PLATFORM_FEE_PAYABLE

  """
  The name of a ledger that tracks Payroll Advance payable on a `FinancialAccount` associated to an `EARNED_WAGE_ACCESS` Card Product. NormalBalanceType = CREDIT.
  """
  PAYROLL_ADVANCE_PAYABLE

  """
  The name of a ledger that tracks Payroll Advance receivable on a `FinancialAccount` associated to an `EARNED_WAGE_ACCESS` Card Product. NormalBalanceType = DEBIT.
  """
  PAYROLL_ADVANCE_RECEIVABLE

  """
  The name of a ledger that tracks Payroll Advance write-off on a `FinancialAccount` associated to an `EARNED_WAGE_ACCESS` Card Product. NormalBalanceType = CREDIT.
  """
  PAYROLL_ADVANCE_WRITE_OFF

  """
  The name of a ledger that tracks Payroll Advance write-off expense on a `FinancialAccount` associated to an `EARNED_WAGE_ACCESS` Card Product. NormalBalanceType = DEBIT.
  """
  PAYROLL_ADVANCE_WRITE_OFF_EXPENSE

  """
  The name of a ledger that tracks pending payment to be received on a `FinancialAccount` associated to a credit Card Product. NormalBalanceType = DEBIT.
  """
  PENDING_PAYMENT_RECEIVABLE

  """
  The name of a ledger that tracks provisional credit owed on a `FinancialAccount` of an Account Holder associated to a `FinancialAccount` of a Card Product. NormalBalanceType = CREDIT.
  """
  PROVISIONAL_CREDIT_PAYABLE

  """
  The name of a ledger that tracks provisional credit to be received on a `FinancialAccount` of an Account Holder associated to a `FinancialAccount` of a Card Product. NormalBalanceType = DEBIT.
  """
  PROVISIONAL_CREDIT_RECEIVABLE

  """
  The name of a ledger that tracks the available pseudo cash that this `FinancialAccount` has available to spend. NormalBalanceType = CREDIT.
  """
  PSEUDO_AVAILABLE_CASH

  """
  The name of a ledger that tracks the current pseudo cash that this `FinancialAccount` has spent. NormalBalanceType = DEBIT.
  """
  PSEUDO_CASH

  """
  The name of a ledger that tracks redeemable rewards points on a `FinancialAccount`. Only available if the `POINT_REWARDS` feature is available on the `FinancialAccount`. NormalBalanceType = CREDIT.
  """
  REDEEMABLE_REWARDS_POINTS

  """
  The name of a ledger that tracks refund authorizations on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  REFUND_AUTHORIZATION

  """
  The name of a ledger that tracks refund holds on a `PaymentCard`. NormalBalanceType = CREDIT.
  """
  REFUND_HOLD

  """
  The name of a ledger that tracks the reserve for an account. NormalBalanceType = DEBIT.
  """
  RESERVE

  """
  The name of a ledger that tracks rewards points on a `FinancialAccount`. Only available if the `POINT_REWARDS` feature is available on the `FinancialAccount`. NormalBalanceType = DEBIT.
  """
  REWARDS_POINTS

  """
  The name of a ledger that tracks holds for an account that are associated with potential risk on the account. NormalBalanceType = CREDIT.
  """
  RISK_HOLD

  """
  The name of a ledger that tracks collateral in the form of a secured deposit Card Product Funding `FinancialAccount` associated to a Secured Credit Card Product. NormalBalanceType = CREDIT.
  """
  SECURED_DEPOSIT_COLLATERAL

  """
  The name of a ledger that tracks secured deposit owed on a `FinancialAccount` associated to a Secured Credit Card Product. NormalBalanceType = CREDIT.
  """
  SECURED_DEPOSIT_PAYABLE

  """
  The name of a ledger that tracks secured deposit to be received on a `FinancialAccount` associated to a Secured Credit Card Product. NormalBalanceType = DEBIT.
  """
  SECURED_DEPOSIT_RECEIVABLE

  """
  The name of a ledger that tracks the current settlement payable on a `FinancialAccount` that have the `PartialFundingFinancialAccountFeature` enabled. NormalBalanceType = CREDIT.
  """
  SETTLEMENT_PAYABLE

  """
  The name of a ledger that tracks the current transfer payable on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = CREDIT.
  """
  TRANSFER_PAYABLE

  """
  The name of a ledger that tracks the current pending transfer settlement funds on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = CREDIT.
  """
  TRANSFER_PENDING_SETTLEMENT

  """
  The name of a ledger that tracks the current transfer receivable on a `FinancialAccount` that is expecting internal transfer to complete. NormalBalanceType = DEBIT.
  """
  TRANSFER_RECEIVABLE

  """
  The name of a ledger that tracks all uncollected funds for an account. NormalBalanceType = DEBIT.
  """
  UNCOLLECTED_FUNDS
}

"""The expected balance of a Ledger."""
enum NormalBalance {
  """The value when a Ledger is expected to have a credit balance."""
  CREDIT

  """The value when a Ledger is expected to have a debit balance."""
  DEBIT
}

"""The financial event that the `LedgerEntry` results from."""
union FinancialEvent = AuthorizationEvent | ClearingEvent | ReversalEvent | Transfer | AuthorizationAndClearEvent | RewardPointsTransfer | CreditFundsACHTransferEvent | DebitFundsACHTransferEvent | FeeTransferEvent | PayrollACHTransferEvent | SecureDepositTransferEvent | SecureDepositACHTransferEvent | SecureCardBalanceRepaymentACHTransferEvent | IntegratorInitiatedFundsWithdrawalACHTransferEvent | IntegratorInitiatedFundsDepositACHTransferEvent | FinancialAccountCreditLimitUpdateFromProductFunding | InterFinancialAccountTransfer | ExternallyInitiatedAchReleaseHoldTransfer | PayrollAdvanceWriteoffTransfer | PayrollAdvanceRepaymentTransfer | IssuerPreliminaryAuthorizationEvent | FinancialAccountPseudoBalanceUpdate | ManualAdjustmentEvent | CreditCardTransferEvent | DisbursementTransferEvent | WireTransfer | ExternalMoneyMovementTransactionEvent | CheckPaymentEvent | InstantNetworkTransferEvent

"""The possible values of a financial event's name."""
enum FinancialEventType {
  """The name of a financial event representing authorization."""
  AUTHORIZATION_EVENT

  """The name of a financial event representing clearing."""
  CLEARING_EVENT

  """The name of a financial event representing reversal."""
  REVERSAL_EVENT

  """The name of a financial event representing transfer."""
  TRANSFER

  """The name of a financial event representing authorization and clear."""
  AUTHORIZATION_AND_CLEAR_EVENT

  """The name of a financial event representing rewards point transfer."""
  REWARD_POINTS_TRANSFER

  """The name of a financial event representing credit funds ach transfer."""
  CREDIT_FUNDS_ACH_TRANSFER_EVENT

  """The name of a financial event representing debit funds ach transfer."""
  DEBIT_FUNDS_ACH_TRANSFER_EVENT

  """The name of a financial event representing fee transfer."""
  FEE_TRANSFER_EVENT

  """The name of a financial event representing payroll ach transfer."""
  PAYROLL_ACH_TRANSFER_EVENT

  """The name of a financial event representing secure deposit transfer."""
  SECURE_DEPOSIT_TRANSFER_EVENT

  """
  The name of a financial event representing secure deposit ach transfer.
  """
  SECURE_DEPOSIT_ACH_TRANSFER_EVENT

  """
  The name of a financial event representing secure card balance repayment ach transfer.
  """
  SECURE_CARD_BALANCE_REPAYMENT_ACH_TRANSFER_EVENT

  """
  The name of a financial event representing integrator initiated funds withdrawal ach transfer.
  """
  INTEGRATOR_INITIATED_FUNDS_WITHDRAWAL_ACH_TRANSFER_EVENT

  """
  The name of a financial event representing integrator initiated funds deposit ach transfer.
  """
  INTEGRATOR_INITIATED_FUNDS_DEPOSIT_ACH_TRANSFER_EVENT

  """
  The name of a financial event representing financial account credit limit update from product funding.
  """
  FINANCIAL_ACCOUNT_CREDIT_LIMIT_UPDATE_FROM_PRODUCT_FUNDING

  """
  The name of a financial event representing inter financial account transfer.
  """
  INTER_FINANCIAL_ACCOUNT_TRANSFER

  """
  The name of a financial event representing externally initiated ach release hold transfer.
  """
  EXTERNALLY_INITIATED_ACH_RELEASE_HOLD_TRANSFER

  """
  The name of a financial event representing payroll advance writeoff transfer.
  """
  PAYROLL_ADVANCE_WRITEOFF_TRANSFER

  """
  The name of a financial event representing payroll advance repayment transfer.
  """
  PAYROLL_ADVANCE_REPAYMENT_TRANSFER

  """
  The name of a financial event representing issuer preliminary authorization.
  """
  ISSUER_PRELIMINARY_AUTHORIZATION_EVENT

  """
  The name of a financial event representing financial account pseudo balance update.
  """
  FINANCIAL_ACCOUNT_PSEUDO_BALANCE_UPDATE

  """The name of a financial event representing manual adjustment."""
  MANUAL_ADJUSTMENT_EVENT

  """
  The name of a financial event representing inter financial account transfer.
  """
  INTER_FINANCIAL_ACCOUNT_TRANSFER_EVENT

  """The name of a financial event representing credit card transfer."""
  CREDIT_CARD_TRANSFER_EVENT

  """The name of a financial event representing disbursement transfer."""
  DISBURSEMENT_TRANSFER_EVENT

  """The name of a financial event representing wire transfer."""
  WIRE_TRANSFER

  """
  The name of a financial event representing external money movement transaction.
  """
  EXTERNAL_MONEY_MOVEMENT_TRANSACTION_EVENT
}

"""Edge for `LedgerEntry`."""
type LedgerEntryEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `LedgerEntry`."""
  node: LedgerEntry
}

"""The connection type for `LedgerEntry`."""
type LedgerEntryConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LedgerEntryEdge!]
}

interface LedgerEntry {
  """The unique id of the `LedgerEntry`."""
  id: ID!

  """
  A `FinancialAccount` backed by the `Ledger` that this ledger entry belongs to.
  """
  financialAccount: FinancialAccount

  """A `JournalEntry` showing this ledger entry and its offsetting entry."""
  journalEntry: JournalEntry

  """`Ledger` that `LedgerEntry` belongs to."""
  ledger: Ledger

  """The `Amount` of the `LedgerEntry`."""
  amount: Amount

  """The optional memo of the `LedgerEntry`."""
  memo: String

  """The event that triggered the ledger entry."""
  financialEvent: FinancialEvent

  """The date and time, in ISO 8601 format, this ledger entry was created."""
  createdAt: String

  """The credit balance that is the result of the ledger entry."""
  creditBalanceAtLedgerEntry: Amount

  """The debit balance that is the result of the ledger entry."""
  debitBalanceAtLedgerEntry: Amount
}

"""
A ledger entry of type credit, it represents the portion of a financial event where a Ledger had money credited to it.
"""
type CreditLedgerEntry implements Node & LedgerEntry {
  """The unique id of the `CreditLedgerEntry`."""
  id: ID!

  """
  A `FinancialAccount` backed by the `Ledger` that this ledger entry belongs to.
  """
  financialAccount: FinancialAccount

  """
  A `JournalEntry` showing this `CreditLedgerEntry` and its offsetting `DebitLedgerEntry`.
  """
  journalEntry: JournalEntry

  """`Ledger` that `CreditLedgerEntry` belongs to."""
  ledger: Ledger

  """The `Amount` of the `CreditLedgerEntry`."""
  amount: Amount

  """The optional memo of the `CreditLedgerEntry`."""
  memo: String

  """The event that triggered the ledger entry."""
  financialEvent: FinancialEvent

  """The date and time, in ISO 8601 format, this ledger entry was created."""
  createdAt: String

  """The credit balance that is the result of the ledger entry."""
  creditBalanceAtLedgerEntry: Amount

  """The debit balance that is the result of the ledger entry."""
  debitBalanceAtLedgerEntry: Amount
}

"""
A ledger entry of type debit, it represents the portion of a financial event where a Ledger had money debited from it.
"""
type DebitLedgerEntry implements Node & LedgerEntry {
  """The unique id of the `DebitLedgerEntry`."""
  id: ID!

  """
  A `FinancialAccount` backed by the `Ledger` that this ledger entry belongs to.
  """
  financialAccount: FinancialAccount

  """
  A `JournalEntry` showing this `DebitLedgerEntry` and its offsetting `CreditLedgerEntry`.
  """
  journalEntry: JournalEntry

  """Ledger that `DebitLedgerEntry` belongs to."""
  ledger: Ledger

  """The `Amount` of the `DebitLedgerEntry`."""
  amount: Amount

  """The optional memo of the `DebitLedgerEntry`."""
  memo: String

  """The event that triggered the ledger entry."""
  financialEvent: FinancialEvent

  """The date and time, in ISO 8601 format, this ledger entry was created."""
  createdAt: String

  """The credit balance that is the result of the ledger entry."""
  creditBalanceAtLedgerEntry: Amount

  """The debit balance that is the result of the ledger entry."""
  debitBalanceAtLedgerEntry: Amount
}

"""
A Journal Entry, showing the debit and credit ledger entries of a financial event. Every Journal Entry will have
a `LedgerEntry` that is crediting a Ledger and a corresponding `LedgerEntry` that is debiting from a Ledger.
"""
type JournalEntry implements Node {
  """The id of `JournalEntry`."""
  id: ID!

  """Credit entries for this `JournalEntry`."""
  credits: [CreditLedgerEntry!]

  """Debit entries for this `JournalEntry`."""
  debits: [DebitLedgerEntry!]
}

"""The Highnote provided response code."""
enum TransactionEventResponseCode {
  """The event was approved."""
  APPROVED

  """
  The event was declined due to enforcement of internal rules such as spend controls.
  The `Amount` on this event will not be applied to the balance of the card and any clearing event will not move money.
  """
  DO_NOT_HONOR

  """The card number provided for this event was invalid."""
  INVALID_CARD_NUMBER

  """The card had insufficient funds at the time of event."""
  INSUFFICIENT_FUNDS

  """The card was expired at the time of event."""
  EXPIRED_CARD

  """
  The expiration date provided does not match the expiration date assigned to the Payment Card.
  """
  INCORRECT_EXPIRATION_DATE

  """The card provided was not on file with Highnote."""
  NO_CARD_RECORD

  """The pin provided for this event was incorrect"""
  INCORRECT_PIN

  """The event was approved for only part of the requested amount."""
  APPROVED_FOR_PARTIAL_AMOUNT

  """
  The event was approved for only the purchase portion of requested amount.
  """
  APPROVED_FOR_PURCHASE_AMOUNT_ONLY

  """The event was declined because the provided CVV code was not valid."""
  BAD_CVV

  """The event was declined because the provided CVV2 code was not valid."""
  BAD_CVV2

  """The event was declined because the provided CVC3 code was not valid."""
  BAD_CVC3

  """
  The event was declined because the card provided has not been activated.
  """
  UNACTIVATED_CARD

  """The event was declined because the card provided has been suspended."""
  SUSPENDED_CARD

  """The event was declined because the card provided has been terminated."""
  TERMINATED_CARD

  """
  The event was declined because the provided authorization expiration is invalid.
  """
  INVALID_AUTHORIZATION_EXPIRATION

  """
  The event was declined because the `PaymentCard` is blocked from transacting.
  """
  BLOCKED_CARD

  """
  The event was declined because the transaction temporarily cannot be processed due to Address Verification failure or enforcement of internal rules such as spend controls.
  """
  RE_ENTER_TRANSACTION

  """
  The event was declined due to a permanent restriction placed at the program or account level. This may be due to enforcement of internal rules such as spend controls.
  """
  TRANSACTION_NOT_PERMITTED

  """Cash request exceeded issuer or approved limit."""
  CASH_BACK_LIMIT_EXCEEDED

  """The account was closed at the time of event."""
  CLOSED_ACCOUNT

  """
  The event was declined due to special condition - new card not activated or card is temporarily blocked.
  """
  SPECIAL_CONDITION_NO_PICK_UP

  """
  Purchase or withdrawal amount exceeded issuer or approved limit over a set period of time.
  """
  EXCEEDS_APPROVAL_AMOUNT_LIMIT

  """
  The event was declined because number of transaction exceeded the issuer or approved limit over a set period of time.
  """
  EXCEEDS_WITHDRAWAL_FREQUENCY_LIMIT

  """
  The event was declined because the merchant is not authorized for this card.
  """
  INVALID_MERCHANT

  """
  The event was declined because of incorrect information or faulty operation, including trying to refund a refund.
  A generic catch-all response code for a transaction that cannot be declined under other specific response codes.
  """
  INVALID_TRANSACTION

  """
  The event was declined because the PIN decryption failed due to technical error.
  """
  PIN_DECRYPTION_ERROR

  """The card is restricted in the region or country."""
  RESTRICTED_LOCATION

  """
  The account is valid but had insufficient funds for the anticipated amount.
  """
  VALID_ACCOUNT_AMOUNT_NOT_SUPPORTED

  """
  The Authorization Request Cryptogram (ARQC) validation failed for a chip card transaction.
  """
  CHIP_CARD_ARQC_VALIDATION_FAILURE

  """The pre-authorization expiration date for a transaction passed."""
  PRE_AUTHORIZATION_EXPIRED

  """The verification data for a payment card is invalid."""
  INVALID_TRACK_DATA

  """
  The event was declined because the 3-D Secure (3DS) Authentication failed.
  """
  INVALID_3DS_VERIFICATION

  """The event was declined by the Collaborative Authorization Partner"""
  CA_DECLINED

  """A catchall for all approved `TransactionEventResponseCode` values"""
  ALL_APPROVED_CODES

  """
  A catchall for all issuer declined `TransactionEventResponseCode` values
  """
  ALL_ISSUER_DECLINED_CODES
}

"""The response code provided on an advice message."""
enum TransactionAdviceEventResponseCode {
  """The event was approved."""
  APPROVED

  """The event was declined."""
  DO_NOT_HONOR
}

"""Code representing the result of AVS address verification"""
enum AVSResponseCode {
  """
  The check was not performed.
  
  Typically, this happens when an address is provided on the authorization, but we are unable to locate the same value in our vault.
  """
  NOT_PERFORMED

  """The address was not provided during authorization."""
  NOT_PROVIDED

  """
  The address provided on the authorization did not match an address on file for the Cardholder.
  """
  NO_MATCH

  """
  The address provided on the authorization matched the address on file for the Cardholder.
  """
  MATCH
}

"""Code representing the result of AVS postal code verification"""
enum PostalCodeResponseCode {
  """
  The postal code was not checked for verification.
  
  This typically occurs when a postal code is provided during authorization but we were unable to locate the same value in our vault.
  """
  NOT_PERFORMED

  """The postal code was not provided on the authorization."""
  NOT_PROVIDED

  """
  The postal code provided on the authorization did not match a postal code on file for the Cardholder.
  """
  NO_MATCH

  """
  The postal code provided on the authorization matched a postal code on file for the Cardholder.
  """
  MATCH

  """
  The 5-digit zip code provided on the authorization matched the zip code on file for the Cardholder.
  """
  ZIP5_MATCH

  """
  The 9-digit zip code provided on the authorization matched the zip code on file for the Cardholder.
  """
  ZIP9_MATCH
}

"""Code representing the result of CVV (security code) verification"""
enum CVVResponseCode {
  """
  The CVV (or similar) check was not performed.
  Typically this will occur if we are unable to locate the same value in our vault.
  """
  NOT_PERFORMED

  """
  The CVV provided on the authorization did not match the CVV on file for the card.
  """
  NO_MATCH

  """
  The CVV provided on the authorization did match an CVV on file for the card.
  """
  MATCH

  """Returned when the card on file does not have a CVV."""
  NOT_ON_CARD

  """Returned when the CVV is not provided on the authorization"""
  NOT_PROVIDED
}

"""
The PIN Response Code value outlines whether the cardholder entered a PIN during the transaction, whether the PIN was validated, and the result of the validation.
"""
enum PinResponseCode {
  """
  PIN validation not performed since transaction was declined for another reason.
  """
  NOT_PERFORMED

  """The cardholder did not enter a PIN."""
  NOT_PROVIDED

  """The cardholder-provided PIN was incorrect."""
  NO_MATCH

  """The cardholder-provided PIN was correct."""
  MATCH

  """PIN Validation failed due to temporary network connectivity issues."""
  DECRYPTION_ISSUE
}

"""
The possible values for a transaction Authorization Response in the Collaborative Authorization flow.
"""
enum CollaborativeAuthorizationResponseCode {
  """`Transaction` approved"""
  APPROVED

  """`Transaction` declined"""
  DECLINED @deprecated(reason: "Deprecated in favor of more granular response codes")

  """`Transaction` approved for partial amount"""
  PARTIAL_AMOUNT_APPROVED

  """`Transaction` declined due to insufficient funds"""
  INSUFFICIENT_FUNDS

  """
  `Transaction` declined because the amount exceeded the transaction limit
  """
  EXCEEDS_LIMIT

  """
  `Transaction` declined because the transaction exceeded the frequency limit
  """
  EXCEEDS_FREQUENCY

  """
  `Transaction` declined because transaction will not be allowed at this merchant. Use this code for merchants that will never be allowed.
  """
  INVALID_MERCHANT

  """
  `Transaction` declined because card was used in a restricted region or country
  """
  RESTRICTED_CARD @deprecated(reason: "Deprecated in favor of `RESTRICTED_LOCATION`")

  """`Transaction` declined due to suspected fraudulent activity"""
  SUSPECTED_FRAUD

  """
  `Transaction` declined because the transaction exceeded the cashback limit
  """
  CASHBACK_LIMIT_EXCEEDED

  """
  `Transaction` declined because the use of the card is restricted in the region or country where the transaction occurs
  """
  RESTRICTED_LOCATION

  """
  `Transaction` declined because Card Not Present transactions such as eCommerce are not permitted as a fraud prevention measure
  """
  CARD_NOT_PRESENT_AT_POS

  """
  `Transaction` declined because manually entering card details is not permitted as a fraud prevention measure
  """
  MANUAL_KEY_ENTERED_AT_POS

  """
  `Transaction` declined due to special condition - new card not activated or card is temporarily blocked
  """
  BLOCKED_CARD

  """
  `Transaction` declined because the cardholder is not a recognized driver
  """
  INVALID_DRIVER

  """
  `Transaction` declined because the cardholder did not provide a recognized vehicle number
  """
  INVALID_VEHICLE

  """
  `Transaction` declined because the cardholder did not provide a recognized ID number
  """
  INVALID_ID

  """
  `Transaction` declined because the cardholder attempted a transaction outside of their defined working area
  """
  INVALID_LOCATION

  """
  `Transaction` declined because it failed a partner defined special condition
  """
  INVALID_TRANSACTION

  """`Transaction` declined because it occurred outside allowed hours"""
  INVALID_PURCHASE_TIME

  """
  `Transaction` declined because transaction will not be allowed at this `MerchantCategory`. Use this code for categories that will never be allowed.
  """
  INVALID_MERCHANT_CATEGORY_CODE

  """
  `Transaction` declined because it was a duplicate of a previous transaction
  """
  DUPLICATE_TRANSACTION

  """
  `Transaction` declined because the merchant appears to be the cardholder
  """
  PROHIBITED_SELFPAY

  """
  `Transaction` declined because transactions are currently blocked for the merchant.
  """
  RESTRICTED_MERCHANT

  """
  `Transaction` declined because transactions are currently blocked for the merchant category code.
  """
  RESTRICTED_MERCHANT_CATEGORY_CODE

  """
  System did not receive Collaborative Authorization response within the allotted time
  
  **Note:** This response code is not meant to be returned by the Collaborative Authorization Partner. It is used by Highnote to indicate a `Timeout` occurred during Collaborative Authorization
  """
  TIMEOUT

  """
  Collaborative Authorization response resulted in an error
  
  **Note:** This response code is not meant to be returned by the Collaborative Authorization Partner. It is used by Highnote to indicate an `Error` occurred during Collaborative Authorization
  """
  ERROR
}

"""Discount fields for simulating Visa Fleet Level 3 transaction data."""
input SimulateVisaFleetL3EnhancedDataDiscountInput {
  """
  Total amount of discount at invoice level according to the `visaDiscountTreatment` and the `visaTaxTreatment`. This figure excludes any discount amounts defined at line item level.
  """
  amount: AmountInput

  """
  This field specifies if the invoice-level Discount Amount is a credit or debit value.
  """
  amountSignage: VisaAmountSignage

  """
  Identifies how to treat the discount if one was applied at the invoice level.
  """
  treatment: VisaDiscountTreatment
}

"""Duty fields for simulating Visa Fleet Level 3 transaction data."""
input SimulateVisaFleetL3EnhancedDataDutyInput {
  """The price of duty."""
  amount: AmountInput

  """This field specifies if the Duty Amount is a credit or debit value."""
  amountSignage: VisaAmountSignage
}

"""Invoice fields for simulating Visa Fleet Level 3 transaction data."""
input SimulateVisaFleetL3EnhancedDataInvoiceInput {
  """The VAT invoice number."""
  referenceNumber: String

  """Postal code of the destination. The field may contain spaces."""
  destinationPostalCode: String

  """
  Postal code of the location being shipped from. The field may contain spaces.
  """
  shipFromPostalCode: String

  """Country code of the destination. The field may contain spaces."""
  destinationCountryCode: String

  """The Authorization Code of the transaction."""
  authorizationCode: String

  """
  Date the order was taken. The entry should be in the format YYYY-MM-DD.
  """
  orderDate: String

  """Line items on the invoice."""
  lineItems: [SimulateVisaFleetL3EnhancedDataLineItemInput!]
}

"""
Shipping related fields for simulating Visa Fleet Level 3 transaction data.
"""
input SimulateVisaFleetL3EnhancedDataShippingInput {
  """The price of freight/shipping."""
  amount: AmountInput

  """
  This field specifies if the Shipping Amount is a credit or debit value.
  """
  amountSignage: VisaAmountSignage

  """
  Amount of Sales Tax charged on the shipping amount (in accordance with the `visaTaxTreatment`).
  """
  taxAmount: AmountInput

  """This field specifies if the Duty Amount is a credit or debit value."""
  taxAmountSignage: VisaAmountSignage

  """
  Rate of sales tax charged on the shipping amount (in accordance with the `visaTaxTreatment`).
  The last two digits are implied decimal places.
  """
  taxRate: UnsignedInt
}

"""Tax fields for simulating Visa Fleet Level 3 transaction data."""
input SimulateVisaFleetL3EnhancedDataTaxInput {
  """Describes how the tax is calculated on the invoice"""
  treatment: VisaTaxTreatment
}

"""
Simulated Visa Fleet Level 3 transaction data. These are relevant additional transaction data items pertaining to a fleet transaction.
"""
input SimulateVisaFleetL3EnhancedDataInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """Discount input for this transaction."""
  discount: SimulateVisaFleetL3EnhancedDataDiscountInput

  """Duty input for this transaction."""
  duty: SimulateVisaFleetL3EnhancedDataDutyInput

  """Invoice input for this transaction."""
  invoice: SimulateVisaFleetL3EnhancedDataInvoiceInput

  """Shipping input for this transaction."""
  shipping: SimulateVisaFleetL3EnhancedDataShippingInput

  """Tax input for this transaction."""
  tax: SimulateVisaFleetL3EnhancedDataTaxInput
}

"""An single simulated line item within a `VisaFleetL3EnhancedData`"""
input SimulateVisaFleetL3EnhancedDataLineItemInput {
  """The commodity code for the line item."""
  commodityCode: VisaItemCommodityCode

  """Freeform text description of item or service"""
  descriptor: String

  """Typically, an SKU or identifier from the Merchant"""
  productCode: String

  """
  The number of items.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  quantity: UnsignedInt

  """A readable unit of measure"""
  unitOfMeasure: String

  """
  Unit cost for this item or service in accordance with the `taxTreatment`.
  """
  unitCost: AmountInput

  """
  Amount of sales tax for this item or service in accordance with the `taxTreatment`.
  """
  taxAmount: AmountInput

  """
  Rate of sales tax charged on the item or service (in accordance with the `taxTreatment`).
  
  The last two digits are implied decimal places.
  """
  taxRate: UnsignedInt

  """
  Amount of discount if provided for this line item according to the `discountTreatment`.
  """
  discountPerItem: AmountInput

  """
  Identifies how to treat the discount if one was applied at the line item level
  """
  discountTreatment: VisaDiscountTreatment

  """Formula: (`quantity` * `unitCost`) - `discountPerItem`"""
  total: AmountInput

  """Defines the type of line item"""
  detailIndicator: VisaLineItemDetailIndicator
}

"""An single line item within a `VisaFleetL3EnhancedData`"""
type VisaFleetL3EnhancedDataLineItem {
  """The value holds either a `fuelType` or a `nonFuelProductCode` value."""
  commodityCode: VisaItemCommodityCode

  """Freeform text description of item or service"""
  descriptor: String

  """Typically, an SKU or identifier from the Merchant"""
  productCode: String

  """
  The number of items.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  quantity: UnsignedInt

  """A readable unit of measure"""
  unitOfMeasure: String

  """
  Unit cost for this item or service in accordance with the `taxTreatment`.
  
  There are 4 implied decimal places, thus a value of “1” is populated in this field as 10000.
  """
  unitCost: Amount

  """
  Amount of sales tax for this item or service in accordance with the `taxTreatment`.
  
  The last two digits are implied decimal places.
  """
  taxAmount: Amount

  """
  Rate of sales tax charged on the item or service (in accordance with the `taxTreatment`).
  
  The last two digits are implied decimal places.
  """
  taxRate: UnsignedInt

  """
  Amount of discount if provided for this line item according to the `discountTreatment`.
  
  The last two digits are implied decimal places.
  """
  discountPerItem: Amount

  """
  Identifies how to treat the discount if one was applied at the line item level
  """
  lineItemDiscountTreatment: VisaDiscountTreatment

  """
  Formula: (`quantity` * `unitCost`) - `discountPerItem`
  
  The last two digits are implied decimal places.
  """
  lineItemTotal: Amount

  """Defines the type of line item"""
  lineItemDetailIndicator: VisaLineItemDetailIndicator
}

"""Discount data for this transaction."""
type VisaFleetL3EnhancedDataDiscount {
  """
  Total amount of discount at invoice level according to the `treatment` and the `tax.treatment`.
  
  This figure excludes any discount amounts defined at line item level.
  
  The last two digits are implied decimal places.
  """
  amount: Amount

  """
  This field specifies if the invoice-level Discount Amount is a credit or debit value.
  """
  signage: VisaAmountSignage

  """
  Identifies how to treat the discount if one was applied at the invoice level
  """
  treatment: VisaDiscountTreatment
}

"""Duty data for this transaction."""
type VisaFleetL3EnhancedDataDuty {
  """
  The price of duty.
  The last two digits are implied decimal places.
  """
  amount: Amount

  """This field specifies if the Duty Amount is a credit or debit value."""
  signage: VisaAmountSignage
}

"""Invoice data for this transaction."""
type VisaFleetL3EnhancedDataInvoice {
  """The VAT invoice reference number"""
  referenceNumber: String

  """Postal code of the destination. The field may contain spaces."""
  destinationPostalCode: String

  """
  Postal code of the location being shipped from. The field may contain spaces.
  """
  shipFromPostalCode: String

  """Country code of the destination. The field may contain spaces."""
  destinationCountryCode: String

  """The Authorization Code of the transaction."""
  authorizationCode: String

  """
  Date the order was taken. The entry should be in the format YYYY-MM-DD.
  """
  orderDate: String

  """List of `VisaFleetL3EnhancedDataLineItem` objects"""
  lineItems: [VisaFleetL3EnhancedDataLineItem!]
}

"""Shipping data for this transaction."""
type VisaFleetL3EnhancedDataShipping {
  """
  The price of freight/shipping.
  The last two digits are implied decimal places.
  """
  amount: Amount

  """
  This field specifies if the Shipping Amount is a credit or debit value.
  """
  signage: VisaAmountSignage

  """
  Amount of Sales Tax charged on the shipping amount (in accordance with the `tax.treatment`).
  
  The last two digits are implied decimal places.
  """
  taxAmount: Amount

  """This field specifies if the Duty Amount is a credit or debit value."""
  taxAmountSignage: VisaAmountSignage

  """
  Rate of sales tax charged on the shipping amount (in accordance with the `tax.treatment`).
  
  The last two digits are implied decimal places.
  """
  taxRate: UnsignedInt
}

"""Tax data for this transaction."""
type VisaFleetL3EnhancedDataTax {
  """Describes how the tax is calculated on the invoice."""
  treatment: VisaTaxTreatment
}

"""
Visa Fleet Level 3 enhanced transaction Data. These are relevant additional transaction data items pertaining to a fleet transaction.
"""
type VisaFleetL3EnhancedData implements Node & AdditionalTransactionData {
  """
  The ID of this `VisaFleetL3EnhancedData`. This `id` cannot be used to later retrieve details of this `EnhancedDataEvent`. Please use the `id` of the `EnhancedDataEvent`.
  """
  id: ID!

  """Discount data for this transaction."""
  discount: VisaFleetL3EnhancedDataDiscount

  """Duty data for this transaction."""
  duty: VisaFleetL3EnhancedDataDuty

  """Invoice data for this transaction."""
  invoice: VisaFleetL3EnhancedDataInvoice

  """Shipping data for this transaction."""
  shipping: VisaFleetL3EnhancedDataShipping

  """Tax data for this transaction."""
  tax: VisaFleetL3EnhancedDataTax
}

"""
Visa Fleet Level 2 fuel line item data. These are relevant data items describing fuel products purchased in a fleet transaction. Also used to provide EV charging information
"""
input VisaFleetL2FuelLineItemInput {
  """Describes one of the fuels purchased in this transaction"""
  productCode: VisaFuelType

  """Cost of fuel per unit of measure"""
  unitPrice: UnsignedInt

  """
  The number of places the decimal point shall be moved to the left, starting from the right-most numeric digit of unit price
  """
  unitPriceMinorUnit: UnsignedInt

  """Unit of measure used to measure this fuel item"""
  unitOfMeasure: VisaFuelUnitOfMeasure

  """Quantity of fuel purchased"""
  quantity: UnsignedInt

  """
  The number of places the decimal point shall be moved to the left, starting from the right-most numeric digit of quantity
  """
  quantityMinorUnit: UnsignedInt

  """Total amount of time the vehicle was plugged in, in the format HHMMSS"""
  totalTimePluggedIn: String

  """Total amount of time taken to charge the vehicle, in the format HHMMSS"""
  totalTimeCharging: String

  """
  Start time of the charge expressed in local time of the card acceptor location, in the format HHMMSS
  """
  chargingStartTime: String

  """
  Finish time of the charge expressed in local time of the card acceptor location, in the format HHMMSS
  """
  chargingFinishTime: String

  """Total amount for this fuel code line item, including tax"""
  totalAmount: AmountInput

  """
  Indicates whether the line item represents a fuel product or service or not
  """
  fuelIndicator: Boolean

  """The type of service provided at the card acceptor location"""
  serviceType: VisaFuelServiceType

  """The product category or detail description"""
  productCategoryOrDescription: String

  """The discount rate in basis points. Two decimal places are implied"""
  discountRatePercentage: UnsignedInt

  """The discount amount per unit"""
  discountPerUnit: AmountInput

  """The discount amount per transaction"""
  discountPerTransaction: AmountInput

  """The total discount amount for this line item"""
  totalDiscountAmount: AmountInput

  """The net line item amount less than tax exempted or discounts"""
  netAmount: AmountInput

  """An indicator to show whether the item is taxable or not"""
  notTaxableIndicator: Boolean

  """
  An indicator to show whether the local tax is included in the unit cost or not
  """
  localTaxIncludedIndicator: Boolean

  """The `Amount` of local tax"""
  localTaxAmount: AmountInput

  """
  The VAT/Local tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  localTaxRate: UnsignedInt

  """
  An indicator to show whether national tax is included in the unit cost or not
  """
  nationalTaxIncludedIndicator: Boolean

  """The `Amount` of national tax"""
  nationalTaxAmount: AmountInput

  """
  The national tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  nationalTaxRate: UnsignedInt

  """Indicates whether other tax is included in the unit cost or not"""
  otherTaxIncludedIndicator: Boolean

  """The `Amount` of other tax"""
  otherTaxAmount: AmountInput

  """
  The other tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  otherTaxRate: UnsignedInt
}

"""
Visa Fleet Level 2 fuel line item data. These are relevant data items describing fuel products purchased in a fleet transaction. Also used to provide EV charging information
"""
type VisaFleetL2FuelLineItem {
  """Describes one of the fuels purchased in this transaction"""
  productCode: VisaFuelType

  """Cost of fuel per unit of measure"""
  unitPrice: UnsignedInt

  """
  The number of places the decimal point shall be moved to the left, starting from the right-most numeric digit of unit price
  """
  unitPriceMinorUnit: UnsignedInt

  """Unit of measure used to measure this fuel item"""
  unitOfMeasure: VisaFuelUnitOfMeasure

  """Quantity of fuel purchased"""
  quantity: UnsignedInt

  """
  The number of places the decimal point shall be moved to the left, starting from the right-most numeric digit of quantity
  """
  quantityMinorUnit: UnsignedInt

  """Total amount of time the vehicle was plugged in, in the format HHMMSS"""
  totalTimePluggedIn: String

  """Total amount of time taken to charge the vehicle, in the format HHMMSS"""
  totalTimeCharging: String

  """
  Start time of the charge expressed in local time of the card acceptor location, in the format HHMMSS
  """
  chargingStartTime: String

  """
  Finish time of the charge expressed in local time of the card acceptor location, in the format HHMMSS
  """
  chargingFinishTime: String

  """Total amount for this fuel code line item, including tax"""
  totalAmount: Amount

  """
  Indicates whether the line item represents a fuel product or service or not
  """
  fuelIndicator: Boolean

  """The type of service provided at the card acceptor location"""
  serviceType: VisaFuelServiceType

  """The product category or detail description"""
  productCategoryOrDescription: String

  """The discount rate in basis points. Two decimal places are implied"""
  discountRatePercentage: UnsignedInt

  """The discount amount per unit"""
  discountPerUnit: Amount

  """The discount amount per transaction"""
  discountPerTransaction: Amount

  """The total discount amount for this line item"""
  totalDiscountAmount: Amount

  """The net line item amount less than tax exempted or discounts"""
  netAmount: Amount

  """An indicator to show whether the item is taxable or not"""
  notTaxableIndicator: Boolean

  """
  An indicator to show whether the local tax is included in the unit cost or not
  """
  localTaxIncludedIndicator: Boolean

  """The `Amount` of local tax"""
  localTaxAmount: Amount

  """
  The VAT/Local tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  localTaxRate: UnsignedInt

  """
  An indicator to show whether national tax is included in the unit cost or not
  """
  nationalTaxIncludedIndicator: Boolean

  """The `Amount` of national tax"""
  nationalTaxAmount: Amount

  """
  The national tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  nationalTaxRate: UnsignedInt

  """Indicates whether other tax is included in the unit cost or not"""
  otherTaxIncludedIndicator: Boolean

  """The `Amount` of other tax"""
  otherTaxAmount: Amount

  """
  The other tax rate in basis points for fuel purchased. Two decimal places are implied
  """
  otherTaxRate: UnsignedInt
}

"""
Details to simulate a Mastercard Fleet authorization. Allows for partial authorizations
"""
input SimulateMastercardFleetAuthorizationInput {
  """The ID of the payment card to be used."""
  cardId: ID!

  """
  The `Amount` of the authorization provided as per the specifications of the given currency.
  """
  amount: AmountInput!

  """
  Details to override about a `PaymentCard` or card holder to test Spend Control Rules.
  """
  verificationOverrides: VerificationOverridesInput

  """
  Details to set about a Merchant submitting the authorization.
  
  You can use these details to test merchant specific spend rules.
  """
  merchantDetails: MerchantDetailsInput

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Fleet specific details for this authorization."""
  fleetAuthorizationData: SimulateMastercardFleetAuthorizationDataInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""
Details to simulate the authorization advice of a Mastercard Fleet transaction.
"""
input SimulateMastercardFleetAuthorizationAdviceInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """
  The `Amount` of the Authorization to clear. Cannot be above the total amount of the related Authorizations.
  """
  amount: AmountInput!

  """
  Details to override about a `PaymentCard` or card holder to test Spend Control Rules.
  """
  verificationOverrides: VerificationOverridesInput

  """
  Details to set about a Merchant submitting the authorization.
  
  You can use these details to test merchant specific spend rules.
  """
  merchantDetails: MerchantDetailsInput

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Fleet specific details for this authorization."""
  fleetAuthorizationData: SimulateMastercardFleetAuthorizationDataInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""Details to simulate the clearing of a Mastercard Fleet transaction."""
input SimulateMastercardFleetClearingInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """
  The `Amount` of the Authorization to clear. Cannot be above the total amount of the related Authorizations.
  """
  amount: AmountInput!

  """Details to set about a merchant submitting the clearing."""
  merchantDetails: MerchantDetailsInput

  """The Point Of Service Details Input."""
  pointOfServiceDetails: PointOfServiceDetailsInput

  """Optionally simulate fees applied to the transaction."""
  fees: [TransactionFeeInput!]
}

"""
Details to simulate Mastercard Fleet enhanced transaction data. These are relevant additional transaction data items pertaining to a fleet transaction.
"""
input SimulateMastercardFleetEnhancedDataInput {
  """The `transactionId` from the original `AuthorizationEvent`."""
  transactionId: ID!

  """Oil Company Brand Name"""
  fuelBrand: MastercardFleetFuelBrand

  """
  The local time the purchase was made. Should be in the format hhmm, with hours in the range 00–23 and minutes in the range 00–59
  """
  purchaseTime: String

  """Motor Fuel Service Type"""
  fuelServiceType: MastercardFleetFuelServiceType

  """Motor Fuel Product Code"""
  fuelType: MastercardFleetProductCode

  """The raw value received from the network for the motor fuel unit price"""
  fuelUnitPriceValue: UnsignedInt

  """
  The decimal precision for the `fuelUnitPriceValue`
  
  Precision should be in the range 0–5
  """
  fuelUnitPriceValuePrecision: UnsignedInt

  """Motor Fuel Unit of Measure"""
  fuelUnitOfMeasure: MastercardFleetUnitOfMeasure

  """Motor Fuel Quantity"""
  fuelQuantity: Float

  """Motor Fuel Sale Amount"""
  fuelSaleAmount: AmountInput

  """Odometer Reading. Only included if POS prompts for this value"""
  odometerReading: String

  """
  Vehicle Identification Number. Only included if POS prompts for this value
  
  **Maximum length:** 255 characters
  """
  vehicleNumber: String

  """
  Driver Identification Number. Only included if POS prompts for this value
  
  **Maximum length:** 255 characters
  """
  driverIdentification: String

  """Product Type Code"""
  productType: MastercardFleetProductType

  """Fuel Discount Amount"""
  fuelDiscountAmount: AmountInput

  """Tax Amount 1"""
  taxAmount1: AmountInput

  """Tax Amount 2"""
  taxAmount2: AmountInput

  """Details about the fuel location"""
  fuelLocationDetails: SimulateMastercardAdditionalFuelLocationDetailsInput

  """Line items on the invoice"""
  lineItems: [SimulateMastercardFleetEnhancedDataLineItemInput!]
}

"""An single simulated line item within a `MastercardFleetEnhancedData`"""
input SimulateMastercardFleetEnhancedDataLineItemInput {
  """The product code of the individual item purchased"""
  productCode: MastercardFleetProductCode

  """
  Description of the individual item purchased
  
  **Maximum length:** 255 characters
  """
  description: String

  """Quantity of the item purchased"""
  quantity: Float

  """
  The unit of measurement for the item purchased
  
  **Maximum length:** 255 characters
  """
  unitOfMeasure: String

  """The raw value received from the network for the line item unit price"""
  unitPriceValue: UnsignedInt

  """
  The decimal precision for the `unitPriceValuePrecision`
  
  Precision should be in the range 0–5
  """
  unitPriceValuePrecision: UnsignedInt

  """The raw value received from the network for the individual item amount"""
  itemAmountValue: UnsignedInt

  """
  The decimal precision for the `itemAmountValue`
  
  Precision should be in the range 0–5
  """
  itemAmountValuePrecision: UnsignedInt

  """
  Indicates whether the item amount, net of discount, taxes, and price, is a debit or credit
  """
  creditOrDebit: MastercardFleetCreditOrDebitIndicator
}

"""Details about the fuel location used in a fleet transaction."""
input SimulateMastercardAdditionalFuelLocationDetailsInput {
  """This fuel location is open 24 hours."""
  openTwentyFourHours: Boolean

  """This fuel location has access for 18 wheelers."""
  eighteenWheelerAccess: Boolean

  """This fuel location has diesel sites."""
  dieselSites: Boolean

  """This fuel location has interstate highway access."""
  interstateAccess: Boolean

  """This fuel location has a convenience store."""
  convenienceStore: Boolean

  """This fuel location has a restaurant."""
  restaurant: Boolean

  """This fuel location has a hotel."""
  hotel: Boolean

  """This fuel location has showers."""
  showers: Boolean

  """This fuel location has repair bays."""
  repairBays: Boolean

  """This fuel location has a vehicle washing station."""
  vehicleWash: Boolean

  """This fuel location has an aviation location."""
  aviationLocation: Boolean

  """This fuel location has a marina location."""
  marinaLocation: Boolean

  """This fuel location has alternative fuel pumps."""
  alternativeFuel: Boolean

  """This fuel location has pay-at-pump support."""
  payAtPump: Boolean
}

"""
Details of Mastercard Fleet enhanced transaction data. These are relevant additional transaction data items pertaining to a fleet transaction.
"""
type MastercardFleetEnhancedData implements Node & AdditionalTransactionData {
  """Globally unique id of a `MastercardFleetEnhancedData`."""
  id: ID!

  """Oil Company Brand Name"""
  fuelBrand: MastercardFleetFuelBrand

  """
  The local time the purchase was made. Should be in the format hhmm, with hours in the range 00–23 and minutes in the range 00–59
  """
  purchaseTime: String

  """Motor Fuel Service Type"""
  fuelServiceType: MastercardFleetFuelServiceType

  """Motor Fuel Product Code"""
  fuelType: MastercardFleetProductCode

  """Motor Fuel Unit Price"""
  fuelUnitPrice: Amount

  """The raw value received from the network for the motor fuel unit price"""
  fuelUnitPriceValue: UnsignedInt

  """The decimal precision for the `fuelUnitPriceValue`"""
  fuelUnitPriceValuePrecision: UnsignedInt

  """Motor Fuel Unit of Measure"""
  fuelUnitOfMeasure: MastercardFleetUnitOfMeasure

  """Motor Fuel Quantity"""
  fuelQuantity: Float

  """Motor Fuel Sale Amount"""
  fuelSaleAmount: Amount

  """Odometer Reading. Only included if POS prompts for this value"""
  odometerReading: String

  """
  Vehicle Identification Number. Only included if POS prompts for this value
  """
  vehicleNumber: String

  """
  Driver Identification Number. Only included if POS prompts for this value
  """
  driverIdentification: String

  """Product Type Code"""
  productType: MastercardFleetProductType

  """Fuel Discount Amount"""
  fuelDiscountAmount: Amount

  """Tax Amount 1"""
  taxAmount1: Amount

  """Tax Amount 2"""
  taxAmount2: Amount

  """Details about the fuel location"""
  fuelLocationDetails: MastercardAdditionalFuelLocationDetails

  """Line items on the invoice"""
  lineItems: [MastercardFleetEnhancedDataLineItem!]
}

"""An single line item within a `MastercardFleetEnhancedData`"""
type MastercardFleetEnhancedDataLineItem {
  """The product code of the individual item purchased"""
  productCode: MastercardFleetProductCode

  """
  Description of the individual item purchased
  
  **Maximum length:** 255 characters
  """
  description: String

  """Quantity of the item purchased"""
  quantity: Float

  """The unit of measurement for the item purchased"""
  unitOfMeasure: String

  """The unit price of the item purchased"""
  unitPrice: Amount

  """The raw value received from the network for the line item unit price"""
  unitPriceValue: UnsignedInt

  """The decimal precision for the `unitPriceValuePrecision`"""
  unitPriceValuePrecision: UnsignedInt

  """
  the individual item amount that is normally calculated as price multiplied by quantity
  """
  itemAmount: Amount

  """The raw value received from the network for the individual item amount"""
  itemAmountValue: UnsignedInt

  """The decimal precision for the `itemAmountValue`"""
  itemAmountValuePrecision: UnsignedInt

  """
  Indicates whether the item amount, net of discount, taxes, and price, is a debit or credit
  """
  creditOrDebit: MastercardFleetCreditOrDebitIndicator
}

"""Details about the fuel location used in a fleet transaction."""
type MastercardAdditionalFuelLocationDetails {
  """This fuel location is open 24 hours."""
  openTwentyFourHours: Boolean

  """This fuel location has access for 18 wheelers."""
  eighteenWheelerAccess: Boolean

  """This fuel location has diesel sites."""
  dieselSites: Boolean

  """This fuel location has interstate highway access."""
  interstateAccess: Boolean

  """This fuel location has a convenience store."""
  convenienceStore: Boolean

  """This fuel location has a restaurant."""
  restaurant: Boolean

  """This fuel location has a hotel."""
  hotel: Boolean

  """This fuel location has showers."""
  showers: Boolean

  """This fuel location has repair bays."""
  repairBays: Boolean

  """This fuel location has a vehicle washing station."""
  vehicleWash: Boolean

  """This fuel location has an aviation location."""
  aviationLocation: Boolean

  """This fuel location has a marina location."""
  marinaLocation: Boolean

  """This fuel location has alternative fuel pumps."""
  alternativeFuel: Boolean

  """This fuel location has pay-at-pump support."""
  payAtPump: Boolean
}

"""
Details pertaining to a Mastercard Fleet transaction available at Authorization and Authorization Advice time
"""
type MastercardFleetAuthorizationData implements Node & AdditionalTransactionData {
  """Globally unique id of a `MastercardFleetEnhancedData`"""
  id: ID!

  """
  An alphanumeric value representing a Driver ID provided by the cardholder
  """
  driverIdentifier: String

  """
  An alphanumeric value representing a Vehicle ID provided by the cardholder
  """
  vehicleIdentifier: String

  """
  Indicates whether the POS supports overriding the fleet spend controls on the card
  """
  spendControlOverrideFlag: Boolean

  """A list of prompt codes and cardholder-entered values"""
  prompts: [MastercardFleetPrompt!]

  """A list of fuel products purchased"""
  fuelProducts: [MastercardFleetAuthorizationDataFuelProduct!]

  """A list of non-fuel products purchased"""
  nonFuelProducts: [MastercardFleetAuthorizationDataNonFuelProduct!]
}

"""
Details of a Mastercard Fleet Prompt. Contains a prompt code and cardholder-entered value
"""
type MastercardFleetPrompt {
  """Indicates the type of prompted information"""
  code: MastercardFleetPromptType

  """An alphanumeric value indicating the value entered by the cardholder"""
  value: String
}

"""
Details of a Mastercard Fleet fuel product available at Authorization and Authorization Advice time
"""
type MastercardFleetAuthorizationDataFuelProduct {
  """Indicates the type of fuel product purchased"""
  code: MastercardFleetFuelProductCode

  """The unit price of the fuel product as a whole number"""
  unitPrice: UnsignedInt

  """The precision of the `UnitPrice` value"""
  unitPricePrecision: UnsignedInt

  """The unit of measure for the product purchased"""
  unitOfMeasure: MastercardFleetUnitOfMeasure

  """The quantity for the product purchased as a whole number"""
  quantity: UnsignedInt

  """The precision of the `Quantity` value"""
  quantityPrecision: UnsignedInt

  """Contains the sale amount of the product purchased"""
  saleAmount: Amount
}

"""
Details of a Mastercard Fleet non-fuel product available at Authorization and Authorization Advice time
"""
type MastercardFleetAuthorizationDataNonFuelProduct {
  """Indicates the type of fuel product purchased"""
  code: MastercardFleetNonFuelProductCode

  """The unit of measure for the product purchased"""
  unitOfMeasure: String

  """The quantity for the product purchased as a whole number"""
  quantity: UnsignedInt

  """The precision of the `Quantity` value"""
  quantityPrecision: UnsignedInt

  """
  Contains the individual item amount that is normally calculated as price multiplied by quantity
  """
  extendedItemAmount: Amount
}

"""
Details pertaining to a Visa Fleet transaction available at Authorization and Authorization Advice time
"""
type VisaFleetAuthorizationData implements Node & AdditionalTransactionData {
  """Globally unique id of a `VisaFleetAuthorizationData`"""
  id: ID!

  """
  Indicates whether fuel or non-fuel items are included in the transaction
  """
  purchaseType: VisaFuelPurchaseType

  """
  Indicates whether the transaction occurred at a self-service or a full-service station
  """
  serviceType: VisaFuelServiceType

  """
  Indicates whether `purchaseIdentifier` is an Order Number or a Invoice Number provided by the cardholder
  """
  purchaseIdentifierFormat: VisaFleetPurchaseIdentifierFormat

  """
  An alphanumeric value representing either an Order Number or an Invoice Number provided by the cardholder
  """
  purchaseIdentifier: String

  """
  An alphanumeric value representing either a Vehicle, Driver, or Generic ID provided by the cardholder
  """
  fleetIdentifier: String

  """The odometer value provided by the cardholder"""
  odometer: String

  """An alphanumeric value representing the employee’s ID number"""
  employeeNumber: String

  """An alphanumeric value representing the trailer’s ID number"""
  trailerNumber: String

  """An alphanumeric value representing the answer to a custom prompt"""
  customPrompt1: String

  """An alphanumeric value representing the answer to a custom prompt"""
  customPrompt2: String

  """Indicates whether the POS supports host-based restriction processing"""
  purchaseRestrictonsFlag: Boolean

  """A list of non-fuel product codes for the products purchased"""
  nonFuelProductCodes: [VisaNonFuelProductCode!]
}

"""
Details pertaining to a Mastercard Fleet transaction available at Authorization and Authorization Advice time
"""
input SimulateMastercardFleetAuthorizationDataInput {
  """
  An alphanumeric value representing a Driver ID provided by the cardholder
  
  **Maximum length:** 255 characters
  """
  driverIdentifier: String

  """
  An alphanumeric value representing a Vehicle ID provided by the cardholder
  
  **Maximum length:** 255 characters
  """
  vehicleIdentifier: String

  """
  Indicates whether the POS supports overriding the fleet spend controls on the card
  """
  spendControlOverrideFlag: Boolean

  """A list of prompt codes and cardholder-entered values"""
  prompts: [SimulateMastercardFleetPromptInput!]

  """A list of fuel products purchased"""
  fuelProducts: [SimulateMastercardFleetAuthorizationDataFuelProductInput!]

  """A list of non-fuel products purchased"""
  nonFuelProducts: [SimulateMastercardFleetAuthorizationDataNonFuelProductInput!]
}

"""
Details of a Mastercard Fleet Prompt. Contains a prompt code and cardholder-entered value
"""
input SimulateMastercardFleetPromptInput {
  """Indicates the type of prompted information"""
  code: MastercardFleetPromptType

  """
  An alphanumeric value indicating the value entered by the cardholder
  
  **Maximum length:** 255 characters
  """
  value: String
}

"""
Details of a Mastercard Fleet fuel product available at Authorization and Authorization Advice time
"""
input SimulateMastercardFleetAuthorizationDataFuelProductInput {
  """Indicates the type of fuel product purchased"""
  code: MastercardFleetFuelProductCode

  """The unit price of the fuel product as a whole number"""
  unitPrice: UnsignedInt

  """The precision of the `UnitPrice` value"""
  unitPricePrecision: UnsignedInt

  """The unit of measure for the product purchased"""
  unitOfMeasure: MastercardFleetUnitOfMeasure

  """The quantity for the product purchased as a whole number"""
  quantity: UnsignedInt

  """The precision of the `Quantity` value"""
  quantityPrecision: UnsignedInt

  """Contains the sale amount of the product purchased"""
  saleAmount: AmountInput
}

"""
Details of a Mastercard Fleet non-fuel product available at Authorization and Authorization Advice time
"""
input SimulateMastercardFleetAuthorizationDataNonFuelProductInput {
  """Indicates the type of fuel product purchased"""
  code: MastercardFleetNonFuelProductCode

  """
  The unit of measure for the product purchased
  
  **Maximum length:** 255 characters
  """
  unitOfMeasure: String

  """The quantity for the product purchased as a whole number"""
  quantity: UnsignedInt

  """The precision of the `Quantity` value"""
  quantityPrecision: UnsignedInt

  """
  Contains the individual item amount that is normally calculated as price multiplied by quantity
  """
  extendedItemAmount: AmountInput
}

"""
Details pertaining to a Visa Fleet transaction available at Authorization and Authorization Advice time
"""
input SimulateVisaFleetAuthorizationDataInput {
  """
  Indicates whether fuel or non-fuel items are included in the transaction
  """
  purchaseType: VisaFuelPurchaseType

  """
  Indicates whether the transaction occurred at a self-service or a full-service station
  """
  serviceType: VisaFuelServiceType

  """
  Indicates whether `purchaseIdentifier` is an Order Number or a Invoice Number provided by the cardholder
  """
  purchaseIdentifierFormat: VisaFleetPurchaseIdentifierFormat

  """
  An alphanumeric value representing either an Order Number or an Invoice Number provided by the cardholder
  
  **Maximum length:** 255 characters
  """
  purchaseIdentifier: String

  """
  An alphanumeric value representing either a Vehicle, Driver, or Generic ID provided by the cardholder
  
  **Maximum length:** 255 characters
  """
  fleetIdentifier: String

  """
  The odometer value provided by the cardholder
  
  **Maximum length:** 255 characters
  """
  odometer: String

  """
  An alphanumeric value representing the employee’s ID number
  
  **Maximum length:** 255 characters
  """
  employeeNumber: String

  """
  An alphanumeric value representing the trailer’s ID number
  
  **Maximum length:** 255 characters
  """
  trailerNumber: String

  """
  An alphanumeric value representing the answer to a custom prompt
  
  **Maximum length:** 255 characters
  """
  customPrompt1: String

  """
  An alphanumeric value representing the answer to a custom prompt
  
  **Maximum length:** 255 characters
  """
  customPrompt2: String

  """Indicates whether the POS supports host-based restriction processing"""
  purchaseRestrictonsFlag: Boolean

  """A list of non-fuel product codes for the products purchased"""
  nonFuelProductCodes: [VisaNonFuelProductCode!]
}

"""Details about an advice message for a transaction."""
type AdviceDetail {
  """The provided response code provided by advice message."""
  responseCode: TransactionAdviceEventResponseCode
}

"""Details about a fee applied to a transaction."""
type TransactionFee {
  """
  The requested fee amount. Note that requestedFeeAmount and approvedFeeAmount may be different currencies.
  """
  requestedFeeAmount: Amount

  """
  The approved fee amount. Note that requestedFeeAmount and approvedFeeAmount may be different currencies.
  """
  approvedFeeAmount: Amount

  """The type of fee charged."""
  transactionFeeType: TransactionFeeType
}

"""The type of fee that was applied to a transaction."""
enum TransactionFeeType {
  """
  A surcharge fee applied to a transaction such as an ATM network charge for a cash withdrawal or balance inquiry.
  """
  SURCHARGE
}

"""Details about a fee applied to a simulated transaction."""
input TransactionFeeInput {
  """
  The requested fee amount. Note that requestedFeeAmount and approvedFeeAmount may be different currencies.
  """
  requestedFeeAmount: AmountInput!

  """
  The approved fee amount. Note that requestedFeeAmount and approvedFeeAmount may be different currencies.
  """
  approvedFeeAmount: AmountInput!

  """The type of fee charged."""
  transactionFeeType: TransactionFeeType!
}

"""Visa Fleet fuel purchase types"""
enum VisaFuelPurchaseType {
  """Purchase includes only fuel"""
  FUEL_PURCHASE

  """Purchase includes only non-fuel items"""
  NON_FUEL_PURCHASE

  """Purchase includes fuel and non-fuel items"""
  MIXED
}

"""Visa Fleet fuel service types"""
enum VisaFuelServiceType {
  """Transaction occurred at a full-service fuel station"""
  FULL_SERVICE

  """Transaction occurred at a self-service fuel station"""
  SELF_SERVICE

  """Transaction occurred at a high speed dispense fuel station"""
  HIGH_SPEED_DISPENSE
}

"""Visa Fleet fuel unit of measure types"""
enum VisaFuelUnitOfMeasure {
  """U.S. Gallon"""
  GALLON

  """Liter"""
  LITER

  """Imperial Gallon"""
  IMPERIAL

  """Kilo"""
  KILO

  """Pound"""
  POUND

  """Kilowatt Hour"""
  KILOWATT_HOUR

  """Charging Minutes"""
  CHARGING_MINUTES
}

"""Visa Fleet purchase Identifier format"""
enum VisaFleetPurchaseIdentifierFormat {
  """The Purchase Identifier represents an Order Number"""
  ORDER

  """The Purchase Identifier represents an Invoice Number"""
  INVOICE
}

"""Visa Fleet discount treatment types"""
enum VisaDiscountTreatment {
  """No invoice-level discounts apply"""
  NO_DISCOUNT

  """Tax was calculated on post-discount total"""
  POST_DISCOUNT

  """Tax was calculated on pre-discount total"""
  PRE_DISCOUNT
}

"""Visa Fleet tax treatment types"""
enum VisaTaxTreatment {
  """Net prices with taxes calculated at the line item level"""
  NLL

  """Net prices with taxes calculated at the invoice level"""
  NIL

  """Gross prices with taxes calculated at the line item level"""
  GLL

  """Gross prices with taxes calculated at the invoice level"""
  GIL

  """No tax applies on the invoice"""
  NON
}

"""
Visa Fleet line item amount type (credit/debit)

Used for `visaShippingAmountSignage`, `visaDutyAmountSignage`, `visaShippingTaxAmountSignage`
"""
enum VisaAmountSignage {
  """Not implemented"""
  NULL

  """A charge on the invoice"""
  DEBIT

  """A refund on the invoice"""
  CREDIT
}

"""Visa Fleet line item detail indicator"""
enum VisaLineItemDetailIndicator {
  """Normal line item"""
  NORMAL

  """Credit line item"""
  CREDIT

  """Payment line item"""
  PAYMENT
}

"""Visa Electric Vehicle Charging Reason Codes"""
enum VisaEvChargingReasonCode {
  """Abnormal completion of charging"""
  OTHER_ERROR

  """Failure to lock or unlock connector"""
  CONNECTOR_LOCK_FAILURE

  """Communication failure with the vehicle"""
  EV_COMMUNICATION_ERROR

  """Ground fault circuit interrupter has been activated"""
  GROUND_FAILURE

  """Temperature inside charge point is too high"""
  HIGH_TEMPERATURE

  """Error in internal hardware orsoftware component"""
  INTERNAL_ERROR

  """Over current protection device has tripped"""
  OVER_CURRENT_FAILURE

  """Voltage has risen above an acceptable level"""
  OVER_VOLTAGE

  """Failure to read power meter"""
  POWER_METER_FAILURE

  """Failure to control power switch"""
  POWER_SWITCH_FAILURE

  """Failure with idTag reader"""
  READER_FAILURE

  """Unable to perform a reset"""
  RESET_FAILURE

  """Voltage has dropped below an acceptable level"""
  UNDER_VOLTAGE

  """Wireless communication device reports a weak signal"""
  WEAK_SIGNAL

  """No error to report"""
  NO_ERROR

  """Abnormal completion of charging related to payment"""
  PAYMENT_RELATED_ERROR
}

"""Visa Electric Vehicle Connector Types"""
enum VisaEvConnectorType {
  """AC - J1772 Type 1"""
  AC_J1772

  """AC - Mennekes - Type 2"""
  AC_MENNEKES

  """AC - GB/T"""
  AC_GBT

  """DC - CCS1"""
  DC_CCS1

  """DC - CHAdeMO"""
  DC_CHADEMO

  """DC - CCS2"""
  DC_CCS2

  """DC - GB/T"""
  DC_GBT

  """
  North American Charging Standard. Also known as the Tesla charging standard
  """
  NACS
}

"""Visa Fleet discount method"""
enum VisaFleetDiscountMethod {
  """Retail minus discount method"""
  RETAIL_MINUS

  """Cost plus discount method"""
  COST_PLUS

  """Best of retail minus or cost plus discount method"""
  BEST_OF_RETAIL_MINUS_OR_COST_PLUS
}

"""Entity that calculated the discount"""
enum VisaFleetDiscountAgent {
  """Discount was calculated by the Merchant"""
  MERCHANT

  """Discount was calculated by Visa"""
  VISA
}

"""Visa Fleet fuel types"""
enum VisaFuelType {
  """Regular Gasoline"""
  REGULAR

  """Mid/Plus Gasoline"""
  MID_PLUS

  """Premium/Super Gasoline"""
  PREMIUM_SUPER

  """Mid/Plus 2 Gasoline"""
  MID_PLUS_2

  """Premium/Super 2 Gasoline"""
  PREMIUM_SUPER_2

  """<Deprecated> Unleaded Methanol (5.7% blend)"""
  UNLEADED_METHANOL_57

  """<Deprecated> Unleaded Plus Methanol (5.7% blend)"""
  UNLEADED_PLUS_METHANOL_57

  """<Deprecated> Super Unleaded Methanol (5.7% blend)"""
  UNLEADED_SUPER_METHANOL_57

  """<Deprecated> Unleaded Methanol (7.7% blend)"""
  UNLEADED_METHANOL_77

  """<Deprecated> Unleaded Plus Methanol (7.7% blend)"""
  UNLEADED_PLUS_METHANOL_77

  """<Deprecated> Ethanol (5.7% blend)"""
  ETHANOL_57

  """<Deprecated> Mid/Plus Ethanol (5.7% blend)"""
  MID_PLUS_ETHANOL_57

  """<Deprecated> Premium/Super Ethanol (5.7% blend)"""
  PREMIUM_SUPER_ETHANOL_57

  """<Deprecated> Ethanol (7.7% blend)"""
  ETHANOL_77

  """<Deprecated> Mid/Plus Ethanol (7.7% blend)"""
  MID_PLUS_ETHANOL_77

  """Green Gasoline Regular (Plant based not petroleum based)"""
  GREEN_GAS_REGULAR

  """Green Gasoline Mid/Plus (Plant based not petroleum based)"""
  GREEN_GAS_PLUS

  """Green Gasoline Premium/Super (Plant based not petroleum based)"""
  GREEN_GAS_SUPER

  """Regular Diesel #2"""
  REGULAR_DIESEL_2

  """Premium Diesel #2"""
  PREMIUM_DIESEL_2

  """Regular Diesel #1"""
  REGULAR_DIESEL_1

  """Compressed Natural Gas"""
  COMPRESSED_NAT_GAS

  """Liquid Propane Gas"""
  LPG

  """Liquid Natural Gas"""
  LNG

  """<Deprecated> M-85"""
  M85

  """E-85"""
  E85

  """Reformulated 1"""
  REFORMULATED_1

  """Reformulated 2"""
  REFORMULATED_2

  """Reformulated 3"""
  REFORMULATED_3

  """Reformulated 4"""
  REFORMULATED_4

  """Reformulated 5"""
  REFORMULATED_5

  """Diesel Off-Road (#1 and #2 Non-Taxable)*"""
  DIESEL_OFF_ROAD_TAXABLE

  """Diesel Off-Road (Non-Taxable)*"""
  DIESEL_OFF_ROAD_NON_TAXABLE

  """Biodiesel Blend Off-Road (Non-Taxable)"""
  BIODIESEL_OFF_ROAD_NON_TAXABLE

  """<Deprecated> Biodiesel Blend Off-Road (Non-Taxable)"""
  BIODIESEL_OFF_ROAD_NON_TAXABLE_35

  """Racing Fuel"""
  RACING_FUEL

  """Mid/Plus 2 (10% Blend)"""
  MID_PLUS_2_10

  """Premium/Super 2 (10% Blend)"""
  PREMIUM_SUPER_2_10

  """Mid/Plus Ethanol 2 (15% Blend)"""
  PLUS_ETHANOL_2_15

  """Premium/Super Ethanol 2 (15% Blend)"""
  SUPER_ETHANOL_2_15

  """Regular Ethanol (10% Blend)"""
  REGULAR_ETHANOL_10

  """Mid/Plus Ethanol (10% Blend)"""
  PLUS_ETHANOL_10

  """Premium/Super Ethanol (10% Blend)"""
  SUPER_ETHANOL_10

  """B2 Diesel Blend 2% Biodiesel"""
  B2_DIESEL

  """B5 Diesel Blend 5% Biodiesel"""
  B5_DIESEL

  """B10 Diesel Blend 10% Biodiesel"""
  B10_DIESEL

  """B11 Diesel Blend 11% Biodiesel"""
  B11_DIESEL

  """B15 Diesel Blend 15% Biodiesel"""
  B15_DIESEL

  """B20 Diesel Blend 20% Biodiesel"""
  B20_DIESEL

  """B100 Diesel Blend 100% Biodiesel"""
  B100_DIESEL

  """<Deprecated> Ultra Low Sulfur #1"""
  ULTRA_LOW_SULFUR_1

  """<Deprecated> Ultra Low Sulfur #2"""
  ULTRA_LOW_SULFUR_2

  """<Deprecated> Ultra Low Sulfur Premium Diesel #2"""
  ULTRA_LOW_SULFUR_PREMIUM_1

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 2%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_2

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 5%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_5

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 10%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_10

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 11%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_11

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 15%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_15

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 20%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_20

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 100%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_100

  """DEF (Diesel Exhaust Fluid)"""
  DEF

  """Premium Diesel #1"""
  PREMIUM_DIESEL_1

  """Regular Ethanol (15% Blend)"""
  REGULAR_ETHANOL_15

  """Mid/Plus Ethanol (15% Blend)"""
  PLUS_ETHANOL_15

  """Premium/Super Ethanol (15% Blend)"""
  SUPER_ETHANOL_15

  """Premium Diesel Blend <20% Biodiesel"""
  PREMIUM_BIODIESEL_BLEND_UNDER_20

  """Premium Diesel Blend >= 20% Biodiesel"""
  PREMIUM_BIODIESEL_BLEND_OVER_20

  """B75 Diesel Blend 75% Biodiesel"""
  B75_DIESEL

  """B99 Diesel Blend 99% Biodiesel"""
  B99_DIESEL

  """Miscellaneous Fuel"""
  MISC_FUEL

  """Miscellaneous Fuel"""
  MISC_FUEL_1

  """Miscellaneous Fuel"""
  MISC_FUEL_2

  """Miscellaneous Fuel"""
  MISC_FUEL_3

  """Miscellaneous Fuel"""
  MISC_FUEL_4

  """Miscellaneous Fuel"""
  MISC_FUEL_5

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_1

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_2

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_3

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_4

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_5

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_6

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_7

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_8

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_9

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_10

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_11

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_12

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_13

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_14

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_15

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_16

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_17

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_18

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_19

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_20

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_21

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_22

  """Undefined Fuel – Reserved for Proprietary Use"""
  UNDEFINED_FUEL_23

  """Jet Fuel"""
  JET_FUEL

  """Aviation Fuel Regular"""
  AV_FUEL_REGULAR

  """Aviation Fuel Premium"""
  AV_FUEL_PREMIUM

  """Aviation Fuel JP8"""
  AV_FUEL_JP8

  """Aviation Fuel 4"""
  AV_FUEL_4

  """Aviation Fuel 5"""
  AV_FUEL_5

  """Biojet (Diesel)"""
  BIOJET

  """Aviation Biofuel (Gasoline)"""
  AV_BIOFUEL

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_1

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_2

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_3

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_4

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_5

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_6

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_7

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_8

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_9

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_10

  """Undefined Aviation Fuel"""
  AV_FUEL_UNDEFINED_11

  """Miscellaneous Aviation Fuel"""
  MISC_AV_FUEL

  """Marine Fuel 1"""
  MARINE_FUEL_1

  """Marine Fuel 2"""
  MARINE_FUEL_2

  """Marine Fuel 3"""
  MARINE_FUEL_3

  """Marine Fuel 4"""
  MARINE_FUEL_4

  """Marine Fuel 5"""
  MARINE_FUEL_5

  """Marine – Other"""
  MARINE_FUEL_OTHER

  """Marine Diesel"""
  MARINE_DIESEL

  """Miscellaneous Marine Fuel"""
  MISC_MARINE_FUEL

  """Kerosene – Low Sulfur"""
  KEROSENE

  """White Gas"""
  WHITE_GAS

  """Heating Oil"""
  HEATING_OIL

  """<Deprecated> Bottled Propane"""
  BOTTLED_PROPANE

  """Other Fuel (Non-Taxable)"""
  OTHER_FUEL_NT

  """Kerosene – Ultra Low Sulfur"""
  KEROSENE_ULS

  """Kerosene – Low Sulfur (Non-Taxable)"""
  KEROSENE_LS_NT

  """Kerosene – Ultra Low Sulfur (Non-Taxable)"""
  KEROSENE_ULS_NT

  """EVC-1 – Level 1 charge = 110v 15 amp"""
  EVC_1

  """EVC-2 – Level 2 charge = 240v 15-40 amp"""
  EVC_2

  """EVC-3 – Level 3 charge = 480v 3 phase charge"""
  EVC_3

  """Biodiesel Blend 2% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_2_OR_NT

  """Biodiesel Blend 5% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_5_OR_NT

  """Biodiesel Blend 10% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_10_OR_NT

  """Biodiesel Blend 11% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_11_OR_NT

  """Biodiesel Blend 15% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_15_OR_NT

  """Biodiesel Blend 20% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_20_OR_NT

  """Diesel #1 Off-Road (Non-Taxable)"""
  DIESEL_1_OR_NT

  """Diesel #2 Off-Road (Non-Taxable)"""
  DIESEL_2_OR_NT

  """Diesel #1 Premium Off-Road (Non-Taxable)"""
  DIESEL_1_PREMIUM_OR_NT

  """Diesel #2 Premium Off-Road (Non-Taxable)"""
  DIESEL_2_PREMIUM_OR_NT

  """Additive Dosage"""
  ADDITIVE_DOSAGE

  """Ethanol Blends E16-E84"""
  E16_E84

  """Low Octane UNL"""
  LO_UNL

  """Blended Diesel (#1 and #2)"""
  BLENDED_DIESEL_1_2

  """Off-Road Regular (Non-Taxable)"""
  REGULAR_OR_NT

  """Off-Road Mid/Plus (Non-Taxable)"""
  PLUS_OR_NT

  """Off-Road Premium/Super (Non-Taxable)"""
  SUPER_OR_NT

  """Off-Road Mid/Plus 2 (Non-Taxable)"""
  PLUS_2_OR_NT

  """Off-Road Premium/Super 2 (Non-Taxable)"""
  SUPER_2_OR_NT

  """Recreational Fuel (90 Octane)"""
  RECREATIONAL_FUEL

  """Hydrogen H35"""
  H35

  """Hydrogen H70"""
  H70

  """Miscellaneous Other Fuel"""
  MISC_OTHER_FUEL

  """Packaged DEF (Diesel Exhaust Fluid)"""
  PACKAGED_DEF

  """Packaged B99"""
  PACKAGED_B99

  """Packaged B100"""
  PACKAGED_B100

  """Packaged Additive"""
  PACKAGED_ADDITIVE

  """Packaged Kerosene"""
  PACKAGED_KEROSENE

  """Packaged Propane"""
  PACKAGED_PROPANE

  """Miscellaneous Packaged Fuels"""
  MISC_PACKAGED_FUEL

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_1

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_2

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_3

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_4

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_5

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_6

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_7

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_8

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_9

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_10

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_11

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_12

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_13

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_14

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_15

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_16

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_17

  """Undefined Other Fuel"""
  UNDEFINED_OTHER_FUEL_18

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_1

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_2

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_3

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_4

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_5

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_6

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_7

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_8

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_9

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_10

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_11

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_12

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_13

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_14

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_15

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_16

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_17

  """Undefined Packaged Fuels"""
  UNDEFINED_PACKAGED_FUEL_18

  """Reserved For Future Use"""
  RESERVED_1

  """Reserved For Future Use"""
  RESERVED_2

  """Reserved For Future Use"""
  RESERVED_3

  """Reserved For Future Use"""
  RESERVED_4

  """Reserved For Future Use"""
  RESERVED_5

  """Reserved For Future Use"""
  RESERVED_6

  """Reserved For Future Use"""
  RESERVED_7

  """Reserved For Future Use"""
  RESERVED_8

  """Reserved For Future Use"""
  RESERVED_9

  """Reserved For Future Use"""
  RESERVED_10

  """Reserved For Future Use"""
  RESERVED_11

  """Reserved For Future Use"""
  RESERVED_12

  """Reserved For Future Use"""
  RESERVED_13

  """Reserved For Future Use"""
  RESERVED_14

  """Reserved For Future Use"""
  RESERVED_15

  """Reserved For Future Use"""
  RESERVED_16

  """Reserved For Future Use"""
  RESERVED_17

  """Reserved For Future Use"""
  RESERVED_18

  """Reserved For Future Use"""
  RESERVED_19

  """Reserved For Future Use"""
  RESERVED_20

  """Reserved For Future Use"""
  RESERVED_21

  """Reserved For Future Use"""
  RESERVED_22

  """Reserved For Future Use"""
  RESERVED_23

  """Reserved For Future Use"""
  RESERVED_24

  """Reserved For Future Use"""
  RESERVED_25

  """Unknown/Undefined"""
  UNKNOWN
}

"""Visa Fleet non fuel product codes"""
enum VisaNonFuelProductCode {
  """General Automotive Merchandise"""
  GEN_AUTO_MERCH

  """Motor Oil"""
  MOTOR_OIL

  """Car Wash"""
  CAR_WASH

  """Oil Change"""
  OIL_CHANGE

  """Oil Filter"""
  OIL_FILTER

  """Work Order"""
  WORK_ORDER

  """Anti-Freeze"""
  ANTI_FREEZE

  """Washer Fluid"""
  WASHER_FLUID

  """Brake Fluid"""
  BRAKE_FLUID

  """Tires"""
  TIRES

  """Federal Excise Tax (Tires)"""
  TIRES_FET

  """Tire Rotation"""
  TIRE_ROTATION

  """Batteries"""
  BATTERIES

  """<Deprecated> Tires, Batteries, and Accessories"""
  TIRES_BATTERIES_ACCESSORIES

  """Lube"""
  LUBE

  """Inspection"""
  INSPECTION

  """Labor"""
  LABOR

  """Towing"""
  TOWING

  """Road Service"""
  ROAD_SERVICE

  """Vehicle Accessories"""
  VEHICLE_ACC

  """Vehicle Parts"""
  VEHICLE_PARTS

  """Preventative Maintenance"""
  PREV_MAINTENANCE

  """Air Conditioning Service"""
  AC_SERVICE

  """Engine Service"""
  ENGINE_SERVICE

  """Transmission Service"""
  TRANSMISSION_SERVICE

  """Brake Service"""
  BRAKE_SERVICE

  """Exhaust Service"""
  EXHAUST_SERVICE

  """Body Work"""
  BODY_WORK

  """Vehicle Glass"""
  VEHICLE_GLASS

  """Synthetic Oil"""
  SYNTHETIC_OIL

  """Lamps"""
  LAMPS

  """Wipers"""
  WIPERS

  """Hoses"""
  HOSES

  """Tire-related (Wheel Balance, Valve Stem)"""
  TIRE_RELATED

  """Repairs"""
  REPAIRS

  """Service Package"""
  SERVICE_PACKAGE

  """Vehicle Parking"""
  VEHICLE_PARKING

  """Truck Tank Cleaning"""
  TRUNK_TANK_CLEANING

  """Other Lubricants"""
  OTHER_LUBE

  """Vehicle Fuel Additives/Treatment (Injected)"""
  VEHICLE_FUEL_ADDITIVES

  """Vehicle Rental"""
  VEHICLE_RENTAL

  """Air Filter"""
  AIR_FILTER

  """Vehicle Prep"""
  VEHICLE_PREP

  """Fuel System"""
  FUEL_SYSTEM

  """Miscellaneous Vehicle Products / Services"""
  MISC_VEHICLE_PS

  """Scales"""
  SCALES

  """Shower"""
  SHOWER

  """Tire Repair"""
  TIRE_REPAIR

  """Lodging"""
  LODGING

  """Wash Out"""
  WASH_OUT

  """Trailer Wash"""
  TRAILER_WASH

  """RV Dump Fee"""
  RV_DUMP_FEE

  """EV Charging Fee"""
  EV_CHARGE

  """EV Battery Exchanges"""
  EV_BATTERY_ECH

  """Toll Payments"""
  TOLL

  """Storage"""
  STORAGE

  """Aircraft Ground Hauling"""
  AIRCRAFT_GROUND_HAULING

  """Aircraft Ground Power Unit"""
  AIRCRAFT_GROUND_PU

  """Aircraft Labor"""
  AIRCRAFT_LABOR

  """Aircraft Work Order"""
  AIRCRAFT_WO

  """Aircraft Maintenance"""
  AIRCRAFT_MAINTENANCE

  """Aircraft Service"""
  AIRCRAFT_SERVICE

  """Transportation"""
  TRANSPORTATION

  """De-icing"""
  DE_ICING

  """Ramp Fees"""
  RAMP_FEES

  """Catering"""
  CATERING

  """Hangar Fee"""
  HANGAR_FEE

  """<Deprecated> APU or Aircraft Jump Seat"""
  APU

  """Landing Fee"""
  LANDING_FEE

  """Call Out Fee"""
  CALL_OUT_FEE

  """Aircraft Rental"""
  AIRCRAFT_RENTAL

  """Instruction Fee"""
  INSTRUCTION_FEE

  """Flight Plans/Weather Brief"""
  FLIGHT_PLANS

  """<Deprecated> Flight Planning Fees"""
  FLIGHT_PLANNING_FEES

  """<Deprecated> Weather Fees"""
  WEATHER_FEES

  """Charter Fee"""
  CHARTER_FEE

  """Communication Fee"""
  COMMUNICATION_FEE

  """Aircraft Cleaning"""
  AIRCRAFT_CLEANING

  """Cargo Handling"""
  CARGO_HANDLING

  """Aircraft Accessories"""
  AIRCRAFT_ACC

  """<Deprecated> Avionics"""
  AVIONICS

  """Pilot Supplies"""
  PILOT_SUPPLIES

  """Aircraft Parking Fees"""
  AIRCRAFT_PARKING_FEE

  """Aircraft Tie Down Fees"""
  AIRCRAFT_TIE_DOWN_FEE

  """Aircraft Sanitation Fees"""
  AIRCRAFT_SANITATION

  """Aircraft Fuel Additive"""
  AIRCRAFT_FUEL_ADDITIVE

  """AC Parts 052-061"""
  AC_PARTS

  """Oxygen"""
  OXYGEN

  """De-fuel"""
  DE_FUEL

  """Re-service"""
  RE_SERVICE

  """Static Dissipater Additive"""
  STATIC_DISSIPATER_ADDITIVE

  """Corrosion Inhibitor"""
  CORROSION_INHIBITOR

  """Airport Fees"""
  AIRPORT_FEE

  """Overtime Fees"""
  OVERTIME_FEE

  """IT/Bladder"""
  IT_BLADDER

  """Ground Equipment Service Fees"""
  GES_FEE

  """Secure Fees"""
  SECURE_FEE

  """Flow Fee"""
  FLOW_FEE

  """Miscellaneous Aviation Products/Services"""
  MISC_AV_PS

  """Marine Service"""
  MARINE_SERVICE

  """Marine Labor"""
  MARINE_LABOR

  """Marine Work Order"""
  MARINE_WO

  """Launch Fee"""
  LAUNCH_FEE

  """Slip Rental"""
  SLIP_RENTAL

  """Miscellaneous Marine Products/Services"""
  MISC_MARINE_PS

  """General Merchandise"""
  GEN_MERCH

  """General Ice"""
  GEN_ICE

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED_2

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED_3

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED_4

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED_5

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED_6

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED_7

  """General Undefined – Reserved for Conexxus Future Use"""
  GEN_UNDEFINED_8

  """General Tobacco"""
  GEN_TOBACCO

  """Cigarettes"""
  CIGARETTES

  """Tobacco - Other"""
  TOBACCO_OTHER

  """General Packaged Beverage"""
  GEN_PACKAGED_BEV

  """Packaged Beverages (non-alcoholic)"""
  PACKAGED_BEV_NA

  """Packaged Juice"""
  PACKAGED_JUICE

  """Other Packaged Beverages"""
  OTHER_PACKAGED_BEV

  """General Dispensed Beverage"""
  GEN_DISPENSED_BEV

  """Soda"""
  SODA

  """Hot Dispensed Beverages"""
  HOT_DISPENSED_BEV

  """Cold Dispensed Beverages"""
  COLD_DISPENSED_BEV

  """Frozen Dispensed Beverages"""
  FROZEN_DISPENSED_BEV

  """Other Dispensed Beverages"""
  OTHER_DISPENSED_BEV

  """Unassigned Beverage Items"""
  UNASSIGNED_BEV

  """Unassigned Beverage Items"""
  UNASSIGNED_BEV_2

  """Unassigned Beverage Items"""
  UNASSIGNED_BEV_3

  """Unassigned Beverage Items"""
  UNASSIGNED_BEV_4

  """Unassigned Beverage Items"""
  UNASSIGNED_BEV_5

  """Unassigned Beverage Items"""
  UNASSIGNED_BEV_6

  """Unassigned Beverage Items"""
  UNASSIGNED_BEV_7

  """General Snacks"""
  GEN_SNACKS

  """Salty Snacks"""
  SALTY_SNACKS

  """Alternative Snacks"""
  ALT_SNACKS

  """Sweet Snacks - Packaged"""
  SWEET_SNACKS

  """General Candy"""
  GEN_CANDY

  """General Dairy"""
  GEN_DAIRY

  """Fluid Milk Products"""
  FLUID_MILK

  """Packaged Ice Cream/Novelties"""
  PACKAGED_ICE_CREAM

  """Other Dairy"""
  OTHER_DAIRY

  """General Grocery"""
  GEN_GROCERY

  """Groceries - Edible"""
  GROCERY_EDIBLE

  """Groceries - Non-Edible"""
  GROCERY_NON_EDIBLE

  """Groceries - Perishable"""
  GROCERY_PER_EDIBLE

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_2

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_3

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_4

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_5

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_6

  """Bread - Packaged"""
  PACKAGED_BREAD

  """Frozen Foods"""
  FROZEN_FOOD

  """General Alcohol"""
  GEN_ALCOHOL

  """Beer - Alcoholic"""
  BEER

  """Beer - Non-Alcoholic"""
  BEER_NA

  """Wine"""
  WINE

  """Liquor"""
  LIQUOR

  """General Deli"""
  GEN_DELI

  """Packaged Sandwiches/Deli Products"""
  PACKAGED_DELI

  """Prepared Foods"""
  PREPARED_FOOD

  """Deli Items"""
  DELI_ITEMS

  """General Foodservice"""
  GEN_FOODSERVICE

  """General Lottery"""
  GEN_LOTTERY

  """Lottery - Instant"""
  LOTTERY_IN

  """Lottery - Online"""
  LOTTERY_ON

  """Lottery - Other"""
  LOTTERT_OT

  """General Money Order"""
  GEN_MONEY_ORDER

  """Money Order - Vendor Payment"""
  MONEY_ORDER_VP

  """Money Order - Payroll Check"""
  MONEY_ORDER_PC

  """Money Order - Gift Certificate"""
  MONEY_ORDER_GC

  """Money Order - Refund Check"""
  MONEY_ORDER_REFC

  """Money Order - Official Check"""
  MONEY_ORDER_OC

  """Money Order - Rebate Check"""
  MONEY_ORDER_REBC

  """Money Order - Dividend Check"""
  MONEY_ORDER_DC

  """Money Order - Utility Check"""
  MONEY_ORDER_UC

  """General Store Service"""
  GEN_STORE_SERVICE

  """Home Delivery"""
  HOME_DELIVERY

  """<Deprecated> Miscellaneous"""
  MISC

  """<Deprecated> Sales Tax as Shown for Non-Fuel Products"""
  SALES_TAX_NON_FUEL

  """Prepaid Cards - Purchase"""
  PREPAID_PURCHASE

  """Prepaid Cards - Activation/Recharge"""
  PREPAID_ACT

  """Membership/Loyalty"""
  MEMBERSHIP

  """General Health & Beauty Care"""
  GEN_HEALTH

  """General Publications"""
  GEN_PUBLICATIONS

  """PIN Activate Prepaid Card"""
  PIN_PREPAID_ACT

  """PIN Return Prepaid Card"""
  PIN_PREPAID_RET

  """Enable Device/Handset Unlock"""
  ENABLE_HANDSET

  """Disable Device/Handset Lock"""
  DISABLE_HANDSET

  """3rd Party Prepaid Card Activate"""
  THREE_P_PREPAID_ACT

  """3rd Party Prepaid Card Reload"""
  THREE_P_PREPAID_REL

  """Financial Prepaid Card Activate"""
  FIN_PREPAID_ACT

  """Financial Prepaid Card Reload"""
  FIN_PREPAID_REL

  """Proprietary Prepaid Card Activate"""
  PROP_PREPAID_ACT

  """Proprietary Prepaid Card Reload"""
  PROP_PREPAID_REL

  """General Purpose Activate"""
  GEN_PURPOSE_ACT

  """General Purpose Reload"""
  GEN_PURPOSE_REL

  """Real Time Recharge"""
  REAL_TIME_RECHARGE

  """Wireless Real Time Recharge"""
  WL_REAL_TIME_RECHARGE

  """Single Payee Bill Pay"""
  SINGLE_BILL_PAY

  """Multiple Payee Bill Pay"""
  MULTI_BILL_PAY

  """Cannabidiol (CBD)"""
  CBD

  """Discount 1"""
  DISCOUNT_1

  """Discount 2"""
  DISCOUNT_2

  """Discount 3"""
  DISCOUNT_3

  """Discount 4"""
  DISCOUNT_4

  """Discount 5"""
  DISCOUNT_5

  """Coupon 1"""
  COUPON_1

  """Coupon 2"""
  COUPON_2

  """Coupon 3"""
  COUPON_3

  """Coupon 4"""
  COUPON_4

  """Coupon 5"""
  COUPON_5

  """Lottery Pay Out - Instant"""
  LOTTERY_PO_IN

  """Lottery Pay Out - Online"""
  LOTTERY_PO_ON

  """Lottery Pay Out - Other"""
  LOTTERY_PO_OT

  """Split Tender"""
  SPLIT_TENDER

  """Tax Discount/Forgiven"""
  TAX_DISCOUNT_F

  """Local Discount 1"""
  LOCAL_DISCOUNT_1

  """Local Discount 2"""
  LOCAL_DISCOUNT_2

  """Local Discount 3"""
  LOCAL_DISCOUNT_3

  """Local Discount 4"""
  LOCAL_DISCOUNT_4

  """Local Discount 5"""
  LOCAL_DISCOUNT_5

  """POS/Loyalty Reserved Discount 1"""
  POS_RES_DISCOUNT_1

  """POS/Loyalty Reserved Discount 2"""
  POS_RES_DISCOUNT_2

  """POS/Loyalty Reserved Discount 3"""
  POS_RES_DISCOUNT_3

  """POS/Loyalty Reserved Discount 4"""
  POS_RES_DISCOUNT_4

  """POS/Loyalty Reserved Discount 5"""
  POS_RES_DISCOUNT_5

  """Miscellaneous Negative Administrative"""
  MISC_NEG_ADMIN

  """Tax 1"""
  TAX_1

  """Tax 2"""
  TAX_2

  """Tax 3"""
  TAX_3

  """Tax 4"""
  TAX_4

  """Tax 5"""
  TAX_5

  """Cash Back"""
  CASH_BACK

  """Cash Back Fee"""
  CASH_BACK_FEE

  """Fee 1"""
  FEE_1

  """Fee 2"""
  FEE_2

  """Fee 3"""
  FEE_3

  """Fee 4"""
  FEE_4

  """Fee 5"""
  FEE_5

  """Miscellaneous Aviation Tax"""
  MISC_AV_TAX

  """GST/HST (Canadian)/VAT 1"""
  GST_HST_VAT_1

  """PST/QST (Canadian) VAT 2"""
  PST_HST_VAT_2

  """SWT Rate (Canadian)"""
  SWT_RATE

  """Tax 6"""
  TAX_6

  """Tax 7"""
  TAX_7

  """Tax 8"""
  TAX_8

  """Jet Federal Excise Tax"""
  JET_FD_E_TAX

  """AvGas Federal Excise Tax"""
  AV_GAS_FED_E_TAX

  """Charity"""
  CHARITY

  """Gratuity"""
  GRATUITY

  """Miscellaneous Administrative"""
  MISC_ADMIN

  """Reserved for future use"""
  RESERVED_1

  """Reserved for future use"""
  RESERVED_2

  """Reserved for future use"""
  RESERVED_3

  """Reserved for future use"""
  RESERVED_4

  """Reserved for future use"""
  RESERVED_5

  """Reserved for future use"""
  RESERVED_6

  """Reserved for future use"""
  RESERVED_7

  """Reserved for future use"""
  RESERVED_8

  """Unknown/Undefined"""
  UNKNOWN
}

"""All the Visa Fleet commodity codes."""
enum VisaItemCommodityCode {
  """Regular Gasoline"""
  REGULAR

  """Mid/Plus Gasoline"""
  MID_PLUS

  """Premium/Super Gasoline"""
  PREMIUM_SUPER

  """Mid/Plus 2 Gasoline"""
  MID_PLUS_2

  """Premium/Super 2 Gasoline"""
  PREMIUM_SUPER_2

  """<Deprecated> Unleaded Methanol (5.7% blend)"""
  UNLEADED_METHANOL_57

  """<Deprecated> Unleaded Plus Methanol (5.7% blend)"""
  UNLEADED_PLUS_METHANOL_57

  """<Deprecated> Super Unleaded Methanol (5.7% blend)"""
  UNLEADED_SUPER_METHANOL_57

  """<Deprecated> Unleaded Methanol (7.7% blend)"""
  UNLEADED_METHANOL_77

  """<Deprecated> Unleaded Plus Methanol (7.7% blend)"""
  UNLEADED_PLUS_METHANOL_77

  """<Deprecated> Ethanol (5.7% blend)"""
  ETHANOL_57

  """<Deprecated> Mid/Plus Ethanol (5.7% blend)"""
  MID_PLUS_ETHANOL_57

  """<Deprecated> Premium/Super Ethanol (5.7% blend)"""
  PREMIUM_SUPER_ETHANOL_57

  """<Deprecated> Ethanol (7.7% blend)"""
  ETHANOL_77

  """<Deprecated> Mid/Plus Ethanol (7.7% blend)"""
  MID_PLUS_ETHANOL_77

  """Green Gasoline Regular (Plant based not petroleum based)"""
  GREEN_GAS_REGULAR

  """Green Gasoline Mid/Plus (Plant based not petroleum based)"""
  GREEN_GAS_PLUS

  """Green Gasoline Premium/Super (Plant based not petroleum based)"""
  GREEN_GAS_SUPER

  """Regular Diesel #2"""
  REGULAR_DIESEL_2

  """Premium Diesel #2"""
  PREMIUM_DIESEL_2

  """Regular Diesel #1"""
  REGULAR_DIESEL_1

  """Compressed Natural Gas"""
  COMPRESSED_NAT_GAS

  """Liquid Propane Gas"""
  LPG

  """Liquid Natural Gas"""
  LNG

  """<Deprecated> M-85"""
  M85

  """E-85"""
  E85

  """Reformulated 1"""
  REFORMULATED_1

  """Reformulated 2"""
  REFORMULATED_2

  """Reformulated 3"""
  REFORMULATED_3

  """Reformulated 4"""
  REFORMULATED_4

  """Reformulated 5"""
  REFORMULATED_5

  """Diesel Off-Road (#1 and #2 Non-Taxable)*"""
  DIESEL_OFF_ROAD_TAXABLE

  """Diesel Off-Road (Non-Taxable)*"""
  DIESEL_OFF_ROAD_NON_TAXABLE

  """Biodiesel Blend Off-Road (Non-Taxable)"""
  BIODIESEL_OFF_ROAD_NON_TAXABLE

  """<Deprecated> Biodiesel Blend Off-Road (Non-Taxable)"""
  BIODIESEL_OFF_ROAD_NON_TAXABLE_35

  """Racing Fuel"""
  RACING_FUEL

  """Mid/Plus 2 (10% Blend)"""
  MID_PLUS_2_10

  """Premium/Super 2 (10% Blend)"""
  PREMIUM_SUPER_2_10

  """Mid/Plus Ethanol 2 (15% Blend)"""
  PLUS_ETHANOL_2_15

  """Premium/Super Ethanol 2 (15% Blend)"""
  SUPER_ETHANOL_2_15

  """Regular Ethanol (10% Blend)"""
  REGULAR_ETHANOL_10

  """Mid/Plus Ethanol (10% Blend)"""
  PLUS_ETHANOL_10

  """Premium/Super Ethanol (10% Blend)"""
  SUPER_ETHANOL_10

  """B2 Diesel Blend 2% Biodiesel"""
  B2_DIESEL

  """B5 Diesel Blend 5% Biodiesel"""
  B5_DIESEL

  """B10 Diesel Blend 10% Biodiesel"""
  B10_DIESEL

  """B11 Diesel Blend 11% Biodiesel"""
  B11_DIESEL

  """B15 Diesel Blend 15% Biodiesel"""
  B15_DIESEL

  """B20 Diesel Blend 20% Biodiesel"""
  B20_DIESEL

  """B100 Diesel Blend 100% Biodiesel"""
  B100_DIESEL

  """<Deprecated> Ultra Low Sulfur #1"""
  ULTRA_LOW_SULFUR_1

  """<Deprecated> Ultra Low Sulfur #2"""
  ULTRA_LOW_SULFUR_2

  """<Deprecated> Ultra Low Sulfur Premium Diesel #2"""
  ULTRA_LOW_SULFUR_PREMIUM_1

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 2%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_2

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 5%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_5

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 10%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_10

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 11%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_11

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 15%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_15

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 20%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_20

  """<Deprecated> Ultra Low Sulfur Biodiesel Blend 100%"""
  ULTRA_LOW_SULFUR_BIODIESEL_BLEND_100

  """DEF (Diesel Exhaust Fluid)"""
  DEF

  """Premium Diesel #1"""
  PREMIUM_DIESEL_1

  """Regular Ethanol (15% Blend)"""
  REGULAR_ETHANOL_15

  """Mid/Plus Ethanol (15% Blend)"""
  PLUS_ETHANOL_15

  """Premium/Super Ethanol (15% Blend)"""
  SUPER_ETHANOL_15

  """Premium Diesel Blend <20% Biodiesel"""
  PREMIUM_BIODIESEL_BLEND_UNDER_20

  """Premium Diesel Blend >= 20% Biodiesel"""
  PREMIUM_BIODIESEL_BLEND_OVER_20

  """B75 Diesel Blend 75% Biodiesel"""
  B75_DIESEL

  """B99 Diesel Blend 99% Biodiesel"""
  B99_DIESEL

  """Miscellaneous Fuel"""
  MISC_FUEL

  """Jet Fuel"""
  JET_FUEL

  """Aviation Fuel Regular"""
  AV_FUEL_REGULAR

  """Aviation Fuel Premium"""
  AV_FUEL_PREMIUM

  """Aviation Fuel JP8"""
  AV_FUEL_JP8

  """Aviation Fuel 4"""
  AV_FUEL_4

  """Aviation Fuel 5"""
  AV_FUEL_5

  """Biojet (Diesel)"""
  BIOJET

  """Aviation Biofuel (Gasoline)"""
  AV_BIOFUEL

  """Miscellaneous Aviation Fuel"""
  MISC_AV_FUEL

  """Marine Fuel 1"""
  MARINE_FUEL_1

  """Marine Fuel 2"""
  MARINE_FUEL_2

  """Marine Fuel 3"""
  MARINE_FUEL_3

  """Marine Fuel 4"""
  MARINE_FUEL_4

  """Marine Fuel 5"""
  MARINE_FUEL_5

  """Marine – Other"""
  MARINE_FUEL_OTHER

  """Marine Diesel"""
  MARINE_DIESEL

  """Miscellaneous Marine Fuel"""
  MISC_MARINE_FUEL

  """Kerosene – Low Sulfur"""
  KEROSENE

  """White Gas"""
  WHITE_GAS

  """Heating Oil"""
  HEATING_OIL

  """<Deprecated> Bottled Propane"""
  BOTTLED_PROPANE

  """Other Fuel (Non-Taxable)"""
  OTHER_FUEL_NT

  """Kerosene – Ultra Low Sulfur"""
  KEROSENE_ULS

  """Kerosene – Low Sulfur (Non-Taxable)"""
  KEROSENE_LS_NT

  """Kerosene – Ultra Low Sulfur (Non-Taxable)"""
  KEROSENE_ULS_NT

  """EVC-1 – Level 1 charge = 110v 15 amp"""
  EVC_1

  """EVC-2 – Level 2 charge = 240v 15-40 amp"""
  EVC_2

  """EVC-3 – Level 3 charge = 480v 3 phase charge"""
  EVC_3

  """Biodiesel Blend 2% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_2_OR_NT

  """Biodiesel Blend 5% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_5_OR_NT

  """Biodiesel Blend 10% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_10_OR_NT

  """Biodiesel Blend 11% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_11_OR_NT

  """Biodiesel Blend 15% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_15_OR_NT

  """Biodiesel Blend 20% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_20_OR_NT

  """Diesel #1 Off-Road (Non-Taxable)"""
  DIESEL_1_OR_NT

  """Diesel #2 Off-Road (Non-Taxable)"""
  DIESEL_2_OR_NT

  """Diesel #1 Premium Off-Road (Non-Taxable)"""
  DIESEL_1_PREMIUM_OR_NT

  """Diesel #2 Premium Off-Road (Non-Taxable)"""
  DIESEL_2_PREMIUM_OR_NT

  """Additive Dosage"""
  ADDITIVE_DOSAGE

  """Ethanol Blends E16-E84"""
  E16_E84

  """Low Octane UNL"""
  LO_UNL

  """Blended Diesel (#1 and #2)"""
  BLENDED_DIESEL_1_2

  """Off-Road Regular (Non-Taxable)"""
  REGULAR_OR_NT

  """Off-Road Mid/Plus (Non-Taxable)"""
  PLUS_OR_NT

  """Off-Road Premium/Super (Non-Taxable)"""
  SUPER_OR_NT

  """Off-Road Mid/Plus 2 (Non-Taxable)"""
  PLUS_2_OR_NT

  """Off-Road Premium/Super 2 (Non-Taxable)"""
  SUPER_2_OR_NT

  """Recreational Fuel (90 Octane)"""
  RECREATIONAL_FUEL

  """Hydrogen H35"""
  H35

  """Hydrogen H70"""
  H70

  """Miscellaneous Other Fuel"""
  MISC_OTHER_FUEL

  """Packaged DEF (Diesel Exhaust Fluid)"""
  PACKAGED_DEF

  """Packaged B99"""
  PACKAGED_B99

  """Packaged B100"""
  PACKAGED_B100

  """Packaged Additive"""
  PACKAGED_ADDITIVE

  """Packaged Kerosene"""
  PACKAGED_KEROSENE

  """Packaged Propane"""
  PACKAGED_PROPANE

  """Miscellaneous Packaged Fuels"""
  MISC_PACKAGED_FUEL

  """General Automotive Merchandise"""
  GEN_AUTO_MERCH

  """Motor Oil"""
  MOTOR_OIL

  """Car Wash"""
  CAR_WASH

  """Oil Change"""
  OIL_CHANGE

  """Oil Filter"""
  OIL_FILTER

  """Work Order"""
  WORK_ORDER

  """Anti-Freeze"""
  ANTI_FREEZE

  """Washer Fluid"""
  WASHER_FLUID

  """Brake Fluid"""
  BRAKE_FLUID

  """Tires"""
  TIRES

  """Federal Excise Tax (Tires)"""
  TIRES_FET

  """Tire Rotation"""
  TIRE_ROTATION

  """Batteries"""
  BATTERIES

  """<Deprecated> Tires, Batteries, and Accessories"""
  TIRES_BATTERIES_ACCESSORIES

  """Lube"""
  LUBE

  """Inspection"""
  INSPECTION

  """Labor"""
  LABOR

  """Towing"""
  TOWING

  """Road Service"""
  ROAD_SERVICE

  """Vehicle Accessories"""
  VEHICLE_ACC

  """Vehicle Parts"""
  VEHICLE_PARTS

  """Preventative Maintenance"""
  PREV_MAINTENANCE

  """Air Conditioning Service"""
  AC_SERVICE

  """Engine Service"""
  ENGINE_SERVICE

  """Transmission Service"""
  TRANSMISSION_SERVICE

  """Brake Service"""
  BRAKE_SERVICE

  """Exhaust Service"""
  EXHAUST_SERVICE

  """Body Work"""
  BODY_WORK

  """Vehicle Glass"""
  VEHICLE_GLASS

  """Synthetic Oil"""
  SYNTHETIC_OIL

  """Lamps"""
  LAMPS

  """Wipers"""
  WIPERS

  """Hoses"""
  HOSES

  """Tire-related (Wheel Balance, Valve Stem)"""
  TIRE_RELATED

  """Repairs"""
  REPAIRS

  """Service Package"""
  SERVICE_PACKAGE

  """Vehicle Parking"""
  VEHICLE_PARKING

  """Truck Tank Cleaning"""
  TRUNK_TANK_CLEANING

  """Other Lubricants"""
  OTHER_LUBE

  """Vehicle Fuel Additives/Treatment (Injected)"""
  VEHICLE_FUEL_ADDITIVES

  """Vehicle Rental"""
  VEHICLE_RENTAL

  """Air Filter"""
  AIR_FILTER

  """Vehicle Prep"""
  VEHICLE_PREP

  """Fuel System"""
  FUEL_SYSTEM

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_1

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_2

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_3

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_4

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_5

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_6

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_7

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_8

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_9

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_10

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_11

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_12

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_13

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_14

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_15

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_16

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_17

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_18

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_19

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_20

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_21

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_22

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_23

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_24

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_25

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_26

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_27

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_28

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_29

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_30

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_31

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_32

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_33

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_34

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_35

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_36

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_37

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_38

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_39

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_40

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_41

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_42

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_43

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_44

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_45

  """Undefined Vehicle Products / Services"""
  UNDEFINED_VEHICLE_PS_46

  """Miscellaneous Vehicle Products / Services"""
  MISC_VEHICLE_PS

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_1

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_2

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_3

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_4

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_5

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_6

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_7

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_8

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_9

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_10

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_11

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_12

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_13

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_14

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_15

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_16

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_17

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_18

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_19

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_20

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_21

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_22

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_23

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_24

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_25

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_26

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_27

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_28

  """Unassigned. Reserved for Future Use."""
  UNASSIGNED_29

  """Unassigned Repair Value - Reserved for Future Use"""
  UNASSIGNED_REPAIR_1

  """Unassigned Repair Value - Reserved for Future Use"""
  UNASSIGNED_REPAIR_2

  """Unassigned Repair Value - Reserved for Future Use"""
  UNASSIGNED_REPAIR_3

  """Unassigned Repair Value - Reserved for Future Use"""
  UNASSIGNED_REPAIR_4

  """Unassigned Automotive Products and Services"""
  UNASSIGNED_AUTO_PS_1

  """Unassigned Automotive Products and Services"""
  UNASSIGNED_AUTO_PS_2

  """Unassigned Automotive Products and Services"""
  UNASSIGNED_AUTO_PS_3

  """Unassigned Automotive Products and Services"""
  UNASSIGNED_AUTO_PS_4

  """Scales"""
  SCALES

  """Shower"""
  SHOWER

  """Tire Repair"""
  TIRE_REPAIR

  """Lodging"""
  LODGING

  """Wash Out"""
  WASH_OUT

  """Trailer Wash"""
  TRAILER_WASH

  """RV Dump Fee"""
  RV_DUMP_FEE

  """EV Charging Fee"""
  EV_CHARGE

  """EV Battery Exchanges"""
  EV_BATTERY_ECH

  """Toll Payments"""
  TOLL

  """Storage"""
  STORAGE

  """Aircraft Ground Hauling"""
  AIRCRAFT_GROUND_HAULING

  """Aircraft Ground Power Unit"""
  AIRCRAFT_GROUND_PU

  """Aircraft Labor"""
  AIRCRAFT_LABOR

  """Aircraft Work Order"""
  AIRCRAFT_WO

  """Aircraft Maintenance"""
  AIRCRAFT_MAINTENANCE

  """Aircraft Service"""
  AIRCRAFT_SERVICE

  """Transportation"""
  TRANSPORTATION

  """De-icing"""
  DE_ICING

  """Ramp Fees"""
  RAMP_FEES

  """Catering"""
  CATERING

  """Hangar Fee"""
  HANGAR_FEE

  """<Deprecated> APU or Aircraft Jump Seat"""
  APU

  """Landing Fee"""
  LANDING_FEE

  """Call Out Fee"""
  CALL_OUT_FEE

  """Aircraft Rental"""
  AIRCRAFT_RENTAL

  """Instruction Fee"""
  INSTRUCTION_FEE

  """Flight Plans/Weather Brief"""
  FLIGHT_PLANS

  """<Deprecated> Flight Planning Fees"""
  FLIGHT_PLANNING_FEES

  """<Deprecated> Weather Fees"""
  WEATHER_FEES

  """Charter Fee"""
  CHARTER_FEE

  """Communication Fee"""
  COMMUNICATION_FEE

  """Aircraft Cleaning"""
  AIRCRAFT_CLEANING

  """Cargo Handling"""
  CARGO_HANDLING

  """Aircraft Accessories"""
  AIRCRAFT_ACC

  """<Deprecated> Avionics"""
  AVIONICS

  """Pilot Supplies"""
  PILOT_SUPPLIES

  """Aircraft Parking Fees"""
  AIRCRAFT_PARKING_FEE

  """Aircraft Tie Down Fees"""
  AIRCRAFT_TIE_DOWN_FEE

  """Aircraft Sanitation Fees"""
  AIRCRAFT_SANITATION

  """Aircraft Fuel Additive"""
  AIRCRAFT_FUEL_ADDITIVE

  """AC Parts 052-061"""
  AC_PARTS

  """Oxygen"""
  OXYGEN

  """De-fuel"""
  DE_FUEL

  """Re-service"""
  RE_SERVICE

  """Static Dissipater Additive"""
  STATIC_DISSIPATER_ADDITIVE

  """Corrosion Inhibitor"""
  CORROSION_INHIBITOR

  """Airport Fees"""
  AIRPORT_FEE

  """Overtime Fees"""
  OVERTIME_FEE

  """IT/Bladder"""
  IT_BLADDER

  """Ground Equipment Service Fees"""
  GES_FEE

  """Secure Fees"""
  SECURE_FEE

  """Flow Fee"""
  FLOW_FEE

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_1

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_2

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_3

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_4

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_5

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_6

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_7

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_8

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_9

  """Undefined Aviation - Reserved for Future Use."""
  UNDEFINED_AVIATION_10

  """Miscellaneous Aviation Products/Services"""
  MISC_AV_PS

  """Marine Service"""
  MARINE_SERVICE

  """Marine Labor"""
  MARINE_LABOR

  """Marine Work Order"""
  MARINE_WO

  """Launch Fee"""
  LAUNCH_FEE

  """Slip Rental"""
  SLIP_RENTAL

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_1

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_2

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_3

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_4

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_5

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_6

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_7

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_8

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_9

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_10

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_11

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_12

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_13

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_14

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_15

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_16

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_17

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_18

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_19

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_20

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_21

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_22

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_23

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_24

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_25

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_26

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_27

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_28

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_29

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_30

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_31

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_32

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_33

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_34

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_35

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_36

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_37

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_38

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_39

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_40

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_41

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_42

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_43

  """Undefined Marine Services – Reserved for Future Use."""
  UNDEFINED_MARINE_SERVICES_44

  """Miscellaneous Marine Products/Services"""
  MISC_MARINE_PS

  """General Merchandise"""
  GEN_MERCH

  """General Ice"""
  GEN_ICE

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_1

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_2

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_3

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_4

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_5

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_6

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_7

  """General Undefined – Reserved for Future Use."""
  GEN_UNDEFINED_8

  """General Tobacco"""
  GEN_TOBACCO

  """Cigarettes"""
  CIGARETTES

  """Tobacco - Other"""
  TOBACCO_OTHER

  """Undefined Tobacco - Reserved for Future Use"""
  UNDEFINED_TOBACCO_1

  """Undefined Tobacco - Reserved for Future Use"""
  UNDEFINED_TOBACCO_2

  """Undefined Tobacco - Reserved for Future Use"""
  UNDEFINED_TOBACCO_3

  """Undefined Tobacco - Reserved for Future Use"""
  UNDEFINED_TOBACCO_4

  """Undefined Tobacco - Reserved for Future Use"""
  UNDEFINED_TOBACCO_5

  """Undefined Tobacco - Reserved for Future Use"""
  UNDEFINED_TOBACCO_6

  """Undefined Tobacco - Reserved for Future Use"""
  UNDEFINED_TOBACCO_7

  """General Packaged Beverage"""
  GEN_PACKAGED_BEV

  """Packaged Beverages (non-alcoholic)"""
  PACKAGED_BEV_NA

  """Packaged Juice"""
  PACKAGED_JUICE

  """Other Packaged Beverages"""
  OTHER_PACKAGED_BEV

  """Undefined Packaged Beverages - Reserved for Future Use"""
  UNDEFINED_PACKAGED_BEV_1

  """Undefined Packaged Beverages - Reserved for Future Use"""
  UNDEFINED_PACKAGED_BEV_2

  """Undefined Packaged Beverages - Reserved for Future Use"""
  UNDEFINED_PACKAGED_BEV_3

  """Undefined Packaged Beverages - Reserved for Future Use"""
  UNDEFINED_PACKAGED_BEV_4

  """Undefined Packaged Beverages - Reserved for Future Use"""
  UNDEFINED_PACKAGED_BEV_5

  """Undefined Packaged Beverages - Reserved for Future Use"""
  UNDEFINED_PACKAGED_BEV_6

  """General Dispensed Beverage"""
  GEN_DISPENSED_BEV

  """Soda"""
  SODA

  """Hot Dispensed Beverages"""
  HOT_DISPENSED_BEV

  """Cold Dispensed Beverages"""
  COLD_DISPENSED_BEV

  """Frozen Dispensed Beverages"""
  FROZEN_DISPENSED_BEV

  """Other Dispensed Beverages"""
  OTHER_DISPENSED_BEV

  """Undefined Dispensed Beverages - Reserved for Future Use"""
  UNDEFINED_DISPENSED_BEV_1

  """Undefined Dispensed Beverages - Reserved for Future Use"""
  UNDEFINED_DISPENSED_BEV_2

  """Undefined Dispensed Beverages - Reserved for Future Use"""
  UNDEFINED_DISPENSED_BEV_3

  """Undefined Dispensed Beverages - Reserved for Future Use"""
  UNDEFINED_DISPENSED_BEV_4

  """Undefined Dispensed Beverages - Reserved for Future Use"""
  UNDEFINED_DISPENSED_BEV_5

  """Unassigned Beverage Items - Reserved for Future Use"""
  UNASSIGNED_BEV_1

  """Unassigned Beverage Items - Reserved for Future Use"""
  UNASSIGNED_BEV_2

  """Unassigned Beverage Items - Reserved for Future Use"""
  UNASSIGNED_BEV_3

  """Unassigned Beverage Items - Reserved for Future Use"""
  UNASSIGNED_BEV_4

  """Unassigned Beverage Items - Reserved for Future Use"""
  UNASSIGNED_BEV_5

  """Unassigned Beverage Items - Reserved for Future Use"""
  UNASSIGNED_BEV_6

  """Unassigned Beverage Items - Reserved for Future Use"""
  UNASSIGNED_BEV_7

  """General Snacks"""
  GEN_SNACKS

  """Salty Snacks"""
  SALTY_SNACKS

  """Alternative Snacks"""
  ALT_SNACKS

  """Sweet Snacks - Packaged"""
  SWEET_SNACKS

  """Undefined Snacks - Reserved for Future Use"""
  UNDEFINED_SNACKS_1

  """Undefined Snacks - Reserved for Future Use"""
  UNDEFINED_SNACKS_2

  """Undefined Snacks - Reserved for Future Use"""
  UNDEFINED_SNACKS_3

  """Undefined Snacks - Reserved for Future Use"""
  UNDEFINED_SNACKS_4

  """Undefined Snacks - Reserved for Future Use"""
  UNDEFINED_SNACKS_5

  """Undefined Snacks - Reserved for Future Use"""
  UNDEFINED_SNACKS_6

  """General Candy"""
  GEN_CANDY

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_1

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_2

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_3

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_4

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_5

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_6

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_7

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_8

  """Undefined Candy - Reserved for Future Use."""
  UNDEFINED_CANDY_9

  """General Dairy"""
  GEN_DAIRY

  """Fluid Milk Products"""
  FLUID_MILK

  """Packaged Ice Cream/Novelties"""
  PACKAGED_ICE_CREAM

  """Other Dairy"""
  OTHER_DAIRY

  """Undefined Dairy - Reserved for Future Use"""
  UNDEFINED_DAIRY_1

  """Undefined Dairy - Reserved for Future Use"""
  UNDEFINED_DAIRY_2

  """Undefined Dairy - Reserved for Future Use"""
  UNDEFINED_DAIRY_3

  """Undefined Dairy - Reserved for Future Use"""
  UNDEFINED_DAIRY_4

  """Undefined Dairy - Reserved for Future Use"""
  UNDEFINED_DAIRY_5

  """Undefined Dairy - Reserved for Future Use"""
  UNDEFINED_DAIRY_6

  """General Grocery"""
  GEN_GROCERY

  """Groceries - Edible"""
  GROCERY_EDIBLE

  """Groceries - Non-Edible"""
  GROCERY_NON_EDIBLE

  """Groceries - Perishable"""
  GROCERY_PERISHABLE

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_1

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_2

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_3

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_4

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_5

  """Unassigned Food and Grocery Items"""
  UNASSIGNED_GROCERY_6

  """Bread - Packaged"""
  PACKAGED_BREAD

  """Frozen Foods"""
  FROZEN_FOOD

  """Undefined Grocery - Reserved for Future Use"""
  UNDEFINED_GROCERY_1

  """Undefined Grocery - Reserved for Future Use"""
  UNDEFINED_GROCERY_2

  """Undefined Grocery - Reserved for Future Use"""
  UNDEFINED_GROCERY_3

  """Undefined Grocery - Reserved for Future Use"""
  UNDEFINED_GROCERY_4

  """General Alcohol"""
  GEN_ALCOHOL

  """Beer - Alcoholic"""
  BEER

  """Beer - Non-Alcoholic"""
  BEER_NA

  """Wine"""
  WINE

  """Liquor"""
  LIQUOR

  """Undefined Alcohol - Reserved for Future Use"""
  UNDEFINED_ALCOHOL_1

  """Undefined Alcohol - Reserved for Future Use"""
  UNDEFINED_ALCOHOL_2

  """Undefined Alcohol - Reserved for Future Use"""
  UNDEFINED_ALCOHOL_3

  """Undefined Alcohol - Reserved for Future Use"""
  UNDEFINED_ALCOHOL_4

  """Undefined Alcohol - Reserved for Future Use"""
  UNDEFINED_ALCOHOL_5

  """General Deli"""
  GEN_DELI

  """Packaged Sandwiches/Deli Products"""
  PACKAGED_DELI

  """Prepared Foods"""
  PREPARED_FOOD

  """Deli Items"""
  DELI_ITEMS

  """Undefined Deli - Reserved for Future Use"""
  UNDEFINED_DELI_1

  """Undefined Deli - Reserved for Future Use"""
  UNDEFINED_DELI_2

  """Undefined Deli - Reserved for Future Use"""
  UNDEFINED_DELI_3

  """Undefined Deli - Reserved for Future Use"""
  UNDEFINED_DELI_4

  """Undefined Deli - Reserved for Future Use"""
  UNDEFINED_DELI_5

  """Undefined Deli - Reserved for Future Use"""
  UNDEFINED_DELI_6

  """General Foodservice"""
  GEN_FOODSERVICE

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_1

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_2

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_3

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_4

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_5

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_6

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_7

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_8

  """Undefined Foodservice – Reserved for Future Use."""
  UNDEFINED_FOODSERVICE_9

  """General Lottery"""
  GEN_LOTTERY

  """Lottery - Instant"""
  LOTTERY_IN

  """Lottery - Online"""
  LOTTERY_ON

  """Lottery - Other"""
  LOTTERY_OTHER

  """Undefined Lottery - Reserved for Future Use"""
  UNDEFINED_LOTTERY_1

  """Undefined Lottery - Reserved for Future Use"""
  UNDEFINED_LOTTERY_2

  """Undefined Lottery - Reserved for Future Use"""
  UNDEFINED_LOTTERY_3

  """Undefined Lottery - Reserved for Future Use"""
  UNDEFINED_LOTTERY_4

  """Undefined Lottery - Reserved for Future Use"""
  UNDEFINED_LOTTERY_5

  """Undefined Lottery - Reserved for Future Use"""
  UNDEFINED_LOTTERY_6

  """General Money Order"""
  GEN_MONEY_ORDER

  """Money Order - Vendor Payment"""
  MONEY_ORDER_VP

  """Money Order - Payroll Check"""
  MONEY_ORDER_PC

  """Money Order - Gift Certificate"""
  MONEY_ORDER_GC

  """Money Order - Refund Check"""
  MONEY_ORDER_REFC

  """Money Order - Official Check"""
  MONEY_ORDER_OC

  """Money Order - Rebate Check"""
  MONEY_ORDER_REBC

  """Money Order - Dividend Check"""
  MONEY_ORDER_DC

  """Money Order - Utility Check"""
  MONEY_ORDER_UC

  """Undefined Money Order - Reserved for Future Use"""
  UNDEFINED_MONEY_ORDER

  """General Store Service"""
  GEN_STORE_SERVICE

  """Home Delivery"""
  HOME_DELIVERY

  """<Deprecated> Miscellaneous"""
  MISC

  """<Deprecated> Sales Tax as Shown for Non-Fuel Products"""
  SALES_TAX_NON_FUEL

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_30

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_31

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_32

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_33

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_34

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_35

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_36

  """Unassigned. Reserved for Future Use"""
  UNASSIGNED_37

  """Prepaid Cards - Purchase"""
  PREPAID_PURCHASE

  """Prepaid Cards - Activation/Recharge"""
  PREPAID_ACT

  """Membership/Loyalty"""
  MEMBERSHIP

  """Undefined Store Services - Reserved for Future Use"""
  UNDEFINED_STORE_SERVICES_1

  """Undefined Store Services - Reserved for Future Use"""
  UNDEFINED_STORE_SERVICES_2

  """Undefined Store Services - Reserved for Future Use"""
  UNDEFINED_STORE_SERVICES_3

  """Undefined Store Services - Reserved for Future Use"""
  UNDEFINED_STORE_SERVICES_4

  """Undefined Store Services - Reserved for Future Use"""
  UNDEFINED_STORE_SERVICES_5

  """General Health & Beauty Care"""
  GEN_HEALTH

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_1

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_2

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_3

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_4

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_5

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_6

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_7

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_8

  """Undefined Health & Beauty Care – Reserved for Future Use."""
  UNDEFINED_HEALTH_9

  """General Publications"""
  GEN_PUBLICATIONS

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_1

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_2

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_3

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_4

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_5

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_6

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_7

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_8

  """Undefined General Publications – Reserved for Future Use."""
  UNDEFINED_PUBLICATIONS_9

  """PIN Activate Prepaid Card"""
  PIN_PREPAID_ACT

  """PIN Return Prepaid Card"""
  PIN_PREPAID_RET

  """Enable Device/Handset Unlock"""
  ENABLE_HANDSET

  """Disable Device/Handset Lock"""
  DISABLE_HANDSET

  """3rd Party Prepaid Card Activate"""
  THIRD_PARTY_PREPAID_ACT

  """3rd Party Prepaid Card Reload"""
  THIRD_PARTY_PREPAID_REL

  """Financial Prepaid Card Activate"""
  FIN_PREPAID_ACT

  """Financial Prepaid Card Reload"""
  FIN_PREPAID_REL

  """Proprietary Prepaid Card Activate"""
  PROP_PREPAID_ACT

  """Proprietary Prepaid Card Reload"""
  PROP_PREPAID_REL

  """General Purpose Activate"""
  GEN_PURPOSE_ACT

  """General Purpose Reload"""
  GEN_PURPOSE_REL

  """Real Time Recharge"""
  REAL_TIME_RECHARGE

  """Wireless Real Time Recharge"""
  WL_REAL_TIME_RECHARGE

  """Single Payee Bill Pay"""
  SINGLE_BILL_PAY

  """Multiple Payee Bill Pay"""
  MULTI_BILL_PAY

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_1

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_2

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_3

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_4

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_5

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_6

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_7

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_8

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_9

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_10

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_11

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_12

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_13

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_14

  """Undefined Prepaid and Bill Pay – Reserved for Future Use."""
  UNDEFINED_BILL_PAY_15

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_1

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_2

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_3

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_4

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_5

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_6

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_7

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_8

  """Undefined Merchandise – Reserved for Future Use."""
  UNDEFINED_MERCHANDISE_9

  """Cannabidiol (CBD)"""
  CBD

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_1

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_2

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_3

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_4

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_5

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_6

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_7

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_8

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_9

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_10

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_11

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_12

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_13

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_14

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_15

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_16

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_17

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_18

  """Undefined Cannabinoid – Reserved for Future Use."""
  UNDEFINED_CBD_19

  """Discount 1"""
  DISCOUNT_1

  """Discount 2"""
  DISCOUNT_2

  """Discount 3"""
  DISCOUNT_3

  """Discount 4"""
  DISCOUNT_4

  """Discount 5"""
  DISCOUNT_5

  """Coupon 1"""
  COUPON_1

  """Coupon 2"""
  COUPON_2

  """Coupon 3"""
  COUPON_3

  """Coupon 4"""
  COUPON_4

  """Coupon 5"""
  COUPON_5

  """Lottery Pay Out - Instant"""
  LOTTERY_PO_IN

  """Lottery Pay Out - Online"""
  LOTTERY_PO_ON

  """Lottery Pay Out - Other"""
  LOTTERY_PO_OT

  """Split Tender"""
  SPLIT_TENDER

  """Tax Discount/Forgiven"""
  TAX_DISCOUNT_F

  """Local Discount 1"""
  LOCAL_DISCOUNT_1

  """Local Discount 2"""
  LOCAL_DISCOUNT_2

  """Local Discount 3"""
  LOCAL_DISCOUNT_3

  """Local Discount 4"""
  LOCAL_DISCOUNT_4

  """Local Discount 5"""
  LOCAL_DISCOUNT_5

  """POS/Loyalty Reserved Discount 1"""
  POS_RES_DISCOUNT_1

  """POS/Loyalty Reserved Discount 2"""
  POS_RES_DISCOUNT_2

  """POS/Loyalty Reserved Discount 3"""
  POS_RES_DISCOUNT_3

  """POS/Loyalty Reserved Discount 4"""
  POS_RES_DISCOUNT_4

  """POS/Loyalty Reserved Discount 5"""
  POS_RES_DISCOUNT_5

  """Miscellaneous Negative Administrative"""
  MISC_NEG_ADMIN

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_1

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_2

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_3

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_4

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_5

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_6

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_7

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_8

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_9

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_10

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_11

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_12

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_13

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_14

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_15

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_16

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_17

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_18

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_19

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_20

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_21

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_22

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_23

  """Undefined Negative – Reserved for Future Use."""
  UNDEFINED_NEG_24

  """Tax 1"""
  TAX_1

  """Tax 2"""
  TAX_2

  """Tax 3"""
  TAX_3

  """Tax 4"""
  TAX_4

  """Tax 5"""
  TAX_5

  """Cash Back"""
  CASH_BACK

  """Cash Back Fee"""
  CASH_BACK_FEE

  """Fee 1"""
  FEE_1

  """Fee 2"""
  FEE_2

  """Fee 3"""
  FEE_3

  """Fee 4"""
  FEE_4

  """Fee 5"""
  FEE_5

  """Miscellaneous Aviation Tax"""
  MISC_AV_TAX

  """GST/HST (Canadian)/VAT 1"""
  GST_HST_VAT_1

  """PST/QST (Canadian) VAT 2"""
  PST_HST_VAT_2

  """SWT Rate (Canadian)"""
  SWT_RATE

  """Tax 6"""
  TAX_6

  """Tax 7"""
  TAX_7

  """Tax 8"""
  TAX_8

  """Jet Federal Excise Tax"""
  JET_FD_E_TAX

  """AvGas Federal Excise Tax"""
  AV_GAS_FED_E_TAX

  """Charity"""
  CHARITY

  """Gratuity"""
  GRATUITY

  """Miscellaneous Administrative"""
  MISC_ADMIN

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_1

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_2

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_3

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_4

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_5

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_6

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_7

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_8

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_9

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_10

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_11

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_12

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_13

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_14

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_15

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_16

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_17

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_18

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_19

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_20

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_21

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_22

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_23

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_24

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_25

  """Undefined Administrative – Reserved for Future Use."""
  UNDEFINED_AMIN_26

  """Unknown/Undefined"""
  UNKNOWN
}

"""Mastercard Fleet fuel unit of measure"""
enum MastercardFleetUnitOfMeasure {
  """Gallons"""
  GALLONS

  """Liters"""
  LITERS

  """Pounds"""
  POUNDS

  """Kilograms"""
  KILOS

  """Imperial Gallons"""
  IMPERIAL_GALLONS

  """Kilowatt Hours"""
  KILOWATT_HOURS

  """Minutes"""
  MINUTES

  """Hours"""
  HOURS

  """Not Applicable"""
  NOT_APPLICABLE
}

"""Mastercard Fleet fuel service type"""
enum MastercardFleetFuelServiceType {
  """Undefined"""
  UNDEFINED

  """Self-service"""
  SELF_SERVICE

  """Full service"""
  FULL_SERVICE

  """Only non-fuel products being purchased"""
  ONLY_NON_FUEL_PRODUCTS
}

"""Mastercard Fleet credit or debit indicator"""
enum MastercardFleetCreditOrDebitIndicator {
  """Indicates that the amount is a debit"""
  DEBIT

  """Indicates that the amount is a credit"""
  CREDIT
}

"""Mastercard Fleet product type code"""
enum MastercardFleetProductType {
  """Prompts for ID number and odometer reading"""
  PROMPT_FOR_ID_AND_ODOMETER

  """Prompts for vehicle number and odometer reading"""
  PROMPT_FOR_VEHICLE_NUMBER_AND_ODOMETER

  """Prompts for driver number and odometer reading"""
  PROMPT_FOR_DRIVER_NUMBER_AND_ODOMETER

  """Prompts for odometer reading only"""
  PROMPT_FOR_ODOMETER_ONLY

  """No prompts issued"""
  NO_PROMPTS_ISSUED
}

"""Mastercard Fleet product codes"""
enum MastercardFleetProductCode {
  """Unleaded Regular (85 to 87 octane)"""
  REGULAR

  """Unleaded Mid Grade (88 or 89 octane)"""
  MID

  """Unleaded Premium (90 or 91 octane)"""
  PREMIUM

  """Unleaded Super (92 to 94 octane)"""
  SUPER

  """Methanol Unleaded Regular (86 or 87 octane)"""
  REGULAR_METHANOL

  """Methanol Unleaded Mid Grade (88 or 89 octane)"""
  MID_METHANOL

  """Methanol Unleaded Premium (90 or 91 octane)"""
  PREMIUM_METHANOL

  """Methanol Unleaded Super (92 to 94 octane)"""
  SUPER_METHANOL

  """Methanol Regular Leaded"""
  LEADED_METHANOL

  """Regular Leaded Gasoline"""
  REGULAR_LEADED

  """Diesel"""
  DIESEL

  """Diesel Premium"""
  DIESEL_PREMIUM

  """Kerosene"""
  KEROSENE

  """Liquid Propane gas (LPG)"""
  LPG

  """Compressed Natural Gas"""
  CNG

  """M85 (Methanol 85%)"""
  M85

  """E85 (Ethanol 85%)"""
  E85

  """Ethanol Unleaded Regular (86 or 87 octane)"""
  REGULAR_ETHANOL

  """Ethanol Unleaded Mid Grade (88 or 89 octane)"""
  MID_ETHANOL

  """Ethanol Unleaded Premium (90 or 91 octane)"""
  PREMIUM_ETHANOL

  """Ethanol Unleaded Super (92 to 94 octane)"""
  SUPER_ETHANOL

  """Ethanol Regular Leaded"""
  LEADED_ETHANOL

  """Unleaded Reformulated (86 or 87 octane)"""
  UNLEADED_REFORMULATED

  """Unleaded Mid Grade Reformulated (88 or 89 octane)"""
  UNLEADED_MID_REFORMULATED

  """Dyed Diesel"""
  DYED_DIESEL

  """Gasohol"""
  GASOHOL

  """Biodiesel"""
  BIODIESEL

  """Ultralow Sulfur Diesel (ULSD)"""
  ULSD

  """Motor Oil"""
  MOTOR_OIL

  """Oil Change"""
  OIL_CHANGE

  """Engine Service"""
  ENGINE_SERVICE

  """Transmission Service"""
  TRANSMISSION_SERVICE

  """Brake Service"""
  BRAKE_SERVICE

  """Solvent"""
  SOLVENT

  """Brake Fluid"""
  BRAKE_FLUID

  """Miscellaneous Parts"""
  MISC_PARTS

  """Miscellaneous Labor"""
  MISC_LABOR

  """Miscellaneous Repairs"""
  MISC_REPAIRS

  """TBA (tires, batteries, accessories)"""
  TIRES_BATTERIES_ACCESSORIES

  """Tires"""
  TIRES

  """Batteries"""
  BATTERIES

  """Automotive Accessories"""
  AUTO_ACC

  """Automotive Glass"""
  AUTO_GLASS

  """Car Wash"""
  CAR_WASH

  """Towing"""
  TOWING

  """Diesel Exhaust Fluid (DEF)"""
  DEF

  """Cigarettes/Tobacco"""
  CIGARETTES

  """Health/Beauty Aid"""
  HEALTH_BEAUTY

  """Miscellaneous Food/Grocery"""
  MISC_FOOD

  """Soda"""
  SODA

  """Beer/Wine"""
  BEER_WINE

  """Milk/Juice"""
  MILK_JUICE

  """Restaurant"""
  RESTAURANT

  """Miscellaneous Beverage"""
  MISC_BEV

  """Miscellaneous Other"""
  MISC_OTHER_FUEL

  """Aviation 100 Octane"""
  AV_FUEL_100

  """Jet Fuel"""
  JET_FUEL

  """Aviation Fuel"""
  AV_FUEL

  """Marine Fuel"""
  MARINE_FUEL

  """Miscellaneous Fuel"""
  MISC_FUEL

  """Liquid Natural Gas"""
  LNG

  """White Gas"""
  WHITE_GAS

  """Racing Fuel"""
  RACING_FUEL

  """Electric Vehicle Charge Level 1: 110v"""
  EV_LEVEL_1_CHARGE

  """Electric Vehicle Charge Level 2: 240v"""
  EV_LEVEL_2_CHARGE

  """Electric Vehicle Charge Level 3: 480v"""
  EV_LEVEL_3_CHARGE

  """Biodiesel (Non-Taxable)"""
  BIODIESEL_NON_TAXABLE

  """Diesel (Non-Taxable)"""
  DIESEL_NON_TAXABLE

  """Diesel Exhaust Fluid: Dispensed"""
  DIESEL_EXHAUST_FLUID_DISPENSED

  """Aviation Maintenance"""
  AV_MAINTENANCE

  """De-icing"""
  DE_ICING

  """APU or Aircraft Jump Start"""
  APU

  """Aviation CAtering"""
  AV_CATERING

  """Tiedown or Hangar"""
  TIEDOWN_HANGAR

  """Landing Fee"""
  LANDING_FEE

  """Ramp Fee"""
  RAMP_FEE

  """Call Out Fee"""
  CALL_OUT_FEE

  """Plane Rental"""
  PLANE_RENTAL

  """Instruction Fee"""
  INSTRUCTION_FEE

  """Miscellaneous Aviation"""
  MISC_AV

  """Flight Planning/Weather Fees"""
  FLIGHT_PLAN_FEE

  """Charter Fees"""
  CHARTER_FEE

  """Ground Handling"""
  GROUND_HANDLING

  """Communication Fees"""
  COMM_FEE

  """Aircraft Cleaning"""
  AIRCRAFT_CLEANING

  """Cargo Handling"""
  CARGO_HANDLING

  """Aviation Accessories"""
  AC_ACC

  """Boat Service"""
  BOAT_SERVICE
}

"""Mastercard Fleet fuel brands"""
enum MastercardFleetFuelBrand {
  """Amerada Hess"""
  HESS

  """Amoco Petroleum Products"""
  AMOCO

  """Arco Products"""
  ARCO

  """Ashland Oil"""
  ASHLAND

  """BP Oil"""
  BP

  """Cenex"""
  CENEX

  """Chevron USA"""
  CHEVRON

  """Circle K Stores"""
  CIRCLE_K

  """Citgo Petroleum"""
  CITGO

  """Clark Brands"""
  CLARK

  """Conoco Inc."""
  CONOCO

  """Crown Central Petroleum"""
  CROWN_CENTRAL

  """Gulf"""
  GULF

  """Diamond Shamrock Inc."""
  DIAMOND_SHAMROCK

  """Exxon"""
  EXXON

  """Fina Inc."""
  FINA

  """Flying J Inc."""
  FLYING_J

  """Getty Petroleum"""
  GETTY

  """Kwik Trip Inc."""
  KWIK_TRIP

  """Mapco Express Inc."""
  MAPCO

  """Marathon Oil"""
  MARATHON

  """ExxonMobil"""
  EXXON_MOBIL

  """Murphy Oil USA Inc."""
  MURPHY

  """Pennzoil Products Inc."""
  PENNZOIL

  """Phillips"""
  PHILLIPS

  """Quik Trip"""
  QUIK_TRIP

  """RaceTrac Petroleum Inc."""
  RACETRAC

  """Shell Oil"""
  SHELL

  """Sinclair Oil"""
  SINCLAIR

  """Southland Oil"""
  SOUTHLAND

  """Sun Company Inc."""
  SUN

  """Texaco"""
  TEXACO

  """Tosco"""
  TOSCO

  """United Refining (Kwik Fill)"""
  KWIK_FILL

  """Gas America"""
  GAS_AMERICA

  """Handy Way Food"""
  HANDY_WAY

  """Holiday Stores"""
  HOLIDAY

  """Love’s Country Stores"""
  LOVES

  """Pure Oil"""
  PURE

  """Quaker State"""
  QUAKER_STATE

  """Thornton Oil"""
  THORNTON

  """United Dairy Farmer"""
  UNITED_DAIRY

  """US Oil"""
  US_OIL

  """USA Petroleum"""
  USA_PETROLEUM

  """Valvoline"""
  VALVOLINE

  """Western Energetix"""
  WESTERN_ENERGETIX

  """Casey’s General Store"""
  CASEYS

  """Petro"""
  PETRO

  """Pilot"""
  PILOT

  """Sheetz"""
  SHEETZ

  """Speedway"""
  SPEEDWAY

  """Tesoro Alaska"""
  TESORO_AK

  """Travel Centers of America"""
  TA

  """Union 76"""
  UNION_76

  """Warren Equities"""
  WARREN_EQUITIES

  """Wilco"""
  WILCO

  """PDQ Store"""
  PDQ

  """Wawa"""
  WAWA

  """FKG Oil"""
  FKG

  """GrowMark, Inc."""
  GROWMARK

  """AAFES"""
  AAFES

  """Gate Petroleum"""
  GATE

  """MFA"""
  MFA

  """Nexcom"""
  NEXCOM

  """The Pantry, Inc."""
  THE_PANTRY

  """Zions"""
  ZIONS

  """Nordstrom Oil"""
  NORDSTROM

  """Quarles Oil"""
  QUARLES

  """Krogers"""
  KROGER

  """Erickson Oil"""
  ERICKSON

  """Irving Oil"""
  IRVING

  """Martin & Bailey Inc. (DBA Huck’s)"""
  HUCKS

  """Lassus"""
  LASSUS

  """Family Express"""
  FAMILY

  """Home Depot"""
  HOME_DEPOT

  """Discount Tire"""
  DISCOUNT_TIRE

  """Raceway Petroleum"""
  RACEWAY

  """Meineke"""
  MEINEKE

  """Giant Eagle"""
  GIANT_EAGLE

  """Rudy"""
  RUDY

  """Hyvee’s"""
  HYVEES

  """7-Eleven"""
  SEVEN_ELEVEN

  """Amoco Canada"""
  AMOCO_CA

  """Canadian Tire"""
  CANADIAN_TIRE

  """Canadian Turbo"""
  CANADIAN_TURBO

  """Chevron Canada"""
  CHEVRON_CA

  """Conoco Canada"""
  CONOCO_CA

  """Domo Gas"""
  DOMO

  """Fas Gas Oil"""
  FAS

  """Federated Co-op (Sonic)"""
  SONIC

  """Gulf Canada"""
  GULF_CA

  """Husky"""
  HUSKY

  """Esso Canada"""
  ESSO_CA

  """Irving Canada"""
  IRVING_CA

  """Mohawk"""
  MOHAWK

  """Mr. Gas"""
  MR_GAS

  """Murphy Oil Canada"""
  MURPHY_CA

  """Olco"""
  OLCO

  """PetroCanada"""
  PETROCANADA

  """Petro-T"""
  PETRO_T

  """Pioneer"""
  PIONEER

  """Shell Canada"""
  SHELL_CA

  """Seven-Eleven"""
  SEVEN_ELEVEN_CA

  """Suncor (Sunoco Canada)"""
  SUNOCO_CA

  """Tempo"""
  TEMPO

  """Ultramar Canada"""
  ULTRAMAR

  """Asda"""
  ASDA

  """BFL"""
  BFL

  """BP/Mobil"""
  BP_MOBIL

  """Burrnah/Major"""
  BURNAH

  """Butler/Arndale"""
  BUTLER

  """Elf"""
  ELF

  """Esso"""
  ESSO_EU

  """Fina"""
  FINA_EU

  """Flare"""
  FLARE

  """Gulf (Chevron)"""
  GULF_CHEVRON

  """Heron"""
  HERON

  """J. Sainsbury"""
  JSAINSBURY

  """Jet (Conoco)"""
  JET

  """Kuwait"""
  KUWAIT

  """Maxol"""
  MAXOL

  """Murco"""
  MURCO

  """Pioneer"""
  PIONEER_EU

  """Repsol"""
  REPSOL

  """Safeway"""
  SAFEWAY

  """Shell"""
  SHELL_EU

  """SPAR"""
  SPAR

  """Tesco"""
  TESCO_EU

  """Texaco"""
  TEXACO_EU

  """Total"""
  TOTAL

  """UK"""
  UK

  """VG"""
  VG

  """W M Morrison"""
  MORRISON

  """Unbranded/Unassigned"""
  UNBRANDED
}

"""Mastercard Fleet prompt types"""
enum MastercardFleetPromptType {
  """User ID"""
  USER_ID

  """Vehicle Number"""
  VEHICLE_NUMBER

  """Vehicle Tag"""
  VEHICLE_TAG

  """Driver ID"""
  DRIVER_ID

  """Odometer"""
  ODOMETER

  """Work Order / P.O. Number"""
  WORK_ORDER_OR_PO_NUMBER

  """Invoice Number"""
  INVOICE_NUMBER

  """Trip Number"""
  TRIP_NUMBER

  """Unit Number"""
  UNIT_NUMBER

  """Reefer Hours"""
  REEFER_HOURS

  """ZIP Code / Postal Code"""
  ZIP_OR_POSTAL_CODE

  """Replacement Car"""
  REPLACEMENT_CAR

  """Entered Data Alpha"""
  ENTERED_DATA_ALPHA

  """Web Portal Data"""
  WEB_PORTAL_DATA

  """Entered Data Num"""
  ENTERED_DATA_NUM

  """Job Number"""
  JOB_NUMBER

  """Maintenance ID"""
  MAINTENANCE_ID

  """Department Number"""
  DEPARTMENT_NUMBER

  """Trailer Number"""
  TRAILER_NUMBER

  """Delivery Ticket Number"""
  DELIVERY_TICKET_NUMBER

  """Hubometer"""
  HUBOMETER

  """Sub Fleet Number"""
  SUB_FLEET_NUMBER

  """Transaction Number"""
  TRANSACTION_NUMBER

  """Control Number"""
  CONTROL_NUMBER

  """Reefer Temperature"""
  REEFER_TEMPERATURE

  """Driver or Vehicle Card"""
  DRIVER_OR_VEHICLE_CARD

  """Customer Number"""
  CUSTOMER_NUMBER

  """Additional Card Data"""
  ADDITIONAL_CARD_DATA

  """Additional Vehicle Data"""
  ADDITIONAL_VEHICLE_DATA

  """Engine Hours"""
  ENGINE_HOURS

  """Tank Level Start"""
  TANK_LEVEL_START

  """Fuel Gauge Level"""
  FUEL_GAUGE_LEVEL

  """Battery Voltage"""
  BATTERY_VOLTAGE

  """Coolant Temperature"""
  COOLANT_TEMPERATURE

  """Check Engine Status"""
  CHECK_ENGINE_STATUS

  """Fuel Economy"""
  FUEL_ECONOMY

  """Engine RPM"""
  ENGINE_RPM

  """Engine Load"""
  ENGINE_LOAD

  """Engine Oil Temperature"""
  ENGINE_OIL_TEMPERATURE

  """Engine Time Total"""
  ENGINE_TIME_TOTAL

  """Hard Breaking"""
  HARD_BREAKING

  """Hard Acceleration"""
  HARD_ACCELERATION

  """Idle Time"""
  IDLE_TIME

  """Total Idle Time"""
  TOTAL_IDLE_TIME

  """Engine Oil Pressure"""
  ENGINE_OIL_PRESSURE

  """Engine Oil Life"""
  ENGINE_OIL_LIFE

  """Billing ID"""
  BILLING_ID
}

"""Mastercard Fleet fuel product codes"""
enum MastercardFleetFuelProductCode {
  """Regular"""
  REGULAR

  """Mid/Plus"""
  MID_PLUS

  """Premium/Super"""
  PREMIUM_SUPER

  """Mid/Plus 2"""
  MID_PLUS_2

  """Premium/Super 2"""
  PREMIUM_SUPER_2

  """<Deprecated> Ethanol (5.7% blend)"""
  ETHANOL_5_7_BLEND

  """<Deprecated> Mid/Plus Ethanol (5.7% blend)"""
  MID_PLUS_ETHANOL_5_7_BLEND

  """<Deprecated> Premium/Super Ethanol (5.7% blend)"""
  PREMIUM_SUPER_ETHANOL_5_7_BLEND

  """<Deprecated> Ethanol (7.7% blend)"""
  ETHANOL_7_7_BLEND

  """<Deprecated> Mid/Plus Ethanol (7.7% blend)"""
  MID_PLUS_ETHANOL_7_7_BLEND

  """Green Gasoline Regular (Plant based not petroleum based)"""
  GREEN_GASOLINE_REGULAR

  """Green Gasoline Mid/Plus (Plant based not petroleum based)"""
  GREEN_GASOLINE_MID_PLUS

  """Green Gasoline Premium/Super (Plant based not petroleum based)"""
  GREEN_GASOLINE_PREMIUM_SUPER

  """Regular Diesel #2"""
  REGULAR_DIESEL_2

  """Premium Diesel #2"""
  PREMIUM_DIESEL_2

  """Regular Diesel #1"""
  REGULAR_DIESEL_1

  """Compressed Natural Gas"""
  COMPRESSED_NATURAL_GAS

  """Liquid Propane Gas"""
  LIQUID_PROPANE_GAS

  """Liquid Natural Gas"""
  LIQUID_NATURAL_GAS

  """E-85"""
  E_85

  """Reformulated 1"""
  REFORMULATED_1

  """Reformulated 2"""
  REFORMULATED_2

  """Reformulated 3"""
  REFORMULATED_3

  """Reformulated 4"""
  REFORMULATED_4

  """Reformulated 5"""
  REFORMULATED_5

  """Diesel Off-Road (#1 and #2 Non-Taxable)"""
  DIESEL_OFF_ROAD_1_AND_2_NON_TAXABLE

  """Diesel Off-Road (Non-Taxable)"""
  DIESEL_OFF_ROAD_NON_TAXABLE

  """Biodiesel Blend Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_OFF_ROAD

  """Undefined Fuel - Reserved for Conexxus Future"""
  UNDEFINED_FUEL

  """Racing Fuel"""
  RACING_FUEL

  """Mid/Plus 2 (10% Blend)"""
  MID_PLUS_2_10_PERCENT_BLEND

  """Premium/Super 2 (10% Blend)"""
  PREMIUM_SUPER_2_10_BLEND

  """Mid/Plus Ethanol 2 (15% Blend)"""
  MID_PLUS_ETHANOL_2_10_BLEND

  """Premium/Super Ethanol 2 (15% Blend)"""
  PREMIUM_SUPER_ETHANOL_2_10_BLEND

  """<Deprecated> Premium/Super Ethanol (7.7% Blend)"""
  PREMIUM_SUPER_ETHANOL_7_7_BLEND

  """Regular Ethanol (10% Blend)"""
  REGULAR_ETHANOL_10_BLEND

  """Mid/Plus Ethanol (10% Blend)"""
  MID_PLUS_ETHANOL_10_BLEND

  """Premium/Super Ethanol (10% Blend)"""
  PREMIUM_SUPER_ETHANOL_10_BLEND

  """B2 Diesel Blend 2% Biodiesel"""
  B2_DIESEL_BLEND

  """B5 Diesel Blend 5% Biodiesel"""
  B5_DIESEL_BLEND

  """B10 Diesel Blend 10% Biodiesel"""
  B10_DIESEL_BLEND

  """B11 Diesel Blend 11% Biodiesel"""
  B11_DIESEL_BLEND

  """B15 Diesel Blend 15% Biodiesel"""
  B15_DIESEL_BLEND

  """B20 Diesel Blend 20% Biodiesel"""
  B20_DIESEL_BLEND

  """B100 Diesel Blend 100% Biodiesel"""
  B100_DIESEL_BLEND

  """B1 Diesel Blend 1% Biodiesel"""
  B1_DIESEL_BLEND

  """Additized Diesel #2"""
  ADDITIZED_DIESEL_2

  """Additized Diesel #3"""
  ADDITIZED_DIESEL_3

  """Renewable Diesel (>=R95) (meets ASTM D975 in US / EN 590 in Europe)"""
  RENEWABLE_DIESEL

  """Renewable Diesel (Biodiesel 6%-20%) (meets ASTM D7467 in US)"""
  RENEWABLE_DIESEL_BIODIESEL

  """DEF (Diesel Exhaust Fluid)"""
  DEF

  """Premium Diesel #1"""
  PREMIUM_DIESEL_1

  """Regular Ethanol (15% Blend)"""
  REGULAR_ETHANOL_15_BLEND

  """Mid/Plus Ethanol (15% Blend)"""
  MID_PLUS_ETHANOL_15_BLEND

  """Premium/Super Ethanol (15% Blend)"""
  PREMIUM_SUPER_ETHANOL_15_BLEND

  """Premium Diesel Blend <20% Biodiesel"""
  PREMIUM_DIESEL_BLEND_1

  """Premium Diesel Blend >= 20% Biodiesel"""
  PREMIUM_DIESEL_BLEND_2

  """B75 Diesel Blend 75% Biodiesel"""
  B75_DIESEL_BLEND

  """B99 Diesel Blend 99% Biodiesel"""
  B99_DIESEL_BLEND

  """Miscellaneous Fuel"""
  MISCELLANEOUS_FUEL

  """Jet Fuel"""
  JET_FUEL

  """Aviation Fuel Regular"""
  AVIATION_FUEL_REGULAR

  """Aviation Fuel Premium"""
  AVIATION_FUEL_PREMIUM

  """Aviation Fuel JP8"""
  AVIATION_FUEL_JP8

  """Aviation Fuel 4"""
  AVIATION_FUEL_4

  """Aviation Fuel 5"""
  AVIATION_FUEL_5

  """Biojet (Diesel)"""
  BIOJET

  """Aviation Biofuel (Gasoline)"""
  AVIATION_BIOFUEL

  """Miscellaneous Aviation Fuel"""
  MISCELLANEOUS_AVIATION_FUEL

  """Marine Fuel 1"""
  MARINE_FUEL_1

  """Marine Fuel 2"""
  MARINE_FUEL_2

  """Marine Fuel 3"""
  MARINE_FUEL_3

  """Marine Fuel 4"""
  MARINE_FUEL_4

  """Marine Fuel 5"""
  MARINE_FUEL_5

  """Marine - Other"""
  MARINE_OTHER

  """Marine Diesel"""
  MARINE_DIESEL

  """Miscellaneous Marine Fuel"""
  MISCELLANEOUS_MARINE_FUEL

  """Kerosene – Low Sulfur"""
  KEROSENE_LOW_SULFUR

  """White Gas"""
  WHITE_GAS

  """Heating Oil"""
  HEATING_OIL

  """Other Fuel (Non-Taxable)"""
  OTHER_FUEL

  """Kerosene – Ultra Low Sulfur"""
  KEROSENE_ULTRA_LOW_SULFUR

  """Kerosene – Low Sulfur (Non-Taxable)"""
  KEROSENE_LOW_SULFUR_NON_TAXABLE

  """Kerosene – Ultra Low Sulfur (Non-Taxable)"""
  KEROSENE_ULTRA_LOW_SULFUR_NON_TAXABLE

  """EVC-1 – Level 1 charge = 110v 15 amp"""
  EVC_LEVEL_1_CHARGE

  """EVC-2 – Level 2 charge = 240v 15-40 amp"""
  EVC_LEVEL_2_CHARGE

  """EVC-3 – Level 3 charge = 480v 3 phase charge"""
  EVC_LEVEL_3_CHARGE

  """Biodiesel Blend 2% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_2_OFF_ROAD

  """Biodiesel Blend 5% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_5_OFF_ROAD

  """Biodiesel Blend 10% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_10_OFF_ROAD

  """Biodiesel Blend 11% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_11_OFF_ROAD

  """Biodiesel Blend 15% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_15_OFF_ROAD

  """Biodiesel Blend 20% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_20_OFF_ROAD

  """Diesel #1 Off-Road (Non-Taxable)"""
  DIESEL_1_OFF_ROAD

  """Diesel #2 Off-Road (Non-Taxable)"""
  DIESEL_2_OFF_ROAD

  """Diesel #1 Premium Off-Road (Non-Taxable)"""
  DIESEL_1_PREMIUM_OFF_ROAD

  """Diesel #2 Premium Off-Road (Non-Taxable)"""
  DIESEL_2_PREMIUM_OFF_ROAD

  """Additive Dosage"""
  ADDITIVE_DOSAGE

  """Ethanol Blends E16-E84"""
  ETHANOL_BLENDS_E16_E84

  """Low Octane UNL"""
  LOW_OCTANE_UNL

  """Blended Diesel (#1 and #2)"""
  BLENDED_DIESEL

  """Off-Road Regular (Non-Taxable)"""
  OFF_ROAD_REGULAR

  """Off-Road Mid/Plus (Non-Taxable)"""
  OFF_ROAD_MID_PLUS

  """Off-Road Premium/Super (Non-Taxable)"""
  OFF_ROAD_PREMIUM_SUPER

  """Off-Road Mid/Plus 2 (Non-Taxable)"""
  OFF_ROAD_MID_PLUS_2

  """Off-Road Premium/Super 2 (Non-Taxable)"""
  OFF_ROAD_PREMIUM_SUPER_2

  """Recreational Fuel (90 Octane)"""
  RECREATIONAL_FUEL

  """Hydrogen H35"""
  HYDROGEN_H35

  """Hydrogen H70"""
  HYDROGEN_H70

  """
  Renewable Diesel (>=R95) Off-Road (Non-Taxable) (meets ASTM D975 in US / EN 590 in Europe)
  """
  RENEWABLE_DIESEL_OFF_ROAD

  """Biodiesel Blend 1% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_1_OFF_ROAD

  """Biodiesel Blend 75% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_75_OFF_ROAD

  """Biodiesel Blend 99% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_99_OFF_ROAD

  """Biodiesel Blend 100% Off-Road (Non-Taxable)"""
  BIODIESEL_BLEND_100_OFF_ROAD

  """
  Renewable Diesel (Biodiesel 6%-20%) Off-Road (Non-taxable) (meets ASTM D7467 in US)
  """
  RENEWABLE_DIESEL_BIODIESEL_OFF_ROAD

  """Miscellaneous Other Fuel"""
  MISCELLANEOUS_OTHER_FUEL
}

"""Mastercard Fleet non-fuel product codes"""
enum MastercardFleetNonFuelProductCode {
  """General Automotive Merchandise"""
  GENERAL_AUTOMOTIVE_MERCHANDISE

  """Motor Oil"""
  MOTOR_OIL

  """Car Wash"""
  CAR_WASH

  """Oil Change"""
  OIL_CHANGE

  """Oil Filter"""
  OIL_FILTER

  """Work Order"""
  WORK_ORDER

  """Anti-Freeze"""
  ANTI_FREEZE

  """Washer Fluid"""
  WASHER_FLUID

  """Brake Fluid"""
  BRAKE_FLUID

  """Tires"""
  TIRES

  """Federal Excise Tax (Tires)"""
  FEDERAL_EXCISE_TAX_TIRES

  """Tire Rotation"""
  TIRE_ROTATION

  """Batteries"""
  BATTERIES

  """Lube"""
  LUBE

  """Inspection"""
  INSPECTION

  """Labor"""
  LABOR

  """Towing"""
  TOWING

  """Road Service"""
  ROAD_SERVICE

  """Vehicle Accessories"""
  VEHICLE_ACCESSORIES

  """Vehicle Parts"""
  VEHICLE_PARTS

  """Preventative Maintenance"""
  PREVENTATIVE_MAINTENANCE

  """Air Conditioning Service"""
  AIR_CONDITIONING_SERVICE

  """Engine Service"""
  ENGINE_SERVICE

  """Transmission Service"""
  TRANSMISSION_SERVICE

  """Brake Service"""
  BRAKE_SERVICE

  """Exhaust Service"""
  EXHAUST_SERVICE

  """Body Work"""
  BODY_WORK

  """Vehicle Glass"""
  VEHICLE_GLASS

  """Synthetic Oil"""
  SYNTHETIC_OIL

  """Lamps"""
  LAMPS

  """Wipers"""
  WIPERS

  """Hoses"""
  HOSES

  """Tire-related (Wheel Balance, Valve Stem)"""
  TIRE_RELATED

  """Repairs"""
  REPAIRS

  """Service Package"""
  SERVICE_PACKAGE

  """Vehicle Parking"""
  VEHICLE_PARKING

  """Truck Tank Cleaning"""
  TRUCK_TANK_CLEANING

  """Other Lubricants"""
  OTHER_LUBRICANTS

  """Vehicle Fuel Additives/Treatment (Injected)"""
  VEHICLE_FUEL_ADDITIVES_TREATMENT

  """Vehicle Rental"""
  VEHICLE_RENTAL

  """Air Filter"""
  AIR_FILTER

  """Vehicle Prep"""
  VEHICLE_PREP

  """Fuel System"""
  FUEL_SYSTEM

  """Miscellaneous Vehicle Products / Services"""
  MISCELLANEOUS_VEHICLE_PRODUCTS_SERVICES

  """Storage"""
  STORAGE

  """Aircraft Ground Handling"""
  AIRCRAFT_GROUND_HANDLING

  """Aircraft Ground Power Unit"""
  AIRCRAFT_GROUND_POWER_UNIT

  """Aircraft Labor"""
  AIRCRAFT_LABOR

  """Aircraft Work Order"""
  AIRCRAFT_WORK_ORDER

  """Aircraft Maintenance"""
  AIRCRAFT_MAINTENANCE

  """Aircraft Service"""
  AIRCRAFT_SERVICE

  """Transportation"""
  TRANSPORTATION

  """De-icing"""
  DE_ICING

  """Ramp Fees"""
  RAMP_FEES

  """Catering"""
  CATERING

  """Hangar Fee"""
  HANGAR_FEE

  """Landing Fee"""
  LANDING_FEE

  """Call Out Fee"""
  CALL_OUT_FEE

  """Aircraft Rental"""
  AIRCRAFT_RENTAL

  """Instruction Fee"""
  INSTRUCTION_FEE

  """Flight Plans / Weather Brief"""
  FLIGHT_PLANS_WEATHER_BRIEF

  """Charter Fee"""
  CHARTER_FEE

  """Communication Fee"""
  COMMUNICATION_FEE

  """Aircraft Cleaning"""
  AIRCRAFT_CLEANING

  """Cargo Handling"""
  CARGO_HANDLING

  """Aircraft Accessories"""
  AIRCRAFT_ACCESSORIES

  """Pilot Supplies"""
  PILOT_SUPPLIES

  """Aircraft Parking Fees"""
  AIRCRAFT_PARKING_FEES

  """Aircraft Tie Down Fees"""
  AIRCRAFT_TIE_DOWN_FEES

  """Aircraft Sanitation Fees"""
  AIRCRAFT_SANITATION_FEES

  """Aircraft Fuel Additive"""
  AIRCRAFT_FUEL_ADDITIVE

  """AC Parts"""
  AC_PARTS

  """Oxygen"""
  OXYGEN

  """De-fuel"""
  DE_FUEL

  """Re-service"""
  RE_SERVICE

  """Static Dissipater Additive"""
  STATIC_DISSIPATER_ADDITIVE

  """Corrosion Inhibitor"""
  CORROSION_INHIBITOR

  """Airport Fees"""
  AIRPORT_FEES

  """Overtime Fees"""
  OVERTIME_FEES

  """IT/Bladder"""
  IT_BLADDER

  """Ground Equipment Service Fees"""
  GROUND_EQUIPMENT_SERVICE_FEES

  """Secure Fees"""
  SECURE_FEES

  """Flow Fee"""
  FLOW_FEE

  """Miscellaneous Aviation Products/Services"""
  MISCELLANEOUS_AVIATION_PRODUCTS_SERVICES

  """Marine Service"""
  MARINE_SERVICE

  """Marine Labor"""
  MARINE_LABOR

  """Marine Work Order"""
  MARINE_WORK_ORDER

  """Launch Fee"""
  LAUNCH_FEE

  """Slip Rental"""
  SLIP_RENTAL

  """Miscellaneous Marine Products/Services"""
  MISCELLANEOUS_MARINE_PRODUCTS_SERVICES

  """General Merchandise"""
  GENERAL_MERCHANDISE

  """General Ice"""
  GENERAL_ICE

  """General Tobacco"""
  GENERAL_TOBACCO

  """Cigarettes"""
  CIGARETTES

  """Tobacco - Other"""
  TOBACCO_OTHER

  """General Packaged Beverage"""
  GENERAL_PACKAGED_BEVERAGE

  """Packaged Beverages (non-alcoholic)"""
  PACKAGED_BEVERAGES_NON_ALCOHOLIC

  """Packaged Juice"""
  PACKAGED_JUICE

  """Other Packaged Beverages"""
  OTHER_PACKAGED_BEVERAGES

  """General Dispensed Beverage"""
  GENERAL_DISPENSED_BEVERAGE

  """Hot Dispensed Beverages"""
  HOT_DISPENSED_BEVERAGES

  """Cold Dispensed Beverages"""
  COLD_DISPENSED_BEVERAGES

  """Frozen Dispensed Beverages"""
  FROZEN_DISPENSED_BEVERAGES

  """Other Dispensed Beverages"""
  OTHER_DISPENSED_BEVERAGES

  """General Snacks"""
  GENERAL_SNACKS

  """Salty Snacks"""
  SALTY_SNACKS

  """Alternative Snacks"""
  ALTERNATIVE_SNACKS

  """Sweet Snacks - Packaged"""
  SWEET_SNACKS_PACKAGED

  """General Candy"""
  GENERAL_CANDY

  """General Dairy"""
  GENERAL_DAIRY

  """Fluid Milk Products"""
  FLUID_MILK_PRODUCTS

  """Packaged Ice Cream/Novelties"""
  PACKAGED_ICE_CREAM_NOVELTIES

  """Other Dairy"""
  OTHER_DAIRY

  """General Grocery"""
  GENERAL_GROCERY

  """Groceries - Edible"""
  GROCERIES_EDIBLE

  """Groceries - Non-Edible"""
  GROCERIES_NON_EDIBLE

  """Groceries - Perishable"""
  GROCERIES_PERISHABLE

  """Bread - Packaged"""
  BREAD_PACKAGED

  """Frozen Foods"""
  FROZEN_FOODS

  """General Alcohol"""
  GENERAL_ALCOHOL

  """Beer - Alcoholic"""
  BEER_ALCOHOLIC

  """Beer - Non-Alcoholic"""
  BEER_NON_ALCOHOLIC

  """Wine"""
  WINE

  """Liquor"""
  LIQUOR

  """General Deli"""
  GENERAL_DELI

  """Packaged Sandwiches/Deli Products"""
  PACKAGED_SANDWICHES_DELI_PRODUCTS

  """Prepared Foods"""
  PREPARED_FOODS

  """Deli Items"""
  DELI_ITEMS

  """General Food service"""
  GENERAL_FOOD_SERVICE

  """General Lottery"""
  GENERAL_LOTTERY

  """Lottery - Instant"""
  LOTTERY_INSTANT

  """Lottery - Online"""
  LOTTERY_ONLINE

  """Lottery - Other"""
  LOTTERY_OTHER

  """General Money Order"""
  GENERAL_MONEY_ORDER

  """Money Order - Vendor Payment"""
  MONEY_ORDER_VENDOR_PAYMENT

  """Money Order - Payroll Check"""
  MONEY_ORDER_PAYROLL_CHECK

  """Money Order - Gift Certificate"""
  MONEY_ORDER_GIFT_CERTIFICATE

  """Money Order - Refund Check"""
  MONEY_ORDER_REFUND_CHECK

  """Money Order - Official Check"""
  MONEY_ORDER_OFFICIAL_CHECK

  """Money Order - Rebate Check"""
  MONEY_ORDER_REBATE_CHECK

  """Money Order - Dividend Check"""
  MONEY_ORDER_DIVIDEND_CHECK

  """Money Order - Utility Check"""
  MONEY_ORDER_UTILITY_CHECK

  """General Store Service"""
  GENERAL_STORE_SERVICE

  """Home Delivery"""
  HOME_DELIVERY

  """Prepaid Cards - Purchase"""
  PREPAID_CARDS_PURCHASE

  """Prepaid Cards - Activation/Recharge"""
  PREPAID_CARDS_ACTIVATION_RECHARGE

  """Membership/Loyalty"""
  MEMBERSHIP_LOYALTY

  """General Health & Beauty Care"""
  GENERAL_HEALTH_BEAUTY_CARE

  """General Publications"""
  GENERAL_PUBLICATIONS

  """PIN Activate Prepaid Card"""
  PIN_ACTIVATE_PREPAID_CARD

  """PIN Return Prepaid Card"""
  PIN_RETURN_PREPAID_CARD

  """Enable Device/Handset Unlock"""
  ENABLE_DEVICE_HANDSET_UNLOCK

  """Disable Device/Handset Lock"""
  DISABLE_DEVICE_HANDSET_LOCK

  """3rd Party Prepaid Card Activate"""
  THIRD_PARTY_PREPAID_CARD_ACTIVATE

  """3rd Party Prepaid Card Reload"""
  THIRD_PARTY_PREPAID_CARD_RELOAD

  """Financial Prepaid Card Activate"""
  FINANCIAL_PREPAID_CARD_ACTIVATE

  """Financial Prepaid Card Reload"""
  FINANCIAL_PREPAID_CARD_RELOAD

  """Proprietary Prepaid Card Activate"""
  PROPRIETARY_PREPAID_CARD_ACTIVATE

  """Proprietary Prepaid Card Reload"""
  PROPRIETARY_PREPAID_CARD_RELOAD

  """General Purpose Activate"""
  GENERAL_PURPOSE_ACTIVATE

  """General Purpose Reload"""
  GENERAL_PURPOSE_RELOAD

  """Real Time Recharge"""
  REAL_TIME_RECHARGE

  """Wireless Real Time Recharge"""
  WIRELESS_REAL_TIME_RECHARGE

  """Single Payee Bill Pay"""
  SINGLE_PAYEE_BILL_PAY

  """Multiple Payee Bill Pay"""
  MULTIPLE_PAYEE_BILL_PAY

  """Packaged DEF (Diesel Exhaust Fluid)"""
  PACKAGED_DEF

  """Packaged B99"""
  PACKAGED_B99

  """Packaged B100"""
  PACKAGED_B100

  """Packaged Additive"""
  PACKAGED_ADDITIVE

  """Packaged Kerosene"""
  PACKAGED_KEROSENE

  """Packaged Propane"""
  PACKAGED_PROPANE

  """Miscellaneous Packaged Fuels"""
  MISCELLANEOUS_PACKAGED_FUELS

  """Scales"""
  SCALES

  """Shower"""
  SHOWER

  """Tire Repair"""
  TIRE_REPAIR

  """Lodging"""
  LODGING

  """Wash Out"""
  WASH_OUT

  """Trailer Wash"""
  TRAILER_WASH

  """RV Dump Fee"""
  RV_DUMP_FEE

  """EV Charging Fee"""
  EV_CHARGING_FEE

  """EV Battery Exchanges"""
  EV_BATTERY_EXCHANGES

  """Toll Payments"""
  TOLL_PAYMENTS

  """Cannabidiol (CBD)"""
  CANNABIDIOL

  """Discount 1"""
  DISCOUNT_1

  """Discount 2"""
  DISCOUNT_2

  """Discount 3"""
  DISCOUNT_3

  """Discount 4"""
  DISCOUNT_4

  """Discount 5"""
  DISCOUNT_5

  """Coupon 1"""
  COUPON_1

  """Coupon 2"""
  COUPON_2

  """Coupon 3"""
  COUPON_3

  """Coupon 4"""
  COUPON_4

  """Coupon 5"""
  COUPON_5

  """Lottery Pay Out - Instant"""
  LOTTERY_PAY_OUT_INSTANT

  """Lottery Pay Out - Online"""
  LOTTERY_PAY_OUT_ONLINE

  """Lottery Pay Out - Other"""
  LOTTERY_PAY_OUT_OTHER

  """Split Tender"""
  SPLIT_TENDER

  """Tax Discount/Forgiven"""
  TAX_DISCOUNT_FORGIVEN

  """Local Discount 1"""
  LOCAL_DISCOUNT_1

  """Local Discount 2"""
  LOCAL_DISCOUNT_2

  """Local Discount 3"""
  LOCAL_DISCOUNT_3

  """Local Discount 4"""
  LOCAL_DISCOUNT_4

  """Local Discount 5"""
  LOCAL_DISCOUNT_5

  """POS/Loyalty Reserved Discount 1"""
  POS_LOYALTY_RESERVED_DISCOUNT_1

  """POS/Loyalty Reserved Discount 2"""
  POS_LOYALTY_RESERVED_DISCOUNT_2

  """POS/Loyalty Reserved Discount 3"""
  POS_LOYALTY_RESERVED_DISCOUNT_3

  """POS/Loyalty Reserved Discount 4"""
  POS_LOYALTY_RESERVED_DISCOUNT_4

  """POS/Loyalty Reserved Discount 5"""
  POS_LOYALTY_RESERVED_DISCOUNT_5

  """Miscellaneous Negative Administrative"""
  MISCELLANEOUS_NEGATIVE_ADMINISTRATIVE

  """Tax 1"""
  TAX_1

  """Tax 2"""
  TAX_2

  """Tax 3"""
  TAX_3

  """Tax 4"""
  TAX_4

  """Tax 5"""
  TAX_5

  """Cash Back"""
  CASH_BACK

  """Cash Back Fee"""
  CASH_BACK_FEE

  """Fee 1"""
  FEE_1

  """Fee 2"""
  FEE_2

  """Fee 3"""
  FEE_3

  """Fee 4"""
  FEE_4

  """Fee 5"""
  FEE_5

  """Miscellaneous Aviation Tax"""
  MISCELLANEOUS_AVIATION_TAX

  """GST/HST (Canadian)/VAT 1"""
  GST_HST_CANADIAN_VAT_1

  """PST/QST (Canadian) VAT 2"""
  PST_QST_CANADIAN_VAT_2

  """SWT Rate (Canadian)"""
  SWT_RATE_CANADIAN

  """Tax 6"""
  TAX_6

  """Tax 7"""
  TAX_7

  """Tax 8"""
  TAX_8

  """Jet Federal Excise Tax"""
  JET_FEDERAL_EXCISE_TAX

  """AvGas Federal Excise Tax"""
  AVGAS_FEDERAL_EXCISE_TAX

  """Charity"""
  CHARITY

  """Gratuity"""
  GRATUITY

  """Miscellaneous Administrative"""
  MISCELLANEOUS_ADMINISTRATIVE
}

"""
The return types when adding funds to a payment card.

WARNING: Transfer is deprecated. ElectronicFundsTransfer should be used instead.
"""
union AddFundsToPaymentCardPayload = Transfer | UserError | AccessDeniedError

"""
A movement of money within the Highnote platform.

DEPRECATED: Use type ElectronicFundsTransfer instead.
"""
type Transfer implements Node {
  """Global ID used to reference the Transfer in operations."""
  id: ID!

  """The amount of the Transfer."""
  amount: Amount

  """The current status of the Transfer."""
  status: TransferStatus

  """The reason for the current status."""
  statusReason: TransferStatusReasonCode

  """The date and time, in ISO 8601 format, the Transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the Transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]
}

"""A movement of money within the Highnote platform."""
interface ElectronicFundsTransfer implements Node {
  """Global ID used to reference the Transfer in operations."""
  id: ID!

  """The amount of the Transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the Transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the Transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]
}

"""The status of the wire transfer."""
enum WireTransferStatus {
  """The `WireTransfer` is pending."""
  PENDING

  """The wire is being processed."""
  PROCESSING

  """The `WireTransfer` is complete."""
  COMPLETED

  """The `WireTransfer` has failed."""
  FAILED
}

"""The reasons a `WireTransfer` could fail."""
enum WireTransferStatusReasonCode {
  """
  The source account of the WireTransfer did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """The source or receiving account is closed."""
  ACCOUNT_CLOSED

  """The source or receiving account was not found."""
  ACCOUNT_NOT_FOUND

  """The source and receiving account have different currency."""
  CURRENCY_MISMATCH

  """
  The receiving account does not have PayrollAdvanceFinancialAccountFeature as enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """The receiving account holder is not an Organization."""
  ACCOUNT_HOLDER_IS_NOT_AN_ORGANIZATION
}

"""The possible types of `WireTransfer`."""
enum WireTransferType {
  """Represents an incoming wire transfer."""
  INCOMING_WIRE_TRANSFER

  """Represents an outgoing wire transfer."""
  OUTGOING_WIRE_TRANSFER

  """Represents an incoming wire transfer reversal."""
  INCOMING_WIRE_TRANSFER_REVERSAL

  """Represents an incoming wire transfer reversal."""
  OUTGOING_WIRE_TRANSFER_REVERSAL
}

"""Represents money being moved via wire."""
type WireTransfer implements Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers."""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The type that this `WireTransfer` is."""
  type: WireTransferType

  """The current status of this `WireTransfer`."""
  status: WireTransferStatus

  """The reason for the current status."""
  statusReason: WireTransferStatusReasonCode

  """The `FinancialAccount` effected for this `WireTransfer`."""
  financialAccount: FinancialAccount

  """A memo for the `WireTransfer`."""
  memo: String
}

"""The details to add funds to a Payment Card."""
input AddFundsToPaymentCardInput {
  """The ID of the Payment Card to add funds."""
  paymentCardId: ID!

  """The amount to add to the Payment Card."""
  amount: AmountInput!

  """A description of the transfer for later reference."""
  memo: String
}

"""
The states of a Transfer.

DEPRECATED: See ElectronicFundsTransfer and the types that implement it. They each have their own more specific version of status.
"""
enum TransferStatus {
  """The platform has started processing the Transfer."""
  PENDING

  """The platform is currently validating and executing the Transfer."""
  PROCESSING

  """The platform has completed the money movement."""
  COMPLETED

  """
  The platform was not able to complete the money movement. See `statusReasonCode` for more information.
  """
  FAILED
}

"""
The reasons a Transfer could fail.

DEPRECATED: See ElectronicFundsTransfer and the types that implement it. They each have their own more specific version of status reason code.
"""
enum TransferStatusReasonCode {
  """
  The source account of the Transfer did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """The source or receiving account is closed."""
  ACCOUNT_CLOSED

  """The source or receiving account was not found."""
  ACCOUNT_NOT_FOUND

  """The source and receiving account have different currency."""
  CURRENCY_MISMATCH

  """
  The receiving account does not have PayrollAdvanceFinancialAccountFeature as enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """The receiving account holder is not an Organization."""
  ACCOUNT_HOLDER_IS_NOT_AN_ORGANIZATION
}

"""
The list of human friendly merchant category codes (MCC) according to [ISO-18245](https://en.wikipedia.org/wiki/ISO_18245).
"""
enum MerchantCategory {
  """
  The category for Veterinary Services.
  
  Numeric code: '0742'
  """
  VETERINARY_SERVICES

  """
  The category for Wine Producers.
  
  Numeric code: '0743'
  """
  WINE_PRODUCERS

  """
  The category for Champagne Producers.
  
  Numeric code: '0744'
  """
  CHAMPAGNE_PRODUCERS

  """
  The category for Agricultural Cooperative.
  
  Numeric code: '0763'
  """
  AGRICULTURAL_COOPERATIVE

  """
  The category for Landscaping Services.
  
  Numeric code: '0780'
  """
  LANDSCAPING_SERVICES

  """
  The category for Wholesale.
  
  Numeric code: '1002'
  """
  WHOLESALE

  """
  The category for Concession.
  
  Numeric code: '1003'
  """
  CONCESSION

  """
  The category for General Services.
  
  Numeric code: '1520'
  """
  GENERAL_SERVICES

  """
  The category for "Heating, Plumbing, A/C".
  
  Numeric code: '1711'
  """
  HEATING_PLUMBING_A_C

  """
  The category for Electrical Services.
  
  Numeric code: '1731'
  """
  ELECTRICAL_SERVICES

  """
  The category for "Masonry, Stonework, and Plaster".
  
  Numeric code: '1740'
  """
  MASONRY_STONEWORK_AND_PLASTER

  """
  The category for Carpentry Services.
  
  Numeric code: '1750'
  """
  CARPENTRY_SERVICES

  """
  The category for "Roofing/Siding, Sheet Metal".
  
  Numeric code: '1761'
  """
  ROOFING_SIDING_SHEET_METAL

  """
  The category for Concrete Work Services.
  
  Numeric code: '1771'
  """
  CONCRETE_WORK_SERVICES

  """
  The category for Special Trade Services.
  
  Numeric code: '1799'
  """
  SPECIAL_TRADE_SERVICES

  """
  The category for "Food Served in a Hospital, Hotel, Cruise Ship, or Similar Location".
  
  Numeric code: '2002'
  """
  FAST_FOOD

  """
  The category for Miscellaneous Publishing and Printing.
  
  Numeric code: '2741'
  """
  MISCELLANEOUS_PUBLISHING_AND_PRINTING

  """
  The category for "Typesetting, Plate Making, and Related Services".
  
  Numeric code: '2791'
  """
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES

  """
  The category for Specialty Cleaning.
  
  Numeric code: '2842'
  """
  SPECIALTY_CLEANING

  """
  The category for Kyoritsu Hotels.
  
  Numeric code: '3839'
  """
  KYORITSUHOTELS

  """
  The category for Railroads.
  
  Numeric code: '4011'
  """
  RAILROADS

  """
  The category for "Commuter Transport, Ferries".
  
  Numeric code: '4111'
  """
  COMMUTER_TRANSPORT_AND_FERRIES

  """
  The category for Passenger Railways.
  
  Numeric code: '4112'
  """
  PASSENGER_RAILWAYS

  """
  The category for Ambulance Services.
  
  Numeric code: '4119'
  """
  AMBULANCE_SERVICES

  """
  The category for Taxicabs/Limousines.
  
  Numeric code: '4121'
  """
  TAXICABS_LIMOUSINES

  """
  The category for Bus Lines.
  
  Numeric code: '4131'
  """
  BUS_LINES

  """
  The category for "Motor Freight Carriers and Trucking - Local and Long Distance, Moving and Storage Companies, and Local Delivery Services".
  
  Numeric code: '4214'
  """
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING

  """
  The category for Courier Services.
  
  Numeric code: '4215'
  """
  COURIER_SERVICES

  """
  The category for "Public Warehousing and Storage - Farm Products, Refrigerated Goods, Household Goods, and Storage".
  
  Numeric code: '4225'
  """
  PUBLIC_WAREHOUSING_AND_STORAGE

  """
  The category for Cruise Lines.
  
  Numeric code: '4411'
  """
  CRUISE_LINES

  """
  The category for Boat Rentals and Leases.
  
  Numeric code: '4457'
  """
  BOAT_RENTALS_AND_LEASES

  """
  The category for "Marinas, Service and Supplies".
  
  Numeric code: '4468'
  """
  MARINAS_SERVICE_AND_SUPPLIES

  """
  The category for "Airlines, Air Carriers".
  
  Numeric codes: ['3003','3019','3070','3073','3074','3080','3091','3092','3093','3095','3101','3104','3105','3107','3108','3109','3113','3114','3116','3119','3120','3121','3122','3123','3124','3128','3134','3139','3140','3141','3142','3147','3149','3150','3152','3153','3155','3157','3158','3160','3162','3163','3166','3173','3179','3189','3192','3194','3195','3198','3199','3201','3202','3205','3207','3208','3209','3210','3214','3224','3225','3227','3230','3232','3237','3244','3249','3250','3255','3257','3258','3264','3265','3268','3269','3270','3271','3272','3273','3274','3275','3276','3277','3278','3279','3281','3283','3288','3289','3290','3291','4511']
  """
  AIRLINES_AIR_CARRIERS

  """
  The category for "Airports, Flying Fields".
  
  Numeric code: '4582'
  """
  AIRPORTS_FLYING_FIELDS

  """
  The category for "Travel Agencies, Tour Operators".
  
  Numeric code: '4722'
  """
  TRAVEL_AGENCIES_TOUR_OPERATORS

  """
  The category for TUI Travel - Germany.
  
  Numeric code: '4723'
  """
  T_UI_TRAVEL_GERMANY

  """
  The category for Tolls/Bridge Fees.
  
  Numeric code: '4784'
  """
  TOLLS_BRIDGE_FEES

  """
  The category for Transportation Services (Not Elsewhere Classified).
  
  Numeric code: '4789'
  """
  TRANSPORTATION_SERVICES

  """
  The category for Telecommunication Equipment and Telephone Sales.
  
  Numeric code: '4812'
  """
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES

  """
  The category for Telecommunication Services.
  
  Numeric code: '4814'
  """
  TELECOMMUNICATION_SERVICES

  """
  The category for Computer Network Services.
  
  Numeric code: '4816'
  """
  COMPUTER_NETWORK_SERVICES

  """
  The category for Telegraph Services.
  
  Numeric code: '4821'
  """
  TELEGRAPH_SERVICES

  """
  The category for "Wires, Money Orders".
  
  Numeric code: '4829'
  """
  WIRES_MONEY_ORDERS

  """
  The category for "Cable, Satellite, and Other Pay Television and Radio".
  
  Numeric code: '4899'
  """
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO

  """
  The category for Utilities.
  
  Numeric code: '4900'
  """
  UTILITIES

  """
  The category for Motor Vehicle Supplies and New Parts.
  
  Numeric code: '5013'
  """
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS

  """
  The category for Office and Commercial Furniture.
  
  Numeric code: '5021'
  """
  OFFICE_AND_COMMERCIAL_FURNITURE

  """
  The category for Construction Materials (Not Elsewhere Classified).
  
  Numeric code: '5039'
  """
  CONSTRUCTION_MATERIALS

  """
  The category for "Photographic, Photocopy, Microfilm Equipment, and Supplies".
  
  Numeric code: '5044'
  """
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES

  """
  The category for "Computers, Peripherals, and Software".
  
  Numeric code: '5045'
  """
  COMPUTERS_PERIPHERALS_AND_SOFTWARE

  """
  The category for Commercial Equipment (Not Elsewhere Classified).
  
  Numeric code: '5046'
  """
  COMMERCIAL_EQUIPMENT

  """
  The category for "Medical, Dental, Ophthalmic, and Hospital Equipment and Supplies".
  
  Numeric code: '5047'
  """
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES

  """
  The category for Metal Service Centers.
  
  Numeric code: '5051'
  """
  METAL_SERVICE_CENTERS

  """
  The category for Electrical Parts and Equipment.
  
  Numeric code: '5065'
  """
  ELECTRICAL_PARTS_AND_EQUIPMENT

  """
  The category for "Hardware, Equipment, and Supplies".
  
  Numeric code: '5072'
  """
  HARDWARE_EQUIPMENT_AND_SUPPLIES

  """
  The category for "Plumbing, Heating Equipment, and Supplies".
  
  Numeric code: '5074'
  """
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES

  """
  The category for Industrial Supplies (Not Elsewhere Classified).
  
  Numeric code: '5085'
  """
  INDUSTRIAL_SUPPLIES

  """
  The category for "Precious Stones and Metals, Watches and Jewelry".
  
  Numeric code: '5094'
  """
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY

  """
  The category for Durable Goods (Not Elsewhere Classified).
  
  Numeric code: '5099'
  """
  DURABLE_GOODS

  """
  The category for "Stationary, Office Supplies, Printing and Writing Paper".
  
  Numeric code: '5111'
  """
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER

  """
  The category for "Drugs, Drug Proprietaries, and Druggist Sundries".
  
  Numeric code: '5122'
  """
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES

  """
  The category for "Piece Goods, Notions, and Other Dry Goods".
  
  Numeric code: '5131'
  """
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS

  """
  The category for "Uniforms, Commercial Clothing".
  
  Numeric code: '5137'
  """
  UNIFORMS_COMMERCIAL_CLOTHING

  """
  The category for Commercial Footwear.
  
  Numeric code: '5139'
  """
  COMMERCIAL_FOOTWEAR

  """
  The category for Chemicals and Allied Products (Not Elsewhere Classified).
  
  Numeric code: '5169'
  """
  CHEMICALS_AND_ALLIED_PRODUCTS

  """
  The category for Petroleum and Petroleum Products.
  
  Numeric code: '5172'
  """
  PETROLEUM_AND_PETROLEUM_PRODUCTS

  """
  The category for "Books, Periodicals, and Newspapers".
  
  Numeric code: '5192'
  """
  BOOKS_PERIODICALS_AND_NEWSPAPERS

  """
  The category for "Florists Supplies, Nursery Stock, and Flowers".
  
  Numeric code: '5193'
  """
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS

  """
  The category for "Paints, Varnishes, and Supplies".
  
  Numeric code: '5198'
  """
  PAINTS_VARNISHES_AND_SUPPLIES

  """
  The category for Nondurable Goods (Not Elsewhere Classified).
  
  Numeric code: '5199'
  """
  NONDURABLE_GOODS

  """
  The category for Home Supply Warehouse Stores.
  
  Numeric code: '5200'
  """
  HOME_SUPPLY_WAREHOUSE_STORES

  """
  The category for "Lumber, Building Materials Stores".
  
  Numeric code: '5211'
  """
  LUMBER_BUILDING_MATERIALS_STORES

  """
  The category for "Glass, Paint, and Wallpaper Stores".
  
  Numeric code: '5231'
  """
  GLASS_PAINT_AND_WALLPAPER_STORES

  """
  The category for Hardware Stores.
  
  Numeric code: '5251'
  """
  HARDWARE_STORES

  """
  The category for "Nurseries, Lawn and Garden Supply Stores".
  
  Numeric code: '5261'
  """
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES

  """
  The category for Online Marketplaces.
  
  Numeric code: '5262'
  """
  ONLINE_MARKETPLACES

  """
  The category for Mobile Home Dealers.
  
  Numeric code: '5271'
  """
  MOBILE_HOME_DEALERS

  """
  The category for Wholesale Clubs.
  
  Numeric code: '5300'
  """
  WHOLESALE_CLUBS

  """
  The category for Duty Free Stores.
  
  Numeric code: '5309'
  """
  DUTY_FREE_STORES

  """
  The category for Discount Stores.
  
  Numeric code: '5310'
  """
  DISCOUNT_STORES

  """
  The category for Department Stores.
  
  Numeric code: '5311'
  """
  DEPARTMENT_STORES

  """
  The category for Variety Stores.
  
  Numeric code: '5331'
  """
  VARIETY_STORES

  """
  The category for Miscellaneous General Merchandise.
  
  Numeric code: '5399'
  """
  MISCELLANEOUS_GENERAL_MERCHANDISE

  """
  The category for "Grocery Stores, Supermarkets".
  
  Numeric code: '5411'
  """
  GROCERY_STORES_SUPERMARKETS

  """
  The category for Freezer and Locker Meat Provisioners.
  
  Numeric code: '5422'
  """
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS

  """
  The category for "Candy, Nut, and Confectionery Stores".
  
  Numeric code: '5441'
  """
  CANDY_NUT_AND_CONFECTIONERY_STORES

  """
  The category for Dairy Products Stores.
  
  Numeric code: '5451'
  """
  DAIRY_PRODUCTS_STORES

  """
  The category for Bakeries.
  
  Numeric code: '5462'
  """
  BAKERIES

  """
  The category for Miscellaneous Food Stores - Convenience Stores and Specialty Markets.
  
  Numeric code: '5499'
  """
  MISCELLANEOUS_FOOD_STORES

  """
  The category for "Car and Truck Dealers (New & Used) Sales, Service, Repairs Parts and Leasing".
  
  Numeric code: '5511'
  """
  CAR_AND_TRUCK_DEALERS_NEW_USED

  """
  The category for "Car and Truck Dealers (Used Only) Sales, Service, Repairs Parts and Leasing".
  
  Numeric code: '5521'
  """
  CAR_AND_TRUCK_DEALERS_USED_ONLY

  """
  The category for Auto and Home Supply Stores.
  
  Numeric code: '5531'
  """
  AUTO_AND_HOME_SUPPLY_STORES

  """
  The category for Automotive Tire Stores.
  
  Numeric code: '5532'
  """
  AUTOMOTIVE_TIRE_STORES

  """
  The category for Automotive Parts and Accessories Stores.
  
  Numeric code: '5533'
  """
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES

  """
  The category for Service Stations.
  
  Numeric code: '5541'
  """
  SERVICE_STATIONS

  """
  The category for Automated Fuel Dispensers.
  
  Numeric code: '5542'
  """
  AUTOMATED_FUEL_DISPENSERS

  """
  The category for Boat Dealers.
  
  Numeric code: '5551'
  """
  BOAT_DEALERS

  """
  The category for Electric Vehicle Charging.
  
  Numeric code: '5552'
  """
  ELECTRIC_VEHICLE_CHARGING

  """
  The category for "Motorcycle Shops, Dealers".
  
  Numeric code: '5561'
  """
  MOTORCYCLE_SHOPS_DEALERS

  """
  The category for Motorcycle Shops and Dealers.
  
  Numeric code: '5571'
  """
  MOTORCYCLE_SHOPS_AND_DEALERS

  """
  The category for Motor Homes Dealers.
  
  Numeric code: '5592'
  """
  MOTOR_HOMES_DEALERS

  """
  The category for Snowmobile Dealers.
  
  Numeric code: '5598'
  """
  SNOWMOBILE_DEALERS

  """
  The category for Miscellaneous Auto Dealers.
  
  Numeric code: '5599'
  """
  MISCELLANEOUS_AUTO_DEALERS

  """
  The category for Mens and Boys Clothing and Accessories Stores.
  
  Numeric code: '5611'
  """
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES

  """
  The category for Women's Ready-To-Wear Stores.
  
  Numeric code: '5621'
  """
  WOMENS_READY_TO_WEAR_STORES

  """
  The category for Women's Accessory and Specialty Shops.
  
  Numeric code: '5631'
  """
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS

  """
  The category for Children's and Infants Wear Stores.
  
  Numeric code: '5641'
  """
  CHILDRENS_AND_INFANTS_WEAR_STORES

  """
  The category for Family Clothing Stores.
  
  Numeric code: '5651'
  """
  FAMILY_CLOTHING_STORES

  """
  The category for Sports and Riding Apparel Stores.
  
  Numeric code: '5655'
  """
  SPORTS_AND_RIDING_APPAREL_STORES

  """
  The category for Shoe Stores.
  
  Numeric code: '5661'
  """
  SHOE_STORES

  """
  The category for Furriers and Fur Shops.
  
  Numeric code: '5681'
  """
  FURRIERS_AND_FUR_SHOPS

  """
  The category for "Mens, Women's Clothing Stores".
  
  Numeric code: '5691'
  """
  MENS_WOMENS_CLOTHING_STORES

  """
  The category for "Tailors, Alterations".
  
  Numeric code: '5697'
  """
  TAILORS_ALTERATIONS

  """
  The category for Wig and Toupee Stores.
  
  Numeric code: '5698'
  """
  WIG_AND_TOUPEE_STORES

  """
  The category for Miscellaneous Apparel and Accessory Shops.
  
  Numeric code: '5699'
  """
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS

  """
  The category for "Furniture, Home Furnishings, and Equipment Stores, Except Appliances".
  
  Numeric code: '5712'
  """
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES

  """
  The category for Floor Covering Stores.
  
  Numeric code: '5713'
  """
  FLOOR_COVERING_STORES

  """
  The category for "Drapery, Window Covering, and Upholstery Stores".
  
  Numeric code: '5714'
  """
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES

  """
  The category for "Fireplace, Fireplace Screens, and Accessories Stores".
  
  Numeric code: '5718'
  """
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES

  """
  The category for Miscellaneous Home Furnishing Specialty Stores.
  
  Numeric code: '5719'
  """
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES

  """
  The category for Household Appliance Stores.
  
  Numeric code: '5722'
  """
  HOUSEHOLD_APPLIANCE_STORES

  """
  The category for guns and ammunition
  
  Numeric code: 5723
  """
  GUNS_AMMO

  """
  The category for Electronics Stores.
  
  Numeric code: '5732'
  """
  ELECTRONICS_STORES

  """
  The category for "Music Stores-Musical Instruments, Pianos, and Sheet Music".
  
  Numeric code: '5733'
  """
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC

  """
  The category for Computer Software Stores.
  
  Numeric code: '5734'
  """
  COMPUTER_SOFTWARE_STORES

  """
  The category for Record Stores.
  
  Numeric code: '5735'
  """
  RECORD_STORES

  """
  The category for Caterers.
  
  Numeric code: '5811'
  """
  CATERERS

  """
  The category for "Eating Places, Restaurants".
  
  Numeric code: '5812'
  """
  EATING_PLACES_RESTAURANTS

  """
  The category for Drinking Places.
  
  Numeric code: '5813'
  """
  DRINKING_PLACES

  """
  The category for Fast Food Restaurants.
  
  Numeric code: '5814'
  """
  FAST_FOOD_RESTAURANTS

  """
  The category for "Digital Goods Media – Books, Movies, Music".
  
  Numeric code: '5815'
  """
  DIGITAL_GOODS_MEDIA

  """
  The category for Digital Goods – Games.
  
  Numeric code: '5816'
  """
  DIGITAL_GOODS_GAMES

  """
  The category for Digital Goods – Applications (Excludes Games).
  
  Numeric code: '5817'
  """
  DIGITAL_GOODS_APPLICATIONS

  """
  The category for Digital Goods – Large Digital Goods Merchant.
  
  Numeric code: '5818'
  """
  DIGITAL_GOODS_LARGE_VOLUME

  """
  The category for Drug Stores and Pharmacies.
  
  Numeric code: '5912'
  """
  DRUG_STORES_AND_PHARMACIES

  """
  The category for "Package Stores-Beer, Wine, and Liquor".
  
  Numeric code: '5921'
  """
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR

  """
  The category for Used Merchandise and Secondhand Stores.
  
  Numeric code: '5931'
  """
  USED_MERCHANDISE_AND_SECONDHAND_STORES

  """
  The category for Antique Shops.
  
  Numeric code: ['5932', '5832']
  """
  ANTIQUE_SHOPS

  """
  The category for Pawn Shops.
  
  Numeric code: '5933'
  """
  PAWN_SHOPS

  """
  The category for Wrecking and Salvage Yards.
  
  Numeric code: '5935'
  """
  WRECKING_AND_SALVAGE_YARDS

  """
  The category for Antique Reproductions.
  
  Numeric code: '5937'
  """
  ANTIQUE_REPRODUCTIONS

  """
  The category for Bicycle Shops.
  
  Numeric code: '5940'
  """
  BICYCLE_SHOPS

  """
  The category for Sporting Goods Stores.
  
  Numeric code: '5941'
  """
  SPORTING_GOODS_STORES

  """
  The category for Book Stores.
  
  Numeric code: '5942'
  """
  BOOK_STORES

  """
  The category for "Stationery Stores, Office, and School Supply Stores".
  
  Numeric code: '5943'
  """
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES

  """
  The category for "Jewelry Stores, Watches, Clocks, and Silverware Stores".
  
  Numeric code: '5944'
  """
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES

  """
  The category for "Hobby, Toy, and Game Shops".
  
  Numeric code: '5945'
  """
  HOBBY_TOY_AND_GAME_SHOPS

  """
  The category for Camera and Photographic Supply Stores.
  
  Numeric code: '5946'
  """
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES

  """
  The category for "Gift, Card, Novelty, and Souvenir Shops".
  
  Numeric code: '5947'
  """
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS

  """
  The category for Luggage and Leather Goods Stores.
  
  Numeric code: '5948'
  """
  LUGGAGE_AND_LEATHER_GOODS_STORES

  """
  The category for "Sewing, Needlework, Fabric, and Piece Goods Stores".
  
  Numeric code: '5949'
  """
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES

  """
  The category for "Glassware, Crystal Stores".
  
  Numeric code: '5950'
  """
  GLASSWARE_CRYSTAL_STORES

  """
  The category for Direct Marketing - Insurance Services.
  
  Numeric code: '5960'
  """
  DIRECT_MARKETING_INSURANCE_SERVICES

  """
  The category for Direct Marketing - Travel.
  
  Numeric code: '5962'
  """
  DIRECT_MARKETING_TRAVEL

  """
  The category for Door-To-Door Sales.
  
  Numeric code: '5963'
  """
  DOOR_TO_DOOR_SALES

  """
  The category for Direct Marketing - Catalog Merchant.
  
  Numeric code: '5964'
  """
  DIRECT_MARKETING_CATALOG_MERCHANT

  """
  The category for Direct Marketing - Combination Catalog and Retail Merchant.
  
  Numeric code: '5965'
  """
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT

  """
  The category for Direct Marketing - Outbound Telemarketing.
  
  Numeric code: '5966'
  """
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING

  """
  The category for Direct Marketing - Inbound Telemarketing.
  
  Numeric code: '5967'
  """
  DIRECT_MARKETING_INBOUND_TELEMARKETING

  """
  The category for Direct Marketing - Subscription.
  
  Numeric code: '5968'
  """
  DIRECT_MARKETING_SUBSCRIPTION

  """
  The category for Direct Marketing - Other.
  
  Numeric code: '5969'
  """
  DIRECT_MARKETING_OTHER

  """
  The category for Artists Supply and Craft Shops.
  
  Numeric code: '5970'
  """
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS

  """
  The category for Art Dealers and Galleries.
  
  Numeric code: '5971'
  """
  ART_DEALERS_AND_GALLERIES

  """
  The category for Stamp and Coin Stores.
  
  Numeric code: '5972'
  """
  STAMP_AND_COIN_STORES

  """
  The category for Religious Goods Stores.
  
  Numeric code: '5973'
  """
  RELIGIOUS_GOODS_STORES

  """
  The category for Hearing Aids Sales and Supplies.
  
  Numeric code: '5975'
  """
  HEARING_AIDS_SALES_AND_SUPPLIES

  """
  The category for Orthopedic Goods - Prosthetic Devices.
  
  Numeric code: '5976'
  """
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES

  """
  The category for Cosmetic Stores.
  
  Numeric code: '5977'
  """
  COSMETIC_STORES

  """
  The category for Typewriter Stores.
  
  Numeric code: '5978'
  """
  TYPEWRITER_STORES

  """
  The category for Fuel Dealers (Non Automotive).
  
  Numeric code: '5983'
  """
  FUEL_DEALERS_NON_AUTOMOTIVE

  """
  The category for Florists.
  
  Numeric code: '5992'
  """
  FLORISTS

  """
  The category for Cigar Stores and Stands.
  
  Numeric code: '5993'
  """
  CIGAR_STORES_AND_STANDS

  """
  The category for News Dealers and Newsstands.
  
  Numeric code: '5994'
  """
  NEWS_DEALERS_AND_NEWSSTANDS

  """
  The category for "Pet Shops, Pet Food, and Supplies".
  
  Numeric code: '5995'
  """
  PET_SHOPS_PET_FOOD_AND_SUPPLIES

  """
  The category for Swimming Pools Sales.
  
  Numeric code: '5996'
  """
  SWIMMING_POOLS_SALES

  """
  The category for Electric Razor Stores.
  
  Numeric code: '5997'
  """
  ELECTRIC_RAZOR_STORES

  """
  The category for Tent and Awning Shops.
  
  Numeric code: '5998'
  """
  TENT_AND_AWNING_SHOPS

  """
  The category for Miscellaneous Specialty Retail.
  
  Numeric code: '5999'
  """
  MISCELLANEOUS_SPECIALTY_RETAIL

  """
  The category for Manual Cash Disburse.
  
  Numeric code: '6010'
  """
  MANUAL_CASH_DISBURSE

  """
  The category for Automated Cash Disburse.
  
  Numeric code: '6011'
  """
  AUTOMATED_CASH_DISBURSE

  """
  The category for Financial Institutions.
  
  Numeric code: '6012'
  """
  FINANCIAL_INSTITUTIONS

  """
  The category for Quasi Cash - Customer Financial Institutions.
  
  Numeric code: '6050'
  """
  QUASI_CASH_CUSTOMER_FINANCIAL_INSTITUTIONS

  """
  The category for "Non-FI, Money Orders".
  
  Numeric code: '6051'
  """
  NON_FI_MONEY_ORDERS

  """
  The category for companies which provide loans to individuals
  
  Numeric Code: ‘6141’
  """
  PERSONAL_CREDIT_INSTITUTIONS

  """
  The category for Mortgage Bankers & Loan Correspondents
  
  Numeric code: '6162'
  """
  MORTGAGE_BANKERS_LOAN_CORRESPONDENTS

  """
  The category for Security Brokers/Dealers.
  
  Numeric code: '6211'
  """
  SECURITY_BROKERS_DEALERS

  """
  The category for "Insurance Underwriting, Premiums".
  
  Numeric code: '6300'
  """
  INSURANCE_UNDERWRITING_PREMIUMS

  """
  The category for PINless Debit BillPay Tier 2 (Tel, Cable, TV, Radio, Insurance)
  
  Numeric Code: '6321'
  """
  PINLESS_DEBIT_BILLPAY_TIER_2

  """
  The category for Insurance Premiums
  
  Numeric Code: '6381'
  """
  INSURANCE_PREMIUMS

  """
  The category for Insurance - Default.
  
  Numeric code: '6399'
  """
  INSURANCE_DEFAULT

  """
  The category for Insurance Agents, Brokers & Service
  
  Numeric code: '6411'
  """
  INSURANCE_AGENTS_BROKERS_SERVICE

  """
  The category for Real Estate Agents and Managers - Rentals.
  
  Numeric code: '6513'
  """
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS

  """
  The category for MoneySend Intracountry.
  
  Numeric code: '6536'
  """
  MONEYSEND_INTRACOUNTRY

  """
  The category for MoneySend Intercountry.
  
  Numeric code: '6537'
  """
  MONEYSEND_INTERCOUNTRY

  """
  The category for MoneySend Funding.
  
  Numeric code: '6538'
  """
  MONEYSEND_FUNDING

  """
  The category for Funding Transactions excluding MoneySend.
  
  Numeric code: '6539'
  """
  FUNDING_TRANSACTION

  """
  The category for "Non-FI, Stored Value Card Purchase/Load".
  
  Numeric code: '6540'
  """
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD

  """
  The category for "Hotels, Motels, and Resorts".
  
  Numeric codes: ['3501','3502','3503','3504','3505','3506','3507','3508','3509','3510','3511','3512','3513','3514','3515','3516','3517','3518','3519','3520','3521','3522','3523','3524','3525','3526','3527','3528','3529','3530','3531','3532','3533','3534','3535','3536','3537','3538','3539','3540','3541','3542','3543','3544','3545','3546','3547','3548','3549','3550','3551','3552','3553','3554','3555','3556','3557','3558','3559','3560','3561','3562','3563','3564','3565','3566','3567','3568','3569','3570','3571','3572','3573','3574','3575','3576','3577','3578','3579','3580','3581','3582','3583','3584','3585','3586','3587','3588','3589','3590','3591','3592','3593','3594','3595','3596','3597','3598','3599','3600','3601','3602','3603','3604','3605','3606','3607','3608','3609','3610','3611','3612','3613','3614','3615','3616','3617','3618','3619','3620','3621','3622','3623','3624','3625','3626','3627','3628','3629','3630','3631','3632','3633','3634','3635','3636','3637','3638','3639','3640','3641','3642','3643','3644','3645','3646','3647','3648','3649','3650','3651','3652','3653','3654','3655','3656','3657','3658','3659','3660','3661','3662','3663','3664','3665','3666','3667','3668','3669','3670','3671','3672','3673','3674','3675','3676','3677','3678','3679','3680','3681','3682','3683','3684','3685','3686','3687','3688','3689','3690','3691','3692','3693','3694','3695','3696','3697','3698','3699','3700','3701','3702','3703','3704','3705','3706','3707','3708','3709','3710','3711','3712','3713','3714','3715','3716','3717','3718','3719','3720','3721','3722','3723','3724','3725','3726','3727','3728','3729','3730','3731','3732','3733','3734','3735','3736','3737','3738','3739','3740','3741','3742','3743','3744','3745','3746','3747','3748','3749','3750','3751','3752','3753','3754','3755','3756','3757','3758','3759','3760','3761','3762','3763','3764','3765','3766','3767','3768','3769','3770','3771','3772','3773','3774','3775','3776','3777','3778','3779','3780','3781','3782','3783','3784','3785','3786','3787','3788','3789','3790','7011']
  """
  HOTELS_MOTELS_AND_RESORTS

  """
  The category for Timeshares.
  
  Numeric code: '7012'
  """
  TIMESHARES

  """
  The category for Sporting/Recreation Camps.
  
  Numeric code: '7032'
  """
  SPORTING_RECREATION_CAMPS

  """
  The category for "Trailer Parks, Campgrounds".
  
  Numeric code: '7033'
  """
  TRAILER_PARKS_CAMPGROUNDS

  """
  The category for "Laundry, Cleaning Services".
  
  Numeric code: '7210'
  """
  LAUNDRY_CLEANING_SERVICES

  """
  The category for Laundries.
  
  Numeric code: '7211'
  """
  LAUNDRIES

  """
  The category for Dry Cleaners.
  
  Numeric code: '7216'
  """
  DRY_CLEANERS

  """
  The category for Carpet/Upholstery Cleaning.
  
  Numeric code: '7217'
  """
  CARPET_UPHOLSTERY_CLEANING

  """
  The category for Photographic Studios.
  
  Numeric code: '7221'
  """
  PHOTOGRAPHIC_STUDIOS

  """
  The category for Barber and Beauty Shops.
  
  Numeric code: '7230'
  """
  BARBER_AND_BEAUTY_SHOPS

  """
  The category for Shoe Repair/Hat Cleaning.
  
  Numeric code: '7251'
  """
  SHOE_REPAIR_HAT_CLEANING

  """
  The category for "Funeral Services, Crematories".
  
  Numeric code: '7261'
  """
  FUNERAL_SERVICES_CREMATORIES

  """
  The category for Dating/Escort Services.
  
  Numeric code: '7273'
  """
  DATING_ESCORT_SERVICES

  """
  The category for Tax Preparation Services.
  
  Numeric code: '7276'
  """
  TAX_PREPARATION_SERVICES

  """
  The category for Counseling Services.
  
  Numeric code: '7277'
  """
  COUNSELING_SERVICES

  """
  The category for Buying/Shopping Services.
  
  Numeric code: '7278'
  """
  BUYING_SHOPPING_SERVICES

  """
  The category for Clothing Rental.
  
  Numeric code: '7296'
  """
  CLOTHING_RENTAL

  """
  The category for Massage Parlors.
  
  Numeric code: '7297'
  """
  MASSAGE_PARLORS

  """
  The category for Health and Beauty Spas.
  
  Numeric code: '7298'
  """
  HEALTH_AND_BEAUTY_SPAS

  """
  The category for Miscellaneous General Services.
  
  Numeric code: '7299'
  """
  MISCELLANEOUS_GENERAL_SERVICES

  """
  The category for Advertising Services.
  
  Numeric code: '7311'
  """
  ADVERTISING_SERVICES

  """
  The category for Credit Reporting Agencies.
  
  Numeric code: '7321'
  """
  CREDIT_REPORTING_AGENCIES

  """
  The category for "Commercial Photography, Art and Graphics".
  
  Numeric code: '7333'
  """
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS

  """
  The category for "Quick Copy, Repro, and Blueprint".
  
  Numeric code: '7338'
  """
  QUICK_COPY_REPRO_AND_BLUEPRINT

  """
  The category for Secretarial Support Services.
  
  Numeric code: '7339'
  """
  SECRETARIAL_SUPPORT_SERVICES

  """
  The category for Exterminating Services.
  
  Numeric code: '7342'
  """
  EXTERMINATING_SERVICES

  """
  The category for Cleaning and Maintenance.
  
  Numeric code: '7349'
  """
  CLEANING_AND_MAINTENANCE

  """
  The category for Employment/Temp Agencies.
  
  Numeric code: '7361'
  """
  EMPLOYMENT_TEMP_AGENCIES

  """
  The category for Computer Programming.
  
  Numeric code: '7372'
  """
  COMPUTER_PROGRAMMING

  """
  The category for Information Retrieval Services.
  
  Numeric code: '7375'
  """
  INFORMATION_RETRIEVAL_SERVICES

  """
  The category for Computer Repair.
  
  Numeric code: '7379'
  """
  COMPUTER_REPAIR

  """
  The category for "Consulting, Public Relations".
  
  Numeric code: '7392'
  """
  CONSULTING_PUBLIC_RELATIONS

  """
  The category for Detective Agencies.
  
  Numeric code: '7393'
  """
  DETECTIVE_AGENCIES

  """
  The category for Equipment Rental.
  
  Numeric code: '7394'
  """
  EQUIPMENT_RENTAL

  """
  The category for Photo Developing.
  
  Numeric code: '7395'
  """
  PHOTO_DEVELOPING

  """
  The category for Miscellaneous Business Services.
  
  Numeric code: '7399'
  """
  MISCELLANEOUS_BUSINESS_SERVICES

  """
  The category for Truck StopIteration.
  
  Numeric code: '7511'
  """
  TRUCK_STOP_ITERATION

  """
  The category for Car Rental Agencies.
  
  Numeric code: '7512'
  """
  CAR_RENTAL_AGENCIES

  """
  The category for Car Rentals.
  
  Numeric Codes: ['3356','3358','3363','3365','3367','3369','3371','3372','3373','3375','3377','3378','3379','3382','3383','3384','3392','3397','3399','3401','3402','3403','3404','3406','3407','3408','3410','3411','3413','3415','3416','3417','3418','3419','3422','3424','3426','3440']
  """
  CAR_RENTAL

  """
  The category for Truck/Utility Trailer Rentals.
  
  Numeric code: '7513'
  """
  TRUCK_UTILITY_TRAILER_RENTALS

  """
  The category for Recreational Vehicle Rentals.
  
  Numeric code: '7519'
  """
  RECREATIONAL_VEHICLE_RENTALS

  """
  The category for "Parking Lots, Garages".
  
  Numeric code: '7523'
  """
  PARKING_LOTS_GARAGES

  """
  The category for Auto Body Repair Shops.
  
  Numeric code: '7531'
  """
  AUTO_BODY_REPAIR_SHOPS

  """
  The category for Tire Retreading and Repair.
  
  Numeric code: '7534'
  """
  TIRE_RETREADING_AND_REPAIR

  """
  The category for Auto Paint Shops.
  
  Numeric code: '7535'
  """
  AUTO_PAINT_SHOPS

  """
  The category for Auto Service Shops.
  
  Numeric code: '7538'
  """
  AUTO_SERVICE_SHOPS

  """
  The category for Car Washes.
  
  Numeric code: '7542'
  """
  CAR_WASHES

  """
  The category for Towing Services.
  
  Numeric code: '7549'
  """
  TOWING_SERVICES

  """
  The category for Electronics Repair Shops.
  
  Numeric code: '7622'
  """
  ELECTRONICS_REPAIR_SHOPS

  """
  The category for "A/C, Refrigeration Repair".
  
  Numeric code: '7623'
  """
  AC_REFRIGERATION_REPAIR

  """
  The category for Small Appliance Repair.
  
  Numeric code: '7629'
  """
  SMALL_APPLIANCE_REPAIR

  """
  The category for Watch/Jewelry Repair.
  
  Numeric code: '7631'
  """
  WATCH_JEWELRY_REPAIR

  """
  The category for "Furniture Repair, Refinishing".
  
  Numeric code: '7641'
  """
  FURNITURE_REPAIR_REFINISHING

  """
  The category for Welding Repair.
  
  Numeric code: '7692'
  """
  WELDING_REPAIR

  """
  The category for Miscellaneous Repair Shops.
  
  Numeric code: '7699'
  """
  MISCELLANEOUS_REPAIR_SHOPS

  """
  The category for Picture/Video Production.
  
  Numeric code: '7829'
  """
  PICTURE_VIDEO_PRODUCTION

  """
  The category for Motion Picture Theaters.
  
  Numeric code: '7832'
  """
  MOTION_PICTURE_THEATERS

  """
  The category for Video Tape Rental Stores.
  
  Numeric code: '7841'
  """
  VIDEO_TAPE_RENTAL_STORES

  """
  The category for "Dance Hall, Studios, Schools".
  
  Numeric code: '7911'
  """
  DANCE_HALL_STUDIOS_SCHOOLS

  """
  The category for Theatrical Ticket Agencies.
  
  Numeric code: '7922'
  """
  THEATRICAL_TICKET_AGENCIES

  """
  The category for "Bands, Orchestras".
  
  Numeric code: '7929'
  """
  BANDS_ORCHESTRAS

  """
  The category for Billiard/Pool Establishments.
  
  Numeric code: '7932'
  """
  BILLIARD_POOL_ESTABLISHMENTS

  """
  The category for Bowling Alleys.
  
  Numeric code: '7933'
  """
  BOWLING_ALLEYS

  """
  The category for Sports Clubs/Fields.
  
  Numeric code: '7941'
  """
  SPORTS_CLUBS_FIELDS

  """
  The category for Tourist Attractions and Exhibits.
  
  Numeric code: '7991'
  """
  TOURIST_ATTRACTIONS_AND_EXHIBITS

  """
  The category for Golf Courses - Public.
  
  Numeric code: '7992'
  """
  GOLF_COURSES_PUBLIC

  """
  The category for Video Amusement Game Supplies.
  
  Numeric code: '7993'
  """
  VIDEO_AMUSEMENT_GAME_SUPPLIES

  """
  The category for Video Game Arcades.
  
  Numeric code: '7994'
  """
  VIDEO_GAME_ARCADES

  """
  The category for Betting/Casino Gambling.
  
  Numeric code: '7995'
  """
  BETTING_CASINO_GAMBLING

  """
  The category for Amusement Parks/Carnivals.
  
  Numeric code: '7996'
  """
  AMUSEMENT_PARKS_CARNIVALS

  """
  The category for Country Clubs.
  
  Numeric code: '7997'
  """
  COUNTRY_CLUBS

  """
  The category for Aquariums.
  
  Numeric code: '7998'
  """
  AQUARIUMS

  """
  The category for Miscellaneous Recreation Services.
  
  Numeric code: '7999'
  """
  MISCELLANEOUS_RECREATION_SERVICES

  """
  The category for Doctors.
  
  Numeric code: '8011'
  """
  DOCTORS

  """
  The category for "Dentists, Orthodontists".
  
  Numeric code: '8021'
  """
  DENTISTS_ORTHODONTISTS

  """
  The category for Osteopaths.
  
  Numeric code: '8031'
  """
  OSTEOPATHS

  """
  The category for Chiropractors.
  
  Numeric code: '8041'
  """
  CHIROPRACTORS

  """
  The category for "Optometrists, Ophthalmologist".
  
  Numeric code: '8042'
  """
  OPTOMETRISTS_OPHTHALMOLOGIST

  """
  The category for "Opticians, Eyeglasses".
  
  Numeric code: '8043'
  """
  OPTICIANS_EYEGLASSES

  """
  The category for "Chiropodists, Podiatrists".
  
  Numeric code: '8049'
  """
  CHIROPODISTS_PODIATRISTS

  """
  The category for Nursing/Personal Care.
  
  Numeric code: '8050'
  """
  NURSING_PERSONAL_CARE

  """
  The category for Hospitals.
  
  Numeric code: '8062'
  """
  HOSPITALS

  """
  The category for Medical and Dental Labs.
  
  Numeric code: '8071'
  """
  MEDICAL_AND_DENTAL_LABS

  """
  The category for Medical Services.
  
  Numeric code: '8099'
  """
  MEDICAL_SERVICES

  """
  The category for "Legal Services, Attorneys".
  
  Numeric code: '8111'
  """
  LEGAL_SERVICES_ATTORNEYS

  """
  The category for "Elementary, Secondary Schools".
  
  Numeric code: '8211'
  """
  ELEMENTARY_SECONDARY_SCHOOLS

  """
  The category for "Colleges, Universities".
  
  Numeric code: '8220'
  """
  COLLEGES_UNIVERSITIES

  """
  The category for Correspondence Schools.
  
  Numeric code: '8241'
  """
  CORRESPONDENCE_SCHOOLS

  """
  The category for Business/Secretarial Schools.
  
  Numeric code: '8244'
  """
  BUSINESS_SECRETARIAL_SCHOOLS

  """
  The category for Vocational/Trade Schools.
  
  Numeric code: '8249'
  """
  VOCATIONAL_TRADE_SCHOOLS

  """
  The category for Educational Services.
  
  Numeric code: '8299'
  """
  EDUCATIONAL_SERVICES

  """
  The category for Child Care Services.
  
  Numeric code: '8351'
  """
  CHILD_CARE_SERVICES

  """
  The category for Charitable and Social Service Organizations - Fundraising.
  
  Numeric code: '8398'
  """
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING

  """
  The category for "Civic, Social, Fraternal Associations".
  
  Numeric code: '8641'
  """
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS

  """
  The category for Political Organizations.
  
  Numeric code: '8651'
  """
  POLITICAL_ORGANIZATIONS

  """
  The category for Religious Organizations.
  
  Numeric code: '8661'
  """
  RELIGIOUS_ORGANIZATIONS

  """
  The category for Automobile Associations.
  
  Numeric code: '8675'
  """
  AUTOMOBILE_ASSOCIATIONS

  """
  The category for Membership Organizations.
  
  Numeric code: '8699'
  """
  MEMBERSHIP_ORGANIZATIONS

  """
  The category for Testing Laboratories.
  
  Numeric code: '8734'
  """
  TESTING_LABORATORIES

  """
  The category for Architectural/Surveying Services.
  
  Numeric code: '8911'
  """
  ARCHITECTURAL_SURVEYING_SERVICES

  """
  The category for Accounting/Bookkeeping Services.
  
  Numeric code: '8931'
  """
  ACCOUNTING_BOOKKEEPING_SERVICES

  """
  The category for Professional Services.
  
  Numeric code: '8999'
  """
  PROFESSIONAL_SERVICES

  """
  The category for "Court Costs, Including Alimony and Child Support - Courts of Law".
  
  Numeric code: '9211'
  """
  COURT_COSTS

  """
  The category for Fines - Government Administrative Entities.
  
  Numeric code: '9222'
  """
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES

  """
  The category for "Bail and Bond Payments (payment to the surety for the bond, not the actual bond paid to the government agency)".
  
  Numeric code: '9223'
  """
  BAIL_AND_BOND_PAYMENTS

  """
  The category for Tax Payments - Government Agencies.
  
  Numeric code: '9311'
  """
  TAX_PAYMENTS_GOVERNMENT_AGENCIES

  """
  The category for Government Services (Not Elsewhere Classified).
  
  Numeric code: '9399'
  """
  GOVERNMENT_SERVICES

  """
  The category for Postal Services - Government Only.
  
  Numeric code: '9402'
  """
  POSTAL_SERVICES_GOVERNMENT_ONLY

  """
  The category for U.S. Federal Government Agencies or Departments.
  
  Numeric code: '9405'
  """
  US_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS

  """
  The category for "Government Owned Lottery (Global, Excluding U.S. Region)"
  
  Numeric code: '9406'
  """
  GOVERNMENT_OWNED_LOTTERY_GLOBAL

  """
  The category for Intra-Company Purchases.
  
  Numeric code: '9950'
  """
  INTRA_COMPANY_PURCHASES

  """
  The category for Blueprinting and Photocopying Services
  
  Numeric Code: '7332'
  """
  BLUEPRINTING_AND_PHOTOCOPYING_SERVICES

  """
  The category for Government Owned Lotteries
  
  Numeric Code: '7800'
  """
  GOVERNMENT_OWNED_LOTTERY

  """
  The category for Government Licensed On-Line Casinos
  
  Numeric Code: '7801'
  """
  GOVERNMENT_LICENSED_ON_LINE_CASINO

  """
  The category for Government Licensed On-Line Casinos
  
  Numeric Code: '7802'
  """
  GOVERNMENT_LICENSED_HORSE_OR_DOG_RACING

  """
  The category for Home2Suites
  
  Numeric Code: '3816'
  """
  HOME_2_SUITES

  """
  The category for Masters Economy Inns
  
  Numeric Code: '3835'
  """
  MASTERS_ECONOMY_INNS

  """
  The category for United Airlines
  
  Numeric Code: '3000'
  """
  UNITED_AIRLINES

  """
  The category for American Airlines
  
  Numeric Code: '3001'
  """
  AMERICAN_AIRLINES

  """
  The category for Pan American
  
  Numeric Code: '3002'
  """
  PAN_AMERICAN

  """
  The category for Trans World Airlines
  
  Numeric Code: '3004'
  """
  TRANS_WORLD_AIRLINES

  """
  The category for British Airways
  
  Numeric Code: '3005'
  """
  BRITISH_AIRWAYS

  """
  The category for Japan Airlines
  
  Numeric Code: '3006'
  """
  JAPAN_AIRLINES

  """
  The category for Air France
  
  Numeric Code: '3007'
  """
  AIR_FRANCE

  """
  The category for Lufthansa
  
  Numeric Code: '3008'
  """
  LUFTHANSA

  """
  The category for Air Canada
  
  Numeric Code: '3009'
  """
  AIR_CANADA

  """
  The category for KLM (Royal Dutch Airlines)
  
  Numeric Code: '3010'
  """
  KLM_ROYAL_DUTCH_AIRLINES

  """
  The category for Aeorflot
  
  Numeric Code: '3011'
  """
  AEORFLOT

  """
  The category for Quantas
  
  Numeric Code: '3012'
  """
  QUANTAS

  """
  The category for Alitalia
  
  Numeric Code: '3013'
  """
  ALITALIA

  """
  The category for Saudia Arabian Airlines
  
  Numeric Code: '3014'
  """
  SAUDIA_ARABIAN_AIRLINES

  """
  The category for Swiss Air
  
  Numeric Code: '3015'
  """
  SWISS_AIR

  """
  The category for Scandinavian Airline System
  
  Numeric Code: '3016'
  """
  SCANDINAVIAN_AIRLINE_SYSTEM

  """
  The category for South African Airways
  
  Numeric Code: '3017'
  """
  SOUTH_AFRICAN_AIRWAYS

  """
  The category for Varig
  
  Numeric Code: '3018'
  """
  VARIG

  """
  The category for Air India
  
  Numeric Code: '3020'
  """
  AIR_INDIA

  """
  The category for Air Algerie
  
  Numeric Code: '3021'
  """
  AIR_ALGERIE

  """
  The category for Philippine Airlines
  
  Numeric Code: '3022'
  """
  PHILIPPINE_AIRLINES

  """
  The category for Mexicana Airlines
  
  Numeric Code: '3023'
  """
  MEXICANA_AIRLINES

  """
  The category for Pakistan International
  
  Numeric Code: '3024'
  """
  PAKISTAN_INTERNATIONAL

  """
  The category for Air New Zealand
  
  Numeric Code: '3025'
  """
  AIR_NEW_ZEALAND

  """
  The category for Emirates
  
  Numeric Code: '3026'
  """
  EMIRATES

  """
  The category for UTA/Interair
  
  Numeric Code: '3027'
  """
  UTA_INTERAIR

  """
  The category for Air Malta
  
  Numeric Code: '3028'
  """
  AIR_MALTA

  """
  The category for Sabena
  
  Numeric Code: '3029'
  """
  SABENA

  """
  The category for Aeorlineas Argentinas
  
  Numeric Code: '3030'
  """
  AEROLINEAS_ARGENTINAS

  """
  The category for Olympic Airways
  
  Numeric Code: '3031'
  """
  OLYMPIC_AIRWAYS

  """
  The category for El Al Airlines
  
  Numeric Code: '3032'
  """
  EL_AL_AIRLINES

  """
  The category for Ansett Airlines
  
  Numeric Code: '3033'
  """
  ANSETT_AIRLINES

  """
  The category for Etihad Air
  
  Numeric Code: '3034'
  """
  ETIHAD_AIR

  """
  The category for TAP Air Portugal
  
  Numeric Code: '3035'
  """
  TAP_AIR_PORTUGAL

  """
  The category for Viacao Aerea Sao Pãulo (VASP)
  
  Numeric Code: '3036'
  """
  VASP_AIR

  """
  The category for Egyptair
  
  Numeric Code: '3037'
  """
  EGYPT_AIR

  """
  The category for Kuwait Air
  
  Numeric Code: '3038'
  """
  KUWAIT_AIR

  """
  The category for Avianca
  
  Numeric Code: '3039'
  """
  AVIANCA

  """
  The category for Gulf Air (Bahrain)
  
  Numeric Code: '3040'
  """
  GULF_AIR

  """
  The category for Balkan-Bulgarian Airlines
  
  Numeric Code: '3041'
  """
  BALKAN_AIR

  """
  The category for Finnair
  
  Numeric Code: '3042'
  """
  FINNAIR

  """
  The category for Aer Lingus
  
  Numeric Code: '3043'
  """
  AER_LINGUS

  """
  The category for Air Lanka
  
  Numeric Code: '3044'
  """
  AIR_LANKA

  """
  The category for Nigeria Airways
  
  Numeric Code: '3045'
  """
  NIGERIA_AIR

  """
  The category for Cruzeiro Do Sul
  
  Numeric Code: '3046'
  """
  CRUZIERO_AIR

  """
  The category for "Turk Hava Yollar (Thy Airline)"
  
  Numeric Code: '3047'
  """
  THY_AIRLINE

  """
  The category for Royal Air Maroc
  
  Numeric Code: '3048'
  """
  AIR_MAROC

  """
  The category for Tunis Air
  
  Numeric Code: '3049'
  """
  TUNIS_AIR

  """
  The category for Icelandair
  
  Numeric Code: '3050'
  """
  ICELAND_AIR

  """
  The category for Austrian Airlines
  
  Numeric Code: '3051'
  """
  AUSTRIAN_AIR

  """
  The category for LAN Airlines
  
  Numeric Code: '3052'
  """
  LAN_AIR

  """
  The category for Aviacion Y Comercio (AVIACO)
  
  Numeric Code: '3053'
  """
  AVIACO_AIR

  """
  The category for Linea Aerea Del Cobre (LADECO)
  
  Numeric Code: '3054'
  """
  LADECO_AIR

  """
  The category for Lloyd Aero Boliviano (LAB)
  
  Numeric Code: '3055'
  """
  LAB_AIR

  """
  The category for Jet Airways
  
  Numeric Code: '3056'
  """
  JET_AIRWAYS

  """
  The category for Virgin America
  
  Numeric Code: '3057'
  """
  VIRGIN_AMERICA

  """
  The category for Delta Airlines
  
  Numeric Code: '3058'
  """
  DELTA_AIRLINES

  """
  The category for DBA Airlines
  
  Numeric Code: '3059'
  """
  DBA_AIR

  """
  The category for Northwest Airlines
  
  Numeric Code: '3060'
  """
  NWA_AIR

  """
  The category for Continental Airlines
  
  Numeric Code: '3061'
  """
  CONTINENTAL_AIRLINES

  """
  The category for Hapag-Lloyd Express
  
  Numeric Code: '3062'
  """
  HLX_AIR

  """
  The category for US Airways
  
  Numeric Code: '3063'
  """
  US_AIRWAYS

  """
  The category for Adria Airways
  
  Numeric Code: '3064'
  """
  ADRIA_AIR

  """
  The category for Airinter
  
  Numeric Code: '3065'
  """
  AIRINTER

  """
  The category for Southwest Airlines
  
  Numeric Code: '3066'
  """
  SOUTHWEST_AIRLINES

  """
  The category for Vanguard Airlines
  
  Numeric Code: '3067'
  """
  VANGUARD_AIR

  """
  The category for Air Astana
  
  Numeric Code: '3068'
  """
  AIR_ASTANA

  """
  The category for Sun Country Airlines
  
  Numeric Code: '3069'
  """
  SUN_COUNTRY_AIRLINES

  """
  The category for Air British Columbia
  
  Numeric Code: '3071'
  """
  AIR_BRITISH_COLUMBIA

  """
  The category for Cebu Pacific Airlines
  
  Numeric Code: '3072'
  """
  CEBU_PACIFIC_AIRLINES

  """
  The category for Singapore Airlines
  
  Numeric Code: '3075'
  """
  SINGAPORE_AIRLINES

  """
  The category for Aeromexico
  
  Numeric Code: '3076'
  """
  AEROMEXICO

  """
  The category for Thai Airways
  
  Numeric Code: '3077'
  """
  THAI_AIRWAYS

  """
  The category for China Airlines
  
  Numeric Code: '3078'
  """
  CHINA_AIRLINES

  """
  The category for Jetstar Airways
  
  Numeric Code: '3079'
  """
  JETSTAR_AIRWAYS

  """
  The category for NordAir
  
  Numeric Code: '3081'
  """
  NORD_AIR

  """
  The category for Korean Airlines
  
  Numeric Code: '3082'
  """
  KOREAN_AIRLINES

  """
  The category for Air Afrique
  
  Numeric Code: '3083'
  """
  AIR_AFRIQUE

  """
  The category for Eva Airways
  
  Numeric Code: '3084'
  """
  EVA_AIRWAYS

  """
  The category for Midwest Express Airlines
  
  Numeric Code: '3085'
  """
  MIDWEST_EXPRESS_AIRLINES

  """
  The category for Carnival Airlines
  
  Numeric Code: '3086'
  """
  CARNIVAL_AIRLINES

  """
  The category for Metro Airlines
  
  Numeric Code: '3087'
  """
  METRO_AIRLINES

  """
  The category for Croatia Air
  
  Numeric Code: '3088'
  """
  CROATIA_AIR

  """
  The category for Transaero
  
  Numeric Code: '3089'
  """
  TRANSAERO

  """
  The category for Uni Airways Corporation
  
  Numeric Code: '3090'
  """
  UNI_AIRWAYS_CORPORATION

  """
  The category for Zambia Airways
  
  Numeric Code: '3094'
  """
  ZAMBIA_AIRWAYS

  """
  The category for Air Zimbabwe Corp
  
  Numeric Code: '3096'
  """
  AIR_ZIMBABWE_CORP

  """
  The category for Spanair
  
  Numeric Code: '3097'
  """
  SPANAIR

  """
  The category for Asiana Airlines
  
  Numeric Code: '3098'
  """
  ASIANA_AIRLINES

  """
  The category for Cathay Pacific
  
  Numeric Code: '3099'
  """
  CATHAY_PACIFIC

  """
  The category for Malaysian Airline System
  
  Numeric Code: '3100'
  """
  MALAYSIAN_AIRLINE_SYSTEM

  """
  The category for Iberia
  
  Numeric Code: '3102'
  """
  IBERIA

  """
  The category for Garuda
  
  Numeric Code: '3103'
  """
  GARUDA

  """
  The category for Braathens S.A.F.E
  
  Numeric Code: '3106'
  """
  BRAATHENS

  """
  The category for Wings Airways
  
  Numeric Code: '3110'
  """
  WINGS_AIRWAYS

  """
  The category for British Midland Air
  
  Numeric Code: '3111'
  """
  BRITISH_MIDLAND_AIR

  """
  The category for Windward Island Air
  
  Numeric Code: '3112'
  """
  WINDWARD_ISLAND_AIR

  """
  The category for Tower Air
  
  Numeric Code: '3115'
  """
  TOWER_AIR

  """
  The category for Venezolana International De Aviacion
  
  Numeric Code: '3117'
  """
  VIASA_AIR

  """
  The category for Valley Airlines
  
  Numeric Code: '3118'
  """
  VALLEY_AIRLINES

  """
  The category for Tan Sahsa (Tan Air)
  
  Numeric Code: '3125'
  """
  TAN_AIR

  """
  The category for Tal Air
  
  Numeric Code: '3126'
  """
  TAL_AIR

  """
  The category for Taca International
  
  Numeric Code: '3127'
  """
  TACA_INTERNATIONAL_AIR

  """
  The category for Surinam Airways
  
  Numeric Code: '3129'
  """
  SURINAM_AIRWAYS

  """
  The category for Sunworld International
  
  Numeric Code: '3130'
  """
  SUNWORLD_AIR

  """
  The category for VLM Airlines
  
  Numeric Code: '3131'
  """
  VLM_AIRLINES

  """
  The category for Frontier Airlines
  
  Numeric Code: '3132'
  """
  FRONTIER_AIRLINES

  """
  The category for Sunbelt Airlines
  
  Numeric Code: '3133'
  """
  SUNBELT_AIRLINES

  """
  The category for Sudan Airways
  
  Numeric Code: '3135'
  """
  SUDAN_AIRWAYS

  """
  The category for Qatar Airways
  
  Numeric Code: '3136'
  """
  QATAR_AIRWAYS

  """
  The category for Singleton Air
  
  Numeric Code: '3137'
  """
  SINGLETON_AIR

  """
  The category for Simmons Airlines
  
  Numeric Code: '3138'
  """
  SIMMONS_AIRLINES

  """
  The category for Scenic Airlines
  
  Numeric Code: '3143'
  """
  SCENIC_AIRLINES

  """
  The category for Virgin Atlantic
  
  Numeric Code: '3144'
  """
  VIRGIN_ATLANTIC

  """
  The category for San Juan Air
  
  Numeric Code: '3145'
  """
  SAN_JUAN_AIR

  """
  The category for Luxair
  
  Numeric Code: '3146'
  """
  LUXAIR

  """
  The category for Air Littoral S.A.
  
  Numeric Code: '3148'
  """
  AIR_LITTORAL

  """
  The category for Air Zaire
  
  Numeric Code: '3151'
  """
  AIR_ZAIRE

  """
  The category for Princeville Air
  
  Numeric Code: '3154'
  """
  PRINCEVILLE_AIR

  """
  The category for GOFLY
  
  Numeric Code: '3156'
  """
  GOFLY

  """
  The category for Provincetown-Boston Airways
  
  Numeric Code: '3159'
  """
  PBA_AIRLINE

  """
  The category for All Nipon Airways
  
  Numeric Code: '3161'
  """
  ANA_AIR

  """
  The category for Norontair
  
  Numeric Code: '3164'
  """
  NORONTAIR

  """
  The category for New York Helicopter
  
  Numeric Code: '3165'
  """
  NY_HELI

  """
  The category for Aero Continente
  
  Numeric Code: '3167'
  """
  AERO_CONTINENTE

  """
  The category for Hainan Airlines
  
  Numeric code: ‘3168’
  """
  HAINAN_AIRLINES

  """
  The category for Riyadh Air
  
  Numeric code: ‘3169'
  """
  RIYADH_AIR

  """
  The category for Mount Cook
  
  Numeric Code: '3170'
  """
  MOUNT_COOK

  """
  The category for Canadian Airlines International
  
  Numeric Code: '3171'
  """
  CANADIAN_AIR

  """
  The category for Nationair
  
  Numeric Code: '3172'
  """
  NATIONAIR

  """
  The category for Jetblue Airways
  
  Numeric Code: '3174'
  """
  JETBLUE_AIRWAYS

  """
  The category for Middle East Air
  
  Numeric Code: '3175'
  """
  MIDDLE_EAST_AIR

  """
  The category for Metroflight Airlines
  
  Numeric Code: '3176'
  """
  METROFLIGHT_AIRLINES

  """
  The category for AirTran Airways
  
  Numeric Code: '3177'
  """
  AIRTRAN_AIRWAYS

  """
  The category for Mesa Air
  
  Numeric Code: '3178'
  """
  MESA_AIR

  """
  The category for Westjet Airlines
  
  Numeric Code: '3180'
  """
  WESTJET_AIRLINES

  """
  The category for Malev
  
  Numeric Code: '3181'
  """
  MALEV

  """
  The category for LOT (Polish Airlines)
  
  Numeric Code: '3182'
  """
  LOT_AIR

  """
  The category for Oman Air
  
  Numeric Code: '3183'
  """
  OMAN_AIR

  """
  The category for Liat Airline
  
  Numeric Code: '3184'
  """
  LIAT_AIRLINE

  """
  The category for Linea Aeropostal Venezolana (LAV)
  
  Numeric Code: '3185'
  """
  LAV_AIR

  """
  The category for Lineas Aereas Paraguayas (LAP)
  
  Numeric Code: '3186'
  """
  LAP_AIR

  """
  The category for LACSA (Costa Rica)
  
  Numeric Code: '3187'
  """
  LACSA_AIR

  """
  The category for Virgin Express Air
  
  Numeric Code: '3188'
  """
  VIRGIN_EXPRESS_AIR

  """
  The category for Jugoslav Air
  
  Numeric Code: '3190'
  """
  JUGOSLAV_AIR

  """
  The category for Island Airlines
  
  Numeric Code: '3191'
  """
  ISLAND_AIRLINES

  """
  The category for Indian Airlines
  
  Numeric Code: '3193'
  """
  INDIAN_AIRLINES

  """
  The category for Hawaiian Air
  
  Numeric Code: '3196'
  """
  HAWAIIAN_AIR

  """
  The category for Havasu Airlines
  
  Numeric Code: '3197'
  """
  HAVASU_AIRLINES

  """
  The category for Guyana Airways
  
  Numeric Code: '3200'
  """
  GUYANA_AIRWAYS

  """
  The category for Golden Pacific Air
  
  Numeric Code: '3203'
  """
  GOLDEN_PACIFIC_AIR

  """
  The category for Freedom Airlines
  
  Numeric Code: '3204'
  """
  FREEDOM_AIRLINES

  """
  The category for China Eastern Airlines
  
  Numeric Code: '3206'
  """
  CHINA_EASTERN_AIRLINES

  """
  The category for Norwegian Air Shuttle
  
  Numeric Code: '3211'
  """
  NORWEGIAN_AIR_SHUTTLE

  """
  The category for Dominicana De Aviacion
  
  Numeric Code: '3212'
  """
  DOMINICA_AIR

  """
  The category for Malmo Aviation
  
  Numeric Code: '3213'
  """
  MALMO_AIR

  """
  The category for Dan Air Services
  
  Numeric Code: '3215'
  """
  DAN_AIR_SERVICES

  """
  The category for Cumberland Airlines
  
  Numeric Code: '3216'
  """
  CUMBERLAND_AIRLINES

  """
  The category for Ceskoslovenske Aerolinie (CSA)
  
  Numeric Code: '3217'
  """
  CSA_AIRLINE

  """
  The category for Crown Air
  
  Numeric Code: '3218'
  """
  CROWN_AIR

  """
  The category for Compania Panamena De Aviacion (COPA)
  
  Numeric Code: '3219'
  """
  COPA_AIR

  """
  The category for Compania Faucett
  
  Numeric Code: '3220'
  """
  COMP_FAU_AIR

  """
  The category for Transportes Aeros Militares
  
  Numeric Code: '3221'
  """
  TAME_AIR

  """
  The category for Command Airways
  
  Numeric Code: '3222'
  """
  COMMAND_AIR

  """
  The category for Comair
  
  Numeric Code: '3223'
  """
  COMAIR

  """
  The category for Skyways
  
  Numeric Code: '3226'
  """
  SKYWAYS_AIR

  """
  The category for Cayman Airways
  
  Numeric Code: '3228'
  """
  CAYMAN_AIRWAYS

  """
  The category for SAETA (Sociedad Ecuatorianos De Transportes Aereos)
  
  Numeric Code: '3229'
  """
  SAETA_AIR

  """
  The category for SAHSA (Servicio Aero De Honduras)
  
  Numeric Code: '3231'
  """
  SAHSA_AIR

  """
  The category for Capitol Air
  
  Numeric Code: '3233'
  """
  CAPITOL_AIR

  """
  The category for Caribbean Airlines
  
  Numeric Code: '3234'
  """
  CARIBBEAN_AIRLINES

  """
  The category for Brockway Air
  
  Numeric Code: '3235'
  """
  BROCKWAY_AIR

  """
  The category for Air Arabia Airline
  
  Numeric Code: '3236'
  """
  AIR_ARABIA

  """
  The category for Bemidji Aviation
  
  Numeric Code: '3238'
  """
  BEMIDJI_AIR

  """
  The category for Bar Harbor Airlines
  
  Numeric Code: '3239'
  """
  BAR_HARBOR_AIRLINES

  """
  The category for Bahamasair
  
  Numeric Code: '3240'
  """
  BAHAMAS_AIR

  """
  The category for Aviateca
  
  Numeric Code: '3241'
  """
  AVIATECA_AIR

  """
  The category for Avensa
  
  Numeric Code: '3242'
  """
  AVENSA_AIR

  """
  The category for Austrian Air Service
  
  Numeric Code: '3243'
  """
  AUSTRIAN_AIR_SERVICE

  """
  The category for Easyjet Air
  
  Numeric Code: '3245'
  """
  EASYJET_AIR

  """
  The category for Ryanair
  
  Numeric Code: '3246'
  """
  RYANAIR

  """
  The category for Gol Airlines
  
  Numeric Code: '3247'
  """
  GOL_AIRLINES

  """
  The category for Tam Airlines
  
  Numeric Code: '3248'
  """
  TAM_AIRLINES

  """
  The category for Aloha Airlines
  
  Numeric Code: '3251'
  """
  ALOHA_AIRLINES

  """
  The category for Antilean Airlines (ALM)
  
  Numeric Code: '3252'
  """
  ALM_AIRLINE

  """
  The category for America West
  
  Numeric Code: '3253'
  """
  AMERICA_WEST

  """
  The category for U.S. Air Shuttle
  
  Numeric Code: '3254'
  """
  US_AIR_SHUTTLE

  """
  The category for Alaska Airlines Inc.
  
  Numeric Code: '3256'
  """
  ALASKA_AIR

  """
  The category for American Trans Air
  
  Numeric Code: '3259'
  """
  ATA_AIR

  """
  The category for Spirit Airlines
  
  Numeric Code: '3260'
  """
  SPIRIT_AIRLINES

  """
  The category for Air China
  
  Numeric Code: '3261'
  """
  AIR_CHINA

  """
  The category for Reno Air
  
  Numeric Code: '3262'
  """
  RENO_AIR

  """
  The category for Aero Servicio Carabobo
  
  Numeric Code: '3263'
  """
  ASC_AIRLINE

  """
  The category for Air Seychelles
  
  Numeric Code: '3266'
  """
  AIR_SEYCHELLES

  """
  The category for Air Panama International
  
  Numeric Code: '3267'
  """
  AIR_PANAMA

  """
  The category for Air Jamaica
  
  Numeric Code: '3280'
  """
  AIR_JAMAICA

  """
  The category for Air Djibouti
  
  Numeric Code: '3282'
  """
  AIR_DJIBOUTI

  """
  The category for Aero Virgin Islands
  
  Numeric Code: '3284'
  """
  AERO_VIRGIN_ISLANDS

  """
  The category for Aero Peru
  
  Numeric Code: '3285'
  """
  AERO_PERU

  """
  The category for Aero Nicaraguensis
  
  Numeric Code: '3286'
  """
  AERO_NICARAGUENSIS

  """
  The category for Aero Coach Aviation
  
  Numeric Code: '3287'
  """
  AERO_COACH_AVIATION

  """
  The category for Cyprus Airways
  
  Numeric Code: '3292'
  """
  CYPRUS_AIRWAYS

  """
  The category for Ecuatoriana
  
  Numeric Code: '3293'
  """
  ECUATORIANA

  """
  The category for Ethiopian Airlines
  
  Numeric Code: '3294'
  """
  ETHIOPIAN_AIRLINES

  """
  The category for Kenya Airways
  
  Numeric Code: '3295'
  """
  KENYA_AIRWAYS

  """
  The category for Air Berlin
  
  Numeric Code: '3296'
  """
  AIR_BERLIN

  """
  The category for Tarom Romanian Air Transport
  
  Numeric Code: '3297'
  """
  TAROM_AIR

  """
  The category for Air Mauritius
  
  Numeric Code: '3298'
  """
  AIR_MAURITIUS

  """
  The category for Wideroes Flyveselskap
  
  Numeric Code: '3299'
  """
  WIDEROES

  """
  The category for Azul Brazilian Airlines
  
  Numeric Code: '3300'
  """
  AZUL_BRAZILIAN_AIRLINES

  """
  The category for Wizz Air
  
  Numeric Code: '3301'
  """
  WIZZ_AIR

  """
  The category for Flybe
  
  Numeric Code: '3302'
  """
  FLYBE

  """
  The category for Tigerair
  
  Numeric Code: '3303'
  """
  TIGERAIR

  """
  The category for China Southern Airlines
  
  Numeric Code: '3308'
  """
  CHINA_SOUTHERN_AIRLINES

  """
  The category for Affiliated Auto Rental
  
  Numeric Code: '3351'
  """
  AFFILIATED_AUTO_RENTAL

  """
  The category for American International
  
  Numeric Code: '3352'
  """
  AMERICAN_INTERNATIONAL

  """
  The category for Brooks Rent A Car
  
  Numeric Code: '3353'
  """
  BROOKS_RENT_A_CAR

  """
  The category for Action Auto Rental
  
  Numeric Code: '3354'
  """
  ACTION_AUTO_RENTAL

  """
  The category for Sixt Car Rental
  
  Numeric Code: '3355'
  """
  SIXT_CAR_RENTAL

  """
  The category for Hertz
  
  Numeric Code: '3357'
  """
  HERTZ

  """
  The category for Payless Car Rental
  
  Numeric Code: '3359'
  """
  PAYLESS_CAR_RENTAL

  """
  The category for Snappy Car Rental
  
  Numeric Code: '3360'
  """
  SNAPPY_CAR_RENTAL

  """
  The category for Airways
  
  Numeric Code: '3361'
  """
  AIRWAYS

  """
  The category for Altra Auto Rental
  
  Numeric Code: '3362'
  """
  ALTRA_AUTO_RENTAL

  """
  The category for Agency Rent A Car
  
  Numeric Code: '3364'
  """
  AGENCY_RENT_A_CAR

  """
  The category for Budget Rent A Car
  
  Numeric Code: '3366'
  """
  BUDGET_RENT_A_CAR

  """
  The category for Holiday Rent A Car
  
  Numeric Code: '3368'
  """
  HOLIDAY_RENT_A_CAR

  """
  The category for Rent A Wreck
  
  Numeric Code: '3370'
  """
  RENT_A_WRECK

  """
  The category for Accent Rent A Car
  
  Numeric Code: '3374'
  """
  ACCENT_RENT_A_CAR

  """
  The category for Ajax Rent A Car
  
  Numeric Code: '3376'
  """
  AJAX_RENT_A_CAR

  """
  The category for Triangle Rent A Car
  
  Numeric Code: '3380'
  """
  TRIANGLE_RENT_A_CAR

  """
  The category for Europcar
  
  Numeric Code: '3381'
  """
  EUROPCAR

  """
  The category for Tropical Rent A Car
  
  Numeric Code: '3385'
  """
  TROPICAL_RENT_A_CAR

  """
  The category for Showcase Rental Cars
  
  Numeric Code: '3386'
  """
  SHOWCASE_RENTAL_CARS

  """
  The category for Alamo Rent A Car
  
  Numeric Code: '3387'
  """
  ALAMO_RENT_A_CAR

  """
  The category for Merchants Rent A Car
  
  Numeric Code: '3388'
  """
  MERCHANTS_RENT_A_CAR

  """
  The category for Avis Rent A Car
  
  Numeric Code: '3389'
  """
  AVIS_RENT_A_CAR

  """
  The category for Dollar Rent A Car
  
  Numeric Code: '3390'
  """
  DOLLAR_RENT_A_CAR

  """
  The category for Europe By Car
  
  Numeric Code: '3391'
  """
  EUROPE_BY_CAR

  """
  The category for National Car Rental
  
  Numeric Code: '3393'
  """
  NATIONAL_CAR_RENTAL

  """
  The category for Kemwell Group
  
  Numeric Code: '3394'
  """
  KEMWELL_GROUP

  """
  The category for Thrifty Car Rental
  
  Numeric Code: '3395'
  """
  THRIFTY_CAR_RENTAL

  """
  The category for Tilden Rent A Car
  
  Numeric Code: '3396'
  """
  TILDEN_RENT_A_CAR

  """
  The category for Econo Car Rent A Car
  
  Numeric Code: '3398'
  """
  ECONO_CAR_RENT_A_CAR

  """
  The category for Auto Host Rental Cars
  
  Numeric Code: '3400'
  """
  AUTO_HOST_RENTAL_CARS

  """
  The category for Enterprise Rent A Car
  
  Numeric Code: '3405'
  """
  ENTERPRISE_RENT_A_CAR

  """
  The category for General Rent A Car
  
  Numeric Code: '3409'
  """
  GENERAL_RENT_A_CAR

  """
  The category for A1 Rent A Car
  
  Numeric Code: '3412'
  """
  A1_RENT_A_CAR

  """
  The category for Godfrey National
  
  Numeric Code: '3414'
  """
  GODFREY_NATIONAL

  """
  The category for Ansa International
  
  Numeric Code: '3420'
  """
  ANSA_INTERNATIONAL

  """
  The category for Allstate
  
  Numeric Code: '3421'
  """
  ALLSTATE

  """
  The category for Avcar
  
  Numeric Code: '3423'
  """
  AVCAR

  """
  The category for Automate
  
  Numeric Code: '3425'
  """
  AUTOMATE

  """
  The category for Avon Rent A Car
  
  Numeric Code: '3427'
  """
  AVON_RENT_A_CAR

  """
  The category for Carey
  
  Numeric Code: '3428'
  """
  CAREY

  """
  The category for Insurance Rent A Car
  
  Numeric Code: '3429'
  """
  INSURANCE_RENT_A_CAR

  """
  The category for Major Rent A Car
  
  Numeric Code: '3430'
  """
  MAJOR_RENT_A_CAR

  """
  The category for Replacement Rent A Car
  
  Numeric Code: '3431'
  """
  REPLACEMENT_RENT_A_CAR

  """
  The category for Reserve Rent A Car
  
  Numeric Code: '3432'
  """
  RESERVE_RENT_A_CAR

  """
  The category for Ugly Duckling Rent A Car
  
  Numeric Code: '3433'
  """
  UGLY_DUCKLING_RENT_A_CAR

  """
  The category for Usa Rental
  
  Numeric Code: '3434'
  """
  USA_RENTAL

  """
  The category for Value Rent A Car
  
  Numeric Code: '3435'
  """
  VALUE_RENT_A_CAR

  """
  The category for Autohansa
  
  Numeric Code: '3436'
  """
  AUTOHANSA

  """
  The category for Cite
  
  Numeric Code: '3437'
  """
  CITE

  """
  The category for Interent
  
  Numeric Code: '3438'
  """
  INTERENT

  """
  The category for Milleville
  
  Numeric Code: '3439'
  """
  MILLEVILLE

  """
  The category for Advantage Rent A Car
  
  Numeric Code: '3441'
  """
  ADVANTAGE_RENT_A_CAR

  """
  The category for Holiday Inns
  
  Numeric Code: '3501'
  """
  HOLIDAY_INNS

  """
  The category for Best Western
  
  Numeric Code: '3502'
  """
  BEST_WESTERN

  """
  The category for Sheraton
  
  Numeric Code: '3503'
  """
  SHERATON

  """
  The category for Hilton
  
  Numeric Code: '3504'
  """
  HILTON

  """
  The category for Trusthouse Forte
  
  Numeric Code: '3505'
  """
  TRUSTHOUSE_FORTE

  """
  The category for Golden Tulip
  
  Numeric Code: '3506'
  """
  GOLDEN_TULIP

  """
  The category for Friendship Inns International
  
  Numeric Code: '3507'
  """
  FRIENDSHIP_INNS_INTERNATIONAL

  """
  The category for Quality International
  
  Numeric Code: '3508'
  """
  QUALITY_INTERNATIONAL

  """
  The category for Marriott
  
  Numeric Code: '3509'
  """
  MARRIOTT

  """
  The category for Days Inns Of America
  
  Numeric Code: '3510'
  """
  DAYS_INNS_OF_AMERICA

  """
  The category for Arabella Hotels
  
  Numeric Code: '3511'
  """
  ARABELLA_HOTELS

  """
  The category for Intercontinental
  
  Numeric Code: '3512'
  """
  INTERCONTINENTAL

  """
  The category for Westin Hotels
  
  Numeric Code: '3513'
  """
  WESTIN_HOTELS

  """
  The category for Amerisuites
  
  Numeric Code: '3514'
  """
  AMERISUITES

  """
  The category for Rodeway Inns International
  
  Numeric Code: '3515'
  """
  RODEWAY_INNS_INTERNATIONAL

  """
  The category for La Quinta Motor Inns
  
  Numeric Code: '3516'
  """
  LA_QUINTA_MOTOR_INNS

  """
  The category for Americana Hotels Corporation
  
  Numeric Code: '3517'
  """
  AMERICANA_HOTELS_CORPORATION

  """
  The category for Sol Hotels
  
  Numeric Code: '3518'
  """
  SOL_HOTELS

  """
  The category for Plm/Etap International
  
  Numeric Code: '3519'
  """
  PLM_ETAP_INTERNATIONAL

  """
  The category for Meridien
  
  Numeric Code: '3520'
  """
  MERIDIEN

  """
  The category for Crest Hotels
  
  Numeric Code: '3521'
  """
  CREST_HOTELS

  """
  The category for Tokyo Group
  
  Numeric Code: '3522'
  """
  TOKYO_GROUP

  """
  The category for Peninsula Hotels
  
  Numeric Code: '3523'
  """
  PENINSULA_HOTELS

  """
  The category for Welcomgroup
  
  Numeric Code: '3524'
  """
  WELCOMGROUP

  """
  The category for Dunfey Hotels
  
  Numeric Code: '3525'
  """
  DUNFEY_HOTELS

  """
  The category for Prince Hotels
  
  Numeric Code: '3526'
  """
  PRINCE_HOTELS

  """
  The category for Downtowner Passport
  
  Numeric Code: '3527'
  """
  DOWNTOWNER_PASSPORT

  """
  The category for Thunderbird/Red Lion
  
  Numeric Code: '3528'
  """
  THUNDERBIRD_RED_LION

  """
  The category for Canadian Pacific
  
  Numeric Code: '3529'
  """
  CANADIAN_PACIFIC

  """
  The category for Renaissance Hotels
  
  Numeric Code: '3530'
  """
  RENAISSANCE_HOTELS

  """
  The category for Kauai Coconut Beach Resort
  
  Numeric Code: '3531'
  """
  KAUAI_COCONUT_BEACH_RESORT

  """
  The category for Royal Kona Resort
  
  Numeric Code: '3532'
  """
  ROYAL_KONA_RESORT

  """
  The category for Park Inn By Radisson
  
  Numeric Code: '3533'
  """
  PARK_INN_BY_RADISSON

  """
  The category for Southern Pacific Hotel
  
  Numeric Code: '3534'
  """
  SOUTHERN_PACIFIC_HOTEL

  """
  The category for Hilton International
  
  Numeric Code: '3535'
  """
  HILTON_INTERNATIONAL

  """
  The category for Amfac Hotels
  
  Numeric Code: '3536'
  """
  AMFAC_HOTELS

  """
  The category for Ana Hotels
  
  Numeric Code: '3537'
  """
  ANA_HOTELS

  """
  The category for Concorde Hotels
  
  Numeric Code: '3538'
  """
  CONCORDE_HOTELS

  """
  The category for Summerfield Suites Hotel
  
  Numeric Code: '3539'
  """
  SUMMERFIELD_SUITES_HOTEL

  """
  The category for Iberotel
  
  Numeric Code: '3540'
  """
  IBEROTEL

  """
  The category for Hotel Okura
  
  Numeric Code: '3541'
  """
  HOTEL_OKURA

  """
  The category for Royal Hotels
  
  Numeric Code: '3542'
  """
  ROYAL_HOTELS

  """
  The category for Four Seasons
  
  Numeric Code: '3543'
  """
  FOUR_SEASONS

  """
  The category for Cigahotels
  
  Numeric Code: '3544'
  """
  CIGAHOTELS

  """
  The category for Shangri La International
  
  Numeric Code: '3545'
  """
  SHANGRI_LA_INTERNATIONAL

  """
  The category for Hotel Sierra
  
  Numeric Code: '3546'
  """
  HOTEL_SIERRA

  """
  The category for Breakers Resort
  
  Numeric Code: '3547'
  """
  BREAKERS_RESORT

  """
  The category for Hotels Melia
  
  Numeric Code: '3548'
  """
  HOTELS_MELIA

  """
  The category for Auberge Des Governeurs
  
  Numeric Code: '3549'
  """
  AUBERGE_DES_GOVERNEURS

  """
  The category for Regal 8 Inns
  
  Numeric Code: '3550'
  """
  REGAL_8_INNS

  """
  The category for Mirage Hotel And Casino
  
  Numeric Code: '3551'
  """
  MIRAGE_HOTEL_AND_CASINO

  """
  The category for Coast Hotels
  
  Numeric Code: '3552'
  """
  COAST_HOTELS

  """
  The category for Parks Inns International
  
  Numeric Code: '3553'
  """
  PARKS_INNS_INTERNATIONAL

  """
  The category for Pinehurst Resort
  
  Numeric Code: '3554'
  """
  PINEHURST_RESORT

  """
  The category for Treasure Island Hotel And Casino
  
  Numeric Code: '3555'
  """
  TREASURE_ISLAND_HOTEL_AND_CASINO

  """
  The category for Barton Creek Resort
  
  Numeric Code: '3556'
  """
  BARTON_CREEK_RESORT

  """
  The category for Manhattan East Suite Hotels
  
  Numeric Code: '3557'
  """
  MANHATTAN_EAST_SUITE_HOTELS

  """
  The category for Jolly Hotels
  
  Numeric Code: '3558'
  """
  JOLLY_HOTELS

  """
  The category for Candlewood Suites
  
  Numeric Code: '3559'
  """
  CANDLEWOOD_SUITES

  """
  The category for Aladdin Resort And Casino
  
  Numeric Code: '3560'
  """
  ALADDIN_RESORT_AND_CASINO

  """
  The category for Golden Nugget
  
  Numeric Code: '3561'
  """
  GOLDEN_NUGGET

  """
  The category for Comfort Hotel International
  
  Numeric Code: '3562'
  """
  COMFORT_HOTEL_INTERNATIONAL

  """
  The category for Journeys End Motels
  
  Numeric Code: '3563'
  """
  JOURNEYS_END_MOTELS

  """
  The category for Sams Town Hotel And Casino
  
  Numeric Code: '3564'
  """
  SAMS_TOWN_HOTEL_AND_CASINO

  """
  The category for Relax Inns
  
  Numeric Code: '3565'
  """
  RELAX_INNS

  """
  The category for Garden Place Hotel
  
  Numeric Code: '3566'
  """
  GARDEN_PLACE_HOTEL

  """
  The category for Soho Grand Hotel
  
  Numeric Code: '3567'
  """
  SOHO_GRAND_HOTEL

  """
  The category for Ladbroke Hotels
  
  Numeric Code: '3568'
  """
  LADBROKE_HOTELS

  """
  The category for Tribeca Grand Hotel
  
  Numeric Code: '3569'
  """
  TRIBECA_GRAND_HOTEL

  """
  The category for Grand Met Forum Hotels
  
  Numeric Code: '3570'
  """
  GRAND_MET_FORUM_HOTELS

  """
  The category for Grand Wailea Resort
  
  Numeric Code: '3571'
  """
  GRAND_WAILEA_RESORT

  """
  The category for Miyako Hotel/Kintetsu
  
  Numeric Code: '3572'
  """
  MIYAKO_HOTEL_KINTETSU

  """
  The category for Sandman Hotels
  
  Numeric Code: '3573'
  """
  SANDMAN_HOTELS

  """
  The category for Venture Inn
  
  Numeric Code: '3574'
  """
  VENTURE_INN

  """
  The category for Vagabond Hotels
  
  Numeric Code: '3575'
  """
  VAGABOND_HOTELS

  """
  The category for La Quinta Resort
  
  Numeric Code: '3576'
  """
  LA_QUINTA_RESORT

  """
  The category for Mandarin International
  
  Numeric Code: '3577'
  """
  MANDARIN_INTERNATIONAL

  """
  The category for Frankenmuth Bavarian
  
  Numeric Code: '3578'
  """
  FRANKENMUTH_BAVARIAN

  """
  The category for Hotel Mercure
  
  Numeric Code: '3579'
  """
  HOTEL_MERCURE

  """
  The category for Hotel Del Coronado
  
  Numeric Code: '3580'
  """
  HOTEL_DEL_CORONADO

  """
  The category for Delta Hotels
  
  Numeric Code: '3581'
  """
  DELTA_HOTELS

  """
  The category for California Hotel And Casino
  
  Numeric Code: '3582'
  """
  CALIFORNIA_HOTEL_AND_CASINO

  """
  The category for Radisson Blu
  
  Numeric Code: '3583'
  """
  RADISSON_BLU

  """
  The category for Princess Hotels International
  
  Numeric Code: '3584'
  """
  PRINCESS_HOTELS_INTERNATIONAL

  """
  The category for Hungar Hotels
  
  Numeric Code: '3585'
  """
  HUNGAR_HOTELS

  """
  The category for Sokos Hotel
  
  Numeric Code: '3586'
  """
  SOKOS_HOTEL

  """
  The category for Doral Hotels
  
  Numeric Code: '3587'
  """
  DORAL_HOTELS

  """
  The category for Helmsley Hotels
  
  Numeric Code: '3588'
  """
  HELMSLEY_HOTELS

  """
  The category for Doral Golf Resort
  
  Numeric Code: '3589'
  """
  DORAL_GOLF_RESORT

  """
  The category for Fairmont Hotels Corporation
  
  Numeric Code: '3590'
  """
  FAIRMONT_HOTELS_CORPORATION

  """
  The category for Sonesta International Hotels
  
  Numeric Code: '3591'
  """
  SONESTA_INTERNATIONAL_HOTELS

  """
  The category for Omni International
  
  Numeric Code: '3592'
  """
  OMNI_INTERNATIONAL

  """
  The category for Cunard Hotels
  
  Numeric Code: '3593'
  """
  CUNARD_HOTELS

  """
  The category for Arizona Biltmore
  
  Numeric Code: '3594'
  """
  ARIZONA_BILTMORE

  """
  The category for Hospitality Inns
  
  Numeric Code: '3595'
  """
  HOSPITALITY_INNS

  """
  The category for Wynn Las Vegas
  
  Numeric Code: '3596'
  """
  WYNN_LAS_VEGAS

  """
  The category for Riverside Resort And Casino
  
  Numeric Code: '3597'
  """
  RIVERSIDE_RESORT_AND_CASINO

  """
  The category for Regent Hotels
  
  Numeric Code: '3598'
  """
  REGENT_HOTELS

  """
  The category for Pannonia Hotels
  
  Numeric Code: '3599'
  """
  PANNONIA_HOTELS

  """
  The category for Saddlebrook Resort–Tampa
  
  Numeric Code: '3600'
  """
  SADDLEBROOK_RESORT_TAMPA

  """
  The category for Tradewinds Resort
  
  Numeric Code: '3601'
  """
  TRADEWINDS_RESORT

  """
  The category for Hudson Hotel
  
  Numeric Code: '3602'
  """
  HUDSON_HOTEL

  """
  The category for Noahs Hotel Melbourne
  
  Numeric Code: '3603'
  """
  NOAHS_HOTEL_MELBOURNE

  """
  The category for Hilton Garden Inn
  
  Numeric Code: '3604'
  """
  HILTON_GARDEN_INN

  """
  The category for Jurys Doyle Hotel Group
  
  Numeric Code: '3605'
  """
  JURYS_DOYLE_HOTEL_GROUP

  """
  The category for Jefferson Hotel
  
  Numeric Code: '3606'
  """
  JEFFERSON_HOTEL

  """
  The category for Fontainebleau Resort
  
  Numeric Code: '3607'
  """
  FONTAINEBLEAU_RESORT

  """
  The category for Gaylord Opryland
  
  Numeric Code: '3608'
  """
  GAYLORD_OPRYLAND

  """
  The category for Gaylord Palms
  
  Numeric Code: '3609'
  """
  GAYLORD_PALMS

  """
  The category for Gaylord Texan
  
  Numeric Code: '3610'
  """
  GAYLORD_TEXAN

  """
  The category for C Mon Inn
  
  Numeric Code: '3611'
  """
  C_MON_INN

  """
  The category for Moevenpick
  
  Numeric Code: '3612'
  """
  MOEVENPICK

  """
  The category for Microtel Inn And Suites
  
  Numeric Code: '3613'
  """
  MICROTEL_INN_AND_SUITES

  """
  The category for Americinn
  
  Numeric Code: '3614'
  """
  AMERICINN

  """
  The category for Travelodge Motels
  
  Numeric Code: '3615'
  """
  TRAVELODGE_MOTELS

  """
  The category for Hermitage Hotels
  
  Numeric Code: '3616'
  """
  HERMITAGE_HOTELS

  """
  The category for America’S Best Value Inn
  
  Numeric Code: '3617'
  """
  AMERICAS_BEST_VALUE_INN

  """
  The category for Great Wolf
  
  Numeric Code: '3618'
  """
  GREAT_WOLF

  """
  The category for Aloft
  
  Numeric Code: '3619'
  """
  ALOFT

  """
  The category for Binions Horseshoe Club
  
  Numeric Code: '3620'
  """
  BINIONS_HORSESHOE_CLUB

  """
  The category for Extended Stay
  
  Numeric Code: '3621'
  """
  EXTENDED_STAY

  """
  The category for Merlin Hotel Perth
  
  Numeric Code: '3622'
  """
  MERLIN_HOTEL_PERTH

  """
  The category for Dorint Hotels
  
  Numeric Code: '3623'
  """
  DORINT_HOTELS

  """
  The category for Lady Luck Hotel And Casino
  
  Numeric Code: '3624'
  """
  LADY_LUCK_HOTEL_AND_CASINO

  """
  The category for Hotel Universal
  
  Numeric Code: '3625'
  """
  HOTEL_UNIVERSAL

  """
  The category for Studio Plus
  
  Numeric Code: '3626'
  """
  STUDIO_PLUS

  """
  The category for Extended Stay America
  
  Numeric Code: '3627'
  """
  EXTENDED_STAY_AMERICA

  """
  The category for Excalibur Hotel And Casino
  
  Numeric Code: '3628'
  """
  EXCALIBUR_HOTEL_AND_CASINO

  """
  The category for Dan Hotels
  
  Numeric Code: '3629'
  """
  DAN_HOTELS

  """
  The category for Extended Stay Deluxe
  
  Numeric Code: '3630'
  """
  EXTENDED_STAY_DELUXE

  """
  The category for Sleep Inn
  
  Numeric Code: '3631'
  """
  SLEEP_INN

  """
  The category for The Phoenician
  
  Numeric Code: '3632'
  """
  THE_PHOENICIAN

  """
  The category for Rank Hotels
  
  Numeric Code: '3633'
  """
  RANK_HOTELS

  """
  The category for Swissotel
  
  Numeric Code: '3634'
  """
  SWISSOTEL

  """
  The category for Reso Hotels
  
  Numeric Code: '3635'
  """
  RESO_HOTELS

  """
  The category for Sarova Hotels
  
  Numeric Code: '3636'
  """
  SAROVA_HOTELS

  """
  The category for Ramada Inns
  
  Numeric Code: '3637'
  """
  RAMADA_INNS

  """
  The category for Howard Johnson
  
  Numeric Code: '3638'
  """
  HOWARD_JOHNSON

  """
  The category for Mount Charlotte Hotels
  
  Numeric Code: '3639'
  """
  MOUNT_CHARLOTTE_HOTELS

  """
  The category for Hyatt Hotels/International
  
  Numeric Code: '3640'
  """
  HYATT_HOTELS_INTERNATIONAL

  """
  The category for Sofitel Hotels
  
  Numeric Code: '3641'
  """
  SOFITEL_HOTELS

  """
  The category for Novotel Sieh Accor
  
  Numeric Code: '3642'
  """
  NOVOTEL_SIEH_ACCOR

  """
  The category for Steigenberger
  
  Numeric Code: '3643'
  """
  STEIGENBERGER

  """
  The category for Econo Travel Motor Hotel
  
  Numeric Code: '3644'
  """
  ECONO_TRAVEL_MOTOR_HOTEL

  """
  The category for Queens Moat Houses
  
  Numeric Code: '3645'
  """
  QUEENS_MOAT_HOUSES

  """
  The category for Swallow Hotels
  
  Numeric Code: '3646'
  """
  SWALLOW_HOTELS

  """
  The category for Grupo Hotels Husa Sa
  
  Numeric Code: '3647'
  """
  GRUPO_HOTELS_HUSA_SA

  """
  The category for De Vere Hotels
  
  Numeric Code: '3648'
  """
  DE_VERE_HOTELS

  """
  The category for Radisson
  
  Numeric Code: '3649'
  """
  RADISSON

  """
  The category for Red Roof Inns
  
  Numeric Code: '3650'
  """
  RED_ROOF_INNS

  """
  The category for Imperial London Hotels
  
  Numeric Code: '3651'
  """
  IMPERIAL_LONDON_HOTELS

  """
  The category for Embassy Hotels
  
  Numeric Code: '3652'
  """
  EMBASSY_HOTELS

  """
  The category for Penta Hotels
  
  Numeric Code: '3653'
  """
  PENTA_HOTELS

  """
  The category for Loews Hotels
  
  Numeric Code: '3654'
  """
  LOEWS_HOTELS

  """
  The category for Scandic Hotels
  
  Numeric Code: '3655'
  """
  SCANDIC_HOTELS

  """
  The category for Sara Hotels
  
  Numeric Code: '3656'
  """
  SARA_HOTELS

  """
  The category for Oberoi Hotels
  
  Numeric Code: '3657'
  """
  OBEROI_HOTELS

  """
  The category for New Otani Hotels
  
  Numeric Code: '3658'
  """
  NEW_OTANI_HOTELS

  """
  The category for Taj Hotels Intl
  
  Numeric Code: '3659'
  """
  TAJ_HOTELS_INTL

  """
  The category for Knights Inn
  
  Numeric Code: '3660'
  """
  KNIGHTS_INN

  """
  The category for Metropole Hotels
  
  Numeric Code: '3661'
  """
  METROPOLE_HOTELS

  """
  The category for Circus Circus Hotel And Casino
  
  Numeric Code: '3662'
  """
  CIRCUS_CIRCUS_HOTEL_AND_CASINO

  """
  The category for Hoteles El Presidente
  
  Numeric Code: '3663'
  """
  HOTELES_EL_PRESIDENTE

  """
  The category for Flag Inns
  
  Numeric Code: '3664'
  """
  FLAG_INNS

  """
  The category for Hampton Inns
  
  Numeric Code: '3665'
  """
  HAMPTON_INNS

  """
  The category for Stakis Hotels
  
  Numeric Code: '3666'
  """
  STAKIS_HOTELS

  """
  The category for Luxor Hotel And Casino
  
  Numeric Code: '3667'
  """
  LUXOR_HOTEL_AND_CASINO

  """
  The category for Maritim
  
  Numeric Code: '3668'
  """
  MARITIM

  """
  The category for Eldorado Hotel And Casino
  
  Numeric Code: '3669'
  """
  ELDORADO_HOTEL_AND_CASINO

  """
  The category for Arcade
  
  Numeric Code: '3670'
  """
  ARCADE

  """
  The category for Arctia
  
  Numeric Code: '3671'
  """
  ARCTIA

  """
  The category for Campanile
  
  Numeric Code: '3672'
  """
  CAMPANILE

  """
  The category for Ibusz Hotels
  
  Numeric Code: '3673'
  """
  IBUSZ_HOTELS

  """
  The category for Rantasipi Hotels
  
  Numeric Code: '3674'
  """
  RANTASIPI_HOTELS

  """
  The category for Interhotel Cedok
  
  Numeric Code: '3675'
  """
  INTERHOTEL_CEDOK

  """
  The category for Monte Carlo Hotel And Casino
  
  Numeric Code: '3676'
  """
  MONTE_CARLO_HOTEL_AND_CASINO

  """
  The category for Climat De France
  
  Numeric Code: '3677'
  """
  CLIMAT_DE_FRANCE

  """
  The category for Cumulus Hotels
  
  Numeric Code: '3678'
  """
  CUMULUS_HOTELS

  """
  The category for Silver Legacy Hotel And Casino
  
  Numeric Code: '3679'
  """
  SILVER_LEGACY_HOTEL_AND_CASINO

  """
  The category for Hoteis Othan
  
  Numeric Code: '3680'
  """
  HOTEIS_OTHAN

  """
  The category for Adams Mark
  
  Numeric Code: '3681'
  """
  ADAMS_MARK

  """
  The category for Sahara Hotel And Casino
  
  Numeric Code: '3682'
  """
  SAHARA_HOTEL_AND_CASINO

  """
  The category for Bradbury Suites
  
  Numeric Code: '3683'
  """
  BRADBURY_SUITES

  """
  The category for Budget Host Inns
  
  Numeric Code: '3684'
  """
  BUDGET_HOST_INNS

  """
  The category for Budgetel
  
  Numeric Code: '3685'
  """
  BUDGETEL

  """
  The category for Suisse Chalet
  
  Numeric Code: '3686'
  """
  SUISSE_CHALET

  """
  The category for Clarion Hotel
  
  Numeric Code: '3687'
  """
  CLARION_HOTEL

  """
  The category for Compri Hotel
  
  Numeric Code: '3688'
  """
  COMPRI_HOTEL

  """
  The category for Consort
  
  Numeric Code: '3689'
  """
  CONSORT

  """
  The category for Courtyard By Marriott
  
  Numeric Code: '3690'
  """
  COURTYARD_BY_MARRIOTT

  """
  The category for Dillon Inn
  
  Numeric Code: '3691'
  """
  DILLON_INN

  """
  The category for Doubletree
  
  Numeric Code: '3692'
  """
  DOUBLETREE

  """
  The category for Drury Inn
  
  Numeric Code: '3693'
  """
  DRURY_INN

  """
  The category for Economy Inns Of America
  
  Numeric Code: '3694'
  """
  ECONOMY_INNS_OF_AMERICA

  """
  The category for Embassy Suites
  
  Numeric Code: '3695'
  """
  EMBASSY_SUITES

  """
  The category for Excel Inn
  
  Numeric Code: '3696'
  """
  EXCEL_INN

  """
  The category for Fairfield Hotel
  
  Numeric Code: '3697'
  """
  FAIRFIELD_HOTEL

  """
  The category for Harley Hotel
  
  Numeric Code: '3698'
  """
  HARLEY_HOTEL

  """
  The category for Midway Motor Lodge
  
  Numeric Code: '3699'
  """
  MIDWAY_MOTOR_LODGE

  """
  The category for Motel 6
  
  Numeric Code: '3700'
  """
  MOTEL_6

  """
  The category for La Mansion Del Rio
  
  Numeric Code: '3701'
  """
  LA_MANSION_DEL_RIO

  """
  The category for Registry Hotels
  
  Numeric Code: '3702'
  """
  REGISTRY_HOTELS

  """
  The category for Residence Inn
  
  Numeric Code: '3703'
  """
  RESIDENCE_INN

  """
  The category for Royce Hotel
  
  Numeric Code: '3704'
  """
  ROYCE_HOTEL

  """
  The category for Sandman Inn
  
  Numeric Code: '3705'
  """
  SANDMAN_INN

  """
  The category for Shilo Inn
  
  Numeric Code: '3706'
  """
  SHILO_INN

  """
  The category for Shoneys Inn
  
  Numeric Code: '3707'
  """
  SHONEYS_INN

  """
  The category for Virgin River Hotel And Casino
  
  Numeric Code: '3708'
  """
  VIRGIN_RIVER_HOTEL_AND_CASINO

  """
  The category for Super 8 Motel
  
  Numeric Code: '3709'
  """
  SUPER_8_MOTEL

  """
  The category for Ritz Carlton
  
  Numeric Code: '3710'
  """
  RITZ_CARLTON

  """
  The category for Flag Inns Australia
  
  Numeric Code: '3711'
  """
  FLAG_INNS_AUSTRALIA

  """
  The category for Buffalo Bills Hotel And Casino
  
  Numeric Code: '3712'
  """
  BUFFALO_BILLS_HOTEL_AND_CASINO

  """
  The category for Quality Pacific Hotel
  
  Numeric Code: '3713'
  """
  QUALITY_PACIFIC_HOTEL

  """
  The category for Four Seasons Australia
  
  Numeric Code: '3714'
  """
  FOUR_SEASONS_AUSTRALIA

  """
  The category for Fairfield Inn
  
  Numeric Code: '3715'
  """
  FAIRFIELD_INN

  """
  The category for Carlton Hotels
  
  Numeric Code: '3716'
  """
  CARLTON_HOTELS

  """
  The category for City Lodge Hotels
  
  Numeric Code: '3717'
  """
  CITY_LODGE_HOTELS

  """
  The category for Karos Hotels
  
  Numeric Code: '3718'
  """
  KAROS_HOTELS

  """
  The category for Protea Hotels
  
  Numeric Code: '3719'
  """
  PROTEA_HOTELS

  """
  The category for Southern Sun Hotels
  
  Numeric Code: '3720'
  """
  SOUTHERN_SUN_HOTELS

  """
  The category for Conrad Hotels
  
  Numeric Code: '3721'
  """
  CONRAD_HOTELS

  """
  The category for Wyndham
  
  Numeric Code: '3722'
  """
  WYNDHAM

  """
  The category for Rica Hotels
  
  Numeric Code: '3723'
  """
  RICA_HOTELS

  """
  The category for Inter Nor Hotels
  
  Numeric Code: '3724'
  """
  INTER_NOR_HOTELS

  """
  The category for Sea Pines Resort
  
  Numeric Code: '3725'
  """
  SEA_PINES_RESORT

  """
  The category for Rio Suites
  
  Numeric Code: '3726'
  """
  RIO_SUITES

  """
  The category for Broadmoor Hotel
  
  Numeric Code: '3727'
  """
  BROADMOOR_HOTEL

  """
  The category for Ballys Hotel And Casino
  
  Numeric Code: '3728'
  """
  BALLYS_HOTEL_AND_CASINO

  """
  The category for John Ascuagas Nugget
  
  Numeric Code: '3729'
  """
  JOHN_ASCUAGAS_NUGGET

  """
  The category for Mgm Grand Hotel
  
  Numeric Code: '3730'
  """
  MGM_GRAND_HOTEL

  """
  The category for Harrahs Hotels And Casinos
  
  Numeric Code: '3731'
  """
  HARRAHS_HOTELS_AND_CASINOS

  """
  The category for Opryland Hotel
  
  Numeric Code: '3732'
  """
  OPRYLAND_HOTEL

  """
  The category for Boca Raton Resort
  
  Numeric Code: '3733'
  """
  BOCA_RATON_RESORT

  """
  The category for Harvey Bristol Hotels
  
  Numeric Code: '3734'
  """
  HARVEY_BRISTOL_HOTELS

  """
  The category for Colorado Belle Edgewater Resort
  
  Numeric Code: '3736'
  """
  COLORADO_BELLE_EDGEWATER_RESORT

  """
  The category for Riviera Hotel And Casino
  
  Numeric Code: '3737'
  """
  RIVIERA_HOTEL_AND_CASINO

  """
  The category for Tropicana Resort And Casino
  
  Numeric Code: '3738'
  """
  TROPICANA_RESORT_AND_CASINO

  """
  The category for Woodside Hotels And Resorts
  
  Numeric Code: '3739'
  """
  WOODSIDE_HOTELS_AND_RESORTS

  """
  The category for Towneplace Suites
  
  Numeric Code: '3740'
  """
  TOWNEPLACE_SUITES

  """
  The category for Millennium Broadway Hotel
  
  Numeric Code: '3741'
  """
  MILLENNIUM_BROADWAY_HOTEL

  """
  The category for Club Med
  
  Numeric Code: '3742'
  """
  CLUB_MED

  """
  The category for Biltmore Hotel And Suites
  
  Numeric Code: '3743'
  """
  BILTMORE_HOTEL_AND_SUITES

  """
  The category for Carefree Resorts
  
  Numeric Code: '3744'
  """
  CAREFREE_RESORTS

  """
  The category for St Regis Hotel
  
  Numeric Code: '3745'
  """
  ST_REGIS_HOTEL

  """
  The category for The Eliot Hotel
  
  Numeric Code: '3746'
  """
  THE_ELIOT_HOTEL

  """
  The category for Club Corporation Club Resorts
  
  Numeric Code: '3747'
  """
  CLUB_CORPORATION_CLUB_RESORTS

  """
  The category for Wellesley Inns
  
  Numeric Code: '3748'
  """
  WELLESLEY_INNS

  """
  The category for Beverly Hills Hotel
  
  Numeric Code: '3749'
  """
  BEVERLY_HILLS_HOTEL

  """
  The category for Crowne Plaza Hotels
  
  Numeric Code: '3750'
  """
  CROWNE_PLAZA_HOTELS

  """
  The category for Homewood Suites
  
  Numeric Code: '3751'
  """
  HOMEWOOD_SUITES

  """
  The category for Peabody Hotels
  
  Numeric Code: '3752'
  """
  PEABODY_HOTELS

  """
  The category for Greenbriar Resorts
  
  Numeric Code: '3753'
  """
  GREENBRIAR_RESORTS

  """
  The category for Amelia Island Plantation
  
  Numeric Code: '3754'
  """
  AMELIA_ISLAND_PLANTATION

  """
  The category for Homestead
  
  Numeric Code: '3755'
  """
  HOMESTEAD

  """
  The category for Canyon Ranch
  
  Numeric Code: '3757'
  """
  CANYON_RANCH

  """
  The category for Kahala Mandarin Oriental Hotel
  
  Numeric Code: '3758'
  """
  KAHALA_MANDARIN_ORIENTAL_HOTEL

  """
  The category for Orchid At Mauna Lai
  
  Numeric Code: '3759'
  """
  ORCHID_AT_MAUNA_LAI

  """
  The category for Halekulani Hotel Waikiki Parc
  
  Numeric Code: '3760'
  """
  HALEKULANI_HOTEL_WAIKIKI_PARC

  """
  The category for Primadonna Hotel And Casino
  
  Numeric Code: '3761'
  """
  PRIMADONNA_HOTEL_AND_CASINO

  """
  The category for Whiskey Pete’S Hotel And Casino
  
  Numeric Code: '3762'
  """
  WHISKEY_PETES_HOTEL_AND_CASINO

  """
  The category for Chateau Elan Winery And Resort
  
  Numeric Code: '3763'
  """
  CHATEAU_ELAN_WINERY_AND_RESORT

  """
  The category for Beau Rivage Hotel And Casino
  
  Numeric Code: '3764'
  """
  BEAU_RIVAGE_HOTEL_AND_CASINO

  """
  The category for Bellagio
  
  Numeric Code: '3765'
  """
  BELLAGIO

  """
  The category for Fremont Hotel And Casino
  
  Numeric Code: '3766'
  """
  FREMONT_HOTEL_AND_CASINO

  """
  The category for Main Street Station Hotel And Casino
  
  Numeric Code: '3767'
  """
  MAIN_STREET_STATION_HOTEL_AND_CASINO

  """
  The category for Silver Star Hotel And Casino
  
  Numeric Code: '3768'
  """
  SILVER_STAR_HOTEL_AND_CASINO

  """
  The category for Stratosphere Hotel And Casino
  
  Numeric Code: '3769'
  """
  STRATOSPHERE_HOTEL_AND_CASINO

  """
  The category for Springhill Suites
  
  Numeric Code: '3770'
  """
  SPRINGHILL_SUITES

  """
  The category for Caesars Hotel And Casino
  
  Numeric Code: '3771'
  """
  CAESARS_HOTEL_AND_CASINO

  """
  The category for Nemacolin Woodlands
  
  Numeric Code: '3772'
  """
  NEMACOLIN_WOODLANDS

  """
  The category for Venetian Resort Hotel And Casino
  
  Numeric Code: '3773'
  """
  VENETIAN_RESORT_HOTEL_AND_CASINO

  """
  The category for New York New York Hotel And Casino
  
  Numeric Code: '3774'
  """
  NEW_YORK_NEW_YORK_HOTEL_AND_CASINO

  """
  The category for Sands Resort
  
  Numeric Code: '3775'
  """
  SANDS_RESORT

  """
  The category for Nevele Grande Resort And Country Club
  
  Numeric Code: '3776'
  """
  NEVELE_GRANDE_RESORT_AND_COUNTRY_CLUB

  """
  The category for Mandalay Bay Resort
  
  Numeric Code: '3777'
  """
  MANDALAY_BAY_RESORT

  """
  The category for Four Points Hotels
  
  Numeric Code: '3778'
  """
  FOUR_POINTS_HOTELS

  """
  The category for W Hotels
  
  Numeric Code: '3779'
  """
  W_HOTELS

  """
  The category for Disneyland Resorts
  
  Numeric Code: '3780'
  """
  DISNEYLAND_RESORTS

  """
  The category for Patricia Grand Resort Hotels
  
  Numeric Code: '3781'
  """
  PATRICIA_GRAND_RESORT_HOTELS

  """
  The category for Rosen Hotel And Resorts
  
  Numeric Code: '3782'
  """
  ROSEN_HOTEL_AND_RESORTS

  """
  The category for Town And Country Resort And Convention Center
  
  Numeric Code: '3783'
  """
  TOWN_AND_COUNTRY_RESORT_AND_CONVENTION_CENTER

  """
  The category for First Hospitality Hotels
  
  Numeric Code: '3784'
  """
  FIRST_HOSPITALITY_HOTELS

  """
  The category for Outrigger Hotels And Resorts
  
  Numeric Code: '3785'
  """
  OUTRIGGER_HOTELS_AND_RESORTS

  """
  The category for Ohana Hotels Of Hawaii
  
  Numeric Code: '3786'
  """
  OHANA_HOTELS_OF_HAWAII

  """
  The category for Caribe Royal Resort Suite And Villas
  
  Numeric Code: '3787'
  """
  CARIBE_ROYAL_RESORT_SUITE_AND_VILLAS

  """
  The category for Ala Moana Hotel
  
  Numeric Code: '3788'
  """
  ALA_MOANA_HOTEL

  """
  The category for Smugglers Notch Resort
  
  Numeric Code: '3789'
  """
  SMUGGLERS_NOTCH_RESORT

  """
  The category for Raffles Hotels
  
  Numeric Code: '3790'
  """
  RAFFLES_HOTELS

  """
  The category for Staybridge Suites
  
  Numeric Code: '3791'
  """
  STAYBRIDGE_SUITES

  """
  The category for Claridge Casino Hotel
  
  Numeric Code: '3792'
  """
  CLARIDGE_CASINO_HOTEL

  """
  The category for The Flamingo Hotels
  
  Numeric Code: '3793'
  """
  THE_FLAMINGO_HOTELS

  """
  The category for Grand Casino Hotels
  
  Numeric Code: '3794'
  """
  GRAND_CASINO_HOTELS

  """
  The category for Paris Las Vegas Hotel
  
  Numeric Code: '3795'
  """
  PARIS_LAS_VEGAS_HOTEL

  """
  The category for Peppermill Hotel Casino
  
  Numeric Code: '3796'
  """
  PEPPERMILL_HOTEL_CASINO

  """
  The category for Atlantic City Hilton
  
  Numeric Code: '3797'
  """
  ATLANTIC_CITY_HILTON

  """
  The category for Embassy Vacation Resort
  
  Numeric Code: '3798'
  """
  EMBASSY_VACATION_RESORT

  """
  The category for Hale Koa Hotel
  
  Numeric Code: '3799'
  """
  HALE_KOA_HOTEL

  """
  The category for Homestead Suites
  
  Numeric Code: '3800'
  """
  HOMESTEAD_SUITES

  """
  The category for Wilderness Hotel And Resort
  
  Numeric Code: '3801'
  """
  WILDERNESS_HOTEL_AND_RESORT

  """
  The category for The Palace Hotel
  
  Numeric Code: '3802'
  """
  THE_PALACE_HOTEL

  """
  The category for The Wigwam Golf Resort And Spa
  
  Numeric Code: '3803'
  """
  THE_WIGWAM_GOLF_RESORT_AND_SPA

  """
  The category for The Diplomat Country Club And Spa
  
  Numeric Code: '3804'
  """
  THE_DIPLOMAT_COUNTRY_CLUB_AND_SPA

  """
  The category for The Atlantic
  
  Numeric Code: '3805'
  """
  THE_ATLANTIC

  """
  The category for Princeville Resort
  
  Numeric Code: '3806'
  """
  PRINCEVILLE_RESORT

  """
  The category for Element
  
  Numeric Code: '3807'
  """
  ELEMENT

  """
  The category for Luxury Resorts
  
  Numeric Code: '3808'
  """
  LUXURY_RESORTS

  """
  The category for Settle Inn
  
  Numeric Code: '3809'
  """
  SETTLE_INN

  """
  The category for La Costa Resort
  
  Numeric Code: '3810'
  """
  LA_COSTA_RESORT

  """
  The category for Premier Travel Inns
  
  Numeric Code: '3811'
  """
  PREMIER_TRAVEL_INNS

  """
  The category for Hyatt Place
  
  Numeric Code: '3812'
  """
  HYATT_PLACE

  """
  The category for Hotel Indigo
  
  Numeric Code: '3813'
  """
  HOTEL_INDIGO

  """
  The category for The Roosevelt Hotel Ny
  
  Numeric Code: '3814'
  """
  THE_ROOSEVELT_HOTEL_NY

  """
  The category for Nickelodeon Family Suites By Holiday Inn
  
  Numeric Code: '3815'
  """
  NICKELODEON_FAMILY_SUITES_BY_HOLIDAY_INN

  """
  The category for Home2Suites
  
  Numeric Code: '3816'
  """
  HOME2SUITES

  """
  The category for Affinia
  
  Numeric Code: '3817'
  """
  AFFINIA

  """
  The category for Mainstay Suites
  
  Numeric Code: '3818'
  """
  MAINSTAY_SUITES

  """
  The category for Oxford Suites
  
  Numeric Code: '3819'
  """
  OXFORD_SUITES

  """
  The category for Jumeirah Essex House
  
  Numeric Code: '3820'
  """
  JUMEIRAH_ESSEX_HOUSE

  """
  The category for Caribe Royal
  
  Numeric Code: '3821'
  """
  CARIBE_ROYAL

  """
  The category for Crossland
  
  Numeric Code: '3822'
  """
  CROSSLAND

  """
  The category for Grand Sierra Resort
  
  Numeric Code: '3823'
  """
  GRAND_SIERRA_RESORT

  """
  The category for Aria
  
  Numeric Code: '3824'
  """
  ARIA

  """
  The category for Vdara
  
  Numeric Code: '3825'
  """
  VDARA

  """
  The category for Autograph
  
  Numeric Code: '3826'
  """
  AUTOGRAPH

  """
  The category for Galt House
  
  Numeric Code: '3827'
  """
  GALT_HOUSE

  """
  The category for Cosmopolitan Of Las Vegas
  
  Numeric Code: '3828'
  """
  COSMOPOLITAN_OF_LAS_VEGAS

  """
  The category for Country Inn By Carlson
  
  Numeric Code: '3829'
  """
  COUNTRY_INN_BY_CARLSON

  """
  The category for Park Plaza Hotel
  
  Numeric Code: '3830'
  """
  PARK_PLAZA_HOTEL

  """
  The category for Waldorf
  
  Numeric Code: '3831'
  """
  WALDORF

  """
  The category for Rio Hotels
  
  Numeric code: '3840'
  """
  RIO_HOTELS
}

"""
A representation of the merchant category that includes the category, the code and a display name.
"""
type MerchantCategoryDetails {
  """The merchant category enum."""
  merchantCategory: MerchantCategory

  """The merchant category enum number representation."""
  merchantCategoryCode: String

  """The display name of the merchant category."""
  displayName: String
}

"""A container for a list of merchant category details."""
type MerchantCategoryDetailsContainer {
  """A list of merchant category details."""
  merchantCategoryDetails: [MerchantCategoryDetails!]
}

"""The list of Processing Networks that can be utilized for a deposit"""
enum DepositProcessingNetwork {
  """Unknown Processing Network"""
  UNKNOWN

  """Accel Processing Network"""
  ACCEL

  """Accel Card Free Cash Processing Network"""
  ACCEL_CARD_FREE_CASH

  """Accel Nebraska Processing Network"""
  ACCEL_NEBRASKA

  """Accel No Pin Processing Network"""
  ACCEL_NO_PIN

  """Accel Surcharge Free Processing Network"""
  ACCEL_SURCHARGE_FREE

  """American Express ATM Processing Network"""
  AMERICAN_EXPRESS_ATM

  """AFFN Processing Network"""
  AFFN

  """AFFN High Ticket POS Processing Network"""
  AFFN_HIGH_TICKET_POS

  """AFFN Low Ticket POS Processing Network"""
  AFFN_LOW_TICKET_POS

  """AFFN Reciprocal Processing Network"""
  AFFN_RECIPROCAL

  """Allpoint Processing Network"""
  ALLPOINT_NETWORK

  """Cirrus ATM Processing Network"""
  CIRRUS_ATM

  """Cirrus Europe Acquired Dual Message Processing Network"""
  CIRRUS_EUROPE_ACQUIRED_DUAL_MESSAGE

  """Credit Union Cooperative ATM Processing Network"""
  CREDIT_UNION_COOPERATIVE_ATM

  """Culinace Processing Network"""
  CULIANCE

  """Culinace Cuhere Processing Network"""
  CULIANCE_CUHERE_PROGRAM

  """Culinace Cuhere MoneyPass Reciprocal Processing Network"""
  CULIANCE_CUHERE_MONEYPASS_RECIPROCAL

  """Culinace Cuhere Presto Processing Network"""
  CULIANCE_CUHERE_PRESTO_PUBLIX

  """Culince Nyce Reciprocal Processing Network"""
  CULIANCE_NYCE_RECIPROCAL

  """Culinace Pinless Low Value POS Processing Network"""
  CULIANCE_PINLESS_LOW_VALUE_POS

  """EBT Processing Network"""
  EBT_PROGRAMS

  """Interlink Processing Network"""
  INTERLINK

  """Maestro Processing Network"""
  MAESTRO

  """Maestro Europe Acquirer Dual Message Processing Network"""
  MAESTRO_EUROPE_ACQUIRER_DUAL_MESSAGE

  """Mastercard ATM Processing Network"""
  MASTERCARD_ATM

  """Mastercard Single Message Processing Network"""
  MASTERCARD_SINGLE_MESSAGE_SYSTEM

  """Mastercard Dual Message Processing Network"""
  MASTERCARD_DUAL_MESSAGE_AUTHORIZATION_SYSTEM

  """MoneyPass Processing Network"""
  MONEY_PASS

  """MoneyPass ATM Nebraska Processing Network"""
  MONEY_PASS_ATM_NEBRASKA

  """MoneyPass ATM Star Processing Network"""
  MONEY_PASS_ATM_STAR

  """NYCE Processing Network"""
  NYCE

  """NYCE AFFN Reciprocal Processing Network"""
  NYCE_AFFN_RECIPROCAL

  """NYCE Cross Border Processing Network"""
  NYCE_CROSS_BORDER

  """NYCE Culiance Reciprocal Processing Network"""
  NYCE_CULIANCE_RECIPROCAL

  """NYCE Ecommerce Processing Network"""
  NYCE_ECOMMERCE

  """NYCE International Reciprocal Group 1 Processing Network"""
  NYCE_INTERNATIONAL_RECIPROCAL_GROUP1

  """NYCE International Reciprocal Group 2 Processing Network"""
  NYCE_INTERNATIONAL_RECIPROCAL_GROUP2

  """NYCE Pinless POS Processing Network"""
  NYCE_PINLESS_POS

  """NYCE Direct Settlement Link Processing Network"""
  NYCE_DIRECT_SETTLEMENT_LINK

  """Plus ATM Processing Network"""
  PLUS_ATM

  """Pulse Processing Network"""
  PULSE

  """Pulse Accel Processing Network"""
  PULSE_ACCEL_RECIPROCAL

  """Pulse Affn Reciprocal Processing Network"""
  PULSE_AFFN_RECIPROCAL

  """Pulse Canada Processing Network"""
  PULSE_CANADA

  """Pulse Mexico Processing Network"""
  PULSE_MEXICO

  """Pulse Pay Express Processing Network"""
  PULSE_PAY_EXPRESS

  """Pulse Select Processing Network"""
  PULSE_SELECT

  """Pulse Direct Settlement Link Processing Network"""
  PULSE_DIRECT_SETTLEMENT_LINK

  """Shazam Processing Network"""
  SHAZAM

  """Star Processing Network"""
  STAR

  """Star Access Processing Network"""
  STAR_ACCESS

  """Star BC Card Korea Reciprocal Processing Network"""
  STAR_BC_CARD_KOREA_RECIPROCAL

  """Star Publix Presto Processing Network"""
  STAR_PUBLIX_PRESTO

  """Star Rapidflash Processing Network"""
  STAR_RAPIDFLASH

  """Star SF Processing Network"""
  STAR_SF

  """Star Direct Settlement Link Processing Network"""
  STAR_DIRECT_SETTLEMENT_LINK

  """Visa Direct Settlement Link Processing Network"""
  VISA_DIRECT_SETTLEMENT_LINK

  """Visa Singapore Direct Settlement Link Processing Network"""
  VISA_SINGAPORE_DIRECT_SETTLEMENT_LINK

  """Visa Processing Network"""
  VISA

  """Visa Direct Processing Network"""
  VISA_DIRECT

  """Primary Routing or Generic File Update"""
  PRIMARY_ROUTING_OR_GENERIC_FILE_UPDATE

  """NETS Processing Network"""
  NETS

  """CU24 Processing Network"""
  CU24

  """EBT POS Processing Network"""
  EBT_POS

  """EBT ATM Processing Network"""
  EBT_ATM

  """Alaska Option Processing Network"""
  ALASKA_OPTION

  """Discover ATM Processing Network"""
  DISCOVER_ATM
}

"""
The three character alpha codes for support countries.

See [ISO 3166](https://www.iso.org/iso-3166-country-codes.html)
"""
enum ISO3166Alpha3Country {
  """The country code for Afghanistan."""
  AFG

  """The country code for Åland Islands."""
  ALA

  """The country code for Albania."""
  ALB

  """The country code for Algeria."""
  DZA

  """The country code for American Samoa."""
  ASM

  """The country code for Andorra."""
  AND

  """The country code for Angola."""
  AGO

  """The country code for Anguilla."""
  AIA

  """The country code for Antarctica."""
  ATA

  """The country code for Antigua and Barbuda."""
  ATG

  """The country code for Argentina."""
  ARG

  """The country code for Armenia."""
  ARM

  """The country code for Aruba."""
  ABW

  """The country code for Australia."""
  AUS

  """The country code for Austria."""
  AUT

  """The country code for Azerbaijan."""
  AZE

  """The country code for Bahamas."""
  BHS

  """The country code for Bahrain."""
  BHR

  """The country code for Bangladesh."""
  BGD

  """The country code for Barbados."""
  BRB

  """The country code for Belarus."""
  BLR

  """The country code for Belgium."""
  BEL

  """The country code for Belize."""
  BLZ

  """The country code for Benin."""
  BEN

  """The country code for Bermuda."""
  BMU

  """The country code for Bhutan."""
  BTN

  """The country code for Bolivia (Plurinational State of)."""
  BOL

  """The country code for "Bonaire, Sint Eustatius and Saba"."""
  BES

  """The country code for Bosnia and Herzegovina."""
  BIH

  """The country code for Botswana."""
  BWA

  """The country code for Bouvet Island."""
  BVT

  """The country code for Brazil."""
  BRA

  """The country code for British Indian Ocean Territory."""
  IOT

  """The country code for Brunei Darussalam."""
  BRN

  """The country code for Bulgaria."""
  BGR

  """The country code for Burkina Faso."""
  BFA

  """The country code for Burundi."""
  BDI

  """The country code for Cabo Verde."""
  CPV

  """The country code for Cambodia."""
  KHM

  """The country code for Cameroon."""
  CMR

  """The country code for Canada."""
  CAN

  """The country code for Cayman Islands."""
  CYM

  """The country code for Central African Republic."""
  CAF

  """The country code for Chad."""
  TCD

  """The country code for Chile."""
  CHL

  """The country code for China."""
  CHN

  """The country code for Christmas Island."""
  CXR

  """The country code for Cocos (Keeling) Islands."""
  CCK

  """The country code for Colombia."""
  COL

  """The country code for Comoros."""
  COM

  """The country code for Congo."""
  COG

  """The country code for "Congo, Democratic Republic of the"."""
  COD

  """The country code for Cook Islands."""
  COK

  """The country code for Costa Rica."""
  CRI

  """The country code for Côte d'Ivoire."""
  CIV

  """The country code for Croatia."""
  HRV

  """The country code for Cuba."""
  CUB

  """The country code for Curaçao."""
  CUW

  """The country code for Cyprus."""
  CYP

  """The country code for Czechia."""
  CZE

  """The country code for Denmark."""
  DNK

  """The country code for Djibouti."""
  DJI

  """The country code for Dominica."""
  DMA

  """The country code for Dominican Republic."""
  DOM

  """The country code for Ecuador."""
  ECU

  """The country code for Egypt."""
  EGY

  """The country code for El Salvador."""
  SLV

  """The country code for Equatorial Guinea."""
  GNQ

  """The country code for Eritrea."""
  ERI

  """The country code for Estonia."""
  EST

  """The country code for Eswatini."""
  SWZ

  """The country code for Ethiopia."""
  ETH

  """The country code for Falkland Islands (Malvinas)."""
  FLK

  """The country code for Faroe Islands."""
  FRO

  """The country code for Fiji."""
  FJI

  """The country code for Finland."""
  FIN

  """The country code for France."""
  FRA

  """The country code for French Guiana."""
  GUF

  """The country code for French Polynesia."""
  PYF

  """The country code for French Southern Territories."""
  ATF

  """The country code for Gabon."""
  GAB

  """The country code for Gambia."""
  GMB

  """The country code for Georgia."""
  GEO

  """The country code for Germany."""
  DEU

  """The country code for Ghana."""
  GHA

  """The country code for Gibraltar."""
  GIB

  """The country code for Greece."""
  GRC

  """The country code for Greenland."""
  GRL

  """The country code for Grenada."""
  GRD

  """The country code for Guadeloupe."""
  GLP

  """The country code for Guam."""
  GUM

  """The country code for Guatemala."""
  GTM

  """The country code for Guernsey."""
  GGY

  """The country code for Guinea."""
  GIN

  """The country code for Guinea-Bissau."""
  GNB

  """The country code for Guyana."""
  GUY

  """The country code for Haiti."""
  HTI

  """The country code for Heard Island and McDonald Islands."""
  HMD

  """The country code for Holy See."""
  VAT

  """The country code for Honduras."""
  HND

  """The country code for Hong Kong."""
  HKG

  """The country code for Hungary."""
  HUN

  """The country code for Iceland."""
  ISL

  """The country code for India."""
  IND

  """The country code for Indonesia."""
  IDN

  """The country code for Iran (Islamic Republic of)."""
  IRN

  """The country code for Iraq."""
  IRQ

  """The country code for Ireland."""
  IRL

  """The country code for Isle of Man."""
  IMN

  """The country code for Israel."""
  ISR

  """The country code for Italy."""
  ITA

  """The country code for Jamaica."""
  JAM

  """The country code for Japan."""
  JPN

  """The country code for Jersey."""
  JEY

  """The country code for Jordan."""
  JOR

  """The country code for Kazakhstan."""
  KAZ

  """The country code for Kenya."""
  KEN

  """The country code for Kiribati."""
  KIR

  """The country code for Korea (Democratic People's Republic of)."""
  PRK

  """The country code for "Korea, Republic of"."""
  KOR

  """
  The country code for Kosovo. Note: "It is not ISO 3166 approved, but is approved by Visa and Mastercard"
  """
  QZZ

  """The country code for Kuwait."""
  KWT

  """The country code for Kyrgyzstan."""
  KGZ

  """The country code for Lao People's Democratic Republic."""
  LAO

  """The country code for Latvia."""
  LVA

  """The country code for Lebanon."""
  LBN

  """The country code for Lesotho."""
  LSO

  """The country code for Liberia."""
  LBR

  """The country code for Libya."""
  LBY

  """The country code for Liechtenstein."""
  LIE

  """The country code for Lithuania."""
  LTU

  """The country code for Luxembourg."""
  LUX

  """The country code for Macao."""
  MAC

  """The country code for Madagascar."""
  MDG

  """The country code for Malawi."""
  MWI

  """The country code for Malaysia."""
  MYS

  """The country code for Maldives."""
  MDV

  """The country code for Mali."""
  MLI

  """The country code for Malta."""
  MLT

  """The country code for Marshall Islands."""
  MHL

  """The country code for Martinique."""
  MTQ

  """The country code for Mauritania."""
  MRT

  """The country code for Mauritius."""
  MUS

  """The country code for Mayotte."""
  MYT

  """The country code for Mexico."""
  MEX

  """The country code for Micronesia (Federated States of)."""
  FSM

  """The country code for "Moldova, Republic of"."""
  MDA

  """The country code for Monaco."""
  MCO

  """The country code for Mongolia."""
  MNG

  """The country code for Montenegro."""
  MNE

  """The country code for Montserrat."""
  MSR

  """The country code for Morocco."""
  MAR

  """The country code for Mozambique."""
  MOZ

  """The country code for Myanmar."""
  MMR

  """The country code for Namibia."""
  NAM

  """The country code for Nauru."""
  NRU

  """The country code for Nepal."""
  NPL

  """The country code for Netherlands."""
  NLD

  """The country code for New Caledonia."""
  NCL

  """The country code for New Zealand."""
  NZL

  """The country code for Nicaragua."""
  NIC

  """The country code for Niger."""
  NER

  """The country code for Nigeria."""
  NGA

  """The country code for Niue."""
  NIU

  """The country code for Norfolk Island."""
  NFK

  """The country code for North Macedonia."""
  MKD

  """The country code for Northern Mariana Islands."""
  MNP

  """The country code for Norway."""
  NOR

  """The country code for Oman."""
  OMN

  """The country code for Pakistan."""
  PAK

  """The country code for Palau."""
  PLW

  """The country code for "Palestine, State of"."""
  PSE

  """The country code for Panama."""
  PAN

  """The country code for Papua New Guinea."""
  PNG

  """The country code for Paraguay."""
  PRY

  """The country code for Peru."""
  PER

  """The country code for Philippines."""
  PHL

  """The country code for Pitcairn."""
  PCN

  """The country code for Poland."""
  POL

  """The country code for Portugal."""
  PRT

  """The country code for Puerto Rico."""
  PRI

  """The country code for Qatar."""
  QAT

  """The country code for Réunion."""
  REU

  """The country code for Romania."""
  ROU

  """The country code for Russian Federation."""
  RUS

  """The country code for Rwanda."""
  RWA

  """The country code for Saint Barthélemy."""
  BLM

  """The country code for "Saint Helena, Ascension and Tristan da Cunha"."""
  SHN

  """The country code for Saint Kitts and Nevis."""
  KNA

  """The country code for Saint Lucia."""
  LCA

  """The country code for Saint Martin (French part)."""
  MAF

  """The country code for Saint Pierre and Miquelon."""
  SPM

  """The country code for Saint Vincent and the Grenadines."""
  VCT

  """The country code for Samoa."""
  WSM

  """The country code for San Marino."""
  SMR

  """The country code for Sao Tome and Principe."""
  STP

  """The country code for Saudi Arabia."""
  SAU

  """The country code for Senegal."""
  SEN

  """The country code for Serbia."""
  SRB

  """The country code for Seychelles."""
  SYC

  """The country code for Sierra Leone."""
  SLE

  """The country code for Singapore."""
  SGP

  """The country code for Sint Maarten (Dutch part)."""
  SXM

  """The country code for Slovakia."""
  SVK

  """The country code for Slovenia."""
  SVN

  """The country code for Solomon Islands."""
  SLB

  """The country code for Somalia."""
  SOM

  """The country code for South Africa."""
  ZAF

  """The country code for South Georgia and the South Sandwich Islands."""
  SGS

  """The country code for South Sudan."""
  SSD

  """The country code for Spain."""
  ESP

  """The country code for Sri Lanka."""
  LKA

  """The country code for Sudan."""
  SDN

  """The country code for Suriname."""
  SUR

  """The country code for Svalbard and Jan Mayen."""
  SJM

  """The country code for Sweden."""
  SWE

  """The country code for Switzerland."""
  CHE

  """The country code for Syrian Arab Republic."""
  SYR

  """The country code for "Taiwan, Province of China"."""
  TWN

  """The country code for Tajikistan."""
  TJK

  """The country code for "Tanzania, United Republic of"."""
  TZA

  """The country code for Thailand."""
  THA

  """The country code for Timor-Leste."""
  TLS

  """The country code for Togo."""
  TGO

  """The country code for Tokelau."""
  TKL

  """The country code for Tonga."""
  TON

  """The country code for Trinidad and Tobago."""
  TTO

  """The country code for Tunisia."""
  TUN

  """The country code for Turkey."""
  TUR

  """The country code for Turkmenistan."""
  TKM

  """The country code for Turks and Caicos Islands."""
  TCA

  """The country code for Tuvalu."""
  TUV

  """The country code for Uganda."""
  UGA

  """The country code for Ukraine."""
  UKR

  """The country code for United Arab Emirates."""
  ARE

  """
  The country code for United Kingdom of Great Britain and Northern Ireland.
  """
  GBR

  """The country code for United States of America."""
  USA

  """The country code for United States Minor Outlying Islands."""
  UMI

  """The country code for Uruguay."""
  URY

  """The country code for Uzbekistan."""
  UZB

  """The country code for Vanuatu."""
  VUT

  """The country code for Venezuela (Bolivarian Republic of)."""
  VEN

  """The country code for Viet Nam."""
  VNM

  """The country code for Virgin Islands (British)."""
  VGB

  """The country code for Virgin Islands (U.S.)."""
  VIR

  """The country code for Wallis and Futuna."""
  WLF

  """The country code for Western Sahara."""
  ESH

  """The country code for Yemen."""
  YEM

  """The country code for Zambia."""
  ZMB

  """The country code for Zimbabwe."""
  ZWE
}

"""The supported currencies on the Highnote platform."""
enum ISO4217Alpha3SupportedCurrency {
  """The code for US Dollar."""
  USD
}

"""All currency codes for ISO4217."""
enum ISO4217Alpha3CurrencyCode {
  """The code for Account (convertible Peseta Account)."""
  ESB

  """The code for ADB Unit of Account."""
  XUA

  """The code for Afghani."""
  AFA

  """The code for Afghani."""
  AFN

  """The code for Algerian Dinar."""
  DZD

  """The code for Andorran Peseta."""
  ADP

  """The code for Argentine Peso."""
  ARS

  """The code for Armenian Dram."""
  AMD

  """The code for Aruban Florin."""
  AWG

  """The code for Austral."""
  ARA

  """The code for Australian Dollar."""
  AUD

  """The code for Azerbaijan Manat."""
  AYM

  """The code for Azerbaijan Manat."""
  AZN

  """The code for Azerbaijanian Manat."""
  AZM

  """The code for Bahamian Dollar."""
  BSD

  """The code for Bahraini Dinar."""
  BHD

  """The code for Baht."""
  THB

  """The code for Balboa."""
  PAB

  """The code for Barbados Dollar."""
  BBD

  """The code for Belarusian Ruble."""
  BYB

  """The code for Belarusian Ruble."""
  BYN

  """The code for Belarusian Ruble."""
  BYR

  """The code for Belgian Franc."""
  BEF

  """The code for Belize Dollar."""
  BZD

  """The code for Bermudian Dollar."""
  BMD

  """The code for Bolívar Soberano."""
  VES

  """The code for Bolivar."""
  VEB

  """The code for Bolivar."""
  VEF

  """The code for Boliviano."""
  BOB

  """The code for Bond Markets Unit European Composite Unit (EURCO)."""
  XBA

  """The code for Bond Markets Unit European Monetary Unit (E.M.U.-6)."""
  XBB

  """
  The code for Bond Markets Unit European Unit of Account 17 (E.U.A.-17).
  """
  XBD

  """The code for Bond Markets Unit European Unit of Account 9 (E.U.A.-9)."""
  XBC

  """The code for Brazilian Real."""
  BRL

  """The code for Brunei Dollar."""
  BND

  """The code for Bulgarian Lev."""
  BGN

  """The code for Burundi Franc."""
  BIF

  """The code for CFA Franc BCEAO."""
  XOF

  """The code for CFA Franc BEAC."""
  XAF

  """The code for CFP Franc."""
  XPF

  """The code for Cabo Verde Escudo."""
  CVE

  """The code for Canadian Dollar."""
  CAD

  """The code for Cayman Islands Dollar."""
  KYD

  """The code for Cedi."""
  GHC

  """The code for Chilean Peso."""
  CLP

  """The code for Codes specifically reserved for testing purposes."""
  XTS

  """The code for Colombian Peso."""
  COP

  """The code for Comorian Franc ."""
  KMF

  """The code for Congolese Franc."""
  CDF

  """The code for Convertible Franc."""
  BEC

  """The code for Convertible Mark."""
  BAM

  """The code for Cordoba Oro."""
  NIO

  """The code for Cordoba."""
  NIC

  """The code for Costa Rican Colon."""
  CRC

  """The code for Croatian Dinar."""
  HRD

  """The code for Croatian Kuna."""
  HRK

  """The code for Cruzado."""
  BRC

  """The code for Cruzeiro Real."""
  BRR

  """The code for Cruzeiro."""
  BRB

  """The code for Cruzeiro."""
  BRE

  """The code for Cuban Peso."""
  CUP

  """The code for Cyprus Pound."""
  CYP

  """The code for Czech Koruna."""
  CZK

  """The code for Dalasi."""
  GMD

  """The code for Danish Krone."""
  DKK

  """The code for Denar."""
  MKD

  """The code for Deutsche Mark."""
  DEM

  """The code for Dinar."""
  BAD

  """The code for Djibouti Franc."""
  DJF

  """The code for Dobra."""
  STD

  """The code for Dobra."""
  STN

  """The code for Dominican Peso."""
  DOP

  """The code for Dong."""
  VND

  """The code for Drachma."""
  GRD

  """The code for East Caribbean Dollar."""
  XCD

  """The code for Egyptian Pound."""
  EGP

  """The code for Ekwele."""
  GQE

  """The code for El Salvador Colon."""
  SVC

  """The code for Ethiopian Birr."""
  ETB

  """The code for Euro."""
  EUR

  """The code for European Currency Unit (E.C.U)."""
  XEU

  """The code for Falkland Islands Pound."""
  FKP

  """The code for Fiji Dollar."""
  FJD

  """The code for Financial Franc."""
  BEL

  """The code for Financial Rand."""
  ZAL

  """The code for Forint."""
  HUF

  """The code for French Franc."""
  FRF

  """The code for Georgian Coupon."""
  GEK

  """The code for Ghana Cedi."""
  GHP

  """The code for Ghana Cedi."""
  GHS

  """The code for Gibraltar Pound."""
  GIP

  """The code for Gold."""
  XAU

  """The code for Gold-Franc."""
  XFO

  """The code for Gourde."""
  HTG

  """The code for Guarani."""
  PYG

  """The code for Guinea Escudo."""
  GWE

  """The code for Guinea-Bissau Peso."""
  GWP

  """The code for Guinean Franc."""
  GNF

  """The code for Guyana Dollar."""
  GYD

  """The code for Hong Kong Dollar."""
  HKD

  """The code for Hryvnia."""
  UAH

  """The code for Iceland Krona."""
  ISK

  """The code for Indian Rupee."""
  INR

  """The code for Inti."""
  PEI

  """The code for Iranian Rial."""
  IRR

  """The code for Iraqi Dinar."""
  IQD

  """The code for Irish Pound."""
  IEP

  """The code for Italian Lira."""
  ITL

  """The code for Jamaican Dollar."""
  JMD

  """The code for Jordanian Dinar."""
  JOD

  """The code for Karbovanet."""
  UAK

  """The code for Kenyan Shilling."""
  KES

  """The code for Kina."""
  PGK

  """The code for Koruna."""
  CSK

  """The code for Krona A/53."""
  CSJ

  """The code for Kroon."""
  EEK

  """The code for Kuwaiti Dinar."""
  KWD

  """The code for Kwacha."""
  MWK

  """The code for Kwanza Reajustado."""
  AOR

  """The code for Kwanza."""
  AOA

  """The code for Kwanza."""
  AOK

  """The code for Kyat."""
  BUK

  """The code for Kyat."""
  MMK

  """The code for Lao Kip."""
  LAK

  """The code for Lari."""
  GEL

  """The code for Latvian Lats."""
  LVL

  """The code for Latvian Ruble."""
  LVR

  """The code for Lebanese Pound."""
  LBP

  """The code for Lek."""
  ALL

  """The code for Lempira."""
  HNL

  """The code for Leone."""
  SLL

  """The code for Leu A/52."""
  ROK

  """The code for Lev A/52."""
  BGJ

  """The code for Lev A/62."""
  BGK

  """The code for Lev."""
  BGL

  """The code for Liberian Dollar."""
  LRD

  """The code for Libyan Dinar."""
  LYD

  """The code for Lilangeni."""
  SZL

  """The code for Lithuanian Litas."""
  LTL

  """The code for Loti."""
  LSL

  """The code for Loti."""
  LSM

  """The code for Luxembourg Convertible Franc."""
  LUC

  """The code for Luxembourg Financial Franc."""
  LUL

  """The code for Luxembourg Franc."""
  LUF

  """The code for Malagasy Ariary."""
  MGA

  """The code for Malagasy Franc."""
  MGF

  """The code for Malaysian Ringgit."""
  MYR

  """The code for Maldive Rupee."""
  MVQ

  """The code for Mali Franc."""
  MLF

  """The code for Maltese Lira."""
  MTL

  """The code for Maltese Pound."""
  MTP

  """The code for Mark der DDR."""
  DDM

  """The code for Markka."""
  FIM

  """The code for Mauritius Rupee."""
  MUR

  """The code for Mexican Peso."""
  MXN

  """The code for Mexican Peso."""
  MXP

  """The code for Mexican Unidad de Inversion (UDI)."""
  MXV

  """The code for Moldovan Leu."""
  MDL

  """The code for Moroccan Dirham."""
  MAD

  """The code for Mozambique Escudo."""
  MZE

  """The code for Mozambique Metical."""
  MZM

  """The code for Mozambique Metical."""
  MZN

  """The code for Mvdol."""
  BOV

  """The code for Naira."""
  NGN

  """The code for Nakfa."""
  ERN

  """The code for Namibia Dollar."""
  NAD

  """The code for Nepalese Rupee."""
  NPR

  """The code for Netherlands Antillean Guilder."""
  ANG

  """The code for Netherlands Guilder."""
  NLG

  """The code for New Cruzado."""
  BRN

  """The code for New Dinar."""
  YUM

  """The code for New Israeli Sheqel."""
  ILS

  """The code for New Kwanza."""
  AON

  """The code for Romanian Leu."""
  RON

  """The code for New Taiwan Dollar."""
  TWD

  """The code for New Yugoslavian Dinar."""
  YUD

  """The code for New Zaire."""
  ZRN

  """The code for New Zealand Dollar."""
  NZD

  """The code for Ngultrum."""
  BTN

  """The code for North Korean Won."""
  KPW

  """The code for Norwegian Krone."""
  NOK

  """The code for Old Dong."""
  VNC

  """The code for Old Krona."""
  ISJ

  """The code for Old Lek."""
  ALK

  """The code for Old Leu."""
  ROL

  """The code for Old Shekel."""
  ILR

  """The code for Old Shilling."""
  UGW

  """The code for Old Turkish Lira."""
  TRL

  """The code for Old Uruguay Peso."""
  UYN

  """The code for Ouguiya."""
  MRO

  """The code for Ouguiya."""
  MRU

  """The code for Pa'anga."""
  TOP

  """The code for Pakistan Rupee."""
  PKR

  """The code for Palladium."""
  XPD

  """The code for Pataca."""
  MOP

  """The code for Pathet Lao Kip."""
  LAJ

  """The code for Peso Argentino."""
  ARP

  """The code for Peso Convertible."""
  CUC

  """The code for Peso Uruguayo."""
  UYU

  """The code for Peso boliviano."""
  BOP

  """The code for Peso."""
  ARY

  """The code for Philippine Peso."""
  PHP

  """The code for Platinum."""
  XPT

  """The code for Portuguese Escudo."""
  PTE

  """The code for Pound Sterling."""
  GBP

  """The code for Pound."""
  ILP

  """The code for Pula."""
  BWP

  """The code for Qatari Rial."""
  QAR

  """The code for Quetzal."""
  GTQ

  """The code for RINET Funds Code."""
  XRE

  """The code for Rand."""
  ZAR

  """The code for Rhodesian Dollar."""
  RHD

  """The code for Rhodesian Dollar."""
  ZWC

  """The code for Rial Omani."""
  OMR

  """The code for Riel."""
  KHR

  """The code for Rouble."""
  SUR

  """The code for Rufiyaa."""
  MVR

  """The code for Rupiah."""
  IDR

  """The code for Russian Ruble."""
  RUB

  """The code for Russian Ruble."""
  RUR

  """The code for Rwanda Franc."""
  RWF

  """The code for SDR (Special Drawing Right)."""
  XDR

  """The code for Saint Helena Pound."""
  SHP

  """The code for Saudi Riyal."""
  SAR

  """The code for Schilling."""
  ATS

  """The code for Serbian Dinar."""
  CSD

  """The code for Serbian Dinar."""
  RSD

  """The code for Seychelles Rupee."""
  SCR

  """The code for Silver."""
  XAG

  """The code for Singapore Dollar."""
  SGD

  """The code for Slovak Koruna."""
  SKK

  """The code for Sol."""
  PEH

  """The code for Sol."""
  PEN

  """The code for Sol."""
  PES

  """The code for Solomon Islands Dollar."""
  SBD

  """The code for Som."""
  KGS

  """The code for Somali Shilling."""
  SOS

  """The code for Somoni."""
  TJS

  """The code for South Sudanese Pound."""
  SSP

  """The code for Spanish Peseta."""
  ESA

  """The code for Spanish Peseta."""
  ESP

  """The code for Sri Lanka Rupee."""
  LKR

  """The code for Sucre."""
  ECS

  """The code for Sucre."""
  XSU

  """The code for Sudanese Dinar."""
  SDD

  """The code for Sudanese Pound."""
  SDG

  """The code for Sudanese Pound."""
  SDP

  """The code for Surinam Dollar."""
  SRD

  """The code for Surinam Guilder."""
  SRG

  """The code for Swedish Krona."""
  SEK

  """The code for Swiss Franc."""
  CHF

  """The code for Syli."""
  GNE

  """The code for Syli."""
  GNS

  """The code for Syrian Pound."""
  SYP

  """The code for Tajik Ruble."""
  TJR

  """The code for Taka."""
  BDT

  """The code for Tala."""
  WST

  """The code for Talonas."""
  LTT

  """The code for Tanzanian Shilling."""
  TZS

  """The code for Tenge."""
  KZT

  """
  The code for The codes assigned for transactions where no currency is involved.
  """
  XXX

  """The code for Timor Escudo."""
  TPE

  """The code for Tolar."""
  SIT

  """The code for Trinidad and Tobago Dollar."""
  TTD

  """The code for Tugrik."""
  MNT

  """The code for Tunisian Dinar."""
  TND

  """The code for Turkish Lira."""
  TRY

  """The code for Turkmenistan Manat."""
  TMM

  """The code for Turkmenistan New Manat."""
  TMT

  """The code for UAE Dirham."""
  AED

  """The code for UIC-Franc."""
  XFU

  """The code for US Dollar (Next day)."""
  USN

  """The code for US Dollar (Same day)."""
  USS

  """The code for US Dollar."""
  USD

  """The code for Uganda Shilling."""
  UGS

  """The code for Uganda Shilling."""
  UGX

  """The code for Unidad Previsional."""
  UYW

  """The code for Unidad de Fomento."""
  CLF

  """The code for Unidad de Valor Constante (UVC)."""
  ECV

  """The code for Unidad de Valor Real."""
  COU

  """The code for Uruguay Peso en Unidades Indexadas (UI)."""
  UYI

  """The code for Uruguayan Peso."""
  UYP

  """The code for Uzbekistan Sum."""
  UZS

  """The code for Vatu."""
  VUV

  """The code for WIR Euro."""
  CHE

  """The code for WIR Franc (for electronic)."""
  CHC

  """The code for WIR Franc."""
  CHW

  """The code for Won."""
  KRW

  """The code for Yemeni Dinar."""
  YDD

  """The code for Yemeni Rial."""
  YER

  """The code for Yen."""
  JPY

  """The code for Yuan Renminbi."""
  CNY

  """The code for Yugoslavian Dinar."""
  YUN

  """The code for Zaire."""
  ZRZ

  """The code for Zambian Kwacha."""
  ZMK

  """The code for Zambian Kwacha."""
  ZMW

  """The code for Zimbabwe Dollar (new)."""
  ZWN

  """The code for Zimbabwe Dollar."""
  ZWD

  """The code for Zimbabwe Dollar."""
  ZWL

  """The code for Zimbabwe Dollar."""
  ZWR

  """The code for Zloty."""
  PLN

  """The code for Zloty."""
  PLZ
}

"""Types which can be returned for ordering a payment card."""
union OrderPhysicalPaymentCardPayload = PhysicalPaymentCardOrder | UserError | AccessDeniedError

"""
Types which can be returned for simulating physical payment card orders
"""
union SimulatePhysicalPaymentCardPayload = PhysicalPaymentCardOrder | UserError | AccessDeniedError

"""
Input fields allowing an external fulfillment vendor to log an External Physical Payment Card Order and provide additional payment instrument details.
"""
input CreateExternalPhysicalPaymentCardOrderInput {
  """Payment Card ID"""
  paymentCardId: ID!

  """Embedded Device information"""
  embeddedDevice: EmbeddedDeviceInformationInput

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!
}

"""Embedded Device information Input"""
input EmbeddedDeviceInformationInput {
  """URL to image of the device"""
  image: String

  """Device name"""
  name: String

  """Serial number"""
  serialNumber: String!

  """Device variant"""
  variant: String
}

"""Input fields for simulating sending to printer"""
input SimulatePhysicalPaymentCardSendToPrinterInput {
  """Physical Payment Card ID"""
  physicalPaymentCardOrderId: ID!
}

"""Input fields for simulating approval"""
input SimulatePhysicalPaymentCardApprovalInput {
  """Physical Payment Card ID"""
  physicalPaymentCardOrderId: ID!
}

"""Input fields for simulating shipment failed"""
input SimulatePhysicalPaymentCardShipmentFailedInput {
  """Physical Payment Card ID"""
  physicalPaymentCardOrderId: ID!
}

"""Input fields for simulating shipped"""
input SimulatePhysicalPaymentCardShippedInput {
  """Physical Payment Card ID"""
  physicalPaymentCardOrderId: ID!

  """
  Tracking number
  
  **Maximum length:** 50 characters
  """
  trackingNumber: String

  """Actual ship date in YYYY-MM-DD format."""
  actualShipDate: String
}

"""Input fields for ordering a payment card."""
input OrderPhysicalPaymentCardInput {
  """Id of the payment card."""
  paymentCardId: ID!

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetailsInput!

  """Card personalization."""
  cardPersonalization: PaymentCardPersonalizationInput!

  """Courier information."""
  courier: PaymentCardShipmentCourierInput

  """
  Requested ship date in YYYY-MM-DD format.
  
  Use this if the fulfillment should not happen before a certain date.
  
  If the card should be shipped as soon as possible, omit this field. If the date provided is in the past, the value will be ignored.
  """
  requestedShipDate: String
}

"""Input fields for ordering a payment card with validated address."""
input OrderPhysicalPaymentCardWithValidatedAddressInput {
  """Id of the payment card."""
  paymentCardId: ID!

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetailsWithValidatedAddressInput!

  """Card personalization."""
  cardPersonalization: PaymentCardPersonalizationInput!

  """Courier information."""
  courier: PaymentCardShipmentCourierInput

  """
  Requested ship date in YYYY-MM-DD format.
  
  Use this if the fulfillment should not happen before a certain date.
  
  If the card should be shipped as soon as possible, omit this field. If the date provided is in the past, the value will be ignored.
  """
  requestedShipDate: String

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!
}

"""Input fields for ordering a payment card with validated address token."""
input OrderPhysicalPaymentCardWithValidatedAddressTokenInput {
  """Id of the payment card."""
  paymentCardId: ID!

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetailsWithValidatedAddressInput!

  """Card personalization."""
  cardPersonalization: PaymentCardPersonalizationInput!

  """Courier information."""
  courier: PaymentCardShipmentCourierInput

  """
  Requested ship date in YYYY-MM-DD format.
  
  Use this if the fulfillment should not happen before a certain date.
  
  If the card should be shipped as soon as possible, omit this field. If the date provided is in the past, the value will be ignored.
  """
  requestedShipDate: String

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!
}

"""
Types which can be returned for canceling a physical payment card order
"""
union CancelPhysicalPaymentCardPayload = PhysicalPaymentCardOrder | UserError | AccessDeniedError

"""Input fields for canceling an order for a physical payment card"""
input CancelPhysicalPaymentCardOrderInput {
  """Physical Payment Card ID"""
  physicalPaymentCardOrderId: ID!
}

"""A created PhysicalPaymentCardOrder."""
type PhysicalPaymentCardOrder implements Node {
  """Global ID used to reference the PaymentCardShipment in operations."""
  id: ID!

  """Payment card shipment"""
  paymentCardShipment: PaymentCardShipment

  """Order state details."""
  orderState: PaymentCardOrderStateDetail

  """Card personalization."""
  cardPersonalization: PaymentCardPersonalization

  """Fulfillment state detail history."""
  stateHistory: [PaymentCardOrderStateDetailHistory]

  """Payment card details."""
  paymentCard: PaymentCard

  """Physical card group order details"""
  groupOrder: PhysicalCardGroupOrder

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was created at.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was last updated.
  """
  updatedAt: String
}

"""PaymentCardShipment"""
type PaymentCardShipment {
  """Courier information."""
  courier: PaymentCardShipmentCourier

  """Requested ship date in YYYY-MM-DD format."""
  requestedShipDate: String

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetails

  """Sender details."""
  senderDetails: PaymentCardDeliveryDetails
}

"""The details of the delivery."""
input PaymentCardDeliveryDetailsInput {
  """The name of a person to whom the shipment should be delivered."""
  name: NameInput!

  """The company to whom the shipment should be delivered."""
  companyName: String

  """The address to where the shipment should be delivered."""
  address: AddressInput!
}

"""The details of the delivery."""
input PaymentCardDeliveryDetailsWithValidatedAddressInput {
  """The name of a person to whom the shipment should be delivered."""
  name: NameInput!

  """The company to whom the shipment should be delivered."""
  companyName: String

  """The ID of validated address to where the shipment should be delivered."""
  validatedAddressId: ID!
}

"""The details of the delivery."""
type PaymentCardDeliveryDetails {
  """The name of a person to whom the shipment should be delivered."""
  name: Name

  """The company to whom the shipment should be delivered."""
  companyName: String

  """The address to where the shipment should be delivered."""
  address: Address

  """The ID of validated address to where the shipment should be delivered."""
  validatedAddress: ValidatedAddress
}

"""The details specifying the shipment."""
input PaymentCardShipmentCourierInput {
  """Shipping method."""
  method: PaymentCardShippingMethod!

  """Whether signature is required on delivery."""
  signatureRequiredOnDelivery: Boolean!
}

"""The details of the shipment."""
type PaymentCardShipmentCourier {
  """Shipping method."""
  method: PaymentCardShippingMethod

  """Whether signature is required on delivery."""
  signatureRequiredOnDelivery: Boolean

  """Tracking information."""
  tracking: PaymentCardShipmentTracking
}

"""PaymentCardShipmentTracking"""
type PaymentCardShipmentTracking {
  """Shipment tracking number."""
  trackingNumber: String

  """Actual ship date in YYYY-MM-DD format provided by the shipper."""
  actualShipDateLocal: String
}

"""Payment card personalization input."""
input PaymentCardPersonalizationInput {
  """Personalization text lines."""
  textLines: PaymentCardPersonalizationTextLinesInput!
}

"""Payment card personalization text lines input."""
input PaymentCardPersonalizationTextLinesInput {
  """
  First line.
  
  The value provided will be stored and returned fully capitalized.
  
  For example, `Jane` will be stored as `JANE`.
  
  Minimum length is 1 and maximum length is 23. Valid characters are all alphanumeric characters, `,`,
  `.`, `'`, `&`, `-`, `\`, `$`, and space. The regex used to validate is `^[0-9A-Za-z \&\-\,\.\/\'\$]*$`.
  """
  line1: String!

  """
  Second line.
  
  The value provided will be stored and returned fully capitalized.
  
  For example, `Jane` will be stored as `JANE`.
  
  Minimum length is 1 and maximum length is 23. Valid characters are all alphanumeric characters, `,`,
  `.`, `'`, `&`, `-`, `\`, `$`, and space. The regex used to validate is `^[0-9A-Za-z \&\-\,\.\/\'\$]*$`.
  """
  line2: String
}

"""Payment card personalization text lines."""
type PaymentCardPersonalizationTextLines {
  """
  First line.
  
  This value will always be capitalized.
  
  Example: `"JANE"`, `"BOB"`
  """
  line1: String!

  """
  Second line.
  
  This value will always be capitalized.
  
  Example: `"FOO"`
  """
  line2: String
}

"""Payment card personalization."""
type PaymentCardPersonalization {
  """Personalization text lines."""
  textLines: PaymentCardPersonalizationTextLines!
}

"""Payment card order status detail."""
type PaymentCardOrderStateDetail {
  """Current order status."""
  status: PaymentCardOrderStatus
}

"""Payment card order date detail history."""
type PaymentCardOrderStateDetailHistory {
  """Previous order status."""
  previousStatus: PaymentCardOrderStatus

  """New order status."""
  newStatus: PaymentCardOrderStatus

  """The date and time, in ISO 8601 format the status changed."""
  createdAt: String
}

"""
PhysicalPaymentCardShippedEvent indicates when a Physical Payment Card has shipped successfully
"""
type PhysicalPaymentCardShippedEvent implements Node {
  """Global ID used to reference the PaymentCardShipment in operations."""
  id: ID!

  """Order state details."""
  orderState: PaymentCardOrderStateDetail

  """Payment card ID."""
  paymentCardId: ID

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was created at.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was last updated.
  """
  updatedAt: String
}

"""
PhysicalPaymentCardShipFailedEvent indicates when a Physical Payment Card has failed to ship
"""
type PhysicalPaymentCardShipFailedEvent implements Node {
  """Global ID used to reference the PaymentCardShipment in operations."""
  id: ID!

  """Order state details."""
  orderState: PaymentCardOrderStateDetail

  """Payment card ID."""
  paymentCardId: ID

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was created at.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was last updated.
  """
  updatedAt: String
}

"""
PhysicalPaymentCardGroupOrderShippedEvent indicates when a Physical Payment Card Group Order has shipped successfully
"""
type PhysicalPaymentCardGroupOrderShippedEvent implements Node {
  """
  Global ID used to reference the PhysicalPaymentCardGroupOrder in operations.
  """
  id: ID!

  """Order state details."""
  groupOrderState: PaymentCardGroupOrderStateDetail

  """Card product ID."""
  cardProductId: ID

  """Number of cards in the group order"""
  cardCount: UnsignedInt

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was created at.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was last updated.
  """
  updatedAt: String
}

"""
PhysicalPaymentCardGroupOrderShipFailedEvent indicates when a Physical Payment Card Group Order has failed to ship
"""
type PhysicalPaymentCardGroupOrderShipFailedEvent implements Node {
  """
  Global ID used to reference the PhysicalPaymentCardGroupOrder in operations.
  """
  id: ID!

  """Order state details."""
  groupOrderState: PaymentCardGroupOrderStateDetail

  """Card product ID."""
  cardProductId: ID

  """Number of cards in the group order"""
  cardCount: UnsignedInt

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was created at.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was last updated.
  """
  updatedAt: String
}

"""Input fields for creating a physical card group order."""
input CreatePhysicalCardGroupOrderInput {
  """Id of the product with which the group order will be associated."""
  cardProductId: ID!

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetailsInput!

  """Courier information."""
  courier: PaymentCardShipmentCourierInput

  """
  Requested ship date in YYYY-MM-DD format.
  
  Use this if the order should not be shipped before a certain date.
  
  If the order should be shipped as soon as possible, omit this field. If the date provided is in the past, the value will be ignored.
  """
  requestedShipDate: String

  """
  ID of the `CardProfileSet` to be used for the physical card group order.
  """
  cardProfileSetId: ID
}

"""
Input fields for creating a physical card group order with validated address.
"""
input CreatePhysicalCardGroupOrderWithValidatedAddressInput {
  """Id of the product with which the group order will be associated."""
  cardProductId: ID!

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetailsWithValidatedAddressInput!

  """Courier information."""
  courier: PaymentCardShipmentCourierInput

  """
  Requested ship date in YYYY-MM-DD format.
  
  Use this if the order should not be shipped before a certain date.
  
  If the order should be shipped as soon as possible, omit this field. If the date provided is in the past, the value will be ignored.
  """
  requestedShipDate: String

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!

  """
  ID of the `CardProfileSet` to be used for the physical card group order.
  """
  cardProfileSetId: ID
}

"""
Input fields for creating a physical card group order with validated address token.
"""
input CreatePhysicalCardGroupOrderWithValidatedAddressTokenInput {
  """Id of the product with which the group order will be associated."""
  cardProductId: ID!

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetailsWithValidatedAddressInput!

  """Courier information."""
  courier: PaymentCardShipmentCourierInput

  """
  Requested ship date in YYYY-MM-DD format.
  
  Use this if the order should not be shipped before a certain date.
  
  If the order should be shipped as soon as possible, omit this field. If the date provided is in the past, the value will be ignored.
  """
  requestedShipDate: String

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!

  """
  ID of the `CardProfileSet` to be used for the physical card group order.
  """
  cardProfileSetId: ID
}

"""Input fields for ordering a payment card."""
input OrderPhysicalPaymentCardForGroupInput {
  """Id of the payment card."""
  paymentCardId: ID!

  """Id of the group order."""
  groupOrderId: ID!

  """Delivery details."""
  deliveryDetails: PaymentCardDeliveryDetailsInput

  """Card personalization."""
  cardPersonalization: PaymentCardPersonalizationInput!
}

"""Input fields for completing a physical card group order."""
input CompletePhysicalCardGroupOrderInput {
  """Id of the group order."""
  groupOrderId: ID!
}

"""Input fields for canceling a physical card group order."""
input CancelPhysicalCardGroupOrderInput {
  """Id of the group order."""
  groupOrderId: ID!
}

"""Input fields for simulating sending to printer"""
input SimulatePhysicalCardGroupOrderSendToPrinterInput {
  """Id of the group order."""
  groupOrderId: ID!
}

"""Input fields for simulating approval"""
input SimulatePhysicalCardGroupOrderApprovalInput {
  """Id of the group order."""
  groupOrderId: ID!
}

"""Input fields for simulating shipment failed"""
input SimulatePhysicalCardGroupOrderShipmentFailedInput {
  """Id of the group order."""
  groupOrderId: ID!
}

"""Input fields for simulating shipped"""
input SimulatePhysicalCardGroupOrderShippedInput {
  """Id of the group order."""
  groupOrderId: ID!

  """
  Tracking number
  
  **Maximum length:** 50 characters
  """
  trackingNumber: String

  """Actual ship date in YYYY-MM-DD format."""
  actualShipDate: String
}

"""Inputs for filtering PhysicalPaymentCardOrders."""
input PhysicalPaymentCardOrderFilterInput {
  """Input to filter by physical payment card order ID"""
  physicalPaymentCardOrderId: IDFilterInput

  """Input to filter by card product ID."""
  cardProductId: IDFilterInput

  """Input to filter by physical payment card order status."""
  paymentCardOrderStatus: PaymentCardOrderStatusFilterInput

  """Input to filter by shipping method."""
  shippingMethod: PaymentCardShippingMethodFilterInput

  """Input to filter by physical card group order ID."""
  groupOrderId: IDFilterInput

  """Input to filter based on payment card details."""
  paymentCardFilterBy: PaymentCardFilterInput

  """Input to filter by physical payment card order creation date."""
  createdAt: TimestampFilterInput

  """
  Input to filter by physical payment card order actual shipping date.
  Actual ship date should be provided in YYYY-MM-DD format.
  """
  actualShipDateLocal: DateFilterInput
}

"""Inputs for filtering based on `PaymentCard` details."""
input PaymentCardFilterInput {
  """Input to filter by payment card ID"""
  paymentCardId: IDFilterInput

  """Input to filter by payment card bank identification number."""
  bin: StringFilterInput

  """Input to filter by last 4 digits of payment card number."""
  last4: StringFilterInput

  """Input to filter by payment card status."""
  paymentCardStatus: PaymentCardStatusFilterInput

  """
  Input to filter by first line of personalization on physical payment card.
  """
  paymentCardPersonalizationLine1: StringFilterInput

  """
  Input to filter by second line of personalization on physical payment card.
  """
  paymentCardPersonalizationLine2: StringFilterInput

  """Input to filter by card profile set ID."""
  cardProfileSetId: IDFilterInput

  """Input to filter by account holder ID."""
  accountHolderId: IDFilterInput

  """Input to filter by payment card holder ID."""
  paymentCardHolderId: IDFilterInput
}

"""Input for filtering by `PaymentCardShippingMethod`"""
input PaymentCardShippingMethodFilterInput {
  equals: PaymentCardShippingMethod
  notEquals: PaymentCardShippingMethod
  includes: [PaymentCardShippingMethod!]
  excludes: [PaymentCardShippingMethod!]
}

"""Input for filtering by `PaymentCardOrderStatus`."""
input PaymentCardOrderStatusFilterInput {
  equals: PaymentCardOrderStatus
  notEquals: PaymentCardOrderStatus
  includes: [PaymentCardOrderStatus!]
  excludes: [PaymentCardOrderStatus!]
}

"""Inputs for filtering physical payment card group orders."""
input PhysicalCardGroupOrderFilterInput {
  """Input to filter by card product ID."""
  cardProductId: IDFilterInput

  """Input to filter by payment card group order status."""
  groupOrderState: PaymentCardGroupOrderStatusFilterInput

  """Input to filter by shipping method."""
  shippingMethod: PaymentCardShippingMethodFilterInput

  """Input to filter by physical card group order ID."""
  groupOrderId: IDFilterInput

  """Input to filter by physical card group order creation date."""
  createdAt: TimestampFilterInput

  """
  Input to filter by physical card group order actual shipping date.
  Actual ship date should be provided in YYYY-MM-DD format.
  """
  actualShipDateLocal: DateFilterInput
}

"""Inputs for filtering physical payment card group orders."""
input PhysicalPaymentCardGroupOrderFilterInput {
  """Input to filter by card product ID."""
  cardProductId: IDFilterInput

  """Input to filter by payment card group order status."""
  groupOrderState: PaymentCardGroupOrderStatusFilterInput

  """Input to filter by shipping method."""
  shippingMethod: PaymentCardShippingMethodFilterInput

  """Input to filter by physical card group order ID."""
  groupOrderId: IDFilterInput

  """Input to filter by physical card group order creation date."""
  createdAt: TimestampFilterInput

  """
  Input to filter by physical card group order actual shipping date.
  Actual ship date should be provided in YYYY-MM-DD format.
  """
  actualShipDateLocal: DateFilterInput
}

"""Inputs for filtering by `PaymentCardGroupOrderStatus`"""
input PaymentCardGroupOrderStatusFilterInput {
  equals: PaymentCardGroupOrderStatus
  notEquals: PaymentCardGroupOrderStatus
  includes: [PaymentCardGroupOrderStatus!]
  excludes: [PaymentCardGroupOrderStatus!]
}

"""A created PhysicalCardGroupOrder."""
type PhysicalCardGroupOrder implements Node {
  """Global ID used to reference the PhysicalCardGroupOrder in operations."""
  id: ID!

  """Id of the product with which the group order will be associated."""
  cardProductId: ID

  """Number of cards in the group order"""
  cardCount: UnsignedInt

  """Payment card shipment"""
  paymentCardShipment: PaymentCardShipment

  """Order state details."""
  orderState: PaymentCardGroupOrderStateDetail

  """Fulfillment state detail history."""
  stateHistory: [PaymentCardGroupOrderStateDetailHistory]

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was created at.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the PaymentCardShipment was last updated.
  """
  updatedAt: String

  """The physical payment card orders for this PhysicalCardGroupOrder."""
  physicalPaymentCardOrders(
    """The number of physical payment card orders to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): PhysicalPaymentCardOrderConnection

  """
  The `CardProfileSet` associated to this physical payment card group order.
  """
  cardProfileSet: CardProfileSet
}

"""Group order status detail."""
type PaymentCardGroupOrderStateDetail {
  """Current order status."""
  status: PaymentCardGroupOrderStatus
}

"""Group order detail history."""
type PaymentCardGroupOrderStateDetailHistory {
  """Previous order status."""
  previousStatus: PaymentCardGroupOrderStatus

  """New order status."""
  newStatus: PaymentCardGroupOrderStatus

  """The date and time, in ISO 8601 format the status changed."""
  createdAt: String
}

"""The connection type for `PhysicalCardGroupOrder`."""
type PhysicalCardGroupOrderConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhysicalCardGroupOrderEdge!]
}

"""The edge type for a `PhysicalCardGroupOrder`."""
type PhysicalCardGroupOrderEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Physical Card Group Order."""
  node: PhysicalCardGroupOrder
}

"""The connection type for `PhysicalPaymentCardOrder`."""
type PhysicalPaymentCardOrderConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhysicalPaymentCardOrderEdge!]
}

"""The edge type for a `PhysicalPaymentCardOrder`."""
type PhysicalPaymentCardOrderEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Physical Payment Card Order."""
  node: PhysicalPaymentCardOrder
}

"""Types which can be returned for creating a group order."""
union PhysicalCardGroupOrderPayload = PhysicalCardGroupOrder | UserError | AccessDeniedError

"""Types which can be returned for simulating physical card group orders"""
union SimulatePhysicalCardGroupOrderPayload = PhysicalCardGroupOrder | UserError | AccessDeniedError

"""Type which can be returned when form factor is updated"""
union ExternalPhysicalPaymentCardOrderPayload = ExternalPhysicalPaymentCardOrder | UserError | AccessDeniedError

"""Embedded Device information"""
type EmbeddedDeviceInformation {
  """Type of form factor"""
  formFactor: FormFactorType

  """URL to image of the device"""
  image: String

  """Device name"""
  name: String

  """Serial number"""
  serialNumber: String

  """Device variant"""
  variant: String
}

"""External Physical Payment Card Order"""
type ExternalPhysicalPaymentCardOrder implements Node {
  """
  Global ID used to reference the ExternalPhysicalPaymentCardOrder in operations.
  """
  id: ID!

  """Payment card."""
  card: PaymentCard @deprecated(reason: "`card` is no longer supported")

  """Payment card."""
  paymentCard: PaymentCard

  """Embedded Device information."""
  embeddedDevice: EmbeddedDeviceInformation

  """Current order status."""
  status: PaymentCardOrderStatus

  """The date and time, in ISO 8601 format, the order was created at."""
  createdAt: String

  """The date and time, in ISO 8601 format, the order was last updated."""
  updatedAt: String
}

"""Complete external physical payment card order input."""
input CompleteExternalPhysicalPaymentCardOrderInput {
  """External physical payment card order id."""
  externalPhysicalPaymentCardOrderId: ID!
}

"""Payment card shipping method."""
enum PaymentCardShippingMethod {
  """USPS Retail Ground ®."""
  USPS_GROUND

  """USPS Priority Mail ®."""
  USPS_PRIORITY

  """
  USPS Priority Mail Express ®.
  
  USPS Priority Mail Express ®. Includes Signature Confirmation at no extra charge. If you wish to ship your order without signature confirmation, we recommend using a different shipping method.
  """
  USPS_EXPRESS

  """UPS Ground Shipping."""
  UPS_GROUND

  """UPS 2nd Day Air."""
  UPS_SECOND_DAY

  """UPS Next Day Air Shipping."""
  UPS_NEXT_DAY

  """
  FedEx Standard Overnight.
  
  Please contact Highnote support to find out if this option is available to your program.
  """
  FEDEX_OVERNIGHT

  """
  FedEx One Rate.
  
  Please contact Highnote support to find out if this option is available to your program.
  """
  FEDEX_ONE_RATE

  """
  USPS Retail Ground ® - Processed Same Day.
  
  Additional fees apply to Same Day options. Please contact Highnote support to find out if this option is available to your program.
  """
  SAME_DAY_USPS_GROUND

  """
  USPS Priority Mail ® - Processed Same Day.
  
  Additional fees apply to Same Day options. Please contact Highnote support to find out if this option is available to your program.
  """
  SAME_DAY_USPS_PRIORITY

  """
  UPS Ground Shipping - Processed Same Day.
  
  Additional fees apply to Same Day options. Please contact Highnote support to find out if this option is available to your program.
  """
  SAME_DAY_UPS_GROUND

  """
  UPS 2nd Day Air - Processed Same Day.
  
  Additional fees apply to Same Day options. Please contact Highnote support to find out if this option is available to your program.
  """
  SAME_DAY_UPS_SECOND_DAY

  """
  UPS Next Day Air Shipping - Processed Same Day.
  
  Additional fees apply to Same Day options. Please contact Highnote support to find out if this option is available to your program.
  """
  SAME_DAY_UPS_NEXT_DAY
}

"""Payment card order status."""
enum PaymentCardOrderStatus {
  """Fulfillment was created but not yet sent to printer."""
  NEW

  """Fulfillment was sent to printer but printer has not yet approved."""
  SENT_TO_PRINTER

  """Printer approved the fulfillment request but has not yet shipped."""
  APPROVED

  """Fulfillment was canceled by client."""
  CANCELED

  """Vendor shipped the card to the delivery address."""
  SHIPPED

  """Printer was not able to ship the card."""
  SHIP_FAILED

  """External physical payment card order is complete."""
  COMPLETED
}

"""Group order status."""
enum PaymentCardGroupOrderStatus {
  """Group order was created but is not yet ready to ship."""
  NEW

  """Group order is ready to ship but has not yet been sent to the vendor."""
  PENDING

  """
  Group order was sent to the vendor but the vendor has not yet approved.
  """
  SENT_TO_PRINTER

  """Vendor approved the fulfillment request but has not yet shipped."""
  APPROVED

  """Group order was canceled by the client."""
  CANCELED

  """The vendor shipped the card to the delivery address."""
  SHIPPED

  """The vendor was not able to ship the card."""
  SHIP_FAILED
}

"""Type of form factor"""
enum FormFactorType {
  """Physical card"""
  PHYSICAL_CARD

  """Wristband"""
  WRISTBAND
}

"""Types which can be returned when setting the pin on a payment card"""
union SetPinForPaymentCardPayload = PaymentCard | UserError | AccessDeniedError

"""Input fields for setting the pin on a payment card"""
input SetPinForPaymentCardInput {
  """Id of the payment card."""
  paymentCardId: ID!

  """New pin to set on the payment card. Must be 4 digits in length."""
  newPin: String!
}

"""Types which can be returned when saving payment method"""
union CreateReusablePaymentMethodTokenPayload = PaymentMethodToken | UserError | AccessDeniedError

"""
Input fields for creating a reusable payment method from a tokenized payment method.
"""
input CreateReusablePaymentMethodTokenInput {
  """The tokenized payment method id to save."""
  paymentMethodTokenId: ID!

  """
  An identifier that will uniquely identify the customer associated to the payment method in the subscriber system.
  
  **Minimum length:** 5 character
  **Maximum length:** 255 characters
  """
  customerIdentifier: String!

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!
}

"""Types which can be returned for a `Customer`."""
union CustomerPayload = Customer | AccessDeniedError | UserError

"""Possible payment method types."""
enum PaymentMethodType {
  """Payment card based payment method."""
  PAYMENT_CARD
}

"""The input to filter by payment method type."""
input PaymentMethodTypeInput {
  """Value matches the provided payment method type."""
  equals: PaymentMethodType
}

"""Input to filter payment method."""
input FilteredPaymentMethodInput {
  """Filter based on payment method type."""
  paymentMethodType: PaymentMethodTypeInput
}

"""Types to expect when looking up a customer."""
union CustomerReferencePayload = USPersonAccountHolder | USBusinessAccountHolder | USPersonAuthorizedUser | USBusinessAuthorizedPerson

"""Types to expect for payment method connection"""
union PaymentMethodConnectionPayload = PaymentMethodConnection | UserError | AccessDeniedError

"""Types which can be returned while fetching payment method."""
union PaymentMethodVariant = PaymentMethodToken

"""The edge type for a Payment Method."""
type PaymentMethodEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Payment Method."""
  node: PaymentMethodVariant
}

"""The connection type for Payment Method."""
type PaymentMethodConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentMethodEdge!]
}

"""Types to expect for customer name connection"""
union CustomerNameConnectionPayload = CustomerNameConnection | UserError | AccessDeniedError

"""The edge type for a name."""
type CustomerNameEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Name."""
  node: Name
}

"""The connect type for name"""
type CustomerNameConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerNameEdge!]
}

"""Types to expect for customer address connection"""
union CustomerAddressConnectionPayload = CustomerAddressConnection | UserError | AccessDeniedError

"""The edge type for an address."""
type CustomerAddressEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Name."""
  node: Address
}

"""The connect type for address"""
type CustomerAddressConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CustomerAddressEdge!]
}

"""Type for customer"""
type Customer {
  """
  The customer identifier that can be used to uniquely identify the `Customer` on subscriber side.
  """
  customerIdentifier: String

  """Names associated to the `Customer`."""
  names(first: Int = 5, after: String): CustomerNameConnectionPayload

  """Addresses associated to the `Customer`."""
  addresses(first: Int = 5, after: String): CustomerAddressConnectionPayload

  """Payment methods associated to the `Customer`."""
  wallet(first: Int = 5, after: String, filterBy: FilteredPaymentMethodInput!): PaymentMethodConnectionPayload

  """The associated account holder if present in Highnote system."""
  referenceNode: CustomerReferencePayload
}

"""Possible Payment Card Brand types"""
enum PaymentCardBrand {
  """Electron card brand."""
  ELECTRON

  """Maestro card brand."""
  MAESTRO

  """Dankort card brand."""
  DANKORT

  """Payment card brand."""
  PAYMENT

  """Union Pay card brand."""
  UNION_PAY

  """Visa card brand."""
  VISA

  """Mastercard card brand."""
  MASTERCARD

  """American Express card brand."""
  AMERICAN_EXPRESS

  """Diners card brand."""
  DINERS

  """Discover card brand."""
  DISCOVER

  """JCB card brand."""
  JCB
}

"""Possible Payment Card Bin Product Codes."""
enum PaymentCardBinProductCode {
  """Prepaid Mastercard Workplace B2B Solutions."""
  MASTERCARD_MPW

  """Debit Mastercard BusinessCard Card."""
  MASTERCARD_MDJ

  """Prepaid Mastercard General Spend Card."""
  MASTERCARD_MPG

  """Prepaid Mastercard Payroll Card."""
  MASTERCARD_MPA

  """Mastercard Corporate Fleet Card."""
  MASTERCARD_MCF

  """Debit Mastercard BusinessCard Card."""
  MASTERCARD_MDB

  """Mastercard Corporate Card."""
  MASTERCARD_MCO

  """Mastercard Platinum."""
  MASTERCARD_MPL

  """Mastercard Humanitarian Prepaid."""
  MASTERCARD_MWF

  """Prepaid Mastercard Consumer Incentive Card."""
  MASTERCARD_MPM

  """Visa Classic"""
  VISA_F

  """Visa Purchasing with Fleet."""
  VISA_S1

  """Visa Purchasing."""
  VISA_S

  """Visa Business."""
  VISA_G

  """Visa Corporate T&E."""
  VISA_K

  """Visa Traditional."""
  VISA_A

  """Visa Rewards."""
  VISA_B

  """Visa Signature."""
  VISA_C

  """Visa Infinite."""
  VISA_I

  """Visa Signature Business."""
  VISA_G1

  """Visa Infinite Business."""
  VISA_G4

  """Visa B2B Virtual Payments."""
  VISA_X

  """Visa Government Corporate T&E."""
  VISA_K1

  """Visa Government Purchasing."""
  VISA_S2

  """Visa Healthcare."""
  VISA_J3

  """Visa Private Label."""
  VISA_Q

  """Visa Private Label Basic."""
  VISA_Q2

  """Visa Private Label Standard."""
  VISA_Q3

  """Visa Private Label Enhanced."""
  VISA_Q4

  """Visa Private Label Specialized."""
  VISA_Q5

  """Visa Private Label Premium."""
  VISA_Q6

  """Visa Proprietary."""
  VISA_R
}

"""Possible Payment Card Bin Sub Product Codes."""
enum PaymentCardBinSubProductCode {
  """Visa Multi-Currency Solution."""
  VISA_MS

  """Visa Campus/University."""
  VISA_ST

  """Visa Cosumer Gift."""
  VISA_GI

  """Visa Cross Border Remittance."""
  VISA_CB

  """Visa Corporate Disbursement."""
  VISA_IC

  """Visa General Purpose."""
  VISA_GP

  """Visa Government Disbursement."""
  VISA_GV

  """Visa Insurance."""
  VISA_IP

  """Visa Other."""
  VISA_OT

  """Visa Payroll/Salary."""
  VISA_PP

  """Visa Travel/Visa Travel Money."""
  VISA_TP

  """Visa Youth/College."""
  VISA_BX

  """Visa Employee Benefits."""
  VISA_HS

  """Visa Healthcare - FSA/HRA."""
  VISA_FS
}

"""Possible secondart point of sale network."""
enum SecondaryPointOfSaleNetwork {
  """Pulse network."""
  PULSE

  """NYCE network."""
  NYCE

  """Interlink network."""
  INTERLINK
}

"""Possible secondary atm network."""
enum SecondaryAtmNetwork {
  """Pulse ATM network."""
  PULSE

  """Plus ATM network."""
  PLUS

  """Maestro ATM network."""
  MAESTRO
}

"""Possible secondary surcharge free atm network."""
enum SecondarySurchargeFreeAtmNetwork {
  """MoneyPass Free Surcharge ATM network."""
  MONEY_PASS

  """Allpoint Free Surcharge ATM network."""
  ALL_POINT

  """SUM Free Surcharge ATM network."""
  SUM
}

"""Possible Payment Card EMV types."""
enum PaymentCardEmvType {
  """No EMV type configured."""
  NONE

  """Contactless EMV type."""
  CONTACTLESS

  """Contact EMV type."""
  CONTACT
}

"""Possible Payment Card Bin classification."""
enum PaymentCardBinClassification {
  """Commercial bin."""
  COMMERCIAL

  """Consumer bin."""
  CONSUMER

  """Business bin."""
  BUSINESS

  """Fleet bin."""
  FLEET

  """Government bin."""
  GOVERNMENT
}

"""Possible Payment Card Bin funding model."""
enum PaymentCardBinFundingModel {
  """Prepaid funding model."""
  PREPAID

  """Debit funding model."""
  DEBIT

  """Credit funding model."""
  CREDIT
}

"""Payment Card Bin Range details."""
type PaymentCardBinRange implements Node {
  """The ID of the `BinRange`."""
  id: ID!

  """The bin length."""
  binLength: UnsignedInt

  """The configured card brand."""
  paymentCardBrand: PaymentCardBrand

  """The first digits of the bin based on the defined bin length."""
  firstDigitsOfBin: String

  """
  The product name.
  
  **Examples:** `"Corporate T&E Prepaid", "Debit Mastercard BusinessCard Card", "Fleet with Purchasing"`
  """
  productName: String

  """The reload indicator for the bin."""
  reloadable: Boolean

  """The payment card bin classification."""
  binClassification: PaymentCardBinClassification

  """The payment card bin funding model."""
  binFundingModel: PaymentCardBinFundingModel

  """The configured paymet card bin product code."""
  binProductCode: PaymentCardBinProductCode

  """The configured payment card bin sub product code."""
  binSubProductCode: PaymentCardBinSubProductCode

  """The indicator whether the bin is active at network"""
  activeAtNetwork: Boolean

  """
  The date and time, in ISO 8601 format, the date this `PaymentCardBinRange` was live at network.
  """
  liveAtNetworkFrom: String

  """The indicator whether the bin is active on the platform"""
  activeAtPlatform: Boolean

  """
  The date and time, in ISO 8601 format, the date this `PaymentCardBinRange` was live at platform.
  """
  liveAtPlatformFrom: String

  """
  Three-character [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code
  
  **Examples:** `"USD", "EUR", "GBP"`
  """
  currencyCodes: [String!]

  """Allowed secondary point of sale networks"""
  secondaryPointOfSaleNetworks: [SecondaryPointOfSaleNetwork!]

  """Allowed secondary atm networks."""
  secondaryAtmNetworks: [SecondaryAtmNetwork!]

  """Allowed Secondary surcharge free atm networks"""
  secondarySurchargeFreeAtmNetworks: [SecondarySurchargeFreeAtmNetwork!]

  """The configured payment card EMV type."""
  emvType: PaymentCardEmvType

  """
  The date and time, in ISO 8601 format, the date (inclusive) this `BinRange` is effective from.
  """
  effectiveFrom: String

  """
  The date and time, in ISO 8601 format, the date (inclusive) this `BinRange` stops being in effect.
  """
  effectiveThrough: String

  """
  The date and time, in ISO 8601 format, the date this `BinRange` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the date this `BinRange` was updated.
  """
  updatedAt: String
}

"""Inputs for filtering Integrator Initiated ACH Transfer data."""
input IntegratorInitiatedACHTransferFilterInput {
  companyEntryDescription: StringSearchFilterInput
  transactionAmount: MoneyFilterInput
  transactionType: IntegratorInitiatedTransferTypeFilterInput
  settlementDate: TimestampFilterInput
  status: IntegratorInitiatedACHStatusFilterInput
  reasonCode: IntegratorInitiatedACHStatusReasonCodeFilterInput
  holdStatus: IntegratorInitiatedACHHoldStatusFilterInput
  cardProductId: StringSearchFilterInput
  returnDate: TimestampFilterInput
}

"""Inputs for filtering Externally Initiated ACH Transfer data."""
input ExternallyInitiatedACHTransferFilterInput {
  companyIdentifier: StringFilterInput
  companyName: StringSearchFilterInput
  companyEntryDescription: StringSearchFilterInput
  transactionAmount: MoneyFilterInput
  transactionType: ExternallyInitiatedTransferTypeFilterInput
  settlementDate: TimestampFilterInput
  status: ExternallyInitiatedACHStatusFilterInput
  reasonCode: ExternallyInitiatedACHStatusReasonCodeFilterInput
  holdStatus: ExternallyInitiatedACHHoldStatusFilterInput
  cardProductId: StringSearchFilterInput
  returnDate: TimestampFilterInput
}

"""Input for filtering by `IntegratorInitiatedACHHoldStatusFilterInput`."""
input IntegratorInitiatedACHHoldStatusFilterInput {
  equals: IntegratorInitiatedACHHoldStatus
  notEquals: IntegratorInitiatedACHHoldStatus
  includes: [IntegratorInitiatedACHHoldStatus!]
  excludes: [IntegratorInitiatedACHHoldStatus!]
}

"""Input for filtering by `ExternallyInitiatedACHHoldStatusFilterInput`."""
input ExternallyInitiatedACHHoldStatusFilterInput {
  equals: ExternallyInitiatedACHHoldStatus
  notEquals: ExternallyInitiatedACHHoldStatus
  includes: [ExternallyInitiatedACHHoldStatus!]
  excludes: [ExternallyInitiatedACHHoldStatus!]
}

"""Input for filtering by `IntegratorInitiatedTransferType`."""
input IntegratorInitiatedTransferTypeFilterInput {
  equals: IntegratorInitiatedTransferType
  notEquals: IntegratorInitiatedTransferType
  includes: [IntegratorInitiatedTransferType!]
  excludes: [IntegratorInitiatedTransferType!]
}

"""Input for filtering by `ExternallyInitiatedTransferType`."""
input ExternallyInitiatedTransferTypeFilterInput {
  equals: ExternallyInitiatedTransferType
  notEquals: ExternallyInitiatedTransferType
  includes: [ExternallyInitiatedTransferType!]
  excludes: [ExternallyInitiatedTransferType!]
}

"""Input for filtering by `IntegratorInitiatedACHStatusFilterInput`."""
input IntegratorInitiatedACHStatusFilterInput {
  equals: IntegratorInitiatedACHStatus
  notEquals: IntegratorInitiatedACHStatus
  includes: [IntegratorInitiatedACHStatus!]
  excludes: [IntegratorInitiatedACHStatus!]
}

"""Input for filtering by `ExternallyInitiatedACHStatusFilterInput`."""
input ExternallyInitiatedACHStatusFilterInput {
  equals: ExternallyInitiatedACHStatus
  notEquals: ExternallyInitiatedACHStatus
  includes: [ExternallyInitiatedACHStatus!]
  excludes: [ExternallyInitiatedACHStatus!]
}

"""
Input for filtering by `IntegratorInitiatedACHStatusReasonCodeFilterInput`.
"""
input IntegratorInitiatedACHStatusReasonCodeFilterInput {
  equals: IntegratorInitiatedACHStatusReasonCode
  notEquals: IntegratorInitiatedACHStatusReasonCode
  includes: [IntegratorInitiatedACHStatusReasonCode!]
  excludes: [IntegratorInitiatedACHStatusReasonCode!]
}

"""
Input for filtering by `ExternallyInitiatedACHStatusReasonCodeFilterInput`.
"""
input ExternallyInitiatedACHStatusReasonCodeFilterInput {
  equals: ExternallyInitiatedACHStatusReasonCode
  notEquals: ExternallyInitiatedACHStatusReasonCode
  includes: [ExternallyInitiatedACHStatusReasonCode!]
  excludes: [ExternallyInitiatedACHStatusReasonCode!]
}

"""Inputs for filtering originated ACH transfer data."""
input OriginatedAchTransferFilterInput {
  amount: MoneyFilterInput
  type: AchTransferTypeFilterInput
  purpose: AchTransferPurposeFilterInput
  sign: AchTransferSignFilterInput
  cardProductId: StringSearchFilterInput
  companyEntryDescription: StringSearchFilterInput
  traceNumber: StringFilterInput
  status: OriginatedAchTransferStatusFilterInput
  statusFailureReason: AchTransferStatusFailureReasonFilterInput
  holdStatus: AchHoldStatusFilterInput
  createdAt: TimestampFilterInput
  returnProcessedAt: TimestampFilterInput
}

"""Inputs for filtering non-originated ACH transfer data."""
input NonOriginatedAchTransferFilterInput {
  amount: MoneyFilterInput
  type: AchTransferTypeFilterInput
  purpose: AchTransferPurposeFilterInput
  sign: AchTransferSignFilterInput
  cardProductId: StringSearchFilterInput
  companyIdentifier: StringFilterInput
  companyName: StringSearchFilterInput
  companyEntryDescription: StringSearchFilterInput
  traceNumber: StringFilterInput
  status: NonOriginatedAchTransferStatusFilterInput
  statusFailureReason: AchTransferStatusFailureReasonFilterInput
  holdStatus: AchHoldStatusFilterInput
  createdAt: TimestampFilterInput
  settlementDate: DateFilterInput
  returnSentToBankAt: TimestampFilterInput
}

"""Input for filtering by `AchTransferType`."""
input AchTransferTypeFilterInput {
  equals: AchTransferType
  notEquals: AchTransferType
  includes: [AchTransferType!]
  excludes: [AchTransferType!]
}

"""Input for filtering by `AchTransferPurpose`."""
input AchTransferPurposeFilterInput {
  equals: AchTransferPurpose
  notEquals: AchTransferPurpose
  includes: [AchTransferPurpose!]
  excludes: [AchTransferPurpose!]
}

"""Input for filtering by `AchTransferPurpose`."""
input AchTransferSignFilterInput {
  equals: AchTransferSign
  notEquals: AchTransferSign
  includes: [AchTransferSign!]
  excludes: [AchTransferSign!]
}

"""Input for filtering by `AchTransferPurpose`."""
input OriginatedAchTransferStatusFilterInput {
  equals: OriginatedAchTransferStatus
  notEquals: OriginatedAchTransferStatus
  includes: [OriginatedAchTransferStatus!]
  excludes: [OriginatedAchTransferStatus!]
}

"""Input for filtering by `AchTransferPurpose`."""
input NonOriginatedAchTransferStatusFilterInput {
  equals: NonOriginatedAchTransferStatus
  notEquals: NonOriginatedAchTransferStatus
  includes: [NonOriginatedAchTransferStatus!]
  excludes: [NonOriginatedAchTransferStatus!]
}

"""Input for filtering by `AchTransferPurpose`."""
input AchTransferStatusFailureReasonFilterInput {
  equals: AchTransferStatusFailureReason
  notEquals: AchTransferStatusFailureReason
  includes: [AchTransferStatusFailureReason!]
  excludes: [AchTransferStatusFailureReason!]
}

"""Input for filtering by `AchTransferPurpose`."""
input AchHoldStatusFilterInput {
  equals: AchHoldStatus
  notEquals: AchHoldStatus
  includes: [AchHoldStatus!]
  excludes: [AchHoldStatus!]
}

"""Inputs for filtering Payment Card data."""
input CardProductPaymentCardsFilterInput {
  bin: StringFilterInput
  cardNetwork: PaymentCardNetworkFilterInput
  expirationDate: TimestampFilterInput
  last4: StringFilterInput
  accountHolderId: IDFilterInput
  status: PaymentCardStatusFilterInput
  formFactor: CardFormFactorFilterInput
  createDate: TimestampFilterInput
  updateDate: TimestampFilterInput
  customFields: CustomFieldsFilterInput
}

"""Inputs for filtering Payment Card data for Account Holder."""
input AccountHolderPaymentCardsFilterInput {
  bin: StringFilterInput
  cardNetwork: PaymentCardNetworkFilterInput
  expirationDate: TimestampFilterInput
  last4: StringFilterInput
  cardProductId: IDFilterInput
  status: PaymentCardStatusFilterInput
  formFactor: CardFormFactorFilterInput
  createDate: TimestampFilterInput
  updateDate: TimestampFilterInput
  customFields: CustomFieldsFilterInput
}

"""Inputs for filtering Payment Card data for Authorized User."""
input AuthorizedUserPaymentCardsFilterInput {
  bin: StringFilterInput
  cardNetwork: PaymentCardNetworkFilterInput
  expirationDate: TimestampFilterInput
  last4: StringFilterInput
  cardProductId: IDFilterInput
  status: PaymentCardStatusFilterInput
  formFactor: CardFormFactorFilterInput
  createDate: TimestampFilterInput
  updateDate: TimestampFilterInput
}

"""Input for filtering by `PaymentCardStatus`."""
input PaymentCardStatusFilterInput {
  equals: PaymentCardStatus
  notEquals: PaymentCardStatus
  includes: [PaymentCardStatus!]
  excludes: [PaymentCardStatus!]
}

"""Input for filtering by `PaymentCardNetwork`."""
input PaymentCardNetworkFilterInput {
  equals: PaymentCardNetwork
  notEquals: PaymentCardNetwork
  includes: [PaymentCardNetwork!]
  excludes: [PaymentCardNetwork!]
}

"""Input for filtering by `CardFormFactor`."""
input CardFormFactorFilterInput {
  equals: CardFormFactor
  notEquals: CardFormFactor
  includes: [CardFormFactor!]
  excludes: [CardFormFactor!]
}

"""Inputs for filtering InterFinancialAccountTransfer data."""
input InterFinancialAccountTransferStatusFilterInput {
  equals: InterFinancialAccountTransferStatus
  notEquals: InterFinancialAccountTransferStatus
  includes: [InterFinancialAccountTransferStatus!]
  excludes: [InterFinancialAccountTransferStatus!]
}

"""Inputs for filtering the purpose of InterFinancialAccountTransfer."""
input InterFinancialAccountTransferActivityTypeFilterInput {
  equals: InterFinancialAccountTransferActivityType
  notEquals: InterFinancialAccountTransferActivityType
  includes: [InterFinancialAccountTransferActivityType!]
  excludes: [InterFinancialAccountTransferActivityType!]
}

"""Inputs for filtering by InterFinancialAccountTransfer."""
input InterFinancialAccountTransferFilterInput {
  """Search for InterFinancialAccountTransfers by transfer amount"""
  amount: MoneyFilterInput

  """
  The date and time, in ISO 8601 format, the InterFinancialAccountTransfer was created.
  """
  createdAt: TimestampFilterInput

  """
  The date and time, in ISO 8601 format, the InterFinancialAccountTransfer was last updated.
  """
  updatedAt: TimestampFilterInput

  """Purpose of the InterFinancialAccountTransfer"""
  transferActivityType: InterFinancialAccountTransferActivityTypeFilterInput

  """Status of the InterFinancialAccountTransfer"""
  status: InterFinancialAccountTransferStatusFilterInput
}

"""Inputs for filtering business account holder data."""
input AccountHolderFinancialAccountsFilterInput {
  """
  The date and time, in ISO 8601 format, the Financial Account was created.
  """
  createdAt: TimestampFilterInput

  """
  The date and time, in ISO 8601 format, the Financial Account was last updated.
  """
  updatedAt: TimestampFilterInput

  """The list of features for a Financial Account."""
  features: FinancialAccountFeatureTypeFilterInput

  """The id of the card product associated with a Financial Account"""
  cardProductId: StringFilterInput

  """The externalId associated with a Financial Account"""
  externalId: StringFilterInput

  """The `CustomFields` associated with the Financial Account."""
  customFields: CustomFieldsFilterInput
}

"""Input for filtering Financial Account feature"""
input FinancialAccountFeatureTypeFilterInput {
  """Value matches the provided Financial Account feature"""
  equals: FinancialAccountFeatureType

  """Value does not match the provided Financial Account feature"""
  notEquals: FinancialAccountFeatureType

  """Value exactly matches all of the provided Financial Account feature"""
  includes: [FinancialAccountFeatureType!]

  """Value does not match any of the provided Financial Account feature"""
  excludes: [FinancialAccountFeatureType!]
}

"""Inputs for filtering business account holder data."""
input BusinessAccountHolderFilterInput {
  id: IDFilterInput
  externalId: IDFilterInput
  businessProfile: BusinessAccountHolderBusinessProfileFilterInput
  primaryAuthorizedPerson: BusinessAccountHolderPrimaryAuthorizedPersonFilterInput
}

"""
Inputs for filtering business account holder's primary authorized person.
"""
input BusinessAccountHolderPrimaryAuthorizedPersonFilterInput {
  dateOfBirth: DateFilterInput
  name: BusinessAccountHolderPrimaryAuthorizedPersonNameFilterInput
  homeAddress: BusinessAccountHolderPrimaryAuthorizedAddressFilterInput
  socialSecurityNumberLast4: HashedFilterInput
  socialSecurityNumber: HashedFilterInput
}

"""
Input for filtering by Business Account Holder's Primary Authorized Person's Address.
"""
input BusinessAccountHolderPrimaryAuthorizedAddressFilterInput {
  postalCode: StringFilterInput
}

"""
Input for filtering Business Account Holders by name.
The matching for these name fields are performed using similar sounding scores.
e.g. keywords like Mayer, mayer, Mire & Mary will lead to the same score.
"""
input BusinessAccountHolderPrimaryAuthorizedPersonNameFilterInput {
  title: SoundsLikeFilterInput
  givenName: SoundsLikeFilterInput
  middleName: SoundsLikeFilterInput
  familyName: SoundsLikeFilterInput
  suffix: SoundsLikeFilterInput
}

"""Inputs for filtering business account holder business profile data."""
input BusinessAccountHolderBusinessProfileFilterInput {
  name: BusinessAccountHolderBusinessNameFilterInput
  website: StringSearchFilterInput
  employerIdentificationNumber: HashedFilterInput
  employerIdentificationNumberLast4: HashedFilterInput
}

"""Input for filtering Business Account Holder's business by name."""
input BusinessAccountHolderBusinessNameFilterInput {
  legalBusinessName: StringSearchFilterInput
  doingBusinessAsName: StringSearchFilterInput
}

"""
Inputs for filtering person account holder data.

**Note:** Filtering by a single field will yield accurate results. You may also
combine the `dateOfBirth` and `name` fields within the same query for successful
search results. However, combining other fields may not yield the expected results
and is not supported.
"""
input PersonAccountHolderFilterInput {
  dateOfBirth: DateFilterInput
  name: PersonAccountHolderNameFilterInput
  phone: PhoneFilterInput
  billingAddress: AddressFilterInput
  email: StringSearchFilterInput
  socialSecurityNumber: HashedFilterInput
}

"""
Input for filtering Account Holders by name.
The matching for these name fields are performed using similar sounding scores.
e.g. keywords like Mayer, mayer, Mire & Mary will lead to the same score.
"""
input PersonAccountHolderNameFilterInput {
  title: SoundsLikeFilterInput
  givenName: SoundsLikeFilterInput
  middleName: SoundsLikeFilterInput
  familyName: SoundsLikeFilterInput
  suffix: SoundsLikeFilterInput
}

"""Inputs for filtering person authorized user data."""
input PersonAuthorizedUserFilterInput {
  dateOfBirth: DateFilterInput
  name: PersonAuthorizedUserNameFilterInput
  billingAddress: AddressFilterInput
  socialSecurityNumberLast4: HashedFilterInput
}

"""
Input for filtering authorized users by name.
The matching for these name fields are performed using similar sounding scores.
e.g. keywords like Mayer, mayer, Mire & Mary will lead to the same score.
"""
input PersonAuthorizedUserNameFilterInput {
  title: SoundsLikeFilterInput
  givenName: SoundsLikeFilterInput
  middleName: SoundsLikeFilterInput
  familyName: SoundsLikeFilterInput
  suffix: SoundsLikeFilterInput
}

"""Inputs for filtering `CardProductApplication` data."""
input CardProductApplicationFilterInput {
  """
  The date and time, in ISO 8601 format, the Card Product Application was created.
  """
  createdAt: TimestampFilterInput

  """
  The date and time, in ISO 8601 format, the Card Product Application was last updated.
  """
  updatedAt: TimestampFilterInput

  """The status of the Card Product Application."""
  status: AccountHolderApplicationStateInput

  """The id of the Card Product Application."""
  id: IDFilterInput
}

"""Inputs for filtering Application Status data."""
input AccountHolderApplicationStateInput {
  """Value matches the provided Application Status"""
  equals: AccountHolderApplicationStatusCode

  """Value does not match the provided Application Status"""
  notEquals: AccountHolderApplicationStatusCode

  """Value exactly matches any of the provided Application Status"""
  includes: [AccountHolderApplicationStatusCode!]

  """Value does not match any of the provided Application Status"""
  excludes: [AccountHolderApplicationStatusCode!]
}

"""Input for filtering phone number."""
input PhoneFilterInput {
  label: PhoneLabelFilterInput
  number: StringFilterInput
  extension: StringFilterInput
}

"""Input for filtering by Address."""
input AddressFilterInput {
  locality: StringFilterInput
  region: StringFilterInput
  countryCodeAlpha3: ISO3166Alpha3Country
  postalCode: StringFilterInput
  streetAddress: StringFilterInput
  extendedAddress: StringFilterInput
}

"""Input for filtering by `PhoneLabel`."""
input PhoneLabelFilterInput {
  equals: PhoneLabel
  notEquals: PhoneLabel
  includes: [PhoneLabel!]
  excludes: [PhoneLabel!]
}

"""Inputs for filtering merchant details."""
input MerchantDetailsFilterInput {
  """The merchant category for the authorization."""
  category: MerchantCategoryFilterInput

  """The merchant or institution name."""
  name: StringSearchFilterInput

  """The merchant country code"""
  countryCodeAlpha3: ISO3166Alpha3Country

  """The merchant description"""
  description: StringSearchFilterInput
}

"""Inputs for filtering transaction events."""
input TransactionEventsFilterInput {
  operationalCurrency: ISO4217Alpha3CurrencyCode
  eventType: TransactionEventFilterInput
  requestedAmount: MoneyFilterInput
  approvedAmount: MoneyFilterInput
  responseCode: TransactionEventResponseCodeFilterInput
  avsResponseCode: AVSResponseCodeFilterInput
  postalCodeResponseCode: PostalCodeResponseCodeFilterInput
  cvvResponseCode: CVVResponseCodeFilterInput
  transactionType: TransactionTypeFilterInput
  paymentCardId: IDFilterInput
  cardProductId: IDFilterInput
  transactionId: IDFilterInput
  id: IDFilterInput
  createdAt: TimestampFilterInput
  updatedAt: TimestampFilterInput
  merchantDetails: MerchantDetailsFilterInput

  """
  Open authorizations events have the following properties:
  * Are the first transaction event with a particular public transaction
  identifier. This means they are the first event in a sequence of events with
  the same public transaction identifier.
  * Authorization expiration date is not empty and not in the past.
  * The approved amount has not been fully reversed or cleared to zero by
  subsequent transaction events with the same public transaction identifier.
  """
  onlyOpenAuthorizations: BooleanFilterInput

  """Authorization expiration date"""
  authorizationExpiration: TimestampFilterInput
}

"""Inputs for filtering transaction events."""
input CardProductTransactionEventsFilterInput {
  operationalCurrency: ISO4217Alpha3CurrencyCode
  eventType: TransactionEventFilterInput
  requestedAmount: MoneyFilterInput
  approvedAmount: MoneyFilterInput
  responseCode: TransactionEventResponseCodeFilterInput
  avsResponseCode: AVSResponseCodeFilterInput
  postalCodeResponseCode: PostalCodeResponseCodeFilterInput
  cvvResponseCode: CVVResponseCodeFilterInput
  transactionType: TransactionTypeFilterInput
  paymentCardId: IDFilterInput
  cardProductId: IDFilterInput
  transactionId: IDFilterInput
  id: IDFilterInput
  createdAt: TimestampFilterInput
  updatedAt: TimestampFilterInput
  merchantDetails: MerchantDetailsFilterInput

  """
  Open authorizations events have the following properties:
  * Are the first transaction event with a particular public transaction
  identifier. This means they are the first event in a sequence of events with
  the same public transaction identifier.
  * Authorization expiration date is not empty and not in the past.
  * The approved amount has not been fully reversed or cleared to zero by
  subsequent transaction events with the same public transaction identifier.
  """
  onlyOpenAuthorizations: BooleanFilterInput

  """Authorization expiration date"""
  authorizationExpiration: TimestampFilterInput
}

"""Inputs for filtering transaction events."""
input PaymentCardTransactionEventsFilterInput {
  operationalCurrency: ISO4217Alpha3CurrencyCode
  eventType: TransactionEventFilterInput
  requestedAmount: MoneyFilterInput
  approvedAmount: MoneyFilterInput
  responseCode: TransactionEventResponseCodeFilterInput
  avsResponseCode: AVSResponseCodeFilterInput
  postalCodeResponseCode: PostalCodeResponseCodeFilterInput
  cvvResponseCode: CVVResponseCodeFilterInput
  transactionType: TransactionTypeFilterInput
  paymentCardId: IDFilterInput
  transactionId: IDFilterInput
  id: IDFilterInput
  createdAt: TimestampFilterInput
  updatedAt: TimestampFilterInput
  merchantDetails: MerchantDetailsFilterInput

  """
  Open authorizations events have the following properties:
  * Are the first transaction event with a particular public transaction
  identifier. This means they are the first event in a sequence of events with
  the same public transaction identifier.
  * Authorization expiration date is not empty and not in the past.
  * The approved amount has not been fully reversed or cleared to zero by
  subsequent transaction events with the same public transaction identifier.
  """
  onlyOpenAuthorizations: BooleanFilterInput

  """Authorization expiration date"""
  authorizationExpiration: TimestampFilterInput
}

"""TransactionEventFilter value type"""
input TransactionEventFilterInput {
  equals: TransactionEventFilter
  notEquals: TransactionEventFilter
  includes: [TransactionEventFilter!]
  excludes: [TransactionEventFilter!]
}

"""Inputs for  filtering ledger entries."""
input LedgerEntriesFilterInput {
  ledgerName: LedgerNameFilterInput
  createdAt: TimestampFilterInput
}

"""String value type"""
input StringFilterInput {
  """Value matches the provided `String`."""
  equals: String

  """Value does not match the provided `String`."""
  notEquals: String

  """Value exactly matches any of the provided `Strings`."""
  includes: [String!]

  """Value does not match any of the provided `Strings`."""
  excludes: [String!]
}

"""String value type to provide matching of the text"""
input StringSearchFilterInput {
  """Value starts with provided `String`."""
  startsWith: String

  """Value ends with provided `String`."""
  endsWith: String

  """Value contains provided `String`."""
  contains: String

  """Value matches the provided `String`."""
  equals: String

  """Value does not match the provided `String`."""
  notEquals: String

  """Value exactly matches any of the provided `Strings`."""
  includes: [String!]

  """Value does not match any of the provided `Strings`."""
  excludes: [String!]
}

"""String value type accepting similar sounding data"""
input SoundsLikeFilterInput {
  """Value matches the data that sounds like the provided `Strings`."""
  soundsLike: [String!]
}

"""
ID value type
Input for filtering objects using id (ID).
"""
input IDFilterInput {
  """Value matches the provided object id."""
  equals: ID

  """Value does not match the provided object id."""
  notEquals: ID

  """Value exactly matches any of the provided object id."""
  includes: [ID!]

  """Value does not match any of the provided object id."""
  excludes: [ID!]
}

"""Input for filtering merchant category"""
input MerchantCategoryFilterInput {
  """Value matches the provided merchant category."""
  equals: MerchantCategory

  """Value does not match the provided merchant category."""
  notEquals: MerchantCategory

  """Value exactly matches all of the provided merchant category."""
  includes: [MerchantCategory!]

  """Value does not match any of the provided merchant category."""
  excludes: [MerchantCategory!]
}

"""Input for filtering transaction event response code"""
input TransactionEventResponseCodeFilterInput {
  """Value matches the provided transaction event response code."""
  equals: TransactionEventResponseCode

  """Value does not match the provided transaction event response code."""
  notEquals: TransactionEventResponseCode

  """
  Value exactly matches all of the provided transaction event response code.
  """
  includes: [TransactionEventResponseCode!]

  """
  Value does not match any of the provided transaction event response code.
  """
  excludes: [TransactionEventResponseCode!]
}

"""Input for filtering AVS response code"""
input AVSResponseCodeFilterInput {
  """Value matches the provided AVS response code"""
  equals: AVSResponseCode

  """Value does not match the provided AVS response code"""
  notEquals: AVSResponseCode

  """Value exactly matches all of the provided AVS response code"""
  includes: [AVSResponseCode!]

  """Value does not match any of the provided AVS response code"""
  excludes: [AVSResponseCode!]
}

"""Input for filtering Postal code response code"""
input PostalCodeResponseCodeFilterInput {
  """Value matches the provided Postal code response code"""
  equals: PostalCodeResponseCode

  """Value does not match the provided Postal code response code"""
  notEquals: PostalCodeResponseCode

  """Value exactly matches all of the provided Postal code response code"""
  includes: [PostalCodeResponseCode!]

  """Value does not match any of the provided Postal code response code"""
  excludes: [PostalCodeResponseCode!]
}

"""Input for filtering CVV response code"""
input CVVResponseCodeFilterInput {
  """Value matches the provided CVV response code"""
  equals: CVVResponseCode

  """Value does not match the provided CVV response code"""
  notEquals: CVVResponseCode

  """Value exactly matches all of the provided CVV response code"""
  includes: [CVVResponseCode!]

  """Value does not match any of the provided CVV response code"""
  excludes: [CVVResponseCode!]
}

"""Input for filtering transaction type"""
input TransactionTypeFilterInput {
  """Value matches the provided transaction type"""
  equals: TransactionTypeFilter

  """Value does not match the provided transaction type"""
  notEquals: TransactionTypeFilter

  """Value exactly matches all of the provided transaction type"""
  includes: [TransactionTypeFilter!]

  """Value does not match any of the provided transaction type"""
  excludes: [TransactionTypeFilter!]
}

"""
Input for filtering dates.

The format for each `String` field should be in YYYY-MM-DD format.

Example: `2021-11-12`
"""
input DateFilterInput {
  """An ISO 8601 value that exactly matches the provided `String`."""
  equals: String

  """An ISO 8601 value that does not match the provided `String`."""
  notEquals: String

  """An ISO 8601 value to filter to dates before the given `String`."""
  lessThan: String

  """
  An ISO 8601 value to filter to dates that match or are before the given `String`.
  """
  lessThanOrEquals: String

  """An ISO 8601 value to filter to dates after the given `String`."""
  greaterThan: String

  """
  An ISO 8601 value to filter to dates that match or are after the given `String`.
  """
  greaterThanOrEquals: String

  """Value to filter to dates that fall between values."""
  between: DateFilterInputRange
}

"""
Input for filtering by date value ranges (inclusive).

The format for each `String` field should be in YYYY-MM-DD format.

Example: `2021-11-12`
"""
input DateFilterInputRange {
  """An ISO 8601 value (inclusive) for the beginning date."""
  start: String

  """An ISO 8601 value (inclusive) for the ending date."""
  end: String
}

"""Money value type"""
input MoneyFilterInput {
  currencyCode: ISO4217Alpha3CurrencyCode!

  """A value that exactly matches the provided `UnsignedInt`."""
  equals: UnsignedInt

  """A value that does not exactly match the provided `UnsignedInt`."""
  notEquals: UnsignedInt

  """A value to filter to numbers less than the given `UnsignedInt`."""
  lessThan: UnsignedInt

  """
  A value to filter to numbers less than or equal to the given `UnsignedInt`.
  """
  lessThanOrEquals: UnsignedInt

  """A value to filter to numbers greater than the given `UnsignedInt`."""
  greaterThan: UnsignedInt

  """
  A value to filter to numbers greater than or equal to the given `UnsignedInt`.
  """
  greaterThanOrEquals: UnsignedInt

  """
  Filter to values that exactly match any of the provided `UnsignedInts`.
  """
  includes: [UnsignedInt!]

  """Filter to values that do not match any of the provided `UnsignedInts`."""
  excludes: [UnsignedInt!]

  """Filter to values that fall between the provided `UnsignedInts`."""
  between: MoneyFilterInputRange
}

"""Money value range (inclusive)"""
input MoneyFilterInputRange {
  """An `UnsignedInt` value (inclusive) for the beginning of the range."""
  start: UnsignedInt

  """An `UnsignedInt` value (inclusive) for the end of the range."""
  end: UnsignedInt
}

"""Money value type the allows for positive or negative values"""
input SignedMoneyFilterInput {
  currencyCode: ISO4217Alpha3CurrencyCode!

  """A value that exactly matches the provided `Int`."""
  equals: Int

  """A value that does not exactly match the provided `Int`."""
  notEquals: Int

  """A value to filter to numbers less than the given `Int`."""
  lessThan: Int

  """A value to filter to numbers less than or equal to the given `Int`."""
  lessThanOrEquals: Int

  """A value to filter to numbers greater than the given `Int`."""
  greaterThan: Int

  """A value to filter to numbers greater than or equal to the given `Int`."""
  greaterThanOrEquals: Int

  """Filter to values that exactly match any of the provided `Ints`."""
  includes: [Int!]

  """Filter to values that do not match any of the provided `Ints`."""
  excludes: [Int!]

  """Filter to values that fall between the provided `Ints`."""
  between: SignedMoneyFilterInputRange
}

"""Money value range (inclusive)"""
input SignedMoneyFilterInputRange {
  """An `Int` value (inclusive) for the beginning of the range."""
  start: Int

  """An `Int` value (inclusive) for the end of the range."""
  end: Int
}

"""Timestamp value type in ISO 8601 format"""
input TimestampFilterInput {
  equals: String
  notEquals: String
  lessThan: String
  lessThanOrEquals: String
  greaterThan: String
  greaterThanOrEquals: String
  between: TimestampFilterInputRange
}

"""Timestamp value range in ISO 8601 format"""
input TimestampFilterInputRange {
  start: String
  end: String
}

"""Boolean value type"""
input BooleanFilterInput {
  equals: Boolean!
}

"""Input for filtering by sensitive data using Hashing"""
input HashedFilterInput {
  """Value matches the provided data"""
  equals: String

  """Value does not match the provided data"""
  notEquals: String

  """Value exactly matches all of the provided data"""
  includes: [String!]

  """Value does not match any of the provided data"""
  excludes: [String!]
}

"""Inputs for  filtering ledger entries."""
input LedgerNameFilterInput {
  """Value matches the provided ledger name"""
  equals: LedgerName

  """Value does not match the provided ledger name"""
  notEquals: LedgerName

  """Value exactly matches all of the provided ledger name"""
  includes: [LedgerName!]

  """Value does not match any of the provided ledger name"""
  excludes: [LedgerName!]
}

"""Inputs for filtering Payment Card data."""
input FinancialAccountPaymentCardsFilterInput {
  bin: StringFilterInput
  cardNetwork: PaymentCardNetworkFilterInput
  expirationDate: TimestampFilterInput
  last4: StringFilterInput
  accountHolderId: IDFilterInput
  status: PaymentCardStatusFilterInput
  formFactor: CardFormFactorFilterInput
  createDate: TimestampFilterInput
  updateDate: TimestampFilterInput
  customFields: CustomFieldsFilterInput
}

"""Inputs for filtering Financial Account Activity types"""
input FinancialAccountActivityTypeFilterInput {
  """Value matches the provided activity type"""
  equals: FinancialAccountActivityType

  """Value does not match the provided activity type"""
  notEquals: FinancialAccountActivityType

  """Value exactly matches any of the provided activity types"""
  includes: [FinancialAccountActivityType!]

  """Value does not match any of the provided activity types"""
  excludes: [FinancialAccountActivityType!]
}

"""Inputs for filtering Fee Transfer Events."""
input FeeTransferEventFilterInput {
  """The id of the card product associated to the fee transfer event."""
  cardProductId: StringFilterInput

  """The financial account from where fee is deducted."""
  originatingAccountId: StringFilterInput

  """The financial account where fee is transferred."""
  receivingAccountId: StringFilterInput

  """The date and time, in ISO 8601 format, fee was charged."""
  transferDate: TimestampFilterInput

  """The date and time, in ISO 8601 format, fee transfer was created."""
  createDate: TimestampFilterInput

  """The date and time, in ISO 8601 format, fee transfer was updated."""
  updateDate: TimestampFilterInput
}

"""Inputs for filtering `CustomFields`."""
input CustomFieldsFilterInput {
  """Value matches the provided `String`."""
  equals: CustomFieldInput

  """Value does not match the provided `String`."""
  notEquals: CustomFieldInput

  """Value exactly matches any of the provided `Strings`."""
  includes: [CustomFieldInput!]

  """Value does not match any of the provided `Strings`."""
  excludes: [CustomFieldInput!]
}

"""Input for setting the email for a notification target."""
input SetEmailForNotificationTargetInput {
  """The notification target ID."""
  targetId: ID!

  """The email address to which target deactivation emails are sent."""
  email: String!
}

"""Input for removing the email for a notification target."""
input RemoveEmailFromNotificationTargetInput {
  """The notification target ID."""
  targetId: ID!
}

"""
Input for filtering dates.

The format for each `String` field should be in YYYY-MM-DD format.

Example: `2021-11-12`
"""
input NotificationTimestampFilterInput {
  """An ISO 8601 value that exactly matches the provided `String`."""
  equals: String

  """An ISO 8601 value that does not match the provided `String`."""
  notEquals: String

  """An ISO 8601 value to filter to dates before the given `String`."""
  lessThan: String

  """
  An ISO 8601 value to filter to dates that match or are before the given `String`.
  """
  lessThanOrEquals: String

  """An ISO 8601 value to filter to dates after the given `String`."""
  greaterThan: String

  """
  An ISO 8601 value to filter to dates that match or are after the given `String`.
  """
  greaterThanOrEquals: String

  """Value to filter to dates that fall between values."""
  between: NotificationTimestampFilterInputRange
}

"""
Input for filtering by date value ranges (inclusive).

The format for each `String` field should be in YYYY-MM-DD format.

Example: `2021-11-12`
"""
input NotificationTimestampFilterInputRange {
  """An ISO 8601 value (inclusive) for the beginning date."""
  start: String

  """An ISO 8601 value (inclusive) for the ending date."""
  end: String
}

"""The input to provide filters for the notificationEvents query."""
input NotificationEventsFilterInput {
  """Filter by the createdAt timestamp of the notification event."""
  createdAt: NotificationTimestampFilterInput

  """Filter by the name of the notification event."""
  name: [NotificationEventName!]
}

"""The input to add a new webhook notification target."""
input AddWebhookNotificationTargetInput {
  """
  A name for the target.
  
  Must be between 1 and 255 characters.
  """
  name: String!

  """
  A valid URI to send notifications. The protocol _must be included_ and is required to be `https`.
  
  Example: `https://mywebhook.com`
  """
  uri: String!

  """
  The email address to which target deactivation emails are sent.
  This data is only stored in the live environment. Deactivation emails are not sent in the test environment.
  """
  email: String

  """The event names to receive notifications about."""
  subscriptions: [NotificationEventName!]!
}

"""The input to activate a notification target."""
input ActivateNotificationTargetInput {
  targetId: ID!
}

"""The input to deactivate a notification target."""
input DeactivateNotificationTargetInput {
  targetId: ID!
}

"""The input to delete a notification target."""
input RemoveNotificationTargetInput {
  targetId: ID!
}

"""The input to update the name of an existing notification target."""
input RenameNotificationTargetInput {
  """The notification target ID."""
  targetId: ID!

  """
  A name for the target.
  Must be between 1 and 255 characters.
  """
  name: String!
}

"""The input to replay a Notification Event."""
input ReplayNotificationEventInput {
  """The id of the event to replay."""
  notificationEventId: ID!

  """
  Optional list of target IDs to replay the event for. If absent or empty,
  the event will be sent to all active targets that subscribe to this event
  type. If a target ID is provided for a target that does not subscribe to this
  event type or is not active, the replay request for that target will be
  ignored.
  """
  targetIds: [ID!]
}

"""The input to add subscriptions to a notification target."""
input AddSubscriptionsToNotificationTargetInput {
  """Target Id"""
  targetId: ID!

  """The event names to receive notifications about."""
  subscriptions: [NotificationEventName!]!
}

"""The input to remove subscriptions from a notification target."""
input RemoveSubscriptionsFromNotificationTargetInput {
  """Target Id"""
  targetId: ID!

  """The event names to no longer receive notifications about."""
  subscriptions: [NotificationEventName!]!
}

"""Input for removing the email for a notification target."""
input RotateNotificationTargetSigningKeyInput {
  """The notification target ID."""
  targetId: ID!
}

"""The return types when adding webhook notification targets."""
union AddWebhookNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""The types of notification targets."""
union NotificationTarget = WebhookNotificationTarget

"""The return types when deactivating a notification target."""
union DeactivateNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""The return types when delete a notification target."""
union RemoveNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""
The return types when updating the name of an existing notification target.
"""
union RenameNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""The return types when activating a notification target."""
union ActivateNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""The return types when setting the email for a notification target."""
union SetEmailForNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""The return types when unsetting the email for a notification target."""
union RemoveEmailFromNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""The return types when replaying a Notification Event."""
union ReplayNotificationEventPayload = NotificationEvent | UserError | AccessDeniedError

"""The return types when adding subscriptions to a notification target."""
union AddSubscriptionsToNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""
The return types when removing subscriptions from a notification target.
"""
union RemoveSubscriptionsFromNotificationTargetPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""
The return types when removing subscriptions from an existing webhook
notification target.
"""
union RotateNotificationTargetSigningKeyPayload = WebhookNotificationTarget | UserError | AccessDeniedError

"""A webhook notification target."""
type WebhookNotificationTarget implements Node {
  """
  Global ID used to reference the WebhookNotificationTarget in operations.
  """
  id: ID!

  """The name of the WebhookNotificationTarget."""
  name: String

  """The URI to send notifications."""
  uri: String

  """
  The email address to which target deactivation emails are sent.
  This data is only stored in the live environment. Deactivation emails are not sent in the test environment.
  """
  email: String

  """The event names this target is subscribed to."""
  subscriptions: [NotificationEventName!]

  """
  The date and time, in ISO 8601 format, the WebhookNotificationTarget was created.
  """
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String

  """
  The date and time, in ISO 8601 format, this was most recently deactivated.
  """
  deactivatedAt: String

  """The signing keys used for this target."""
  signingKeys: [SigningKey!]

  """The status of the target."""
  status: NotificationTargetStatus!

  """The history of delivery attempts for this notification target."""
  deliveryAttempts(
    """The page size."""
    first: Int

    """Cursor."""
    after: String
  ): DeliveryAttemptConnection

  """The history of status changes for this notification target."""
  statusHistory(
    """The page size."""
    first: Int

    """Cursor."""
    after: String
  ): NotificationTargetStatusHistoryConnection

  """The events that should have been delivered to this target."""
  webhookNotificationTargetEvents(
    """The page size."""
    first: Int = 20

    """Cursor."""
    after: String

    """The filter parameter for this connection."""
    filterBy: WebhookNotificationTargetEventFilterInput
  ): WebhookNotificationTargetEventConnection
}

"""The Notification Event that was triggered in the Highnote platform."""
type NotificationEvent implements Node {
  """Global ID used to reference the Event in operations."""
  id: ID!

  """
  The date and time, in ISO 8601 format, the Notification Event was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the Notification Event will expire.
  """
  expiresAt: String

  """The name of the Notification Event that was triggered."""
  name: NotificationEventName

  """The Notification Event."""
  node: NotificationEventNode

  """The history of delivery attempts for this Notification Event."""
  deliveryAttempts(
    """The page size."""
    first: Int

    """Cursor."""
    after: String
  ): DeliveryAttemptConnection
}

"""The connection type for DeliveryAttempt."""
type DeliveryAttemptConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DeliveryAttemptEdge!]
}

"""The edge type for DeliveryAttempt."""
type DeliveryAttemptEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The DeliveryAttempt"""
  node: DeliveryAttempt
}

"""An attempt to delivery a Notification Event to a target."""
type DeliveryAttempt implements Node {
  """Global ID used to reference the delivery attempt in operations."""
  id: ID!

  """The uri used for this attempt."""
  uri: String

  """The target used for this attempt."""
  target: WebhookNotificationTarget

  """HTTP Status Code returned by the target."""
  status: Int @deprecated(reason: "Use response.httpStatusCode instead.")

  """Whether or not the attempt was successful."""
  success: Boolean @deprecated(reason: "Use deliveryAttemptStatus instead.")

  """Details about the response from the target on this delivery attempt"""
  response: DeliveryAttemptResponse

  """Whether the attempt was successful, failed or skipped"""
  deliveryAttemptStatus: DeliveryAttemptStatus

  """The time the delivery attempt was created."""
  createdAt: String

  """The event that triggered the delivery attempt."""
  event: NotificationEvent
}

"""
Provides details about the response from the target on the delivery attempt
"""
type DeliveryAttemptResponse {
  """The HTTP Status Code returned by the target."""
  httpStatusCode: Int
}

"""
Indicates whether a delivery attempt was successful, failed or skipped.
"""
enum DeliveryAttemptStatus {
  """The delivery attempt was successful with a 200 OK response"""
  SUCCESS

  """The delivery attempt was unsuccessful with a non 200 OK response"""
  FAILURE

  """The delivery attempt was skipped because the target was deactivated"""
  SKIPPED
}

"""The connection type for a notification target's status history."""
type NotificationTargetStatusHistoryConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationTargetStatusHistoryEdge!]
}

"""The edge type for a notification target's status history'."""
type NotificationTargetStatusHistoryEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The DeliveryAttempt"""
  node: NotificationTargetStatusHistory
}

"""Notification Target status history"""
type NotificationTargetStatusHistory {
  """Global ID used to reference the status event in operations."""
  id: ID!

  """The notification target for this status entry."""
  target: NotificationTarget

  """The date and time, in ISO 8601 format the status changed."""
  createdAt: String

  """New order status."""
  newStatus: NotificationTargetStatus

  """Previous status status."""
  previousStatus: NotificationTargetStatus
}

"""A key used to sign the notification payload."""
type SigningKey implements Node {
  """Global ID used to reference the SigningKey in operations."""
  id: ID!

  """The shared secret to use to verify a notification payload."""
  secret: String

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """
  Expiration date and time, in ISO 8601 format, for this key.
  If this is set, it means that the `rotateNotificationTargetSigningKey` mutation was called for this key's target.
  """
  expiresAt: String
}

"""Input for filtering `WebhookNotificationTargetEvent`."""
input WebhookNotificationTargetEventFilterInput {
  """Filter by the createdAt timestamp of the original notification event."""
  eventCreatedAt: NotificationTimestampFilterInput

  """Filter by the name of the original notification event."""
  name: [NotificationEventName!]

  """
  Filter for the hasSuccessfulDelivery field on the WebhookNotificationTargetEvent object.
  """
  hasSuccessfulDelivery: Boolean
}

"""The connection type for a `WebhookNotificationTargetEvent`"""
type WebhookNotificationTargetEventConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookNotificationTargetEventEdge!]
}

"""The edge type for a `WebhookNotificationTargetEvent`"""
type WebhookNotificationTargetEventEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The WebhookNotificationTargetEvent"""
  node: WebhookNotificationTargetEvent
}

"""
This type wraps a notification event to indicate that this event should have been delivered to a particular target based on its subscriptions.
"""
type WebhookNotificationTargetEvent {
  """
  Indicates whether the event was delivered to the target. If false, the latest delivery attempt was unsuccessful OR skipped because the target was deactivated.
  """
  hasSuccessfulDelivery: Boolean

  """The notification event that should have been delivered to the target."""
  event: NotificationEvent

  """The delivery attempts for this event to this target."""
  deliveryAttempts(first: Int, after: String): DeliveryAttemptConnection
}

"""The types providing more details about the Notification Event."""
union NotificationEventNode = AuthorizationEvent | AccountHolderCardProductApplication | AuthorizedUserCardProductApplication | NotificationTargetActivationEvent | NotificationPingTestEvent | NotificationEventValidationTestEvent | SecureDepositInitiatedEvent | SecureDepositProcessingEvent | SecureDepositProcessedEvent | SecureDepositFailedEvent | SecureDepositReturnedEvent | SecureDepositCanceledEvent | FundsWithdrawalInitiatedEvent | FundsWithdrawalProcessingEvent | FundsWithdrawalProcessedEvent | FundsWithdrawalFailedEvent | FundsWithdrawalReturnedEvent | FundsWithdrawalCanceledEvent | FundsDepositInitiatedEvent | FundsDepositProcessingEvent | FundsDepositProcessedEvent | FundsDepositFailedEvent | FundsDepositReturnedEvent | FundsDepositCanceledEvent | RepaymentProcessedEvent | RepaymentProcessingEvent | RepaymentFailedEvent | RepaymentReturnedEvent | AchExternallyInitatedDepositReceivedEvent | AchExternallyInitatedDepositProcessedEvent | AchExternallyInitatedDepositFailedEvent | AchExternallyInitiatedWithdrawalReceivedEvent | AchExternallyInitiatedWithdrawalProcessedEvent | AchExternallyInitiatedWithdrawalFailedEvent | PaymentCardAuthorizationApprovedEvent | PaymentCardAuthorizationCreatedEvent | PaymentCardAuthorizationDeclinedEvent | PaymentCardAuthorizationReversedEvent | PaymentCardAuthorizationAndClearApprovedEvent | PaymentCardAuthorizationAndClearDeclinedEvent | PaymentCardClearedEvent | PaymentCardEnhancedDataEvent | PaymentCardVerificationApprovedEvent | PaymentCardVerificationDeclinedEvent | PaymentCardActivatedEvent | PaymentCardSuspendedEvent | PaymentCardUnsuspendedEvent | PaymentCardClosedEvent | PhysicalPaymentCardShippedEvent | PhysicalPaymentCardShipFailedEvent | FinancialAccountStatementReadyEvent | InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPendingEvent | InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountCompletedEvent | InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountFailedEvent | InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountPendingEvent | InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountCompletedEvent | InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountFailedEvent | PhysicalPaymentCardGroupOrderShippedEvent | PhysicalPaymentCardGroupOrderShipFailedEvent | PayrollAdvanceRepaymentCompletedEvent | PayrollAdvanceWriteOffCompletedEvent | AccountStatusActiveEvent | AccountStatusSuspendedEvent | AccountStatusUnderReviewEvent | AccountStatusPendingClosureEvent | AccountStatusClosedEvent | FinancialAccount | ExternalBankAccountAddedEvent | ExternalBankAccountRemovedEvent | CardDigitalWalletTokenActivatedEvent | CardDigitalWalletTokenSuspendedEvent | CardDigitalWalletTokenTerminatedEvent | AchHoldAddedEvent | AchHoldRemovedEvent | Report | InterFinancialAccountTransfer | PaymentCardTransactionDispute | PaymentCardTransactionChargeback | PersonAccountHolderIdentityUpdatedEvent | BusinessAccountHolderIdentityUpdatedEvent | BusinessAuthorizedPersonIdentityUpdatedEvent | BusinessUltimateBeneficialOwnerIdentityUpdatedEvent | PersonAccountHolderIdentityDocumentsRequestedEvent | BusinessAccountHolderIdentityDocumentsRequestedEvent | BusinessAuthorizedPersonIdentityDocumentsRequestedEvent | BusinessUltimateBeneficialOwnerIdentityDocumentsRequestedEvent | OriginatedAchTransferInitiatedEvent | OriginatedAchTransferPendingEvent | OriginatedAchTransferProcessingEvent | OriginatedAchTransferProcessedEvent | OriginatedAchTransferCanceledEvent | OriginatedAchTransferFailedEvent | OriginatedAchTransferReturnedEvent | NonOriginatedAchTransferReceivedEvent | NonOriginatedAchTransferProcessedEvent | NonOriginatedAchTransferFailedEvent | NonOriginatedAchTransferReturnedEvent | CreditLimitChangeRequestStatusChangedEvent | AchTransferHoldAddedEvent | AchTransferHoldRemovedEvent | LinkVerifiedExternalBankAccountFailedEvent | CheckPaymentEvent | UpcomingStatementDueDateEvent | AccountHolderProvisioning | AccountHolderProvisioningWorkflowAction | FeeChargeEvent | FeeReversalEvent

"""The event sent to a notification target during activation."""
type NotificationTargetActivationEvent {
  """A field that returns a static value of `pong`"""
  ping: String
}

"""The event sent when initiateNotificationPingTest mutation is called."""
type NotificationPingTestEvent {
  """
  A simple field to return a static value of "pong"
  """
  ping: String!
}

"""The event sent when initiateEventValidationTest mutation is called."""
type NotificationEventValidationTestEvent {
  """fixture version"""
  fixtureVersion: String

  """nonZeroAmount"""
  nonZeroAmount: Amount

  """zeroAmount"""
  zeroAmount: Amount

  """nonEmptyListOfStrings"""
  nonEmptyListOfStrings: [String!]

  """emptyListOfStrings"""
  emptyListOfStrings: [String!]

  """nullableListOfStrings"""
  nullableListOfStringsWithNull: [String]

  """nullMerchantDetails"""
  nullMerchantDetails: MerchantDetails

  """nullMerchantDetails"""
  merchantDetails: MerchantDetails

  """nonEmptyListOfAccountAttributes"""
  nonEmptyListOfAccountAttributes: [FinancialAccountAttribute]

  """emptyListOfAccountAttributes"""
  emptyListOfAccountAttributes: [FinancialAccountAttribute]

  """listOfAccountAttributesWithNull"""
  listOfAccountAttributesWithNull: [FinancialAccountAttribute]
}

"""
The Notification Events that can be triggered in the Highnote platform.
"""
enum NotificationEventName {
  """
  `DEPRECATED`
  
  The name of the Notification Event when an authorization is created.
  """
  AUTHORIZATION_CREATED @deprecated

  """
  The name of the Notification Event when an authorized user application is approved
  """
  AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_APPROVED

  """
  The name of the Notification Event when an authorized user application is closed
  """
  AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_CLOSED

  """
  The name of the Notification Event when an authorized user application is denied
  """
  AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_DENIED

  """
  The name of the Notification Event when an authorized user application requires manual review
  """
  AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_MANUAL_REVIEW

  """
  The name of the Notification Event when an authorized user application is in review
  """
  AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_IN_REVIEW @deprecated(reason: "Deprecated for more specific action notification event types.")

  """
  The name of the Notification Event when an authorized user application requires an underwriting decision.
  """
  AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_UNDERWRITING_DECISION_REQUESTED

  """
  The name of the Notification Event when `DocumentUploadSessions` have been requested for an authorized user application.
  """
  AUTHORIZED_USER_CARD_PRODUCT_APPLICATION_DOCUMENT_UPLOAD_REQUESTED

  """The name of the Notification Event when an application is approved"""
  CARD_PRODUCT_APPLICATION_APPROVED

  """The name of the Notification Event when an application is closed"""
  CARD_PRODUCT_APPLICATION_CLOSED

  """The name of the Notification Event when an application is denied"""
  CARD_PRODUCT_APPLICATION_DENIED

  """
  The name of the Notification Event when an application requires manual review
  """
  CARD_PRODUCT_APPLICATION_MANUAL_REVIEW

  """The name of the Notification Event when an application is in review"""
  CARD_PRODUCT_APPLICATION_IN_REVIEW @deprecated(reason: "Deprecated for more specific action notification event types.")

  """
  The name of the Notification Event when an application requires an underwriting decision.
  """
  CARD_PRODUCT_APPLICATION_UNDERWRITING_DECISION_REQUESTED

  """
  The name of the Notification Event when an application requires an account holder to verify if they are the one who are applying for the application.
  """
  CARD_PRODUCT_APPLICATION_CREDIT_REPORT_FRAUD_ALERT

  """
  The name of the Notification Event when an application requires an account holder to take action to unfreeze credit bureau.
  """
  CARD_PRODUCT_APPLICATION_CREDIT_REPORT_FREEZE

  """
  The name of the Notification Event when `DocumentUploadSessions` have been requested for an application.
  """
  CARD_PRODUCT_APPLICATION_DOCUMENT_UPLOAD_REQUESTED

  """
  The name of the Notification Event when offer(s) on an application need to be decisioned.
  """
  CARD_PRODUCT_APPLICATION_OFFER_MANAGEMENT_REQUESTED

  """
  The name of the Notification Event when a notification target is being activated.
  
  **Note:** This field will be ignored if provided as an event name when adding a notification target.
  """
  NOTIFICATION_ACTIVATION

  """
  The name of the Notification Event when ACH secure deposits are initiated
  """
  ACH_SECURE_DEPOSIT_INITIATED

  """
  The name of the Notification Event when ACH secure deposits are processing
  """
  ACH_SECURE_DEPOSIT_PROCESSING

  """
  The name of the Notification Event when ACH secure deposits are processed
  """
  ACH_SECURE_DEPOSIT_PROCESSED

  """
  The name of the Notification Event when ACH secure deposits have failed
  """
  ACH_SECURE_DEPOSIT_FAILED

  """
  The name of the Notification Event when ACH secure deposits are returned
  """
  ACH_SECURE_DEPOSIT_RETURNED

  """
  The name of the Notification Event when ACH secure deposits are canceled
  """
  ACH_SECURE_DEPOSIT_CANCELED

  """
  The name of the Notification Event when ACH funds withdrawals are initiated
  """
  ACH_FUNDS_WITHDRAWAL_INITIATED

  """
  The name of the Notification Event when ACH funds withdrawals are processing
  """
  ACH_FUNDS_WITHDRAWAL_PROCESSING

  """
  The name of the Notification Event when ACH funds withdrawals are processed
  """
  ACH_FUNDS_WITHDRAWAL_PROCESSED

  """
  The name of the Notification Event when ACH funds withdrawals have failed
  """
  ACH_FUNDS_WITHDRAWAL_FAILED

  """
  The name of the Notification Event when ACH funds withdrawals are returned
  """
  ACH_FUNDS_WITHDRAWAL_RETURNED

  """
  The name of the Notification Event when ACH funds withdrawals are canceled
  """
  ACH_FUNDS_WITHDRAWAL_CANCELED

  """
  The name of the Notification Event when ACH funds withdrawals are initiated
  """
  ACH_FUNDS_DEPOSIT_INITIATED

  """
  The name of the Notification Event when ACH funds deposits are processing
  """
  ACH_FUNDS_DEPOSIT_PROCESSING

  """
  The name of the Notification Event when ACH funds deposits are processed
  """
  ACH_FUNDS_DEPOSIT_PROCESSED

  """The name of the Notification Event when ACH funds deposits have failed"""
  ACH_FUNDS_DEPOSIT_FAILED

  """
  The name of the Notification Event when ACH funds deposits are returned
  """
  ACH_FUNDS_DEPOSIT_RETURNED

  """
  The name of the Notification Event when ACH funds deposits are canceled
  """
  ACH_FUNDS_DEPOSIT_CANCELED

  """The name of the Notification Event when ACH repayments are processing"""
  ACH_REPAYMENT_PROCESSING

  """The name of the Notification Event when ACH repayments are processed"""
  ACH_REPAYMENT_PROCESSED

  """The name of the Notification Event when ACH repayments have failed"""
  ACH_REPAYMENT_FAILED

  """The name of the Notification Event when ACH repayments are returned"""
  ACH_REPAYMENT_RETURNED

  """
  The name of the Notification Event when externally initiated ACH deposits are received
  """
  ACH_EXTERNALLY_INITIATED_DEPOSIT_RECEIVED

  """
  The name of the Notification Event when externally initiated ACH deposits are processed
  """
  ACH_EXTERNALLY_INITIATED_DEPOSIT_PROCESSED

  """
  The name of the Notification Event when externally initiated ACH deposits have failed
  """
  ACH_EXTERNALLY_INITIATED_DEPOSIT_FAILED

  """
  The name of the Notification Event when externally initiated ACH withdrawals are received
  """
  ACH_EXTERNALLY_INITIATED_WITHDRAWAL_RECEIVED

  """
  The name of the Notification Event when externally initiated ACH withdrawals are processed
  """
  ACH_EXTERNALLY_INITIATED_WITHDRAWAL_PROCESSED

  """
  The name of the Notification Event when externally initiated ACH withdrawals have failed
  """
  ACH_EXTERNALLY_INITIATED_WITHDRAWAL_FAILED

  """
  `DEPRECATED`
  
  The name of the Notification Event when a payment card transaction authorization has been created
  """
  PAYMENT_CARD_AUTHORIZATION_CREATED @deprecated

  """
  The name of the Notification Event when a payment card transaction authorization has been approved
  """
  PAYMENT_CARD_AUTHORIZATION_APPROVED

  """
  The name of the Notification Event when a payment card transaction authorization has been declined
  """
  PAYMENT_CARD_AUTHORIZATION_DECLINED

  """
  The name of the Notification Event when a payment card transaction authorization has been reversed
  """
  PAYMENT_CARD_AUTHORIZATION_REVERSED

  """
  The name of the Notification Event when a payment card transaction authorization and clear happens together and has been approved
  """
  PAYMENT_CARD_AUTHORIZATION_AND_CLEAR_APPROVED

  """
  The name of the Notification Event when a payment card transaction authorization and clear happens together and has been declined
  """
  PAYMENT_CARD_AUTHORIZATION_AND_CLEAR_DECLINED

  """
  The name of the Notification Event when a payment card transaction has been cleared
  """
  PAYMENT_CARD_CLEARED

  """
  The name of the Notification Event when enhanced data for a payment card transaction has been received
  """
  PAYMENT_CARD_ENHANCED_DATA_RECEIVED

  """
  The name of the Notification Event when a payment card verification has been approved
  """
  PAYMENT_CARD_VERIFICATION_APPROVED

  """
  The name of the Notification Event when a payment card verification has been declined
  """
  PAYMENT_CARD_VERIFICATION_DECLINED

  """
  The name of the Notification Event when a payment card has been activated
  """
  PAYMENT_CARD_ACTIVATED

  """
  The name of the Notification Event when a payment card has been suspended
  """
  PAYMENT_CARD_SUSPENDED

  """
  The name of the Notification Event when a payment card has been unsuspended
  """
  PAYMENT_CARD_UNSUSPENDED

  """The name of the Notification Event when a payment card has been closed"""
  PAYMENT_CARD_CLOSED

  """
  The name of the Notification Event when a physical payment card has shipped
  """
  PHYSICAL_PAYMENT_CARD_SHIPPED

  """
  The name of the Notification Event when a physical payment card has failed to ship
  """
  PHYSICAL_PAYMENT_CARD_SHIP_FAILED

  """The name of the Notification Event when a statement is ready"""
  FINANCIAL_ACCOUNT_STATEMENT_READY

  """
  The name of the Notification Event when an internal transfer from Funding Financial Account to Payment Card Financial Account is pending
  """
  INTERNAL_TRANSFER_FROM_FUNDING_FINANCIAL_ACCOUNT_TO_PAYMENT_CARD_FINANCIAL_ACCOUNT_PENDING

  """
  The name of the Notification Event when an internal transfer from Funding Financial Account to Payment Card Financial Account has completed
  """
  INTERNAL_TRANSFER_FROM_FUNDING_FINANCIAL_ACCOUNT_TO_PAYMENT_CARD_FINANCIAL_ACCOUNT_COMPLETED

  """
  The name of the Notification Event when an internal transfer from Funding Financial Account to Payment Card Financial Account has failed
  """
  INTERNAL_TRANSFER_FROM_FUNDING_FINANCIAL_ACCOUNT_TO_PAYMENT_CARD_FINANCIAL_ACCOUNT_FAILED

  """
  The name of the Notification Event when an internal transfer from Payment Card Financial Account to Funding Financial Account is pending
  """
  INTERNAL_TRANSFER_FROM_PAYMENT_CARD_FINANCIAL_ACCOUNT_TO_FUNDING_FINANCIAL_ACCOUNT_PENDING

  """
  The name of the Notification Event when an internal transfer from Payment Card Financial Account to Funding Financial Account has completed
  """
  INTERNAL_TRANSFER_FROM_PAYMENT_CARD_FINANCIAL_ACCOUNT_TO_FUNDING_FINANCIAL_ACCOUNT_COMPLETED

  """
  The name of the Notification Event when an internal transfer from Payment Card Financial Account to Funding Financial Account has failed
  """
  INTERNAL_TRANSFER_FROM_PAYMENT_CARD_FINANCIAL_ACCOUNT_TO_FUNDING_FINANCIAL_ACCOUNT_FAILED

  """
  The name of the Notification Event when a physical payment card group order has shipped
  """
  PHYSICAL_PAYMENT_CARD_GROUP_ORDER_SHIPPED

  """
  The name of the Notification Event when a physical payment card group order has failed to ship
  """
  PHYSICAL_PAYMENT_CARD_GROUP_ORDER_SHIP_FAILED

  """
  The name of the Notification Event when a payroll advance repayment has completed
  """
  PAYROLL_ADVANCE_REPAYMENT_COMPLETED

  """
  The name of the Notification Event when a payroll advance repayment has been written off
  """
  PAYROLL_ADVANCE_WRITE_OFF_COMPLETED

  """
  The name of the Notification Event when a Financial Account enters the ACTIVE status.
  """
  ACCOUNT_STATUS_ACTIVE

  """
  The name of the Notification Event when a Financial Account enters the SUSPENDED status.
  """
  ACCOUNT_STATUS_SUSPENDED

  """
  The name of the Notification Event when a Financial Account enters the UNDER_REVIEW status.
  """
  ACCOUNT_STATUS_UNDER_REVIEW

  """
  The name of the Notification Event when a Financial Account enters the PENDING_CLOSURE status.
  """
  ACCOUNT_STATUS_PENDING_CLOSURE

  """
  The name of the Notification Event when a Financial Account has been CLOSED.
  """
  ACCOUNT_STATUS_CLOSED

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is added as DELINQUENT.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_ADDED_DELINQUENT

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is removed as DELINQUENT.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_REMOVED_DELINQUENT

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is added as DELINQUENT_SUSPENDED.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_ADDED_DELINQUENT_SUSPENDED

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is removed as DELINQUENT_SUSPENDED.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_REMOVED_DELINQUENT_SUSPENDED

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is added as PROGRAM_OWNER_INITIATED_SUSPENSION.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_ADDED_PROGRAM_OWNER_INITIATED_SUSPENSION

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is removed as PROGRAM_OWNER_INITIATED_SUSPENSION.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_REMOVED_PROGRAM_OWNER_INITIATED_SUSPENSION

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is added as CHARGE_OFF.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_ADDED_CHARGE_OFF

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is removed as CHARGE_OFF.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_REMOVED_CHARGE_OFF

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is added as `CLOSED_WITH_BALANCE`.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_ADDED_CLOSED_WITH_BALANCE

  """
  The name of the Notification Event when a `FinancialAccountAttribute` is removed as `CLOSED_WITH_BALANCE`.
  """
  FINANCIAL_ACCOUNT_ATTRIBUTE_REMOVED_CLOSED_WITH_BALANCE

  """
  The name of the Notification Event when a `Verified External Financial Account` is created
  """
  EXTERNAL_BANK_ACCOUNT_ADDED

  """
  The name of the Notification Event when a `Verified External Financial Account` is disconnected
  """
  EXTERNAL_BANK_ACCOUNT_REMOVED

  """
  The name of the Notification Event when a `CardDigitalWalletToken` has been activated.
  """
  CARD_DIGITAL_WALLET_TOKEN_ACTIVATED

  """
  The name of the Notification Event when a `CardDigitalWalletToken` has been suspended.
  """
  CARD_DIGITAL_WALLET_TOKEN_SUSPENDED

  """
  The name of the Notification Event when a `CardDigitalWalletToken` has been terminated.
  """
  CARD_DIGITAL_WALLET_TOKEN_TERMINATED

  """The name of the Notification Event when an ACH is put on hold."""
  ACH_HOLD_ADDED

  """The name of the Notification Event when an ACH hold is removed."""
  ACH_HOLD_REMOVED

  """The name of the Notification Event when a report has completed."""
  REPORT_COMPLETED

  """The name of the Notification Event when a report has failed."""
  REPORT_FAILED

  """
  Triggered when money movement between `FinancialAccount`s has complete.
  """
  INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_COMPLETED

  """Triggered when money movement between `FinancialAccount`s is pending."""
  INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_PENDING

  """Triggered when money movement between `FinancialAccount`s has failed."""
  INTERNAL_TRANSFER_BETWEEN_FINANCIAL_ACCOUNTS_FAILED

  """Triggered when a `PaymentCardTransactionDispute` has been initiated."""
  PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_INITIATED

  """
  Triggered when a `PaymentCardTransactionDispute` has been resolved by issuing a dispute credit.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_RESOLVED_WITH_DISPUTE_CREDIT

  """
  Triggered when a `PaymentCardTransactionDispute` has been resolved as a cardholder win.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_CASE_CARDHOLDER_WON

  """
  Triggered when a `PaymentCardTransactionDispute` has been resolved as a cardholder loss.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_CASE_CARDHOLDER_LOST

  """
  Triggered when a `PaymentCardTransactionDispute` has been rejected by the issuer or network.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_REJECTED

  """Triggered when a `PaymentCardTransactionDispute` has been canceled."""
  PAYMENT_CARD_TRANSACTION_DISPUTE_CASE_STATUS_CANCELLED

  """
  Triggered when a Provisional Credit has been issued for a  `PaymentCardTransactionChargeback`.
  """
  PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_ISSUED

  """
  Triggered when a Provisional Credit has been revoked for a `PaymentCardTransactionChargeback`.
  """
  PAYMENT_CARD_TRANSACTION_CHARGEBACK_PROVISIONAL_CREDIT_REVOKED

  """
  Triggered when a Provisional Credit has been issued for a `PaymentCardTransactionDispute`.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_PROVISIONAL_CREDIT_ISSUED

  """
  Triggered when a Provisional Credit has been revoked for a `PaymentCardTransactionDispute`.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_PROVISIONAL_CREDIT_REVOKED

  """
  Triggered when a Provisional Credit has been won for a `PaymentCardTransactionDispute`.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_PROVISIONAL_CREDIT_WON

  """
  Triggered when a Dispute Credit has been issued for a `PaymentCardTransactionDispute`.
  """
  PAYMENT_CARD_TRANSACTION_DISPUTE_CREDIT_ISSUED

  """Triggered when a `PersonAccountHolder` is updated."""
  PERSON_ACCOUNT_HOLDER_IDENTITY_UPDATED

  """Triggered when a `BusinessAccountHolder` is updated."""
  BUSINESS_ACCOUNT_HOLDER_IDENTITY_UPDATED

  """Triggered when an `AuthorizedPerson` is updated."""
  BUSINESS_AUTHORIZED_PERSON_IDENTITY_UPDATED

  """Triggered when a `USBusinessUltimateBeneficialOwner` is updated."""
  BUSINESS_ULTIMATE_BENEFICIAL_OWNER_IDENTITY_UPDATED

  """
  Triggered when identity verification documents are requested for a `PersonAccountHolder`.
  """
  PERSON_ACCOUNT_HOLDER_IDENTITY_DOCUMENTS_REQUESTED

  """
  Triggered when identity verification documents are requested for a `BusinessAccountHolder`.
  """
  BUSINESS_ACCOUNT_HOLDER_IDENTITY_DOCUMENTS_REQUESTED

  """
  Triggered when identity verification documents are requested for an `AuthorizedPerson`.
  """
  BUSINESS_AUTHORIZED_PERSON_IDENTITY_DOCUMENTS_REQUESTED

  """
  Triggered when identity verification documents are requested for a `USBusinessUltimateBeneficialOwner`.
  """
  BUSINESS_ULTIMATE_BENEFICIAL_OWNER_IDENTITY_DOCUMENTS_REQUESTED

  """Triggered when an originated ACH transfer is initiated."""
  ORIGINATED_ACH_TRANSFER_INITIATED

  """
  Triggered when an originated ACH transfer is processed by Highnote, pending send to the external financial institution for processing.
  """
  ORIGINATED_ACH_TRANSFER_PENDING

  """
  Triggered when an originated ACH transfer is sent to the external financial institution for processing.
  """
  ORIGINATED_ACH_TRANSFER_PROCESSING

  """
  Triggered when an originated ACH transfer is finalized and the funds are available or withdrawn.
  """
  ORIGINATED_ACH_TRANSFER_PROCESSED

  """
  Triggered when an originated ACH transfer has failed before it is sent to the external financial institution.
  """
  ORIGINATED_ACH_TRANSFER_FAILED

  """
  Triggered when an originated ACH transfer has been returned by the external financial institution.
  """
  ORIGINATED_ACH_TRANSFER_RETURNED

  """
  Triggered when an originated ACH transfer is canceled before it is sent to the external financial institution.
  """
  ORIGINATED_ACH_TRANSFER_CANCELED

  """
  Triggered when a non-originated ACH transfer is received from an external financial institution.
  """
  NON_ORIGINATED_ACH_TRANSFER_RECEIVED

  """Triggered when a non-originated ACH transfer is processed by Highnote."""
  NON_ORIGINATED_ACH_TRANSFER_PROCESSED

  """
  Triggered when a non-originated ACH transfer has failed before it is sent to the external financial institution.
  """
  NON_ORIGINATED_ACH_TRANSFER_FAILED

  """
  Triggered when a non-originated ACH transfer has been returned by the external financial institution.
  """
  NON_ORIGINATED_ACH_TRANSFER_RETURNED

  """Triggered when a `CreditLimitChangeRequest` has a status change."""
  CREDIT_LIMIT_CHANGE_REQUEST_STATUS_CHANGED

  """Triggered when an ACH transfer hold is added."""
  ACH_TRANSFER_HOLD_ADDED

  """Triggered when an ACH transfer hold is removed."""
  ACH_TRANSFER_HOLD_REMOVED

  """
  The name of the Notification Event when `IdentityUpdateSessions` have been requested for an application.
  """
  CARD_PRODUCT_APPLICATION_IDENTITY_UPDATE_REQUESTED

  """
  The name of the Notification Event when a `Verified External Financial Account` creation fails
  """
  LINK_VERIFIED_EXTERNAL_BANK_ACCOUNT_FAILED

  """The check has been initiated and is pending funding."""
  CHECK_PAYMENT_EVENT_FUNDING_PENDING

  """The check funding has been initiated."""
  CHECK_PAYMENT_EVENT_FUNDING_STARTED

  """The check has been funded and is pending disbursement."""
  CHECK_PAYMENT_EVENT_FUNDING_COMPLETED

  """The funds have been disbursed to external accounts."""
  CHECK_PAYMENT_EVENT_FUNDING_DISBURSED

  """The check has been printed and is pending shipment."""
  CHECK_PAYMENT_EVENT_PENDING_SHIPMENT

  """The check has been shipped."""
  CHECK_PAYMENT_EVENT_SHIPPED

  """The check has been delivered, and cashed or deposited."""
  CHECK_PAYMENT_EVENT_COMPLETED

  """The check has been voided."""
  CHECK_PAYMENT_EVENT_VOIDED

  """
  The check has failed. The reason for the failure is included in the event.
  """
  CHECK_PAYMENT_EVENT_FAILED

  """The check has been reversed due to voiding or failure."""
  CHECK_PAYMENT_EVENT_REVERSAL_INITIATED

  """The check reversal has been completed."""
  CHECK_PAYMENT_EVENT_REVERSAL_COMPLETED

  """The check has been printed."""
  CHECK_PAYMENT_EVENT_PRINTED

  """The check has been paid out."""
  CHECK_PAYMENT_EVENT_PAID

  """The check is pending processing by Highnote."""
  CHECK_PAYMENT_EVENT_PENDING_PROCESSING_BY_HIGHNOTE

  """The check is processing by Highnote."""
  CHECK_PAYMENT_EVENT_PROCESSING_BY_HIGHNOTE

  """The check has been processed by Highnote."""
  CHECK_PAYMENT_EVENT_PROCESSED_BY_HIGHNOTE

  """The check has been put on hold for risk assessment"""
  CHECK_PAYMENT_EVENT_ON_RISK_HOLD

  """
  Triggered when a `FinancialAccountStatement` has an upcoming payment due date. The number of days in advance of the due date to trigger this notification is configurable at the `CardProduct` level.
  """
  UPCOMING_STATEMENT_DUE_DATE

  """The provision account holder workflow has been initiated."""
  PROVISION_ACCOUNT_HOLDER_INITIATED

  """The provision account holder workflow has started processing."""
  PROVISION_ACCOUNT_HOLDER_IN_PROGRESS

  """The provision account holder workflow has encountered an error."""
  PROVISION_ACCOUNT_HOLDER_ERROR

  """The provision account holder workflow has completed."""
  PROVISION_ACCOUNT_HOLDER_COMPLETED

  """
  The provision account holder workflow has terminated due to a rejection.
  """
  PROVISION_ACCOUNT_HOLDER_REJECTED

  """
  The provision account holder CREATE_APPLICATION action has been initiated.
  """
  PROVISION_ACCOUNT_HOLDER_CREATE_APPLICATION_INITIATED

  """
  The provision account holder CREATE_APPLICATION action has started processing.
  """
  PROVISION_ACCOUNT_HOLDER_CREATE_APPLICATION_IN_PROGRESS

  """
  The provision account holder CREATE_APPLICATION action has encountered an error.
  """
  PROVISION_ACCOUNT_HOLDER_CREATE_APPLICATION_ERROR

  """The provision account holder CREATE_APPLICATION action has completed."""
  PROVISION_ACCOUNT_HOLDER_CREATE_APPLICATION_COMPLETED

  """
  The provision account holder CREATE_APPLICATION action will not be completed due to the workflow exiting early.
  """
  PROVISION_ACCOUNT_HOLDER_CREATE_APPLICATION_NOT_COMPLETED

  """
  The provision account holder ISSUE_FINANCIAL_ACCOUNT action has been initiated.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_FINANCIAL_ACCOUNT_INITIATED

  """
  The provision account holder ISSUE_FINANCIAL_ACCOUNT action has started processing.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_FINANCIAL_ACCOUNT_IN_PROGRESS

  """
  The provision account holder ISSUE_FINANCIAL_ACCOUNT action has encountered an error.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_FINANCIAL_ACCOUNT_ERROR

  """
  The provision account holder ISSUE_FINANCIAL_ACCOUNT action has completed.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_FINANCIAL_ACCOUNT_COMPLETED

  """
  The provision account holder ISSUE_FINANCIAL_ACCOUNT action will not be completed due to the workflow exiting early.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_FINANCIAL_ACCOUNT_NOT_COMPLETED

  """
  The provision account holder SET_CREDIT_LIMIT action has been initiated.
  """
  PROVISION_ACCOUNT_HOLDER_SET_CREDIT_LIMIT_INITIATED

  """
  The provision account holder SET_CREDIT_LIMIT action has started processing.
  """
  PROVISION_ACCOUNT_HOLDER_SET_CREDIT_LIMIT_IN_PROGRESS

  """
  The provision account holder SET_CREDIT_LIMIT action has encountered an error.
  """
  PROVISION_ACCOUNT_HOLDER_SET_CREDIT_LIMIT_ERROR

  """The provision account holder SET_CREDIT_LIMIT action has completed."""
  PROVISION_ACCOUNT_HOLDER_SET_CREDIT_LIMIT_COMPLETED

  """
  The provision account holder SET_CREDIT_LIMIT action will not be completed due to the workflow exiting early.
  """
  PROVISION_ACCOUNT_HOLDER_SET_CREDIT_LIMIT_NOT_COMPLETED

  """
  The provision account holder ISSUE_PAYMENT_CARD action has been initiated.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_PAYMENT_CARD_INITIATED

  """
  The provision account holder ISSUE_PAYMENT_CARD action has started processing.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_PAYMENT_CARD_IN_PROGRESS

  """
  The provision account holder ISSUE_PAYMENT_CARD action has encountered an error.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_PAYMENT_CARD_ERROR

  """The provision account holder ISSUE_PAYMENT_CARD action has completed."""
  PROVISION_ACCOUNT_HOLDER_ISSUE_PAYMENT_CARD_COMPLETED

  """
  The provision account holder ISSUE_PAYMENT_CARD action will not be completed due to the workflow exiting early.
  """
  PROVISION_ACCOUNT_HOLDER_ISSUE_PAYMENT_CARD_NOT_COMPLETED

  """
  The provision account holder REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT action has been initiated.
  """
  PROVISION_ACCOUNT_HOLDER_REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT_INITIATED

  """
  The provision account holder REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT action has started processing.
  """
  PROVISION_ACCOUNT_HOLDER_REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT_IN_PROGRESS

  """
  The provision account holder REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT action has encountered an error.
  """
  PROVISION_ACCOUNT_HOLDER_REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT_ERROR

  """
  The provision account holder REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT action has completed.
  """
  PROVISION_ACCOUNT_HOLDER_REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT_COMPLETED

  """
  The provision account holder REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT action will not be completed due to the workflow exiting early.
  """
  PROVISION_ACCOUNT_HOLDER_REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT_NOT_COMPLETED

  """
  The provision account holder LINK_EXTERNAL_BANK_ACCOUNT action has been initiated.
  """
  PROVISION_ACCOUNT_HOLDER_LINK_EXTERNAL_BANK_ACCOUNT_INITIATED

  """
  The provision account holder LINK_EXTERNAL_BANK_ACCOUNT action has started processing.
  """
  PROVISION_ACCOUNT_HOLDER_LINK_EXTERNAL_BANK_ACCOUNT_IN_PROGRESS

  """
  The provision account holder LINK_EXTERNAL_BANK_ACCOUNT action has encountered an error.
  """
  PROVISION_ACCOUNT_HOLDER_LINK_EXTERNAL_BANK_ACCOUNT_ERROR

  """
  The provision account holder LINK_EXTERNAL_BANK_ACCOUNT action has completed.
  """
  PROVISION_ACCOUNT_HOLDER_LINK_EXTERNAL_BANK_ACCOUNT_COMPLETED

  """
  The provision account holder LINK_EXTERNAL_BANK_ACCOUNT action will not be completed due to the workflow exiting early.
  """
  PROVISION_ACCOUNT_HOLDER_LINK_EXTERNAL_BANK_ACCOUNT_NOT_COMPLETED

  """
  The provision account holder NOTIFY_PROVIDER action has been initiated.
  """
  PROVISION_ACCOUNT_HOLDER_NOTIFY_PROVIDER_INITIATED

  """
  The provision account holder NOTIFY_PROVIDER action has started processing.
  """
  PROVISION_ACCOUNT_HOLDER_NOTIFY_PROVIDER_IN_PROGRESS

  """
  The provision account holder NOTIFY_PROVIDER action has encountered an error.
  """
  PROVISION_ACCOUNT_HOLDER_NOTIFY_PROVIDER_ERROR

  """The provision account holder NOTIFY_PROVIDER action has completed."""
  PROVISION_ACCOUNT_HOLDER_NOTIFY_PROVIDER_COMPLETED

  """
  The provision account holder NOTIFY_PROVIDER action will not be completed due to the workflow exiting early.
  """
  PROVISION_ACCOUNT_HOLDER_NOTIFY_PROVIDER_NOT_COMPLETED

  """Triggered when a Fee has been charged."""
  FEE_CHARGE_EVENT

  """Triggered when a Fee has been reversed."""
  FEE_REVERSAL_EVENT
}

"""The connection type for Notification Events."""
type NotificationEventsConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEventEdge!]
}

"""The edge type for Notification Events."""
type NotificationEventEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Notification Event."""
  node: NotificationEvent
}

"""The connection type for Webhook Notification Targets."""
type WebhookNotificationTargetConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WebhookNotificationTargetEdge!]
}

"""The edge type for Webhook Notification Target."""
type WebhookNotificationTargetEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Webhook Notification Target."""
  node: WebhookNotificationTarget
}

"""The status of a notification target."""
enum NotificationTargetStatus {
  """The target has not yet been verified. Events will not be delivered."""
  PENDING_VERIFICATION

  """The target has been verified and events are being delivered."""
  ACTIVE

  """
  The target has been manually deactivated or Highnote has detected an error delivering events.
  """
  DEACTIVATED

  """The target was unable to be verified."""
  ACTIVATION_FAILED
}

"""An object representing a check event type change."""
type CheckPaymentEvent implements Node {
  """Global ID used to reference this object."""
  id: ID!

  """The event type of check at the time of the event."""
  type: CheckPaymentEventType

  """The reason for the check failure, if applicable."""
  failureReason: CheckPaymentFailureReason

  """The date and time, in ISO 8602 format, this event occurred."""
  createdAt: String

  """The checkPayment associated with this event."""
  checkPayment: CheckPayment
}

"""The reason for the check failure, if applicable."""
enum CheckPaymentFailureReason {
  """The check failed due to insufficient funds."""
  INSUFFICIENT_FUNDS

  """The check failed due to a closed account."""
  ACCOUNT_CLOSED

  """The check failed due to a stop payment request."""
  PAYMENT_STOPPED

  """The check failed due to the address being invalid."""
  INVALID_ADDRESS

  """
  The check failed due since the `FinancialAccount` is not enabled for checks.
  """
  FINANCIAL_ACCOUNT_NOT_ENABLED_FOR_CHECK_PAYMENTS

  """The check failed due to a Highnote internal error."""
  INTERNAL_ERROR

  """
  The check failed due to an unknown reason. Contact Highnote support for more information.
  """
  UNKNOWN

  """The check failed due to a risk assessment."""
  RISK
}

"""An object representing a check recipient."""
type CheckPaymentRecipient {
  """The name of the recipient of the check."""
  name: String

  """The address of the recipient of the check."""
  address: Address

  """
  Externally provided ID (255 character limit) to associate this recipient with an external system.
  """
  externalIdentifier: String
}

"""The current event type of the check."""
enum CheckPaymentEventType {
  """The check has been initiated and is pending funding."""
  FUNDING_PENDING

  """The check funding has been initiated."""
  FUNDING_STARTED

  """The check has been funded and is pending disbursement."""
  FUNDING_COMPLETED

  """The funds have been disbursed to external accounts."""
  FUNDING_DISBURSED

  """The check has been printed and is pending shipment."""
  PENDING_SHIPMENT

  """The check has been shipped."""
  SHIPPED

  """The check has been delivered, and cashed or deposited."""
  COMPLETED

  """The check has been voided."""
  VOIDED

  """
  The check has failed. The reason for the failure is included in the event.
  """
  FAILED

  """The check has been reversed due to voiding or failure."""
  REVERSAL_INITIATED

  """The check reversal has been completed."""
  REVERSAL_COMPLETED

  """The check has been printed."""
  PRINTED

  """The check has been paid out."""
  PAID

  """The check is processing by Highnote."""
  PROCESSING_BY_HIGHNOTE

  """The check is pending processing by Highnote."""
  PENDING_PROCESSING_BY_HIGHNOTE

  """The check has been processed by Highnote."""
  PROCESSED_BY_HIGHNOTE

  """The check has been put on hold for risk assessment."""
  ON_RISK_HOLD
}

"""An object representing a check."""
type CheckPayment implements Node {
  """Global ID used to reference this object."""
  id: ID!

  """The current status of the check."""
  status: CheckPaymentStatus

  """The reason for the check failure, if applicable."""
  failureReason: CheckPaymentFailureReason

  """A list of events that the `CheckPayment` has gone through."""
  events: [CheckPaymentEvent!]

  """The amount of the check."""
  amount: Amount

  """The recipient of the check."""
  recipient: CheckPaymentRecipient

  """The type of the check: digital or physical."""
  checkType: CheckPaymentType

  """The delivery type of the check."""
  shippingTime: CheckPaymentShippingTime

  """The date and time, in ISO 8602 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8602 format, this object was updated."""
  updatedAt: String

  """The `FinancialAccount` that funded the check."""
  financialAccount: FinancialAccount

  """The location of the check image."""
  imageUri: String
}

"""The status of the check."""
enum CheckPaymentStatus {
  """The check is started and pending completion."""
  PENDING

  """
  An event has occurred that has caused the check to fail. Check the `CheckPayment.failureReason` field for more information.
  """
  FAILED

  """The check has been completed."""
  COMPLETE
}

"""Enum representing the shipping time for a physical check."""
enum CheckPaymentShippingTime {
  """Standard mail."""
  STANDARD

  """Certified mail."""
  CERTIFIED

  """Expedited mail."""
  EXPEDITED

  """Overnight mail."""
  OVERNIGHT
}

"""The type of the check: digital or physical."""
enum CheckPaymentType {
  """A physical check."""
  PHYSICAL
}

"""An event that occurs when a Fee is charged."""
type FeeChargeEvent implements Node {
  """Global ID used to reference the `FeeTransferEvent` object."""
  id: ID!

  """The financial account from where the fee was deducted."""
  originatingAccount: FinancialAccount

  """The Financial account that receives the fee."""
  receivingAccount: FinancialAccount

  """The activity for which the fee is charged."""
  feeActivityType: FeeTransferEventFeeActivityType

  """The Fee status."""
  status: FeeTransferStatusDetails

  """The date and time, in ISO 8601 format, the fee was charged."""
  transferDate: String

  """
  The actual fee amount charged. This field is available when status is COMPLETE.
  """
  feeTransferAmount: Amount
}

"""An event that occurs when a Fee is reversed."""
type FeeReversalEvent implements Node {
  """Global ID used to reference the `FeeTransferEvent` object."""
  id: ID!

  """The financial account from where the fee was deducted."""
  originatingAccount: FinancialAccount

  """The Financial account that receives the fee."""
  receivingAccount: FinancialAccount

  """The activity for which the fee is charged."""
  feeActivityType: FeeTransferEventFeeActivityType

  """The Fee status."""
  status: FeeTransferStatusDetails

  """The date and time, in ISO 8601 format, the fee was reversed."""
  transferDate: String

  """
  The actual fee amount reversed. This field is available when status is COMPLETE.
  """
  feeTransferAmount: Amount

  """The original fee transfer event that was reversed."""
  sourceFeeTransferEvent: FeeTransferEvent
}

"""The input to add a new `CollaborativeAuthorizationEndpoint`."""
input AddCollaborativeAuthorizationEndpointInput {
  """
  A name for the `CollaborativeAuthorizationEndpoint`.
  
  Must be between 1 and 255 characters.
  """
  name: String!

  """
  A valid URI to send collaborative authorization requests. The protocol _must be included_ and is required to be `https`.
  
  Example: `https://mywebhook.com`
  """
  uri: String!
}

"""The input to activate a `CollaborativeAuthorizationEndpoint`."""
input ActivateCollaborativeAuthorizationEndpointInput {
  """The Global ID of the `CollaborativeAuthorizationEndpoint` to activate."""
  endpointId: ID!
}

"""
The input to configure the Collaborative Authorization product feature.
"""
input EnableCollaborativeAuthorizationFeatureInput {
  """
  The Global ID of the `CardProduct` for which to enable the Collaborative Authorization product feature.
  """
  cardProductId: ID!
}

"""The input to deactivate a `CollaborativeAuthorizationEndpoint`."""
input DeactivateCollaborativeAuthorizationEndpointInput {
  """
  The Global ID of the `CollaborativeAuthorizationEndpoint` to deactivate.
  """
  endpointId: ID!
}

"""The input to remove a `CollaborativeAuthorizationEndpoint`."""
input RemoveCollaborativeAuthorizationEndpointInput {
  """The Global ID of the `CollaborativeAuthorizationEndpoint` to remove."""
  endpointId: ID!
}

"""The input to rename a `CollaborativeAuthorizationEndpoint`."""
input RenameCollaborativeAuthorizationEndpointInput {
  """The Global ID of the `CollaborativeAuthorizationEndpoint` to rename."""
  endpointId: ID!

  """
  The new, human-friendly name for your `CollaborativeAuthorizationEndpoint`.
  
  This value can contain any characters but cannot exceed a length of 255.
  """
  name: String!
}

"""The return types when adding a `CollaborativeAuthorizationEndpoint`."""
union AddCollaborativeAuthorizationEndpointPayload = CollaborativeAuthorizationEndpoint | UserError | AccessDeniedError

"""
The return types when activating a `CollaborativeAuthorizationEndpoint`.
"""
union ActivateCollaborativeAuthorizationEndpointPayload = CollaborativeAuthorizationEndpoint | UserError | AccessDeniedError

"""
The return types when enabling the Collaborative Authorization product feature.
"""
union EnableCollaborativeAuthorizationFeaturePayload = CardProduct | UserError | AccessDeniedError

"""
The return types when deactivating a `CollaborativeAuthorizationEndpoint`.
"""
union DeactivateCollaborativeAuthorizationEndpointPayload = CollaborativeAuthorizationEndpoint | UserError | AccessDeniedError

"""The return types when removing a `CollaborativeAuthorizationEndpoint`."""
union RemoveCollaborativeAuthorizationEndpointPayload = CollaborativeAuthorizationEndpoint | UserError | AccessDeniedError

"""The return types when renaming a `CollaborativeAuthorizationEndpoint`."""
union RenameCollaborativeAuthorizationEndpointPayload = CollaborativeAuthorizationEndpoint | UserError | AccessDeniedError

"""A collaborative authorization endpoint."""
type CollaborativeAuthorizationEndpoint implements Node {
  """
  Global ID used to reference the `CollaborativeAuthorizationEndpoint` in operations.
  """
  id: ID!

  """The name of the `CollaborativeAuthorizationEndpoint`."""
  name: String

  """The URI to send collaborative authorization requests."""
  uri: String

  """
  The date and time, in ISO 8601 format, the `CollaborativeAuthorizationEndpoint` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the `CollaborativeAuthorizationEndpoint` was most recently updated.
  """
  updatedAt: String

  """The signing keys used for this `CollaborativeAuthorizationEndpoint`."""
  signingKeys: [SigningKey!]

  """The status of the `CollaborativeAuthorizationEndpoint`."""
  status: CollaborativeAuthorizationEndpointStatus!
}

"""The status of a `CollaborativeAuthorizationEndpoint`."""
enum CollaborativeAuthorizationEndpointStatus {
  """
  The `CollaborativeAuthorizationEndpoint` has not yet been verified. Events will not be delivered.
  """
  PENDING_VERIFICATION

  """
  The `CollaborativeAuthorizationEndpoint` has been verified and events are being delivered.
  """
  ACTIVE

  """
  The `CollaborativeAuthorizationEndpoint` has been manually deactivated or Highnote has detected an error delivering events.
  """
  DEACTIVATED

  """The `CollaborativeAuthorizationEndpoint` was unable to be verified."""
  ACTIVATION_FAILED
}

"""The connection type for `CollaborativeAuthorizationEndpoints`."""
type CollaborativeAuthorizationEndpointConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CollaborativeAuthorizationEndpointEdge!]
}

"""The edge type for `CollaborativeAuthorizationEndpoints`."""
type CollaborativeAuthorizationEndpointEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `CollaborativeAuthorizationEndpoint`."""
  node: CollaborativeAuthorizationEndpoint
}

"""
The return types when payroll advance funds to an employee financial account.

WARNING: Transfer is deprecated. ElectronicFundsTransfer should be used instead.
"""
union InitiatePayrollAdvancePayload = Transfer | InterFinancialAccountTransfer | UserError | AccessDeniedError

"""The details to payroll advance to an employee Financial Account."""
input InitiatePayrollAdvanceInput {
  """The ID of the employer Financial Account for payroll advance."""
  fromFinancialAccountId: ID!

  """The ID of the employee Financial Account for payroll advance."""
  toFinancialAccountId: ID!

  """The amount to add to the Payment Card."""
  amount: AmountInput!

  """
  A description of the transfer for later reference. May not include the following characters: @ + = ’ " < > &
  """
  memo: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
The return types when fund card to an account holder financial account.
"""
union InitiateFundPaymentCardFinancialAccountTransferPayload = InterFinancialAccountTransfer | UserError | AccessDeniedError

"""
The return types when financial account is used to fund a financial account backing a payment card.
"""
union InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPayload = InterFinancialAccountTransfer | UserError | AccessDeniedError

"""
The return types when financial account backing a payment card is used to fund a funding financial account.
"""
union InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountPayload = InterFinancialAccountTransfer | UserError | AccessDeniedError

"""The return types when transfer occurs between financial accounts."""
union InitiateTransferBetweenFinancialAccountsPayload = InterFinancialAccountTransfer | UserError | AccessDeniedError

"""The states of a InterFinancialAccountTransfer."""
enum InterFinancialAccountTransferStatus {
  """
  The platform is currently validating and executing the InterFinancialAccountTransfer.
  """
  PENDING

  """The platform has started processing the InterFinancialAccountTransfer."""
  PROCESSING @deprecated(reason: "unused")

  """The platform has completed the money movement."""
  COMPLETED

  """
  The platform was not able to complete the money movement. See `statusReasonCode` for more information.
  """
  FAILED
}

"""The reasons a InterFinancialAccountTransfer could fail."""
enum InterFinancialAccountTransferStatusReasonCode {
  """
  The source account of the InterFinancialAccountTransfer did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """The source or receiving account is closed."""
  ACCOUNT_CLOSED

  """The source or receiving account was not found."""
  ACCOUNT_NOT_FOUND

  """The source and receiving account have different currency."""
  CURRENCY_MISMATCH

  """
  The receiving account does not have PrepaidCardFeature or DebitCardFeature as enabled.
  """
  PREPAID_CARD_OR_DEBIT_CARD_FEATURE_NOT_ENABLED

  """
  The source account does not have ProductFundingFeature or CardFundingFeature as enabled.
  """
  PRODUCT_FUNDING_OR_CARD_FUNDING_FEATURE_NOT_ENABLED

  """The requested amount is more than max program limit."""
  LIMIT_AMOUNT_EXCEEDING_MAX_PROGRAM_LOAD_LIMIT

  """
  The requested amount exceeds the maximum aggregate credit distribution amount.
  """
  TRANSFER_AMOUNT_EXCEEDING_MAX_AGGREGATE_CREDIT_DISTRIBUTION_AMOUNT

  """There is not enough balance to reduce the credit limit."""
  NOT_ENOUGH_BALANCE_TO_REDUCE_CREDIT_LIMIT

  """
  The account does not have the required payroll advance feature enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """The receiving account holder is not an Organization."""
  ACCOUNT_HOLDER_IS_NOT_AN_ORGANIZATION
}

"""
The type of activity associated with the InterFinancialAccountTransfer.
"""
enum InterFinancialAccountTransferActivityType {
  """This transfer is a generic transfer."""
  GENERAL

  """Payroll advance funds to an employee financial account."""
  PAYROLL_ADVANCE

  """Payroll advance repayment from an employee financial account."""
  PAYROLL_ADVANCE_REPAYMENT

  """
  This transfer funds a payment card `FinancialAccount` from a funding `FinancialAccount`.
  """
  LOAD_PAYMENT_CARD_ACCOUNT

  """
  Setting a limit on a financial account with a payment card.
  
  This isn't a transfer of funds, but a notification that a limit was set.
  """
  SET_LIMIT

  """This transfer resulted from an account charge off."""
  PAYROLL_ADVANCE_CHARGE_OFF

  """
  This transfer represents the remaining payroll deposit after advance repayment.
  """
  PAYROLL_DEPOSIT

  """Rewards earned for this account."""
  REWARD

  """Reversing rewards earned for this account."""
  REWARD_REVERSAL

  """Transfer of earned credit to this account."""
  EARNED_CREDIT

  """Reversing transfer of earned credit to this account."""
  EARNED_CREDIT_REVERSAL

  """
  Setting a pseudo balance limit for this account.
  This is only used for On-Demand Funding accounts.
  """
  SET_PSEUDO_BALANCE

  """
  Account Holder’s secured deposit used to cover an outstanding balance payable on the Financial Account.
  """
  RECOVER_SECURED_DEPOSIT

  """Provisional credit issued for a network chargeback."""
  CHARGEBACK_PROVISIONAL_CREDIT

  """This transfer is a tip disbursement."""
  TIP_DISBURSEMENT

  """This transfer is a tip disbursement reversal."""
  TIP_DISBURSEMENT_REVERSAL

  """
  A credit was issued for a transaction dispute that was not sent as a chargeback to the network.
  """
  DISPUTE_CREDIT

  """
  Chargeback adjustments made to the account to award the Provisional Credit after the Chargeback has been decided in its favor.
  """
  CHARGEBACK_WIN

  """
  Chargeback adjustments made to the account to revoke the Provisional Credit after the Chargeback has been decided against it.
  """
  CHARGEBACK_LOSS

  """Remove line of credit after an account closure."""
  CLOSE_LINE_OF_CREDIT

  """
  Receivables purchase agreement. Receivables were purchased from the bank.
  """
  RECEIVABLE_PURCHASE

  """Reversal of a receivables purchase agreement."""
  RECEIVABLE_PURCHASE_REVERSAL

  """Receivables purchase interest."""
  RECEIVABLE_PURCHASE_INTEREST

  """Reversal of a receivables purchase interest."""
  RECEIVABLE_PURCHASE_INTEREST_REVERSAL

  """Transfer of goods and services credit to this account."""
  GOODS_AND_SERVICES

  """Intra company transfer of credit to this account."""
  INTRA_COMPANY

  """Charge off an unrecoverable balance receivable on this account."""
  CHARGE_OFF

  """`Transfer` for extra EWA repayment"""
  REPAYMENT_ADJUSTMENT

  """`Transfer` of manual adjustment."""
  GENERAL_ADJUSTMENT

  """`Transfer` for a requested routes."""
  PAYOUT

  """Transfer of secured deposit to this account."""
  SECURED_DEPOSIT

  """Transfer of secured deposit on this account being reversed."""
  SECURED_DEPOSIT_REVERSAL

  """`Transfer` of cash reward points redemption to this account."""
  CASH_REDEEM_REWARD_POINTS

  """`Transfer` of cash reward points redemption reversal to this account."""
  CASH_REDEEM_REWARD_POINTS_REVERSAL

  """Transfer for payroll."""
  PAYROLL

  """Transfer for payroll reversal."""
  PAYROLL_REVERSAL

  """Transfer for payroll advance."""
  ACCOUNT_PAYROLL_ADVANCE

  """Transfer for payroll advance reversal."""
  PAYROLL_ADVANCE_REVERSAL

  """Transfer for payroll advance repayment."""
  ACCOUNT_PAYROLL_ADVANCE_REPAYMENT

  """Transfer for payroll advance repayment reversal."""
  PAYROLL_ADVANCE_REPAYMENT_REVERSAL

  """Transfer for adjustment."""
  ADJUSTMENT

  """
  Chargeback adjustments made to the account to award the Provisional Credit after the Chargeback has been decided in its favor.
  """
  CHARGEBACK_WIN_WITHOUT_PROVISIONAL_CREDIT

  """Transfer for merchant payout."""
  MERCHANT_PAYOUT

  """transfer for account repayment."""
  REPAYMENT

  """transfer for account repayment reversal."""
  REPAYMENT_REVERSAL

  """transfer for interchange sweep."""
  INTERCHANGE_SWEEP

  """transfer for issuer-liable dispute adjustment."""
  DISPUTE_ADJUSTMENT_ISSUER_LIABLE

  """transfer for issuer-liable dispute where the chargeback was lost."""
  DISPUTE_WON_CHARGEBACK_LOSS_ISSUER_LIABLE

  """transfer for issuer balance migration."""
  ISSUER_BALANCE_MIGRATION
}

"""A movement of money within the Highnote platform."""
type InterFinancialAccountTransfer implements Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the transfer."""
  status: InterFinancialAccountTransferStatus

  """The reason for the current status."""
  statusReason: InterFinancialAccountTransferStatusReasonCode

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The purpose for the transfer."""
  purpose: TransferPurpose

  """The outcomes of running rules on the transfer."""
  interFinancialAccountTransferRuleResults: [InterFinancialAccountTransferRuleResult!]

  """The source financial account of the transfer."""
  fromFinancialAccount: FinancialAccount

  """The receiving financial account of the transfer."""
  toFinancialAccount: FinancialAccount

  """The type of activity associated with this transfer."""
  transferActivityType: InterFinancialAccountTransferActivityType
}

"""The details to fund card to an account holder Financial Account."""
input InitiateFundPaymentCardFinancialAccountTransferInput {
  """The ID of the source funding Financial Account."""
  fromFinancialAccountId: ID!

  """The ID of the target card holder Financial Account."""
  toFinancialAccountId: ID!

  """The amount to add to the Payment Card."""
  amount: AmountInput!

  """A description of the transfer for later reference."""
  memo: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
The details to transfer money from a funding financial account to a financial account backing a payment card.
"""
input InitiateTransferFromFundingFinancialAccountToPaymentCardFinancialAccountInput {
  """The ID of the source funding financial account."""
  fromFinancialAccountId: ID!

  """The ID of the target card holder financial account."""
  toFinancialAccountId: ID!

  """The amount to add to the Payment Card."""
  amount: AmountInput!

  """
  A description of the transfer for later reference. Maximum length is 1024, and valid characters
  are all UTF-8 and ASCII characters.
  """
  memo: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""The details to transfer money between financial accounts."""
input InitiateTransferBetweenFinancialAccountsInput {
  """The ID of the source financial account."""
  fromFinancialAccountId: ID!

  """The ID of the target financial account."""
  toFinancialAccountId: ID!

  """The amount to transfer."""
  amount: AmountInput!

  """The purpose for the transfer."""
  purpose: TransferPurpose!

  """
  A description of the transfer for later reference. Maximum length is 1024, and valid characters
  are all UTF-8 and ASCII characters.
  """
  memo: String

  """
  Externally provided identifier that can be used to reference the transfer. If not provided, this field will be blank.
  
  The identifier can be any valid ASCII character and cannot exceed 255 characters.
  """
  externalIdentifier: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""Purpose for the transfer."""
enum TransferPurpose {
  """Transfer for earned rewards."""
  REWARD

  """Reverse earned rewards transfer."""
  REWARD_REVERSAL

  """Transfer for earned tips."""
  TIP_DISBURSEMENT

  """Reverse earned tips transfer."""
  TIP_DISBURSEMENT_REVERSAL

  """Transfer for earned credits."""
  EARNED_CREDIT

  """Reverse earned credit transfer."""
  EARNED_CREDIT_REVERSAL

  """Transfer for general purpose."""
  GENERAL

  """Transfer for goods and services."""
  GOODS_AND_SERVICES

  """Intra company transfer"""
  INTRA_COMPANY

  """Transfer for secured deposit."""
  SECURED_DEPOSIT

  """Transfer for secured deposit reversal."""
  SECURED_DEPOSIT_REVERSAL

  """Transfer for payout."""
  PAYOUT

  """Transfer for payroll."""
  PAYROLL

  """Transfer for payroll reversal."""
  PAYROLL_REVERSAL

  """Transfer for payroll advance."""
  PAYROLL_ADVANCE

  """Transfer for payroll advance reversal."""
  PAYROLL_ADVANCE_REVERSAL

  """Transfer for payroll advance repayment."""
  PAYROLL_ADVANCE_REPAYMENT

  """Transfer for payroll advance repayment reversal."""
  PAYROLL_ADVANCE_REPAYMENT_REVERSAL

  """Transfer for adjustment."""
  ADJUSTMENT

  """Transfer for merchant payout."""
  MERCHANT_PAYOUT

  """transfer for account repayment."""
  REPAYMENT

  """transfer for account repayment reversal."""
  REPAYMENT_REVERSAL

  """transfer for issuer balance migration."""
  ISSUER_BALANCE_MIGRATION
}

"""
The details to transfer money from a financial account backing a payment card to a funding financial account.
"""
input InitiateTransferFromPaymentCardFinancialAccountToFundingFinancialAccountInput {
  """The ID of the source payment card financial account."""
  fromFinancialAccountId: ID!

  """The ID of the target funding financial account."""
  toFinancialAccountId: ID!

  """The amount to transfer to the funding financial account."""
  amount: AmountInput!

  """
  A description of the transfer for later reference. Maximum length is 1024, and valid characters
  are all UTF-8 and ASCII characters.
  """
  memo: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
The return types of credit limit update to an account holder financial account.
"""
union InitiateFinancialAccountCreditLimitUpdateFromProductFundingPayload = FinancialAccountCreditLimitUpdateFromProductFunding | InterFinancialAccountTransfer | UserError | AccessDeniedError

"""The states of a FinancialAccountCreditLimitUpdateFromProductFunding."""
enum FinancialAccountCreditLimitUpdateFromProductFundingStatus {
  """
  The platform is currently validating and executing the credit limit update.
  """
  PENDING

  """The platform has started processing the credit limit update."""
  PROCESSING @deprecated(reason: "unused")

  """The platform has completed the credit limit update."""
  COMPLETED

  """
  The platform was not able to complete the credit limit update. See `statusReasonCode` for more information.
  """
  FAILED
}

"""
The reasons a FinancialAccountCreditLimitUpdateFromProductFunding could fail.
"""
enum FinancialAccountCreditLimitUpdateFromProductFundingStatusReasonCode {
  """
  The associated product funding account did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """The associated product funding account or account is closed."""
  ACCOUNT_CLOSED

  """The account was not found."""
  ACCOUNT_NOT_FOUND

  """The requested amount is more than max program limit."""
  LIMIT_AMOUNT_EXCEEDING_MAX_PROGRAM_LOAD_LIMIT

  """
  The requested amount exceeds the maximum aggregate credit distribution amount.
  """
  TRANSFER_AMOUNT_EXCEEDING_MAX_AGGREGATE_CREDIT_DISTRIBUTION_AMOUNT

  """There is not enough balance to reduce the credit limit."""
  NOT_ENOUGH_BALANCE_TO_REDUCE_CREDIT_LIMIT
}

"""
Credit limit update of a Financial Account within the Highnote platform.
"""
type FinancialAccountCreditLimitUpdateFromProductFunding implements Node {
  """Global ID used to reference the credit limit update in operations."""
  id: ID!

  """The amount of the credit limit."""
  amount: Amount

  """The current status of the credit limit."""
  status: FinancialAccountCreditLimitUpdateFromProductFundingStatus

  """The reason for the current status."""
  statusReason: FinancialAccountCreditLimitUpdateFromProductFundingStatusReasonCode

  """
  The date and time, in ISO 8601 format, the credit limit update was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the credit limit update was last updated.
  """
  updatedAt: String

  """A description of the credit limit update for later reference."""
  memo: String

  """The ledgers affected by the credit limit update."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]
}

"""
The details to update credit limit of an account holder Financial Account.
"""
input InitiateFinancialAccountCreditLimitUpdateFromProductFundingInput {
  """The ID of the Financial Account for setting credit limit."""
  financialAccountId: ID!

  """The amount of credit limit for the Payment Card."""
  amount: AmountInput!

  """A description of the credit limit update for later reference."""
  memo: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

interface InternalTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the internal transfer."""
  internalTransferStatus: InterFinancialAccountTransferStatus

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String
}

"""
The InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPendingEvent is triggered when money movement from a Funding Financial Account to a Payment Financial Account is pending.
"""
type InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPendingEvent implements Node & InternalTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the internal transfer."""
  internalTransferStatus: InterFinancialAccountTransferStatus

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String
}

"""
The InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPendingEvent is triggered when money movement from a Funding Financial Account to a Payment Financial Account has completed.
"""
type InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountCompletedEvent implements Node & InternalTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the internal transfer."""
  internalTransferStatus: InterFinancialAccountTransferStatus

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String
}

"""
The InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountPendingEvent is triggered when money movement from a Funding Financial Account to a Payment Financial Account has failed.
"""
type InternalTransferFromFundingFinancialAccountToPaymentCardFinancialAccountFailedEvent implements Node & InternalTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the internal transfer."""
  internalTransferStatus: InterFinancialAccountTransferStatus

  """The reason for the current internal transfer status."""
  internalTransferStatusReason: InterFinancialAccountTransferStatusReasonCode

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String
}

"""
The InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountPendingEvent is triggered when money movement from a Payment Financial Account to a Funding Financial Account is pending.
"""
type InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountPendingEvent implements Node & InternalTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the internal transfer."""
  internalTransferStatus: InterFinancialAccountTransferStatus

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String
}

"""
The InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountCompletedEvent is triggered when money movement from a Payment Financial Account to a Funding Financial Account has completed.
"""
type InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountCompletedEvent implements Node & InternalTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the internal transfer."""
  internalTransferStatus: InterFinancialAccountTransferStatus

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String
}

"""
The InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountFailedEvent is triggered when money movement from a Payment Financial Account to a Funding Financial Account has failed.
"""
type InternalTransferFromPaymentCardFinancialAccountToFundingFinancialAccountFailedEvent implements Node & InternalTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The current status of the internal transfer."""
  internalTransferStatus: InterFinancialAccountTransferStatus

  """The reason for the current internal transfer status."""
  internalTransferStatusReason: InterFinancialAccountTransferStatusReasonCode

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String
}

interface PayrollAdvanceEvent {
  """Global ID used to reference the Financial Event Id in operations."""
  id: ID!

  """The ID of the financial account receiving funds."""
  financialAccountId: ID

  """
  The ID of an employer financial account.
  
  This must be a `FinancialAccount` ID.
  """
  employerFinancialAccountId: ID!

  """The ID of a payroll Transfer"""
  payrollTransferId: ID

  """The `PayrollAdvance` related to this `PayrollAdvanceEvent`"""
  payrollAdvance: PayrollAdvance
}

"""
The PayrollAdvanceRepaymentCompletedEvent is triggered when an amount pertaining to a `PayrollAdvance` is has been repaid.
"""
type PayrollAdvanceRepaymentCompletedEvent implements Node & PayrollAdvanceEvent {
  """Global ID used to reference the Financial Event Id in operations."""
  id: ID!

  """The ID of the financial account receiving funds."""
  financialAccountId: ID

  """
  The ID of an employer financial account.
  
  This must be a `FinancialAccount` ID.
  """
  employerFinancialAccountId: ID!

  """The ID of a payroll Transfer"""
  payrollTransferId: ID

  """
  The `PayrollAdvance` related to this `PayrollAdvanceWriteOffCompletedEvent`
  """
  payrollAdvance: PayrollAdvance
}

"""
The PayrollAdvanceWriteOffCompletedEvent is triggered when an amount pertaining to a `PayrollAdvance` is has been written off.
"""
type PayrollAdvanceWriteOffCompletedEvent implements Node & PayrollAdvanceEvent {
  """Global ID used to reference the Financial Event Id in operations."""
  id: ID!

  """The ID of the financial account receiving funds."""
  financialAccountId: ID

  """
  The ID of an employer financial account.
  
  This must be a `FinancialAccount` ID.
  """
  employerFinancialAccountId: ID!

  """The ID of a payroll Transfer"""
  payrollTransferId: ID

  """
  The `PayrollAdvance` related to this `PayrollAdvanceWriteOffCompletedEvent`
  """
  payrollAdvance: PayrollAdvance
}

interface PaymentAdvance {
  """Global ID used to reference the Payroll Payment Advance."""
  id: ID!

  """The status of Payroll Payment Advance."""
  paymentAdvanceStatus: PaymentAdvanceStatus

  """The original amount of the Payroll Payment Advance."""
  advanceAmount: Amount

  """The amount of the Payroll Payment Advance that has yet to be repaid."""
  amountBefore: Amount

  """
  The amount that should be deducted from the Payroll Payment Advance outstanding balance.
  """
  amountApplied: Amount

  """
  The balance amount due after `amountApplied` has been applied and deducted from the Payroll Payment Advance outstanding balance.
  """
  balanceAfter: Amount

  """Count of repayment attempts."""
  repaymentAttemptCount: UnsignedInt!

  """
  Will be set if the PaymentAdvanceStatus is of type `WRITTEN_OFF`, explains the reason for write off. Limit of 1024 characters.
  """
  writeOffReason: PaymentAdvanceWriteOffReason

  """
  Amount that will be written off from the Payroll Payment Advance outstanding balance.
  """
  writeOffAmount: Amount
}

"""The Payroll Payment Advance within the Highnote platform."""
type PayrollAdvance implements Node & PaymentAdvance {
  """Global ID used to reference the Payroll Payment Advance."""
  id: ID!

  """The status of Payroll Payment Advance."""
  paymentAdvanceStatus: PaymentAdvanceStatus

  """The original amount of the Payroll Payment Advance."""
  advanceAmount: Amount

  """The amount of the Payroll Payment Advance that has yet to be repaid."""
  amountBefore: Amount

  """
  The amount that should be deducted from the Payroll Payment Advance outstanding balance.
  """
  amountApplied: Amount

  """
  The balance amount due after `amountApplied` has been applied and deducted from the Payroll Payment Advance outstanding balance.
  """
  balanceAfter: Amount

  """Count of repayment attempts."""
  repaymentAttemptCount: UnsignedInt!

  """
  Will be set if the PaymentAdvanceStatus is of type `WRITTEN_OFF`, explains the reason for write off. Limit of 1024 characters.
  """
  writeOffReason: PaymentAdvanceWriteOffReason

  """
  Amount that will be written off from the Payroll Payment Advance outstanding balance.
  """
  writeOffAmount: Amount
}

"""The states of a Payment Advance."""
enum PaymentAdvanceStatus {
  """The full amount of the `PaymentAdvance` has not been repaid."""
  NOT_REPAID

  """A partial amount of the `PaymentAdvance` has been repaid."""
  PARTIALLY_REPAID

  """The full amount of the `PaymentAdvance` has been repaid."""
  FULLY_REPAID

  """
  The `PaymentAdvance` line item is written off because repaymentAttemptCount has reached 3.
  """
  WRITTEN_OFF
}

"""The reasons for writing off a payment advance."""
enum PaymentAdvanceWriteOffReason {
  """
  Payment Advance will be written off because repaymentAttemptCount has reached 3.
  """
  EXCEED_MAX_ATTEMPT_COUNT
}

"""A movement of money to write off payroll advance"""
type PayrollAdvanceWriteoffTransfer implements Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The written off amount."""
  amount: Amount

  """The current status of the transfer."""
  status: InterFinancialAccountTransferStatus

  """The reason for the current status."""
  statusReason: InterFinancialAccountTransferStatusReasonCode

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]
}

"""A movement of money to repay payroll advance"""
type PayrollAdvanceRepaymentTransfer implements Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount repaid."""
  amount: Amount

  """The current status of the transfer."""
  status: InterFinancialAccountTransferStatus

  """The reason for the current status."""
  statusReason: InterFinancialAccountTransferStatusReasonCode

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]
}

"""A movement of money to release hold on non originated ach credit"""
type ExternallyInitiatedAchReleaseHoldTransfer implements Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount released from hold."""
  amount: Amount

  """The current status of the transfer."""
  status: InterFinancialAccountTransferStatus

  """The reason for the current status."""
  statusReason: InterFinancialAccountTransferStatusReasonCode

  """A description of the transfer for reference."""
  memo: String

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]
}

"""The event type for the `DisbursementTransferEvent`."""
enum DisbursementTransferEventType {
  """
  The `DisbursementTransferEvent` type is unspecified.
  
  Contact Highnote support for more information.
  """
  UNSPECIFIED

  """The `DisbursementTransferEvent` type is a payment event."""
  DISBURSEMENT_PAYMENT

  """The `DisbursementTransferEvent` type is for a platform fee."""
  DISBURSEMENT_PLATFORM_FEE

  """The `DisbursementTransferEvent` type is for an interchange fee."""
  DISBURSEMENT_INTERCHANGE_FEE

  """The `DisbursementTransferEvent` type is for a network fee."""
  DISBURSEMENT_NETWORK_FEE

  """The `DisbursementTransferEvent` type is a payable event."""
  DISBURSEMENT_PAYABLE
}

"""Status of the `DisbursementTransferEvent`."""
enum DisbursementTransferEventStatus {
  """
  The `DisbursementTransferEvent` status is unspecified.
  
  Contact Highnote support for more information.
  """
  UNSPECIFIED

  """The `DisbursementTransferEvent` status is pending."""
  PENDING

  """The `DisbursementTransferEvent` status is completed."""
  COMPLETED

  """The `DisbursementTransferEvent` status is failed."""
  FAILED
}

"""
Additional details when the `DisbursementTransferEvent` status is failed.
"""
enum DisbursementTransferEventFailureReason {
  """
  The `DisbursementTransferEvent` failure reason is unspecified.
  
  Contact Highnote support for more information.
  """
  UNSPECIFIED

  """
  The originating account of the FeeTransferEvent did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """Payroll advance feature not enabled."""
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """The originating or receiving account was not found."""
  ACCOUNT_NOT_FOUND

  """The originating and receiving account have different currency."""
  CURRENCY_MISMATCH

  """The originating or receiving account is closed."""
  ACCOUNT_CLOSED

  """Payroll employer advance feature not enabled."""
  PAYROLL_EMPLOYER_ADVANCE_FEATURE_NOT_ENABLED

  """
  The originating or receiving account does not belong to the organization.
  """
  NOT_AN_ORGANIZATION_OWNED_ACCOUNT

  """Transfer amount exceeds allowed max program load limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_LOAD_LIMIT

  """Ach load is not allowed by program."""
  ACH_LOAD_NOT_ALLOWED_BY_PROGRAM

  """Tenant Id is not provided."""
  TENANT_ID_NOT_PROVIDED

  """Organization not provided."""
  ORGANIZATION_ID_NOT_PROVIDED

  """The originating or receiving account not provided."""
  ACCOUNT_NOT_PROVIDED

  """Idempotency Key not provided."""
  IDEMPOTENCY_KEY_NOT_PROVIDED

  """Transfer amount is negative or zero."""
  TRANSFER_AMOUNT_IS_NEGATIVE_OR_ZERO

  """Transfer amount exceeds allowed max program reload limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_RELOAD_LIMIT

  """The originating and receiving account do not belong to same product."""
  ACCOUNTS_DO_NOT_BELONG_TO_SAME_PRODUCT

  """Secured card feature is not enabled on account."""
  SECURE_CARD_FEATURE_NOT_ENABLED

  """Corporate bank account feature is not enabled."""
  CORPORATE_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """Reward point feature not enabled."""
  REWARD_POINT_FEATURE_NOT_ENABLED

  """Transfer amount below program minimum reload limit."""
  TRANSFER_AMOUNT_BELOW_MIN_PROGRAM_RELOAD_LIMIT

  """Transaction Id not provided."""
  TRANSACTION_ID_NOT_PROVIDED

  """Dda feature is not enabled on account."""
  DDA_FEATURE_NOT_ENABLED

  """Originated ach unload not supported on product"""
  ORIGINATED_ACH_UNLOAD_NOT_SUPPORTED_ON_PRODUCT

  """Fleet card feature is not enabled on account."""
  FLEET_FEATURE_NOT_ENABLED

  """Product funding feature is not enabled on account."""
  PRODUCT_FUNDING_FEATURE_NOT_ENABLED

  """Product funding feature is not enabled on account."""
  FUNDING_CARD_NOT_SUPPORTED

  """Debit card feature is not enabled on account."""
  DEBIT_CARD_FEATURE_NOT_ENABLED

  """The originating or receiving account is not active."""
  ACCOUNT_NOT_ACTIVE

  """Prepaid card feature is not enabled on account."""
  PREPAID_CARD_FEATURE_NOT_ENABLED

  """Funding account feature is not enabled on account."""
  FUNDING_ACCOUNT_FEATURE_NOT_ENABLED

  """Cash fund out not supported on product."""
  CASH_FUND_OUT_NOT_SUPPORTED_ON_PRODUCT

  """Credit card feature is not enabled on account."""
  CREDIT_CARD_FEATURE_NOT_ENABLED

  """Commercial credit Pay In Full card feature is not enabled on account."""
  COMMERCIAL_CREDIT_PAY_IN_FULL_FEATURE_NOT_ENABLED

  """The originating account does not have credit limit set."""
  CREDIT_LIMIT_NOT_SET_ON_ACCOUNT

  """
  The originating account does not have enough balance to reduce credit limit.
  """
  NOT_ENOUGH_BALANCE_TO_REDUCE_CREDIT_LIMIT

  """Transfer amount exceeding maximum program card balance."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_CARD_BALANCE

  """Transfer is not supported on product."""
  TRANSFER_NOT_SUPPORTED_ON_PRODUCT

  """Card funding feature not enabled on account."""
  CARD_FUNDING_FEATURE_NOT_ENABLED

  """Accounts do not have same primary account holder."""
  TRANSFER_CONDITION_SAME_PRIMARY_ACCOUNT_HOLDER_NOT_SATISFIED

  """
  The requested amount exceeds the maximum aggregate credit distribution amount.
  """
  TRANSFER_AMOUNT_EXCEEDING_MAX_AGGREGATE_CREDIT_DISTRIBUTION_AMOUNT

  """The amount specified for the disbursement is invalid."""
  INVALID_DISBURSEMENT_AMOUNT

  """Merchant settlement is not enabled on this account."""
  MERCHANT_SETTLEMENT_FEATURE_NOT_ENABLED
}

"""`TransferEvent` for disbursement."""
type DisbursementTransferEvent implements Node {
  """
  Global ID used to reference the `DisbursementTransferEvent` in operations.
  """
  id: ID!

  """The amount of the `DisbursementTransferEvent`."""
  amount: Amount

  """
  The date and time, in ISO 8601 format, the `DisbursementTransferEvent` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the `DisbursementTransferEvent` was last updated.
  """
  updatedAt: String

  """The type of the `DisbursementTransferEvent`."""
  eventType: DisbursementTransferEventType

  """The status of the `DisbursementTransferEvent`."""
  status: DisbursementTransferEventStatus

  """The reason code on why this `DisbursementTransferEvent` failed."""
  failureReason: DisbursementTransferEventFailureReason

  """The receiving financial account of the `DisbursementTransferEvent`."""
  toFinancialAccount: FinancialAccount

  """The ledgers affected by the `DisbursementTransferEvent`."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]
}

"""
The connection type for ACH Transaction.
Deprecated.
"""
type ACHTransactionConnection {
  """Information about the current page."""
  pageInfo: PageInfo! @deprecated(reason: "ACHTransactionConnection is deprecated in favor of IntegratorInitiatedACHTransferConnection and/or ExternallyInitiatedACHTransferConnection.")

  """A list of edges."""
  edges: [ACHTransactionEdge!] @deprecated(reason: "ACHTransactionConnection is deprecated in favor of IntegratorInitiatedACHTransferConnection and/or ExternallyInitiatedACHTransferConnection.")
}

"""
The edge type for a ACH Transaction.
Deprecated.
"""
type ACHTransactionEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String! @deprecated(reason: "ACHTransactionEdge is deprecated in favor of IntegratorInitiatedACHTransferEdge and/or ExternallyInitiatedACHTransferEdge.")

  """The ACH Transaction."""
  node: ACHTransactionEdgeNode @deprecated(reason: "ACHTransactionEdge is deprecated in favor of IntegratorInitiatedACHTransferEdge and/or ExternallyInitiatedACHTransferEdge.")
}

union ACHTransactionEdgeNode = SecureDepositACHTransfer | SecureCardBalanceRepaymentACHTransfer | IntegratorInitiatedFundsWithdrawalACHTransfer | IntegratorInitiatedFundsDepositACHTransfer

"""The connection type for Integrator Initiated ACH Transfers."""
type IntegratorInitiatedACHTransferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IntegratorInitiatedACHTransferEdge!]
}

"""The connection type for Externally Initiated ACH Transfers."""
type ExternallyInitiatedACHTransferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ExternallyInitiatedACHTransferEdge!]
}

"""The edge type for an Integrator Initiated ACH Transfer."""
type IntegratorInitiatedACHTransferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The ACH Transfer."""
  node: IntegratorInitiatedACHTransferEdgeNode
}

"""The edge type for an Externally Initiated ACH Transfer."""
type ExternallyInitiatedACHTransferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The ACH Transfer."""
  node: ExternallyInitiatedACHTransferEdgeNode
}

union IntegratorInitiatedACHTransferEdgeNode = SecureDepositACHTransfer | SecureCardBalanceRepaymentACHTransfer | IntegratorInitiatedFundsWithdrawalACHTransfer | IntegratorInitiatedFundsDepositACHTransfer

union ExternallyInitiatedACHTransferEdgeNode = PayrollTransfer | DebitFunds | CreditFunds | SecureDeposit

"""
The SecureDepositInitiatedEvent notifies when ACH Secure Deposits are initiated.
"""
type SecureDepositInitiatedEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `SecureDepositInitiatedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The SecureDepositProcessingEvent notifies when ACH Secure Deposits are processing.
"""
type SecureDepositProcessingEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `SecureDepositProcessingEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The SecureDepositProcessedEvent notifies when ACH Secure Deposits are finished processing.
"""
type SecureDepositProcessedEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `SecureDepositProcessedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The SecureDepositFailedEvent notifies when ACH Secure Deposits have failed to process.
"""
type SecureDepositFailedEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `SecureDepositFailedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """Additional details about why a secure deposit ACH transfer failed."""
  secureDepositACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use secureDepositACHReasonCode instead")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The SecureDepositReturnedEvent notifies when ACH Secure Deposits are returned.
"""
type SecureDepositReturnedEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `SecureDepositReturnedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """
  Additional details about why a secure deposit ACH transfer was returned.
  """
  secureDepositACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use secureDepositACHReasonCode instead")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""
The SecureDepositCanceledEvent notifies when ACH Secure Deposits are canceled.
"""
type SecureDepositCanceledEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `SecureDepositCanceledEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The RepaymentProcessingEvent notifies when ACH Repayments are processing.
"""
type RepaymentProcessingEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `RepaymentProcessingEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The RepaymentProcessedEvent notifies when ACH Repayments are finished processing.
"""
type RepaymentProcessedEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `RepaymentProcessedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The RepaymentFailedEvent notifies when ACH Repayments have failed to process.
"""
type RepaymentFailedEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `RepaymentFailedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """Additional details about why an ACH Repayments failed."""
  repaymentACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use repaymentACHReasonCode instead")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""The RepaymentReturnedEvent notifies when ACH Repayments are returned."""
type RepaymentReturnedEvent implements Node {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `RepaymentReturnedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """Additional details about why an ACH Repayments was returned."""
  repaymentACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use repaymentACHReasonCode instead")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

interface AchExternallyInitatedEvent {
  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ID of the financial account receiving funds."""
  financialAccountId: ID

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")
}

"""
The `FundsWithdrawalInitiatedEvent` notifies when `IntegratorInitiatedFundsWithdrawalACHTransfer`s are initiated.
"""
type FundsWithdrawalInitiatedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsWithdrawalInitiatedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsWithdrawalACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be a `FinancialAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be an `ExternalFinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsWithdrawalProcessingEvent` notifies when `IntegratorInitiatedFundsWithdrawalACHTransfer`s are processing.
"""
type FundsWithdrawalProcessingEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsWithdrawalProcessingEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsWithdrawalACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be a `FinancialAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be an `ExternalFinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsWithdrawalProcessedEvent` notifies when `IntegratorInitiatedFundsWithdrawalACHTransfer`s are processed.
"""
type FundsWithdrawalProcessedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsWithdrawalProcessedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsWithdrawalACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be a `FinancialAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be an `ExternalFinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsWithdrawalFailedEvent` notifies when `IntegratorInitiatedFundsWithdrawalACHTransfer`s have failed.
"""
type FundsWithdrawalFailedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsWithdrawalFailedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsWithdrawalACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be a `FinancialAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be an `ExternalFinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """Additional details about why an Funds Withdrawal ACH Transfer failed."""
  fundsWithdrawalACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use fundsWithdrawalACHReasonCode instead")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsWithdrawalReturnedEvent` notifies when `IntegratorInitiatedFundsWithdrawalACHTransfer`s are returned.
"""
type FundsWithdrawalReturnedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsWithdrawalReturnedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsWithdrawalACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be a `FinancialAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be an `ExternalFinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """Additional details about why an Funds Withdrawal ACH Transfer failed."""
  fundsWithdrawalACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use fundsWithdrawalACHReasonCode instead")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""
The `FundsWithdrawalCanceledEvent` notifies when `IntegratorInitiatedFundsWithdrawalACHTransfer`s are canceled.
"""
type FundsWithdrawalCanceledEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsWithdrawalCanceledEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsWithdrawalACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be a `FinancialAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be an `ExternalFinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsDepositInitiatedEvent` notifies when `IntegratorInitiatedFundsDepositACHTransfer`s are initiated.
"""
type FundsDepositInitiatedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsDepositInitiatedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsDepositACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsDepositProcessingEvent` notifies when `IntegratorInitiatedFundsDepositACHTransfer`s are processing.
"""
type FundsDepositProcessingEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsDepositProcessingEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsDepositACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsDepositProcessedEvent` notifies when `IntegratorInitiatedFundsDepositACHTransfer`s are processed.
"""
type FundsDepositProcessedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsDepositProcessedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsDepositACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsDepositFailedEvent` notifies when `IntegratorInitiatedFundsDepositACHTransfer`s have failed.
"""
type FundsDepositFailedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsDepositFailedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsDepositACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """Additional details about why an Funds Deposit ACH Transfer failed."""
  fundsDepositACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The `FundsDepositReturnedEvent` notifies when `IntegratorInitiatedFundsDepositACHTransfer`s are returned.
"""
type FundsDepositReturnedEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsDepositReturnedEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsDepositACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """Additional details about why an Funds Deposit ACH Transfer failed."""
  fundsDepositACHReasonCode: IntegratorInitiatedACHStatusReasonCode

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""
The `FundsDepositCanceledEvent` notifies when `IntegratorInitiatedFundsDepositACHTransfer`s are canceled.
"""
type FundsDepositCanceledEvent implements Node {
  """
  The ID of the transfer event. This `id` can be used to later retrieve details of this `FundsDepositCanceledEvent` or correlate it with other events on this `ElectronicFundsTransfer`.
  """
  id: ID!

  """
  The ID of the `IntegratorInitiatedFundsDepositACHTransfer` that triggered this event.
  """
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """
  The ID of the account sending the funds. Will always be an `ExternalFinancialBankAccount`.
  """
  fromFinancialAccountId: ID

  """
  The ID of the account receiving the funds. Will always be a `FinancialBankAccount`
  """
  toFinancialAccountId: ID

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String
}

"""
The AchExternallyInitatedDepositReceivedEvent event will be triggered when an incoming NACHA file transaction has been received.
"""
type AchExternallyInitatedDepositReceivedEvent implements Node & AchExternallyInitatedEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `AchExternallyInitatedDepositReceivedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ID of the financial account receiving funds."""
  financialAccountId: ID

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")
}

"""
The AchExternallyInitatedDepositProcessedEvent event will be triggered when an incoming NACHA file transaction has been processed.
"""
type AchExternallyInitatedDepositProcessedEvent implements Node & AchExternallyInitatedEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `AchExternallyInitatedDepositProcessedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ID of the financial account receiving funds."""
  financialAccountId: ID

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")
}

"""
The AchExternallyInitatedDepositFailedEvent event will be triggered when processing an incoming NACHA file transaction has failed.
"""
type AchExternallyInitatedDepositFailedEvent implements Node & AchExternallyInitatedEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `AchExternallyInitatedDepositFailedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ID of the financial account receiving funds."""
  financialAccountId: ID

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """Additional details about why an AchExternallyInitatedDeposit failed."""
  externallyInitatedDepositACHReasonCode: ExternallyInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use externallyInitatedDepositACHReasonCode instead")
}

"""
The AchExternallyInitiatedWithdrawalReceivedEvent event will be triggered when an incoming NACHA file transaction has been received.
"""
type AchExternallyInitiatedWithdrawalReceivedEvent implements Node & AchExternallyInitatedEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `AchExternallyInitiatedWithdrawalReceivedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ID of the Financial account that is the source of the funds."""
  financialAccountId: ID

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")
}

"""
The AchExternallyInitiatedWithdrawalProcessedEvent event will be triggered when an incoming NACHA file transaction has been processed.
"""
type AchExternallyInitiatedWithdrawalProcessedEvent implements Node & AchExternallyInitatedEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `AchExternallyInitiatedWithdrawalProcessedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ID of the Financial account that is the source of the funds."""
  financialAccountId: ID

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "transfer status only needed for failed or returned events")
}

"""
The AchExternallyInitiatedWithdrawalFailedEvent event will be triggered when processing an incoming NACHA file transaction has failed.
"""
type AchExternallyInitiatedWithdrawalFailedEvent implements Node & AchExternallyInitatedEvent {
  """
  The ID of the transaction event. This `id` can be used to later retrieve details of this `AchExternallyWithdrawalDepositFailedEvent` or correlate it with other events on this `Transaction`.
  """
  id: ID!

  """The ID of the Electronic Funds Transfer that trigger this event."""
  transactionId: ID

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ID of the Financial account that is the source of the funds."""
  financialAccountId: ID

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  Additional details about why an AchExternallyInitiatedWithdrawal failed.
  """
  externallyInitiatedWithdrawalACHReasonCode: ExternallyInitiatedACHStatusReasonCode

  """The status of the ACH transfer."""
  transferStatus: ACHTransferStatusDetails @deprecated(reason: "use ExternallyInitiatedWithdrawalAchReasonCode instead")
}

"""
The return types when simulating electronic funds transfers into an Organization's account.

WARNING: Transfer is deprecated. ElectronicFundsTransfer should be used instead.
"""
union SimulateDepositPayload = Transfer | WireTransfer | UserError | AccessDeniedError

"""
The return types when changing an `IntegratorInitiatedACHTransfer` from `INITIATED` to `PROCESSING`.
"""
union SimulateProcessingIntegratorInitiatedStatusChangePayload = SecureDepositACHTransfer | SecureCardBalanceRepaymentACHTransfer | IntegratorInitiatedFundsWithdrawalACHTransfer | IntegratorInitiatedFundsDepositACHTransfer | UserError | AccessDeniedError

"""
The return types when changing an `IntegratorInitiatedACHTransfer` from `PROCESSING` to `PROCESSED`.
"""
union SimulateProcessedIntegratorInitiatedStatusChangePayload = SecureDepositACHTransfer | SecureCardBalanceRepaymentACHTransfer | IntegratorInitiatedFundsWithdrawalACHTransfer | IntegratorInitiatedFundsDepositACHTransfer | UserError | AccessDeniedError

"""
The return types when changing an `IntegratorInitiatedACHTransfer` from `PROCESSING` to `RETURNED`.
"""
union SimulateReturnedIntegratorInitiatedStatusChangePayload = SecureDepositACHTransfer | SecureCardBalanceRepaymentACHTransfer | IntegratorInitiatedFundsWithdrawalACHTransfer | IntegratorInitiatedFundsDepositACHTransfer | UserError | AccessDeniedError

"""
The return types when initiating a new simulated `ExternallyInitiatedACHTransfer`.
"""
union ExternallyInitiatedACHTransferPayload = PayrollTransfer | CreditFunds | DebitFunds | SecureDeposit | UserError | AccessDeniedError

"""The return types when the integrator initiates an ACH transfer."""
union InitiateSecureDepositACHTransferPayload = SecureDepositACHTransfer | UserError | AccessDeniedError

"""
The return types when the integrator initiates a withdrawal of funds from
a `FinancialAccount` to an `ExternalFinancialAccount`.
"""
union InitiateFundsWithdrawalACHTransferPayload = IntegratorInitiatedFundsWithdrawalACHTransfer | UserError | AccessDeniedError

"""
The return types when the integrator initiates a withdrawal of funds from
an `ExternalFinancialAccount` to a `FinancialAccount`.
"""
union InitiateFundsDepositACHTransferPayload = IntegratorInitiatedFundsDepositACHTransfer | UserError | AccessDeniedError

"""The return types when a scheduled transfer is canceled."""
union CancelScheduledTransferPayload = RecurringACHTransfer | OneTimeACHTransfer | UserError | AccessDeniedError

"""The return types when a one time transfer is created."""
union CreateOneTimeACHTransferPayload = OneTimeACHTransfer | UserError | AccessDeniedError

"""The return types when a recurring transfer is created."""
union CreateRecurringACHTransferPayload = RecurringACHTransfer | UserError | AccessDeniedError

"""The return types when confirming a payroll deposit."""
union ConfirmPayrollDepositPayload = PayrollTransfer | CreditFunds | SecureDeposit | NonOriginatedAchTransfer | UserError | AccessDeniedError

"""
The return types when initiating add funds to a `FinancialAccount` via wire.
"""
union InitiateAddWiredFundsPayload = ReviewWorkflowEvent | UserError | AccessDeniedError

"""The details to confirm a payroll deposit."""
input ConfirmPayrollDepositInput {
  """
  The ACH Credit transfer that will be marked as a Payroll Deposit.
  
  This must be a `ElectronicFundsTransfer` ID.
  """
  id: ID!

  """
  If true, the transfer will be considered a PayrollTransfer, if not,
  it will always remain a CreditFunds transfer. If this flag is omitted
  then the default value will be true and the transfer will be marked as
  a PayrollTransfer.
  """
  isPayrollDeposit: Boolean

  """
  The employer financial account. This value is required if `isPayrollDeposit`
  is true.
  
  This must be a `FinancialAccount` ID.
  """
  employerFinancialAccountId: ID
}

"""
The details to withdraw funds from a `FinancialAccount` to an `ExternalFinancialAccount` using ACH.
"""
input InitiateFundsWithdrawalACHTransferInput {
  """
  The financial account the funds will be coming from.
  
  This must be a `FinancialAccount` ID.
  """
  fromFinancialAccountId: ID!

  """
  The financial account the funds will be going to.
  
  This must be a `ExternalFinancialAccount` ID.
  """
  toFinancialAccountId: ID!

  """
  Amount of the ACH transfer.
  
  There are at most 10 digits, including cents. There may be additional limits on the size based on program.
  """
  amount: AmountInput!

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptorInput!

  """
  The consent provided by the individual authorizing the ACH transfer.
  
  This includes the mandate template details to be collected for auditability of the accepted terms.
  """
  transferAgreementConsent: TransferAgreementConsentInput!

  """
  A value to distinguish unique transfers.
  
  This helps prevent duplicate transfers in error scenarios. If a failure happens and it is unclear
  if a transfer went through, it is safe to repeat the request with the same idempotency key. If the
  transfer already exists, the request will be deduped and the original transfer will be returned
  instead of a new transfer getting created for the same amount. If idempotency key is the same between
  two requests, the other fields will be ignored and the original transfer will be returned.
  
  **Maximum length:** 255 characters
  """
  idempotencyKey: String

  """
  The number of milliseconds after ACH transfer creation during which cancellation is allowed.
  The ACH transfer will not be processed during that period. After the period ends, the cancellation
  may no longer be possible.
  """
  cancellationPeriodMillis: UnsignedInt

  """
  A flag that indicates the desire to attempt to perform this transaction using Same-Day ACH methods.
  Note that this is not a guarantee of a same day transaction, but clearing will still be expedited.
  """
  sameDay: Boolean

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  **Maximum length:** 80 characters
  """
  paymentRelatedInformation: String
}

"""
The details to deposit funds from an `ExternalFinancialAccount` to a `FinancialAccount` using ACH.
"""
input InitiateFundsDepositACHTransferInput {
  """
  The financial account the funds will be coming from.
  
  This must be a `ExternalFinancialAccount` ID.
  """
  fromFinancialAccountId: ID!

  """
  The financial account the funds will be going to.
  
  This must be a `FinancialAccount` ID.
  """
  toFinancialAccountId: ID!

  """
  Amount of the ACH transfer.
  
  There are at most 10 digits, including cents. There may be additional limits on the size based on program.
  """
  amount: AmountInput!

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptorInput!

  """
  The consent provided by the individual authorizing the ACH transfer.
  
  This includes the mandate template details to be collected for auditability of the accepted terms.
  """
  transferAgreementConsent: TransferAgreementConsentInput!

  """
  A value to distinguish unique transfers.
  
  This helps prevent duplicate transfers in error scenarios. If a failure happens and it is unclear
  if a transfer went through, it is safe to repeat the request with the same idempotency key. If the
  transfer already exists, the request will be deduped and the original transfer will be returned
  instead of a new transfer getting created for the same amount. If idempotency key is the same between
  two requests, the other fields will be ignored and the original transfer will be returned.
  
  **Maximum length:** 255 characters
  """
  idempotencyKey: String

  """
  The number of milliseconds after ACH transfer creation during which cancellation is allowed.
  The ACH transfer will not be processed during that period. After the period ends, the cancellation
  may no longer be possible.
  """
  cancellationPeriodMillis: UnsignedInt

  """
  A flag that indicates the desire to attempt to perform this transaction using Same-Day ACH methods.
  Note that this is not a guarantee of a same day transaction, but clearing will still be expedited.
  """
  sameDay: Boolean

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  **Maximum length:** 80 characters
  """
  paymentRelatedInformation: String
}

"""
The details for the integrator to initiate a secure deposit ACH transfer.
"""
input InitiateSecureDepositACHTransferInput {
  """
  The financial account the funds will be coming from.
  
  This must be an `ExternalFinancialBankAccount` ID.
  """
  fromFinancialAccountId: ID!

  """
  The financial account the funds will be going to.
  
  This must be a `FinancialAccount` ID.
  """
  toFinancialAccountId: ID!

  """
  Amount of the ACH transfer.
  
  There are at most 10 digits, including cents. There may be additional limits on the size based on program.
  """
  amount: AmountInput!

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptorInput!

  """
  The consent provided by the individual authorizing the ACH transfer.
  
  This includes the mandate template details to be collected for auditability of the accepted terms.
  """
  transferAgreementConsent: TransferAgreementConsentInput!

  """
  A value to distinguish unique transfers.
  
  This helps prevent duplicate transfers in error scenarios. If a failure happens and it is unclear
  if a transfer went through, it is safe to repeat the request with the same idempotency key. If the
  transfer already exists, the request will be deduped and the original transfer will be returned
  instead of a new transfer getting created for the same amount. If idempotency key is the same between
  two requests, the other fields will be ignored and the original transfer will be returned.
  
  **Maximum length:** 255 characters
  """
  idempotencyKey: String

  """
  The number of milliseconds after ACH transfer creation during which cancellation is allowed.
  The ACH transfer will not be processed during that period. After the period ends, the cancellation
  may no longer be possible.
  """
  cancellationPeriodMillis: UnsignedInt

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  **Maximum length:** 80 characters
  """
  paymentRelatedInformation: String
}

"""
Input for changing the status of an `IntegratorInitiatedACHTransfer` to `PROCESSING`.

This will fail if the status of the transfer is not `INITIATED`.
"""
input SimulateProcessingIntegratorInitiatedStatusChangeInput {
  """The global ID of the transfer to be changed."""
  id: ID!
}

"""
Input for changing the status of an `IntegratorInitiatedACHTransfer` to `PROCESSED`.

This will fail if the status of the transfer is not `PROCESSING`.
"""
input SimulateProcessedIntegratorInitiatedStatusChangeInput {
  """The global ID of the transfer to be changed."""
  id: ID!
}

"""
Input for changing the status of an `IntegratorInitiatedACHTransfer` to `RETURNED`.

This will fail if the status of the transfer is not `PROCESSING`.
"""
input SimulateReturnedIntegratorInitiatedStatusChangeInput {
  """The global ID of the transfer to be changed."""
  id: ID!

  """The reason for the `RETURNED` status."""
  reasonCode: IntegratorInitiatedACHStatusReasonCode!
}

"""
Input for creating a new simulated `ExternallyInitiatedACHTransfer`.

This is used only for testing.
"""
input SimulateExternallyInitiatedACHTransferInput {
  """The internal `FinancialAccount` involved in the transfer."""
  financialAccountId: ID!

  """
  The identifier of the simulated external organization initiating the transfer.
  
  It can be up to 10 alphanumeric characters.
  If not specified, it will be populated as `1234567890`
  """
  companyIdentifier: String

  """
  The name of the simulated external organization initiating the transfer.
  
  It can be up to 16 alphanumeric characters.
  If not specified, it will be populated as `THESAMPLECOMPANY`
  """
  companyName: String

  """
  Arbitrary value describing the transfer entered by the simulated external organization.
  
  It can be up to 10 alphanumeric characters.
  If not specified, it will be populated as `ENTRYDSCPT`
  """
  companyEntryDescription: String

  """
  The identification number of the simulated external party initiating the transfer.
  
  This could be either a business or an individual. It can be up to 15 alphanumeric characters.
  If not specified, it will be populated as `RECEIVER_NUMBER`
  """
  individualIdentificationNumber: String

  """
  The name of the simulated external party initiating the transfer.
  
  This could be either a business or an individual. It can be up to 22 alphanumric characters.
  If not specified, it will be populated as `THISISTHERECIEVEROFACH`
  """
  individualName: String

  """
  The amount of money being transferred.
  If not specified, it will be populated as `USD 1000`
  """
  amount: AmountInput

  """
  Transfer type denoting the direction of the money, either into or out of the `FinancialAccount`.
  If not specified, it will be populated as `CREDIT`
  """
  transferType: TransferType

  """
  Settlement date in YYYY-MM-DD format. If not specified, current date will be used.
  """
  settlementDate: String
}

"""
Input for changing the status of an `ExternallyInitiatedACHTransfer` to `PROCESSING`.

This will fail if the status of the transfer is not `PENDING`.
"""
input SimulateProcessingExternallyInitiatedStatusChangeInput {
  """The global ID of the transfer to be changed."""
  id: ID!
}

"""
Denotes the type of transfer to create on a simulated `ExternallyInitiatedACHTransfer`.
"""
enum TransferType {
  """
  The transfer will result in a debit to the internal account.
  
  The `amount` from `SimulateExternallyInitiatedACHTransferInput` will be removed from the `FinancialAccount`.
  """
  DEBIT

  """
  The transfer will result in a credit to the internal account.
  
  The `amount` from `SimulateExternallyInitiatedACHTransferInput` will be added to the `FinancialAccount`.
  """
  CREDIT

  """
  This is a transfer of funds into an internal account for the purposes of payroll.
  
  the `amount` from `SimulateExternallyInitiatedACHTransferInput` will be added to the `FinancialAccount`.
  """
  PAYROLL

  """
  This is a transfer of funds into an internal account for the purpose of funding individual accounts
  """
  SECURE_DEPOSIT
}

"""Informational fields included in an ACH transfer."""
type ACHDescriptor {
  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  Receiver’s individual name set by the bank initiating the ACH entry.
  
  This could be a person or a business.
  """
  individualName: String

  """
  Receiver’s identification number set by the bank initiating the ACH entry.
  """
  individualIdentificationNumber: String
}

"""Input for fields describing an ACH transfer."""
input ACHDescriptorInput {
  """
  Company entered value for the type of ACH.
  
  It can be at most 10 characters. The characters should be alphanumeric.
  """
  companyEntryDescription: String!

  """
  Receiver’s individual name set by the bank initiating the ACH entry.
  
  This could be a person or a business. It can be at most 22 characters. The characters should be alphanumeric.
  """
  individualName: String!

  """
  Receiver’s identification number set by the bank initiating the ACH entry.
  
  This can be at most 15 characters. The characters should be alphanumeric.
  """
  individualIdentificationNumber: String
}

"""Input to create a one time ACH transfer"""
input CreateOneTimeACHTransferInput {
  """
  The ID of the `FinancialAccount` the funds will be coming from.
  
  Exactly one of `fromFinancialAccountId` and `toFinancialAccountId` will reference an external account id and the other will reference a Highnote account.
  """
  fromFinancialAccountId: ID!

  """
  Exactly one of `fromFinancialAccountId` and `toFinancialAccountId` will reference an external account id and the other will reference a Highnote account.
  """
  toFinancialAccountId: ID!

  """
  Descriptive fields about the ACH transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptorInput!

  """
  The consent provided by the individual authorizing the scheduled payment. Included is the mandate template details to be collected to provide auditability of the exact terms accepted.
  """
  transferAgreementConsent: TransferAgreementConsentInput!

  """The amount to be transferred"""
  transferAmountStrategy: AmountStrategyInput!

  """
  The date, in ISO 8601 format, the transfer should be scheduled.
  
  **Note: ** One time payments cannot be scheduled more than 90 days in advance.
  """
  transferDate: String!
}

"""Input to create a recurring ACH transfer"""
input CreateRecurringACHTransferInput {
  """
  The financial account id sending the funds.
  
  
  Exactly one of `fromFinancialAccountId` and `toFinancialAccountId` will reference an external account id and the other will reference a Highnote account.
  """
  fromFinancialAccountId: ID!

  """
  The financial account id receiving the funds.
  
  Exactly one of `fromFinancialAccountId` and `toFinancialAccountId` will reference an external account id and the other will reference a Highnote account.
  """
  toFinancialAccountId: ID!

  """The frequency of the scheduled payment"""
  frequency: RecurringAchTransferFrequencyCode!

  """The strategy for the transfer amount"""
  transferAmountStrategy: AmountStrategyInput!

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptorInput!

  """
  Day of the month to schedule the transfer
  
  **Note: ** The scheduled day of transfer should fall between the 1st and the 28th.
  """
  transferDayOfMonth: Int!

  """
  The consent provided by the individual authorizing the scheduled payment.
  
  This includes the mandate template details to be collected for auditability of the accepted terms.
  """
  transferAgreementConsent: TransferAgreementConsentInput!
}

"""
A strategy for allowing amount calculation. Only one of the strategies below should be requested.
"""
input AmountStrategyInput {
  """A calculated balance amount"""
  balanceAmountType: TransferBalanceAmountCode

  """An amount to be transferred"""
  transferAmount: AmountInput
}

"""Input to consent to the transfer agreement."""
input TransferAgreementConsentInput {
  """
  The date and time, in ISO 8601 format, marking when the primary authorized person or person account holder gave consent for the transfer.
  
  For example, `2022-01-01T22:00:00.000Z`.
  """
  consentTimestamp: String!

  """The ID of the individual who is authorizing the transfer"""
  authorizedPersonId: ID!

  """The template of the consent"""
  template: TransferAgreementConsentTemplateInput!
}

"""The template of the transfer agreement consent."""
input TransferAgreementConsentTemplateInput {
  """The id indicating which consent was recorded."""
  consentTemplateId: String!

  """The version of the template id."""
  consentTemplateVersion: String!
}

"""Input to cancel a scheduled transfer"""
input CancelScheduledTransferInput {
  """Global ID used to reference the scheduled transfer"""
  scheduledTransferId: ID!
}

"""
An ACH transfer initiated by an outside company and sent to Highnote.

[ACH](https://en.wikipedia.org/wiki/Automated_clearing_house) is a method of transferring funds between banks.
"""
interface ExternallyInitiatedACHTransfer implements ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The name of the company that initiated the ACH transfer."""
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """
  The ID of the company that initiated the ACH transfer, ISO 8601 format.
  """
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""Details about the status of the ACH transfer."""
union ExternallyInitiatedACHStatusDetails = NonFailureExternallyInitiatedACHStatus | FailureExternallyInitiatedACHStatus

"""
The status of the ACH transfer that has not failed.

This could be statuses which are still pending work or that have successfully completed.
"""
type NonFailureExternallyInitiatedACHStatus {
  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatus
}

"""Information about externally initiated transfers which have failed."""
type FailureExternallyInitiatedACHStatus {
  """
  The status of the failed transfer. This can only be `FAILED` or `RETURNED`.
  """
  status: ExternallyInitiatedACHStatus

  """Additional details about why a transfer failed."""
  statusReasonCode: ExternallyInitiatedACHStatusReasonCode
}

"""Transaction Type of an integrator initiated ACH transfer."""
enum IntegratorInitiatedTransferType {
  """Secure Deposit filters to `SecureDepositACHTransfer`."""
  SECURE_DEPOSIT

  """Repayment filters to `SecureCardBalanceRepaymentACHTransfer`."""
  REPAYMENT

  """
  Funds withdrawal filters to `IntegratorInitiatedFundsWithdrawalACHTransfer`.
  """
  FUNDS_WITHDRAWAL

  """Funds deposit filters to `IntegratorInitiatedFundsDepositACHTransfer`."""
  FUNDS_DEPOSIT
}

"""Transaction Type of an externally initiated ACH transfer."""
enum ExternallyInitiatedTransferType {
  """Credit Funds"""
  CREDIT_FUNDS

  """Debit Funds"""
  DEBIT_FUNDS

  """Payroll"""
  PAYROLL
}

"""
Status of an externally initiated ACH transfer that has been sent to Highnote by a partner bank.
"""
enum ExternallyInitiatedACHStatus {
  """
  The transfer has been received by Highnote, but cannot be processed yet as the effective date is in the future.
  """
  PENDING

  """
  The transfer is processing at Highnote, but funds are not available yet.
  """
  PROCESSING

  """The transfer has successfully been processed by Highnote."""
  PROCESSED

  """
  The transfer failed. More details are available in `ExternallyInitiatedACHStatusReasonCode`.
  """
  FAILED

  """
  The transfer has been returned to the bank that initiated it. More details are available in `ExternallyInitiatedACHStatusReasonCode`.
  """
  RETURNED

  """The transfer has been returned to the bank that initiated it."""
  REVERSED

  """
  The transfer has been canceled by Highnote. This status is rare and typically indicates the transfer was received in error.
  """
  CANCELED
}

"""Additional details regarding a `FAILED` or `RETURNED` transfer."""
enum ExternallyInitiatedACHStatusReasonCode {
  """There is an internal error with the transfer."""
  INTERNAL_ERROR

  """
  This was a debit from an account at Highnote which did not have enough funds.
  """
  INSUFFICIENT_FUNDS

  """The Highnote account was closed."""
  ACCOUNT_CLOSED

  """The Highnote account could not be found."""
  ACCOUNT_NOT_FOUND

  """
  The currency of the transfer did not match the currency of the Highnote account.
  """
  CURRENCY_MISMATCH

  """The transfer exceeds the maximum load limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_LOAD_LIMIT

  """The transfer exceeds the maximum reload limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_RELOAD_LIMIT

  """The transfer amount is below the minimum amount to reload."""
  TRANSFER_AMOUNT_BELOW_MIN_RELOAD_LIMIT

  """Loading funds via ACH is not supported."""
  ACH_LOAD_NOT_SUPPORTED

  """
  The account does not have the required payroll advance feature enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """
  The account does not have the required payroll employer advance feature enabled.
  """
  PAYROLL_EMPLOYER_ADVANCE_FEATURE_NOT_ENABLED

  """
  The account does not have the required corporate bank account feature enabled.
  """
  CORPORATE_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """
  R11 - The `fromFinancialAccount` and `toFinancialAccount` do not belong to the same product.
  """
  ACCOUNTS_DO_NOT_BELONG_TO_SAME_PRODUCT

  """R16 - The account is frozen."""
  ACCOUNT_FROZEN

  """R19 - There is an error in the amount field."""
  AMOUNT_FIELD_ERROR

  """R07 - The Authorization was revoked by Customer."""
  AUTHORIZATION_REVOKED_BY_CUSTOMER

  """R24 - Resulted in a Duplicate Entry."""
  DUPLICATE_ENTRY

  """R18 - Has an Improper Effective entry date."""
  IMPROPER_EFFECTIVE_ENTRY_DATE

  """R04 - Has an Invalid Account Number."""
  INVALID_ACCOUNT_NUMBER

  """R21 - Has an Invalid Company ID Number."""
  INVALID_COMPANY_ID_NUMBER

  """R22 - Has an Invalid Individual ID Number."""
  INVALID_INDIVIDUAL_ID_NUMBER

  """R20 - Is a Non Transactional Account."""
  NON_TRANSACTION_ACCOUNT

  """R08 - The Payment was stopped."""
  PAYMENT_STOPPED

  """R06 - Funds were returned per OFDI Request."""
  RETURNED_PER_ODFI_REQUEST

  """R29 - The Transaction was not Authorized By Account Holder."""
  TRANSACTION_NOT_AUTHORIZED_BY_ACCOUNT_HOLDER

  """
  R10 - Is an Unauthorized, Improper, Ineligible, or Incomplete Transaction.
  """
  UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE_TRANSACTION

  """R09 - Transaction represents Uncollected Funds."""
  UNCOLLECTED_FUNDS

  """
  R05 - Is an Unauthorized Debit to Consumer Account Using Corporate SEC Code.
  """
  UNAUTHORIZED_CONSUMER_DEBIT_USING_CORPORATE_SEC_CODE

  """
  R11 - The account does not have the required commercial pay in full account feature enabled.
  """
  COMMERCIAL_CREDIT_PAY_IN_FULL_FEATURE_NOT_ENABLED

  """R11 - The credit limit is not set on the account."""
  CREDIT_LIMIT_NOT_SET_ON_ACCOUNT

  """R11 - The transfer is not in accordance with the terms of the account."""
  ENTRY_NOT_IN_ACCORDANCE_WITH_TERMS_OF_AUTHORIZATION
}

"""A transfer for the purposes of payroll."""
type PayrollTransfer implements ExternallyInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The Highnote account receiving the credit."""
  toFinancialAccount: FinancialAccount

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """
  The ID of the company that initiated the ACH transfer, ISO 8601 format.
  """
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""A credit transfer to a Highnote account."""
type CreditFunds implements ExternallyInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The name of the company that initiated the ACH transfer."""
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """
  The ID of the company that initiated the ACH transfer, ISO 8601 format.
  """
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The Highnote account receiving the credit."""
  toFinancialAccount: FinancialAccount

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""A debit transfer to a Highnote account."""
type DebitFunds implements ExternallyInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The name of the company that initiated the ACH transfer."""
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """
  The ID of the company that initiated the ACH transfer, ISO 8601 format.
  """
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The Highnote account receiving the debit."""
  fromFinancialAccount: FinancialAccount

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""
An ACH transfer initiated by Highnote and sent to an external bank.

[ACH](https://en.wikipedia.org/wiki/Automated_clearing_house) is a method of transferring funds between banks.
"""
interface IntegratorInitiatedACHTransfer implements ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """
  The account sending the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialBankAccount` and the other will be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The account receiving the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialBankAccount` and the other will be a `FinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""Details about the status of the ACH transfer."""
union ACHTransferStatusDetails = NonFailureACHTransferStatus | FailureACHTransferStatus

"""
The status of the ACH transfer that has not failed.

This could be statuses which are still pending work or that have successfully completed.
"""
type NonFailureACHTransferStatus {
  """The status of the integrator initiated ACH transfer."""
  status: ACHTransferStatus
}

"""Information about integrator initiated transfers which have failed."""
type FailureACHTransferStatus {
  """
  The status of the failed transfer. This can only be `FAILED` or `RETURNED`.
  """
  status: ACHTransferStatus

  """Additional details about why a transfer failed."""
  statusReasonCode: ACHTransferStatusReasonCode
}

"""
Status of an integrator initiated ACH transfer that has been generated by Highnote.
"""
enum ACHTransferStatus {
  """A transfer request has been initiated."""
  INITIATED

  """
  The transfer is processing at Highnote and at the bank, but funds are not available yet.
  """
  PROCESSING

  """
  The transfer has successfully been processed by the bank and funds are available.
  """
  PROCESSED

  """You requested to cancel the transfer."""
  CANCELED

  """
  The transfer failed. Additional details are available in ACHTransferStatusCode.
  """
  FAILED

  """The transfer has been returned by the bank."""
  RETURNED
}

"""Additional details regarding a FAILED or RETURNED transfer."""
enum ACHTransferStatusReasonCode {
  """There is an internal error with the transfer."""
  INTERNAL_ERROR

  """
  R01 - This was a debit from an account at Highnote which did not have enough funds.
  """
  INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT

  """
  R01 - This was a debit from an en external account did not have enough funds.
  """
  INSUFFICIENT_FUNDS_IN_EXTERNAL_ACCOUNT

  """R02 - The Highnote account has been closed."""
  HIGHNOTE_ACCOUNT_CLOSED

  """R02 - The external account has been closed."""
  EXTERNAL_ACCOUNT_CLOSED

  """R03 - No matching Highnote account was found."""
  HIGHNOTE_ACCOUNT_NOT_FOUND

  """R03 - No matching external account was found."""
  EXTERNAL_ACCOUNT_NOT_FOUND

  """
  The amount of the transfer does not match the currency of the Highnote account.
  """
  CURRENCY_MISMATCH_WITH_HIGHNOTE_ACCOUNT

  """
  R11 - The account does not have the required payroll advance feature enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required payroll employer advance feature enabled.
  """
  PAYROLL_EMPLOYER_ADVANCE_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required secure card feature enabled.
  """
  SECURE_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required corporate bank account feature enabled.
  """
  CORPORATE_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """R11 - The transfer exceeds maximum the load limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_LOAD_LIMIT

  """R11 - The transfer exceeds the maximum reload limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_RELOAD_LIMIT

  """R11 - The transfer amount is below the minimum amount to reload."""
  TRANSFER_AMOUNT_BELOW_MIN_RELOAD_LIMIT

  """R11 - Loading funds via ACH is not supported by this program."""
  ACH_LOAD_NOT_SUPPORTED

  """
  R11 - The `fromFinancialAccount` and `toFinancialAccount` do not belong to the same product.
  """
  ACCOUNTS_DO_NOT_BELONG_TO_SAME_PRODUCT

  """R16 - The account is frozen."""
  ACCOUNT_FROZEN

  """R19 - There is an error in the amount field."""
  AMOUNT_FIELD_ERROR

  """R07 - The Authorization was revoked by Customer."""
  AUTHORIZATION_REVOKED_BY_CUSTOMER

  """R24 - Resulted in a Duplicate Entry."""
  DUPLICATE_ENTRY

  """R18 - Has an Improper Effective entry date."""
  IMPROPER_EFFECTIVE_ENTRY_DATE

  """R04 - Has an Invalid Account Number."""
  INVALID_ACCOUNT_NUMBER

  """R21 - Has an Invalid Company ID Number."""
  INVALID_COMPANY_ID_NUMBER

  """R22 - Has an Invalid Individual ID Number."""
  INVALID_INDIVIDUAL_ID_NUMBER

  """R20 - Is a Non Transactional Account."""
  NON_TRANSACTION_ACCOUNT

  """R08 - The Payment was stopped."""
  PAYMENT_STOPPED

  """R06 - Funds were returned per OFDI Request."""
  RETURNED_PER_ODFI_REQUEST

  """R29 - The Transaction was not Authorized By Account Holder."""
  TRANSACTION_NOT_AUTHORIZED_BY_ACCOUNT_HOLDER

  """
  R10 - Is an Unauthorized, Improper, Ineligible, or Incomplete Transaction.
  """
  UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE_TRANSACTION

  """R09 - Transaction represents Uncollected Funds."""
  UNCOLLECTED_FUNDS

  """
  R05 - Is an Unauthorized Debit to Consumer Account Using Corporate SEC Code.
  """
  UNAUTHORIZED_CONSUMER_DEBIT_USING_CORPORATE_SEC_CODE

  """
  R11 - The transfer is not in accordance with the terms of the authorization.
  """
  ENTRY_NOT_IN_ACCORDANCE_WITH_TERMS_OF_AUTHORIZATION
}

"""Details about the status of the ACH transfer."""
union IntegratorInitiatedACHStatusDetails = NonFailureIntegratorInitiatedACHStatus | FailureIntegratorInitiatedACHStatus

"""
The status of the ACH transfer that has not failed.

This could be statuses which are still pending work or that have successfully completed.
"""
type NonFailureIntegratorInitiatedACHStatus {
  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatus
}

"""Information about integrator initiated transfers which have failed."""
type FailureIntegratorInitiatedACHStatus {
  """
  The status of the failed transfer. This can only be `FAILED` or `RETURNED`.
  """
  status: IntegratorInitiatedACHStatus

  """Additional details about why a transfer failed."""
  statusReasonCode: IntegratorInitiatedACHStatusReasonCode
}

"""
Status of an integrator initiated ACH transfer that has been generated by Highnote.
"""
enum IntegratorInitiatedACHStatus {
  """A transfer request has been initiated."""
  INITIATED

  """
  The transfer is processing at Highnote and at the bank, but funds are not available yet.
  """
  PROCESSING

  """
  The transfer has successfully been processed by the bank and funds are available.
  """
  PROCESSED

  """You requested to cancel the transfer."""
  CANCELED

  """
  The transfer failed. Additional details are available in IntegratorInitiatedACHStatusCode.
  """
  FAILED

  """The transfer has been returned by the bank."""
  RETURNED
}

"""Additional details regarding a FAILED or RETURNED transfer."""
enum IntegratorInitiatedACHStatusReasonCode {
  """There is an internal error with the transfer."""
  INTERNAL_ERROR

  """
  This was a debit from an account at Highnote which did not have enough funds.
  """
  INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT

  """
  This was a debit from an en external account did not have enough funds.
  """
  INSUFFICIENT_FUNDS_IN_EXTERNAL_ACCOUNT

  """The Highnote account has been closed."""
  HIGHNOTE_ACCOUNT_CLOSED

  """The external account has been closed."""
  EXTERNAL_ACCOUNT_CLOSED

  """No matching Highnote account was found."""
  HIGHNOTE_ACCOUNT_NOT_FOUND

  """No matching external account was found."""
  EXTERNAL_ACCOUNT_NOT_FOUND

  """
  The amount of the transfer does not match the currency of the Highnote account.
  """
  CURRENCY_MISMATCH_WITH_HIGHNOTE_ACCOUNT

  """
  The account does not have the required payroll advance feature enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """
  The account does not have the required payroll employer advance feature enabled.
  """
  PAYROLL_EMPLOYER_ADVANCE_FEATURE_NOT_ENABLED

  """The account does not have the required secure card feature enabled."""
  SECURE_CARD_FEATURE_NOT_ENABLED

  """
  The account does not have the required corporate bank account feature enabled.
  """
  CORPORATE_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """The transfer exceeds the maximum load limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_LOAD_LIMIT

  """The transfer exceeds the maximum reload limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_RELOAD_LIMIT

  """The transfer amount is below the minimum amount to reload."""
  TRANSFER_AMOUNT_BELOW_MIN_RELOAD_LIMIT

  """Loading funds via ACH is not supported."""
  ACH_LOAD_NOT_SUPPORTED

  """
  The `fromFinancialAccount` and `toFinancialAccount` do not belong to the same product.
  """
  ACCOUNTS_DO_NOT_BELONG_TO_SAME_PRODUCT

  """R16 - The account is frozen."""
  ACCOUNT_FROZEN

  """R19 - There is an error in the amount field."""
  AMOUNT_FIELD_ERROR

  """R07 - The Authorization was revoked by Customer."""
  AUTHORIZATION_REVOKED_BY_CUSTOMER

  """R24 - Resulted in a Duplicate Entry."""
  DUPLICATE_ENTRY

  """R18 - Has an Improper Effective entry date."""
  IMPROPER_EFFECTIVE_ENTRY_DATE

  """R04 - Has an Invalid Account Number."""
  INVALID_ACCOUNT_NUMBER

  """R21 - Has an Invalid Company ID Number."""
  INVALID_COMPANY_ID_NUMBER

  """R22 - Has an Invalid Individual ID Number."""
  INVALID_INDIVIDUAL_ID_NUMBER

  """R20 - Is a Non Transactional Account."""
  NON_TRANSACTION_ACCOUNT

  """R08 - The Payment was stopped."""
  PAYMENT_STOPPED

  """R06 - Funds were returned per OFDI Request."""
  RETURNED_PER_ODFI_REQUEST

  """R29 - The Transaction was not Authorized By Account Holder."""
  TRANSACTION_NOT_AUTHORIZED_BY_ACCOUNT_HOLDER

  """
  R10 - Is an Unauthorized, Improper, Ineligible, or Incomplete Transaction.
  """
  UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE_TRANSACTION

  """R09 - Transaction represents Uncollected Funds."""
  UNCOLLECTED_FUNDS

  """
  R05 - Is an Unauthorized Debit to Consumer Account Using Corporate SEC Code.
  """
  UNAUTHORIZED_CONSUMER_DEBIT_USING_CORPORATE_SEC_CODE

  """
  R11 - The account does not have the required commercial pay in full account feature enabled.
  """
  COMMERCIAL_CREDIT_PAY_IN_FULL_FEATURE_NOT_ENABLED

  """R11 - The credit limit is not set on the account."""
  CREDIT_LIMIT_NOT_SET_ON_ACCOUNT

  """
  R11 - The transfer is not in accordance with the terms of the authorization.
  """
  ENTRY_NOT_IN_ACCORDANCE_WITH_TERMS_OF_AUTHORIZATION
}

"""Hold status of an ACH integrator initiated transaction"""
enum IntegratorInitiatedACHHoldStatus {
  """The hold status is unspecified"""
  UNSPECIFIED

  """The ACH Transaction is not on hold"""
  NO_HOLDS

  """The ACH Transaction is currently on hold"""
  ON_HOLD

  """The ACH Transaction had a hold but it has been removed"""
  HOLD_REMOVED
}

"""Hold status of an ACH integrator initiated transaction"""
enum ExternallyInitiatedACHHoldStatus {
  """The hold status is unspecified"""
  UNSPECIFIED

  """The ACH Transaction is not on hold"""
  NO_HOLDS

  """The ACH Transaction is currently on hold"""
  ON_HOLD

  """The ACH Transaction had a hold but it has been removed"""
  HOLD_REMOVED
}

"""Originated SecureDeposit transfer"""
type SecureDepositACHTransfer implements IntegratorInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """
  The account sending the funds.
  
  Exactly one of fromFinancialAccount and toFinancialAccount will be an `ExternalFinancialBankAccount` and the other will be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The account receiving the funds.
  
  Exactly one of fromFinancialAccount and toFinancialAccount will be an `ExternalFinancialBankAccount` and the other will be a `FinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """
  The name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""Externally Initiated Secure Deposit transfer"""
type SecureDeposit implements ExternallyInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """
  The account receiving the funds.
  
  Exactly one of fromFinancialAccount and toFinancialAccount will be an `ExternalFinancialBankAccount` and the other will be a `FinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """
  The name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the integrator initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""
A withdrawal of funds from a `FinancialAccount` to an `ExternalFinancialAccount`.
"""
type IntegratorInitiatedFundsWithdrawalACHTransfer implements IntegratorInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """
  The account sending the funds.
  
  This will always be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The account receiving the funds.
  
  This will always be a type of `ExternalFinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """A flag that indicates that this transaction was Same-Day ACH."""
  sameDay: Boolean

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""
A withdrawal of funds from an `ExternalFinancialAccount` to a `FinancialAccount`.
"""
type IntegratorInitiatedFundsDepositACHTransfer implements IntegratorInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """
  The account sending the funds.
  
  This will always be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The account receiving the funds.
  
  This will always be a type of `ExternalFinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """A flag that indicates that this transaction was Same-Day ACH."""
  sameDay: Boolean

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""A transfer that refills the balance on a secure card."""
type SecureCardBalanceRepaymentACHTransfer implements IntegratorInitiatedACHTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """
  The account sending the funds.
  
  Exactly one of fromFinancialAccount and toFinancialAccount will be an `ExternalFinancialBankAccount` and the other will be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The account receiving the funds.
  
  Exactly one of fromFinancialAccount and toFinancialAccount will be an `ExternalFinancialBankAccount` and the other will be a `FinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """
  he name of the company that initiated the ACH transfer.
  
  This will always be Highnote.
  """
  companyName: String

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The ID for Highnote."""
  companyIdentifier: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """
  The date and time, in ISO 8601 format, the transfer will be transitioned to PROCESSED and the funds are available.
  """
  fundsAvailableDate: String

  """The Card Product associated to the Financial Account."""
  cardProduct: CardProduct

  """
  This field contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  """
  paymentRelatedInformation: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String

  """
  A unique 15 digit number assigned by the originator to identify the transfer.
  """
  traceNumber: String
}

"""A wire transfer in to a Highnote account."""
type ExternallyInitiatedWireTransfer implements Node & ElectronicFundsTransfer {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the wire transfer."""
  status: WireTransferStatusDetails

  """The destination financial account that will receive the funds."""
  toFinancialAccount: FinancialAccount
}

"""Details about the status of the wire transfer."""
union WireTransferStatusDetails = NonFailureWireTransferStatus | FailureWireTransferStatus

"""
The status of the wire transfer that has not failed.

This could be statuses which are still pending work or that have successfully completed.
"""
type NonFailureWireTransferStatus {
  """The status of the wire transfer."""
  status: WireTransferStatus
}

"""Information about wire transfers which have failed."""
type FailureWireTransferStatus {
  """The status of the failed transfer. This will always be `FAILED`."""
  status: WireTransferStatus

  """Additional details about why a transfer failed."""
  statusReasonCode: WireStatusReasonCode
}

"""
Additional details for wire transfer errors. This will only be relevant when the `WireTransferStatus` is FAILED.
"""
enum WireStatusReasonCode {
  """The Highnote account is closed."""
  ACCOUNT_CLOSED

  """No matching Highnote account."""
  ACCOUNT_NOT_FOUND

  """
  The currency of the wire does not match the currency of the destination account.
  """
  CURRENCY_MISMATCH

  """
  The receiving account does not have the payroll advance feature enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """The wire was sent to an individual instead of an organization."""
  ACCOUNT_HOLDER_IS_NOT_AN_ORGANIZATION
}

"""The frequency of the scheduled transfer"""
enum RecurringAchTransferFrequencyCode {
  """A monthly recurring transfer"""
  MONTHLY
}

"""The transfer balance strategy for a transfer"""
enum TransferBalanceAmountCode {
  """The outstanding balance on the account"""
  OUTSTANDING_BALANCE

  """The remaining balance due from the latest statement billing period"""
  OUTSTANDING_STATEMENT_BALANCE

  """The minimum payment due from the latest statement billing period"""
  MINIMUM_PAYMENT
}

"""The status of the scheduled transfer"""
enum ScheduledTransferStatusCode {
  """
  The scheduled transfer has been created and scheduled. `SCHEDULED` state indicates a transfer has yet to be initiated.
  """
  SCHEDULED

  """
  The scheduled transfer is active. A scheduled transfer moves from `SCHEDULED` to `ACTIVE` once the first transfer is initiated.
  """
  ACTIVE

  """
  The scheduled transfer is canceled. Once a scheduled transfer is canceled, any payments in the future will not be executed.
  """
  CANCELED

  """
  The scheduled transfer is closed. Once a scheduled transfer is `CLOSED`, all payments requested to be executed have been executed and any payments in the future will not be executed.
  """
  CLOSED
}

"""The status of the scheduled transfer event"""
enum ScheduledTransferEventStatusCode {
  """The scheduled transfer event has been inititated"""
  INITIATED

  """The scheduled transfer event has completed successfully."""
  COMPLETED

  """
  The scheduled transfer event has been failed by Highnote. Please look into the `transfer` object to determine the root cause of the failure.
  """
  FAILED

  """
  The scheduled transfer event has been rejected. Please look into the `transfer` object to determine the root cause of the failure.
  """
  REJECTED

  """
  The scheduled transfer event did not execute a transfer. A `NOT_EXECUTED` status can occur if the calculated amount to transfer is `0`.
  """
  NOT_EXECUTED
}

"""
The details to simulate a electronic fund transfer in the test environment.
"""
input SimulateDepositInput {
  """The amount to add to an Organization's account."""
  amount: AmountInput!

  """Source used for fund transfer."""
  source: ElectronicFundTransferSource!

  """The ID of the Organization's Financial Account for transfer."""
  toFinancialAccountId: ID!

  """A description of the transfer for later reference."""
  memo: String
}

"""Electronic fund transfer type used for fund movement."""
enum ElectronicFundTransferSource {
  """Transfer funds using wire transfer"""
  WIRE
}

interface ScheduledTransfer {
  """Global ID used to reference the scheduled transfer"""
  id: ID!

  """
  The account sending the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialAccount` and the other will be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The account receiving the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialAccount` and the other will be a `FinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount
}

"""A scheduled one time ACH transfer"""
type OneTimeACHTransfer implements Node & ScheduledTransfer {
  """Global ID used to reference the one time ACH transfer"""
  id: ID!

  """
  The financial account sending the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialAccount` and the other will be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The financial account receiving the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialAccount` and the other will be a `FinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The amount to be transferred."""
  transferAmount: TransferAmountStrategy

  """The status of the scheduled transfer"""
  status: ScheduledTransferStatusCode

  """
  The date and time, in ISO 8601 format, the scheduled transfer is to be executed.
  """
  scheduledTransferDate: String

  """The transfers executed as a result of the recurring transfer"""
  transferEvents(first: Int = 20, after: String): ScheduledTransferEventConnection

  """
  The date and time, in ISO 8601 format, this `OneTimeACHTransfer` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `OneTimeACHTransfer` was last updated.
  """
  updatedAt: String
}

"""A scheduled recurring ACH transfer"""
type RecurringACHTransfer implements Node & ScheduledTransfer {
  """Global ID used to reference the recurring transfer"""
  id: ID!

  """
  The account sending the funds.
  
  Exactly one of fromFinancialAccount and toFinancialAccount will be an ExternalFinancialAccount and the other will be a FinancialAccount.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The account receiving the funds.
  
  Exactly one of fromFinancialAccount and toFinancialAccount will be an ExternalFinancialAccount and the other will be a FinancialAccount.
  """
  toFinancialAccount: AllFinancialAccount

  """
  Descriptive fields about the transfer which may show up on bank reports.
  """
  descriptor: ACHDescriptor

  """The amount to be transferred."""
  transferAmount: TransferAmountStrategy

  """The frequency of the scheduled payment"""
  frequency: RecurringAchTransferFrequencyCode

  """The type of balance payment to be scheduled"""
  balanceAmountType: TransferBalanceAmountCode

  """The status of the scheduled transfer"""
  status: ScheduledTransferStatusCode

  """
  The date and time, in ISO 8601 format, the scheduled transfer is to be executed.
  """
  nextScheduledTransferDate: String

  """The transfers executed as a result of the recurring transfer"""
  transferEvents(first: Int = 20, after: String): ScheduledTransferEventConnection

  """
  The date and time, in ISO 8601 format, this `RecurringACHTransfer` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `RecurringACHTransfer` was last updated.
  """
  updatedAt: String
}

union TransferAmountStrategy = TransferAmountCalculation | ManualTransferAmount

"""The strategy used to calculate the amount to be transferred"""
type TransferAmountCalculation {
  """The type used to calculate the total amount to be transferred"""
  calculatedType: CalculatedTransferAmountType
}

"""A manually set amount to be transferred"""
type ManualTransferAmount {
  """The requested amount to be transferred"""
  amount: Amount
}

"""The way the amount to be transferred is calculated"""
enum CalculatedTransferAmountType {
  """
  Indicates that the amount to be transferred is the outstanding balance on the account
  """
  OUTSTANDING_BALANCE

  """
  Indicates that the amount to be transferred is the remaining balance due on the latest statement billing period
  """
  OUTSTANDING_STATEMENT_BALANCE

  """
  Indicates that the amount to be transferred is the minimum payment due on the latest statement billing period
  """
  MINIMUM_PAYMENT
}

"""An interface for a scheduled transfer event"""
interface ScheduledTransferEvent implements Node {
  """The Global ID used to reference the `ScheduledTransferEvent`"""
  id: ID!

  """
  The date and time, in ISO 8601 format, this `ScheduledTransferEvent` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `ScheduledTransferEvent` was last updated.
  """
  updatedAt: String
}

"""A scheduled transfer event that executed on the ACH rails."""
type ScheduledTransferAchEvent implements Node & ScheduledTransferEvent {
  """The Global ID used to reference the `ScheduledTransferAchEvent`"""
  id: ID!

  """
  The financial account sending the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialAccount` and the other will be a `FinancialAccount`.
  """
  fromFinancialAccount: AllFinancialAccount

  """
  The financial account receiving the funds.
  
  Exactly one of `fromFinancialAccount` and `toFinancialAccount` will be an `ExternalFinancialAccount` and the other will be a `FinancialAccount`.
  """
  toFinancialAccount: AllFinancialAccount

  """The amount requested to be transferred."""
  transferAmount: Amount

  """
  The transfers executed as part of the scheduled payment transfer event.
  """
  transfers: [ElectronicFundsTransfer]

  """The status of the scheduled transfer event."""
  status: ScheduledTransferEventStatusCode

  """
  The date and time, in ISO 8601 format, this scheduled transfer event was initiated.
  """
  paymentInitiatedAt: String

  """
  The date and time, in ISO 8601 format, this scheduled transfer event was posted to the account.
  """
  paymentPostedAt: String

  """
  The date and time, in ISO 8601 format, this scheduled transfer event was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this scheduled transfer event was last updated.
  """
  updatedAt: String
}

"""The connection type for Scheduled Transfer Event."""
type ScheduledTransferEventConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledTransferEventEdge!]
}

"""The edge type for a `ScheduledTransferEvent`."""
type ScheduledTransferEventEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Scheduled Transfer Event."""
  node: ScheduledTransferEvent
}

"""The connection type for Scheduled Transfer."""
type ScheduledTransferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScheduledTransferEdge!]
}

"""The edge type for a `ScheduledTransfer`."""
type ScheduledTransferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """A Scheduled Transfer Event."""
  node: ScheduledTransfer
}

"""A financial event that represents an ACH transfer."""
interface ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""A financial event that represents a `CreditFunds` transfer."""
type CreditFundsACHTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The account receiving the funds."""
  toFinancialAccount: FinancialAccount

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""A financial event that represents a `DebitFunds` transfer."""
type DebitFundsACHTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The account debiting the funds."""
  fromFinancialAccount: FinancialAccount

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""A financial event that represents a `PayrollTransfer`."""
type PayrollACHTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The status of the externally initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The account receiving the funds."""
  toFinancialAccount: FinancialAccount

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""A financial event that represents secure deposit transfer."""
type SecureDepositACHTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer event was created."""
  createdAt: String

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """The account sending the funds."""
  fromFinancialAccount: ExternalFinancialBankAccount

  """The account receiving the funds."""
  toFinancialAccount: FinancialAccount

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""
A financial event that represents a non-originated secure deposit transfer.
"""
type SecureDepositTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer event was created."""
  createdAt: String

  """The status of the integrator initiated ACH transfer."""
  status: ExternallyInitiatedACHStatusDetails

  """The account receiving the funds."""
  toFinancialAccount: FinancialAccount

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""A financial event that represents card balance repayment ACH transfer."""
type SecureCardBalanceRepaymentACHTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer event was created."""
  createdAt: String

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """The account sending the funds."""
  fromFinancialAccount: ExternalFinancialBankAccount

  """The account receiving the funds."""
  toFinancialAccount: FinancialAccount

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""A financial event that represents ACH funds withdrawal."""
type IntegratorInitiatedFundsWithdrawalACHTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer event was created."""
  createdAt: String

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """The account sending the funds."""
  fromFinancialAccount: FinancialAccount

  """The account receiving the funds."""
  toFinancialAccount: ExternalFinancialAccount

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

"""A financial event that represents ACH funds deposit."""
type IntegratorInitiatedFundsDepositACHTransferEvent implements Node & ACHTransferEvent {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  amount: Amount

  """The date and time, in ISO 8601 format, the transfer event was created."""
  createdAt: String

  """The status of the integrator initiated ACH transfer."""
  status: IntegratorInitiatedACHStatusDetails

  """The account sending the funds."""
  fromFinancialAccount: ExternalFinancialAccount

  """The account receiving the funds."""
  toFinancialAccount: FinancialAccount

  """he name of the company that initiated the ACH transfer."""
  companyName: String

  """
  The Company Identifier is a 10-position alphameric code used to identify an Originator of the ACH transaction. It may begin with an ANSI one-digit Identification Code Designator (ICD), followed by the Identification Number.
  
  |`Identification Code Designator (ICD)`    | `ANSI Identification Number` | Example                                                                         |
  | ---------------------------------------- | ---------------------------- | ------------------------------------------------------------------------------- |
  |`IRS Employer Identification Number (EIN)`| 1                            | 1234567890 for an Originator with 234567890 EIN                                 |
  |`Data Universal Numbering Systems (DUNS)` | 3                            | 30008016958 for an Originator with 0008016958 DUNS                              |
  |`User Assigned Number`                    | 9                            | 9111111111 for an Originator with 111111111 under assigned Identification Number|
  """
  companyIdentifier: String

  """Company entered value for the type of ACH."""
  companyEntryDescription: String

  """
  The settlement date as specified by the company that initiated the ACH transfer, ISO 8601 format.
  """
  settlementDate: String

  """The `ElectronicFundsTransfer` that triggered this event."""
  transfer: ElectronicFundsTransfer

  """The date this transaction was returned, in ISO 8601 format."""
  returnDate: String
}

interface AchHoldEvent {
  """The global ID to reference this event."""
  id: ID!

  """The ID of the ACH Transaction related to this event."""
  transactionId: ID

  """The previous hold status."""
  fromStatus: AchHoldStatus

  """The hold type."""
  holdType: AchHoldType

  """
  The account that the money is going out of. Will not exist for non-originating credit transactions.
  """
  sourceAccountId: ID

  """
  The account that the money is going to. Will not exist for non-originating debit transactions.
  """
  receivingAccountId: ID

  """The company name."""
  companyName: String

  """The company identifier."""
  companyIdentifier: String

  """
  The date and time, in ISO 8601 format, the ach transaction was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the ach transaction was last updated.
  """
  updatedAt: String
}

"""
The `AchHoldAddedEvent` notifies when an ach transaction is put on hold.
"""
type AchHoldAddedEvent implements Node & AchHoldEvent {
  """The global ID to reference the `AchHoldAddedEvent`."""
  id: ID!

  """The ID of the ACH Transaction related to this event."""
  transactionId: ID

  """The previous hold status."""
  fromStatus: AchHoldStatus

  """The hold type."""
  holdType: AchHoldType

  """
  The account that the money is going out of. Will not exist for non-originating credit transactions.
  """
  sourceAccountId: ID

  """
  The account that the money is going to. Will not exist for non-originating debit transactions.
  """
  receivingAccountId: ID

  """The company name."""
  companyName: String

  """The company identifier."""
  companyIdentifier: String

  """
  The date and time, in ISO 8601 format, the ach transaction was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the ach transaction was last updated.
  """
  updatedAt: String
}

"""
The `AchHoldRemovedEvent` notifies when the hold on an ach transaction is removed.
"""
type AchHoldRemovedEvent implements Node & AchHoldEvent {
  """The global ID to reference the `AchHoldRemovedEvent`."""
  id: ID!

  """The ID of the ACH Transaction related to this event."""
  transactionId: ID

  """The previous hold status."""
  fromStatus: AchHoldStatus

  """The hold type."""
  holdType: AchHoldType

  """
  The account that the money is going out of. Will not exist for non-originating credit transactions.
  """
  sourceAccountId: ID

  """
  The account that the money is going to. Will not exist for non-originating debit transactions.
  """
  receivingAccountId: ID

  """The company name."""
  companyName: String

  """The company identifier."""
  companyIdentifier: String

  """
  The date and time, in ISO 8601 format, the ach transaction was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the ach transaction was last updated.
  """
  updatedAt: String
}

"""The hold status of an ACH."""
enum AchHoldStatus {
  """ACH Transaction is not on hold."""
  NO_HOLDS

  """ACH Transaction is on hold."""
  ON_HOLD

  """ACH Transaction had a hold but it has been removed."""
  HOLD_REMOVED
}

"""The hold type of an ACH."""
enum AchHoldType {
  """UNSPECIFIED"""
  UNSPECIFIED

  """
  ACH Transaction is on hold or had a hold because it was flagged for risk review
  """
  RISK
}

"""The status of an `OriginatedAchTransfer`."""
enum OriginatedAchTransferStatus {
  """A transfer request has been initiated."""
  INITIATED

  """
  The transfer has been processed by Highnote, pending submittal to the the external financial institution.
  """
  PENDING

  """
  The transfer is processing at the external financial institution, but funds are not available yet.
  """
  PROCESSING

  """
  The transfer has successfully been processed by the external financial institution and funds are available.
  """
  PROCESSED

  """
  The transfer has been cancelled before it was sent to the external financial institution.
  """
  CANCELED

  """
  The transfer failed by Highnote before it was sent to the external financial institution. Additional details are available in `AchTransferStatusFailureReason`.
  """
  FAILED

  """
  The transfer has been returned by the external financial institution. Additional details are available in `AchTransferStatusFailureReason`.
  """
  RETURNED
}

"""The status of a `NonOriginatedAchTransfer`."""
enum NonOriginatedAchTransferStatus {
  """
  The transfer has been received by Highnote, but has not been processed yet, e.g. the settlement date is in the future.
  """
  RECEIVED

  """The transfer has been processed by Highnote."""
  PROCESSED

  """
  The transfer failed but has not yet been returned to the external financial institution that initiated it. More details are available in `AchTransferStatusFailureReason`.
  """
  FAILED

  """
  The transfer has been returned to the external financial institution that initiated it. More details are available in `AchTransferStatusFailureReason`.
  """
  RETURNED

  """
  The transfer has been canceled by Highnote. This status is rare and typically indicates the transfer was received in error.
  """
  CANCELED
}

"""Additional details regarding a `FAILED` or `RETURNED` `AchTransfer`."""
enum AchTransferStatusFailureReason {
  """There is an internal error with the transfer."""
  INTERNAL_ERROR

  """
  R01 - This was a debit from an account at Highnote which did not have enough funds.
  """
  INSUFFICIENT_FUNDS_IN_HIGHNOTE_ACCOUNT

  """
  R01 - This was a debit from an en external account did not have enough funds.
  """
  INSUFFICIENT_FUNDS_IN_EXTERNAL_ACCOUNT

  """R02 - The Highnote `FinancialAccount` has been closed."""
  HIGHNOTE_ACCOUNT_CLOSED

  """R02 - The external account has been closed."""
  EXTERNAL_ACCOUNT_CLOSED

  """R03 - No matching Highnote `FinancialAccount` was found."""
  HIGHNOTE_ACCOUNT_NOT_FOUND

  """R03 - No matching external account was found."""
  EXTERNAL_ACCOUNT_NOT_FOUND

  """
  R11 - The account does not have the required payroll advance feature enabled.
  """
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required payroll employer advance feature enabled.
  """
  PAYROLL_EMPLOYER_ADVANCE_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required secure card feature enabled.
  """
  SECURE_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required corporate bank account feature enabled.
  """
  CORPORATE_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """
  R11 - The `fromFinancialAccount` and `toFinancialAccount` do not belong to the same product.
  """
  ACCOUNTS_DO_NOT_BELONG_TO_SAME_PRODUCT

  """R16 - The Highnote `FinancialAccount` is frozen."""
  HIGHNOTE_ACCOUNT_FROZEN

  """R16 - The external financial account is frozen."""
  EXTERNAL_ACCOUNT_FROZEN

  """R19 - There is an error in the amount field."""
  AMOUNT_FIELD_ERROR

  """R07 - The Authorization was revoked by Customer."""
  AUTHORIZATION_REVOKED_BY_CUSTOMER

  """R24 - The RDFI received a duplicate entry for the same transaction."""
  DUPLICATE_ENTRY

  """R18 - Has an Improper Effective entry date."""
  IMPROPER_EFFECTIVE_ENTRY_DATE

  """R04 - The Highnote `FinancialAccount` has an invalid account number."""
  INVALID_HIGHNOTE_ACCOUNT_NUMBER

  """R04 - The external financial account has an invalid account number."""
  INVALID_EXTERNAL_ACCOUNT_NUMBER

  """R21 - Has an Invalid Company ID Number."""
  INVALID_COMPANY_ID_NUMBER

  """R22 - Has an Invalid Individual ID Number."""
  INVALID_INDIVIDUAL_ID_NUMBER

  """R20 - Is a Non Transactional Account."""
  NON_TRANSACTION_ACCOUNT

  """R08 - The Payment was stopped."""
  PAYMENT_STOPPED

  """R06 - Funds were returned per ODFI Request."""
  RETURNED_PER_ODFI_REQUEST

  """R29 - The Transaction was not Authorized By Account Holder."""
  TRANSACTION_NOT_AUTHORIZED_BY_ACCOUNT_HOLDER

  """
  R10 - Is an Unauthorized, Improper, Ineligible, or Incomplete Transaction.
  """
  UNAUTHORIZED_IMPROPER_INELIGIBLE_OR_INCOMPLETE_TRANSACTION

  """R09 - Transaction represents Uncollected Funds."""
  UNCOLLECTED_FUNDS

  """
  R05 - Is an Unauthorized Debit to Consumer Account Using Corporate SEC Code.
  """
  UNAUTHORIZED_CONSUMER_DEBIT_USING_CORPORATE_SEC_CODE

  """
  R11 - The account does not have the required commercial pay in full account feature enabled.
  """
  COMMERCIAL_CREDIT_PAY_IN_FULL_FEATURE_NOT_ENABLED

  """R11 - The credit limit is not set on the account."""
  CREDIT_LIMIT_NOT_SET_ON_ACCOUNT

  """
  R11 - The transfer is not in accordance with the terms of the authorization.
  """
  ENTRY_NOT_IN_ACCORDANCE_WITH_TERMS_OF_AUTHORIZATION

  """R11 - The transfer amount exceeds the maximum program load limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_LOAD_LIMIT

  """R11 - Loading funds via ACH is not supported."""
  ACH_LOAD_NOT_ALLOWED_BY_PROGRAM

  """R11 - The transfer amount is negative or zero."""
  TRANSFER_AMOUNT_IS_NEGATIVE_OR_ZERO

  """R11 - The transfer amount exceeds the maximum program reload limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_RELOAD_LIMIT

  """R11 - The transfer amount is below the minimum program reload limit."""
  TRANSFER_AMOUNT_BELOW_MIN_PROGRAM_RELOAD_LIMIT

  """R11 - The program does not support ACH origination."""
  ORIGINATED_ACH_UNLOAD_NOT_SUPPORTED_ON_PRODUCT

  """R11 - The account does not have the required fleet feature enabled."""
  FLEET_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required product funding feature enabled.
  """
  PRODUCT_FUNDING_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required funding card feature enabled.
  """
  FUNDING_CARD_NOT_SUPPORTED

  """
  R17 - The transaction contains invalid fields initiated under questionable circumstances
  """
  FILE_RECORD_EDIT_CRITERIA

  """
  R12 - The receiving financial institution was acquired by another financial institution
  """
  BRANCH_SOLD_TO_ANOTHER_DFI

  """R13 - The provided ACH routing number is invalid."""
  INVALID_ACH_ROUTING_NUMBER

  """
  R14 - The representative payee is deceased or unable to continue in that capacity.
  """
  REPRESENTATIVE_PAYEE_DECEASED_OR_UNABLE_TO_CONTINUE_IN_THAT_CAPACITY

  """R15 - The beneficiary or account holder is deceased."""
  BENEFICIARY_OR_ACCOUNT_HOLDER_DECEASED

  """R23 - The receiver has refused the credit entry."""
  CREDIT_ENTRY_REFUSED_BY_THE_RECEIVER

  """R25 - The addenda record is invalid."""
  ADDENDA_ERROR

  """R26 - A mandatory field is invalid."""
  MANDATORY_FIELD_ERROR

  """R27 - The trace number provided is invalid."""
  TRACE_NUMBER_ERROR

  """R28 - The routing number provided contains an invalid check digit."""
  ROUTING_NUMBER_CHECK_DIGIT_ERROR

  """R30 - The RDFI does not participate in check truncation program."""
  RDFI_NOT_A_PARTICIPANT_IN_CHECK_TRUNCATION_PROGRAM

  """R31 - The corporate receiver authorized the return of the entry."""
  PERMISSIBLE_RETURN_ENTRY

  """R32 - The RDFI is not able to settle the transaction."""
  RDFI_NON_SETTLEMENT

  """R33 - The RDFI is returning an XCK (destroyed check) entry."""
  RETURN_OF_XCK_ENTRY

  """R34 - The RDFI’s participation in the ACH system is limited."""
  LIMITED_PARTICIPATION_DFI

  """
  R35 - The transaction is an improper debit entry according to NACHA rules.
  """
  RETURN_OF_IMPROPER_DEBIT_ENTRY

  """
  R36 - The transaction is an improper credit entry according to NACHA rules.
  """
  RETURN_OF_IMPROPER_CREDIT_ENTRY

  """
  R37 - The source document for the transaction was presented for payment.
  """
  SOURCE_DOCUMENT_PRESENTED_FOR_PAYMENT

  """
  R38 - A stop payment was placed on the source document of the transaction.
  """
  STOP_PAYMENT_ON_SOURCE_DOCUMENT

  """R39 - The source document for the transaction is invalid."""
  IMPROPER_SOURCE_DOCUMENT_OR_SOURCE_DOCUMENT_PRESENTED_FOR_PAYMENT

  """R40 - The ENR entry is being returned by federal government agency."""
  RETURN_OF_ENR_ENTRY_BY_FEDERAL_GOVERNMENT_AGENCY

  """R41 - The transaction code provided is invalid."""
  INVALID_TRANSACTION_CODE

  """R42 - The routing number or check digit is invalid."""
  ROUTING_NUMBER_OR_CHECK_DIGIT_ERROR

  """R43 - The DFI account number provided is invalid."""
  INVALID_DFI_ACCOUNT_NUMBER

  """
  R44 - The individual ID number or identification number provided is invalid.
  """
  INVALID_INDIVIDUAL_ID_NUMBER_OR_IDENTIFICATION_NUMBER

  """R45 - The individual name or company name provided is invalid."""
  INVALID_INDIVIDUAL_NAME_OR_COMPANY_NAME

  """R46 - The representative payee indicator is invalid."""
  INVALID_REPRESENTATIVE_PAYEE_INDICATOR

  """
  R47 - The RDFI received a duplicate enrollment for the same transaction.
  """
  DUPLICATE_ENROLLMENT

  """R50 - State law prohibits the RDFI from accepting RCK entries."""
  STATE_LAW_AFFECTING_RCK_ACCEPTANCE

  """
  R51 - The item is ineligible for RCK processing; the required notice was not provided.
  """
  ITEM_RELATED_TO_RCK_ENTRY_IS_INELIGIBLE_OR_RCK_ENTRY_IS_IMPROPER

  """R52 - The receiver requested a stop payment on the item."""
  STOP_PAYMENT_ON_ITEM_RELATED_TO_RCK_ENTRY

  """R53 - Both the item and the ACH entry have been presented for payment."""
  ITEM_AND_RCK_ENTRY_PRESENTED_FOR_PAYMENT

  """R61 - The RDFI is returning an entry that was misrouted to them."""
  MISROUTED_RETURN

  """R62 - Funds cannot be pulled from receiving account."""
  ERRONEOUS_OR_REVERSING_DEBIT

  """R67 - The RDFI received a duplicate return for the same transaction."""
  DUPLICATE_RETURN

  """R68 - The return was received after the deadline."""
  UNTIMELY_RETURN

  """R69 - The entry contains multiple errors."""
  FIELD_ERRORS

  """
  R70 - The RDFI chose not to accept a permissible return entry or the return was not requested by the ODFI.
  """
  PERMISSIBLE_RETURN_ENTRY_NOT_ACCEPTED_OR_RETURN_NOT_REQUESTED_BY_ODFI

  """R71 - The dishonored return entry was misrouted."""
  MISROUTED_DISHONORED_RETURN

  """R72 - The dishonored return entry was received after the deadline."""
  UNTIMELY_DISHONORED_RETURN

  """R73 - The RDFI received a timely original return entry."""
  TIMELY_ORIGINAL_RETURN

  """R74 - The RDFI is returning a corrected entry."""
  CORRECTED_RETURN

  """R75 - The return entry is not a duplicate of an earlier return."""
  RETURN_NOT_A_DUPLICATE

  """R76 - No errors were found in the return entry."""
  NO_ERRORS_FOUND

  """R77 - The RDFI does not accept R62 dishonored return entries."""
  NON_ACCEPTANCE_OF_R62_DISHONORED_RETURN

  """R80 - The IAT entry was coded incorrectly."""
  IAT_ENTRY_CODING_ERRORS

  """R81 - The RDFI does not participate in the IAT program."""
  NON_PARTICIPANT_IN_IAT_PROGRAM

  """R82 - The foreign receiving DFI identification is invalid."""
  INVALID_FOREIGN_RECEIVING_DFI_IDENTIFICATION

  """R83 - The foreign receiving DFI is unable to settle the transaction."""
  FOREIGN_RECEIVING_DFI_UNABLE_TO_SETTLE

  """R84 - The entry was not processed by the gateway."""
  ENTRY_NOT_PROCESSED_BY_GATEWAY

  """
  R85 - The outbound international payment was coded incorrectly by the ODFI.
  """
  INCORRECTLY_CODED_OUTBOUND_INTERNATIONAL_PAYMENT

  """
  R11 - The account does not have the required credit card feature enabled.
  """
  CREDIT_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required debit card feature enabled.
  """
  DEBIT_CARD_FEATURE_NOT_ENABLED

  """R86 - Repayment account not present on product"""
  REPAYMENT_ACCOUNT_NOT_PRESENT_ON_PRODUCT

  """
  R11 - The account does not have the required Highnote account feature enabled.
  """
  HIGHNOTE_ACCOUNT_FEATURE_NOT_ENABLED

  """R11 - The product does not support transfer between provided accounts."""
  TRANSFER_NOT_SUPPORTED_ON_PRODUCT

  """
  R11 - The account does not have the required non-verified bank account feature enabled.
  """
  NON_VERIFIED_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required verified bank account feature enabled.
  """
  VERIFIED_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """R11 - The account does not have the required DDA feature enabled."""
  DDA_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required prepaid card feature enabled.
  """
  PREPAID_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required secured credit card feature enabled.
  """
  SECURED_CREDIT_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required points rewards feature enabled.
  """
  POINT_REWARDS_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required negative balance reserve feature enabled.
  """
  NEGATIVE_BALANCE_RESERVE_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required product reserve feature enabled.
  """
  PRODUCT_RESERVE_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required direct merchant settlement feature enabled.
  """
  DIRECT_MERCHANT_SETTLEMENT_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required repayment account feature enabled.
  """
  REPAYMENT_ACCOUNT_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required card funding account feature enabled.
  """
  CARD_FUNDING_ACCOUNT_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required revolving card feature enabled.
  """
  REVOLVING_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required charge card feature enabled.
  """
  CHARGE_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required credit pay in full credit card feature enabled.
  """
  COMMERCIAL_CREDIT_PAY_IN_FULL_CREDIT_CARD_FEATURE_NOT_ENABLED

  """R11 - The account does not have the required JIT feature enabled."""
  JIT_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required partial funding feature enabled.
  """
  PARTIAL_FUNDING_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required preprinted card feature enabled.
  """
  PREPRINTED_CARD_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required income account feature enabled.
  """
  INCOME_ACCOUNT_FEATURE_NOT_ENABLED

  """R11 - The account does not support ACH."""
  ACH_CAPABLE_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required balance constraint feature enabled.
  """
  BALANCE_CONSTRAIN_FEATURE_NOT_ENABLED

  """
  R11 - The account does not have the required product secured deposit feature enabled.
  """
  PRODUCT_SECURED_DEPOSIT_ACCOUNT_NOT_ENABLED

  """
  R11 - The account does not have the required secured deposit feature enabled.
  """
  SECURED_DEPOSIT_ACCOUNT_NOT_ENABLED

  """
  R11 - The account does not have the required funding account feature enabled.
  """
  FUNDING_ACCOUNT_FEATURE_NOT_ENABLED

  """R11 - The transfer was rejected by the originating partner bank."""
  TRANSACTION_REJECTED_BY_PARTNER_BANK

  """R11 - The transfer amount is negative."""
  TRANSFER_AMOUNT_IS_NEGATIVE
}

"""The type of the `AchTransfer`."""
enum AchTransferType {
  """
  The `AchTransfer` is a push transfer. This means pushing funds from the originating financial institution to the receiving financial institution.
  """
  PUSH

  """
  The `AchTransfer` is a pull transfer. This means pulling funds from the receiving financial institution to the originating financial institution.
  """
  PULL
}

"""The impact of the `AchTransfer` on the Highnote `FinancialAccount`."""
enum AchTransferSign {
  """
  The `AchTransfer` yields an increase of funds on the Highnote `FinancialAccount`.
  """
  POSITIVE

  """
  The `AchTransfer` yields an decrease of funds on the Highnote `FinancialAccount`.
  """
  NEGATIVE
}

"""The purpose of the `AchTransfer`."""
enum AchTransferPurpose {
  """The `AchTransfer` is a secured deposit."""
  SECURED_DEPOSIT

  """The `AchTransfer` is a card balance repayment."""
  REPAYMENT

  """The `AchTransfer` is a payroll transfer."""
  PAYROLL

  """The `AchTransfer` is a deposit to a Highnote `FinancialAccount`."""
  DEPOSIT

  """The `AchTransfer` is a withdrawal from a Highnote `FinancialAccount`."""
  WITHDRAWAL

  """The `AchTransfer` is a merchant payout."""
  MERCHANT_PAYOUT

  """
  The `AchTransfer` is a disbursement from a network settlement to a merchant account.
  """
  MERCHANT_DISBURSEMENT

  """
  The `AchTransfer` is a disbursement from a Highnote `FinancialAccount` to a merchant funding account.
  """
  MERCHANT_PUSH_PAYMENT_FUNDING
}

"""
The financial account sending funds. This can be a Highnote `FinancialAccount`
or a verified external financial account (`ExternalFinancialBankAccount`).
"""
union AchFromFinancialAccount = FinancialAccount | ExternalFinancialBankAccount

"""
The financial account receiving funds. This can be a Highnote `FinancialAccount`
or a verified or non-verified external financial account (`ExternalFinancialBankAccount` or `NonVerifiedExternalUSFinancialBankAccount`).
"""
union AchToFinancialAccount = FinancialAccount | ExternalFinancialBankAccount | NonVerifiedExternalUSFinancialBankAccount

"""
The base details of an `OriginatedAchTransfer` or `NonOriginatedAchTransfer`.

An `OriginatedAchTransfer` is initiated by Highnote.
It can `PUSH` funds from a Highnote `FinancialAccount` to an external financial institution
or `PULL` funds from an external financial institution to a Highnote `FinancialAccount`.

A `NonOriginatedAchTransfer` is initiated by an external financial institution.
It can `PULL` funds from a Highnote `FinancialAccount` to an external financial institution
or `PUSH` funds from an external financial institution to a Highnote `FinancialAccount`.
"""
interface AchTransfer implements ElectronicFundsTransfer & Node {
  """Global ID used to reference the `AchTransfer`."""
  id: ID!

  """The monetary amount to transfer."""
  amount: Amount

  """
  The date and time the transfer was initiated (`OriginatedAchTransfer`) or received (`NonOriginatedAchTransfer`),
  in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """
  The date and time the transfer details were last updated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """
  The direction of the transfer, `PUSH` or `PULL`, from the perspective of the originating financial institution.
  
  For an `OriginatedAchTransfer`, `PUSH` means pushing funds from a Highnote `FinancialAccount` to an external financial account and
  `PULL` means pulling funds from an external financial account to a Highnote `FinancialAccount`.
  
  For a `NonOriginatedAchTransfer`, `PUSH` means pushing funds from an external financial account to a Highnote `FinancialAccount` and
  `PULL` means pulling funds from a Highnote `FinancialAccount` to an external financial account.
  """
  type: AchTransferType

  """The purpose of the transfer, e.g. deposit."""
  purpose: AchTransferPurpose

  """
  The impact of the transfer on the Highnote `FinancialAccount`.
  Negative means a reduction of funds on the Highnote `FinancialAccount`.
  Positive means an increase of funds on the Highnote `FinancialAccount`.
  """
  sign: AchTransferSign

  """The `CardProduct` associated with the Highnote `FinancialAccount`."""
  cardProduct: CardProduct

  """The name of the company that initiated the transfer."""
  companyName: String

  """The ID of the company that initiated the transfer."""
  companyIdentifier: String

  """
  Provides the receiving financial institution with information about the nature or purpose of the transaction.
  Examples include "ACCTVERIFY". "PAYROLL", "PAYMENT", etc.
  
  Maximum length: 10 characters.
  """
  companyEntryDescription: String

  """
  Receiver’s individual name. This could be a person or a business.
  
  Maximum length: 22 characters.
  """
  individualName: String

  """
  Receiver’s identification number. This could be a person or a business.
  
  Maximum length: 15 characters.
  """
  individualIdentificationNumber: String

  """
  Contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  Maximum length: 80 characters.
  """
  paymentRelatedInformation: String

  """
  A unique 15 digit number assigned  by the originator when the transfer is in the `PROCESSING` state.
  It is used is used to identify the transfer in the ACH network.
  """
  traceNumber: String

  """
  Additional details about why the transfer failed. This is only applicable when the transfer status is `FAILED` or `RETURNED`.
  """
  statusFailureReason: AchTransferStatusFailureReason

  """
  The hold status of the transfer.
  
  Funds from an `OriginatedAchTransfer` `PULL` or a `NonOriginatedAchTransfer` `PUSH` are not available to spend while the transfer is `ON_HOLD`.
  An `OriginatedAchTransfer` `PUSH` is not sent to the external financial institution while the transfer is `ON_HOLD`.
  
  This field is currently restricted to administrators.
  """
  holdStatus: AchHoldStatus

  """
  The hold type of the transfer.
  
  This field is currently restricted to administrators.
  """
  holdType: AchHoldType

  """
  The date and time the transfer failed by Highnote, in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  
  A failed transfer is not sent to the external financial institution.
  """
  failedAt: String

  """
  The date and time the hold status last changed, in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  
  Funds from an `OriginatedAchTransfer` `PULL` or a `NonOriginatedAchTransfer` `PUSH` are not available to spend while the transfer is `ON_HOLD`.
  An `OriginatedAchTransfer` `PUSH` is not sent to the external financial institution while the transfer is `ON_HOLD`.
  
  This field is currently restricted to administrators.
  """
  lastHoldStatusChangedAt: String
}

"""
The details of an `AchTransfer` initiated by Highnote.
It can `PUSH` funds from a Highnote `FinancialAccount` to an external financial institution
or `PULL` funds from an external financial institution to a Highnote `FinancialAccount`.
"""
type OriginatedAchTransfer implements AchTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the `OriginatedAchTransfer`."""
  id: ID!

  """The monetary amount to transfer."""
  amount: Amount

  """
  The date and time the transfer was initiated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """
  The date and time the transfer details were last updated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """
  The direction of the transfer, `PUSH` or `PULL`, from the perspective of the originating financial institution.
  
  `PUSH` means pushing funds from a Highnote `FinancialAccount` to an external financial account and
  `PULL` means pulling funds from an external financial account to a Highnote `FinancialAccount`.
  """
  type: AchTransferType

  """The purpose of the transfer, e.g. deposit."""
  purpose: AchTransferPurpose

  """
  The impact of the transfer on the Highnote `FinancialAccount`.
  Negative means a reduction of funds on the Highnote `FinancialAccount`.
  Positive means an increase of funds on the Highnote `FinancialAccount`.
  """
  sign: AchTransferSign

  """
  The financial account sending funds. This can be a Highnote `FinancialAccount`
  or a verified external financial account (`ExternalFinancialBankAccount`).
  """
  fromFinancialAccount: AchFromFinancialAccount

  """
  The financial account receiving funds. This can be a Highnote `FinancialAccount`
  or a verified or non-verified external financial account (`ExternalFinancialBankAccount`
  or `NonVerifiedExternalUSFinancialBankAccount`).
  """
  toFinancialAccount: AchToFinancialAccount

  """The `CardProduct` associated with the Highnote `FinancialAccount`."""
  cardProduct: CardProduct

  """The name of the company that initiated the transfer."""
  companyName: String

  """The ID of the company that initiated the transfer."""
  companyIdentifier: String

  """
  Provides the receiving financial institution with information about the nature or purpose of the transaction.
  Examples include "ACCTVERIFY". "PAYROLL", "PAYMENT", etc.
  
  Maximum length: 10 characters.
  """
  companyEntryDescription: String

  """
  Receiver’s individual name. This could be a person or a business.
  
  Maximum length: 22 characters.
  """
  individualName: String

  """
  Receiver’s identification number. This could be a person or a business.
  
  Maximum length: 15 characters.
  """
  individualIdentificationNumber: String

  """
  Contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  Maximum length: 80 characters.
  """
  paymentRelatedInformation: String

  """
  A flag that indicates the desire to process this transaction using same-day ACH.
  """
  sameDay: Boolean

  """
  A unique 15 digit number assigned by the originator when the transfer is in the `PROCESSING` state.
  It is used is used to identify the transfer in the ACH network.
  """
  traceNumber: String

  """The status of the transfer."""
  status: OriginatedAchTransferStatus

  """
  Additional details about why the transfer failed. This is only applicable when the transfer status is `FAILED` or `RETURNED`.
  """
  statusFailureReason: AchTransferStatusFailureReason

  """
  The hold status of the transfer.
  
  Funds from an `OriginatedAchTransfer` `PULL` are not available to spend while the transfer is `ON_HOLD`.
  An `OriginatedAchTransfer` `PUSH` is not sent to the external financial institution while the transfer is `ON_HOLD`.
  
  This field is currently restricted to administrators.
  """
  holdStatus: AchHoldStatus

  """
  The hold type of the transfer.
  
  This field is currently restricted to administrators.
  """
  holdType: AchHoldType

  """
  The date specified by Highnote in which ACH settlement is expected to occur at the external financial institution,
  in ISO 8601 date format, e.g. 2024-01-01.
  
  When `sameDay` is `true` and the transfer is initiated within the Federal Reserve ACH processing schedule, the
  effective entry date is the same date as the date of `createdAt` on Eastern Time Zone, otherwise, it is equal to
  the next business day.
  
  When `sameDay` is `false`, the effective entry date is equal to one business day from `createdAt` if the transfer
  is initiated within the Federal Reserve ACH processing schedule, otherwise, it is equal to two business days from
  `createdAt`.
  """
  effectiveEntryDate: String

  """
  The date and time the transfer was sent to the external financial institution for processing,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  sentToBankAt: String

  """
  The date and time the transfer is expected to process, e.g. transition to `PROCESSED`, and reflected on the financial account',
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  expectedProcessedAt: String

  """
  The date and time the transfer was processed (e.g. transitioned to `PROCESSED`) and reflected on the financial account,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  processedAt: String

  """
  The date a return received from the external financial institution for this transfer was processed by Highnote,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  returnProcessedAt: String

  """
  The date and time the transfer was canceled, in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  canceledAt: String

  """
  The date and time the transfer failed by Highnote, in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  
  A failed transfer is not sent to the external financial institution.
  """
  failedAt: String

  """
  The date and time the hold status last changed, in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  
  Funds from an `OriginatedAchTransfer` `PULL` are not available to spend while the transfer is `ON_HOLD`.
  An `OriginatedAchTransfer` `PUSH` is not sent to the external financial institution while the transfer is `ON_HOLD`.
  
  This field is currently restricted to administrators.
  """
  lastHoldStatusChangedAt: String
}

"""
The details of an `AchTransfer` initiated by an external financial institution.
It can `PULL` funds from a Highnote `FinancialAccount` to an external financial institution
or `PUSH` funds from an external financial institution to a Highnote `FinancialAccount`.
"""
type NonOriginatedAchTransfer implements AchTransfer & ElectronicFundsTransfer & Node {
  """Global ID used to reference the `NonOriginatedAchTransfer`."""
  id: ID!

  """The monetary amount to transfer."""
  amount: Amount

  """
  The date and time the transfer was received, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """
  The date and time the transfer details were last updated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """
  The direction of the transfer, `PUSH` or `PULL`, from the perspective of the originating financial institution.
  
  `PUSH` means pushing funds from an external financial account to a Highnote `FinancialAccount` and
  `PULL` means pulling funds from a Highnote `FinancialAccount` to an external financial account.
  """
  type: AchTransferType

  """The purpose of the transfer, e.g. repayment."""
  purpose: AchTransferPurpose

  """
  The impact of the transfer on the Highnote `FinancialAccount`.
  Negative means a reduction of funds on the Highnote `FinancialAccount`.
  Positive means an increase of funds on the Highnote `FinancialAccount`.
  """
  sign: AchTransferSign

  """The Highnote `FinancialAccount` funds being pulled from or pushed to."""
  financialAccount: FinancialAccount

  """The `CardProduct` associated with the Highnote `FinancialAccount`."""
  cardProduct: CardProduct

  """The name of the company that initiated the transfer."""
  companyName: String

  """The ID of the company that initiated the transfer."""
  companyIdentifier: String

  """
  Provides the receiving financial institution with information about the nature or purpose of the transaction.
  Examples include "ACCTVERIFY". "PAYROLL", "PAYMENT", etc.
  
  Maximum length: 10 characters.
  """
  companyEntryDescription: String

  """
  Receiver’s individual name. This could be a person or a business.
  
  Maximum length: 22 characters.
  """
  individualName: String

  """
  Receiver’s identification number. This could be a person or a business.
  
  Maximum length: 15 characters.
  """
  individualIdentificationNumber: String

  """
  Contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  Maximum length: 80 characters.
  """
  paymentRelatedInformation: String

  """
  A unique 15 digit number assigned by the originator. It is used is used to identify the transfer in the ACH network.
  """
  traceNumber: String

  """The status of the transfer."""
  status: NonOriginatedAchTransferStatus

  """
  Additional details about why the transfer failed. This is only applicable when the transfer status is `FAILED` or `RETURNED`.
  """
  statusFailureReason: AchTransferStatusFailureReason

  """
  The hold status of the transfer.
  
  Funds from a `NonOriginatedAchTransfer` `PUSH` are not available to spend while the transfer is `ON_HOLD`.
  
  This field is currently restricted to administrators.
  """
  holdStatus: AchHoldStatus

  """
  The hold type of the transfer.
  
  This field is currently restricted to administrators.
  """
  holdType: AchHoldType

  """
  The date in which the originating financial institution expects ACH settlement to occur, in ISO 8601 format, e.g. 2024-01-01.
  """
  settlementDate: String

  """
  The date and time the transfer was processed (e.g. transitioned to `PROCESSED`) and reflected on the financial account,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  processedAt: String

  """
  The date and time the transfer was failed by Highnote before it was returned to the external financial institution,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  failedAt: String

  """
  The date the transfer was returned by Highnote to the external financial institution, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  returnSentToBankAt: String

  """
  The date and time the hold status last changed, in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  
  Funds from a `NonOriginatedAchTransfer` `PUSH` are not available to spend while the transfer is `ON_HOLD`.
  
  This field is currently restricted to administrators.
  """
  lastHoldStatusChangedAt: String
}

"""Input details when initiating an `OriginatedAchTransfer`."""
input InitiateAchTransferInput {
  """
  A value to uniquely distinguish transfers, e.g. a UUID.
  
  This helps prevent duplicate transfers in error scenarios. If a failure happens and it is unclear
  if a transfer went through, it is safe to repeat the request with the same idempotency key. If the
  transfer already exists, the request will be deduped and the original transfer will be returned
  instead of a new transfer getting created for the same amount. If idempotency key is the same between
  two requests, the other fields will be ignored and the original transfer will be returned.
  
  This value is required. Maximum length: 255 characters.
  """
  idempotencyKey: String!

  """
  The financial account to send funds from.
  
  This must be a verified external financial account (`ExternalFinancialBankAccount`) id when pulling funds
  and a Highnote `FinancialAccount` id when pushing funds.
  """
  fromFinancialAccountId: ID!

  """
  The financial account to send funds to.
  
  This must be a Highnote `FinancialAccount` id when pulling funds
  and a verified or non-verified external financial account (`ExternalFinancialBankAccount`
  or `NonVerifiedExternalUSFinancialBankAccount`) id when pushing funds.
  """
  toFinancialAccountId: ID!

  """The purpose of the transfer, e.g. deposit."""
  purpose: AchTransferPurpose!

  """
  The monetary amount of the transfer, in cents, e.g. use USD `currencyCode` and  10000 `value` for $100.00.
  
  Maximum length: 10 digits, including cents. There may be additional limits on the size based on program.
  """
  amount: AmountInput!

  """
  The consent provided by the individual authorizing the transfer.
  
  This includes the mandate template details to be collected for auditability of the accepted terms.
  """
  transferAgreementConsent: TransferAgreementConsentInput!

  """
  The number of milliseconds after the transfer is initiated during which cancellation is allowed.
  The transfer will not be processed until the cancellation period elapses.
  
  The default value is 0.
  """
  cancellationPeriodMillis: UnsignedInt = 0

  """
  A flag that indicates the desire to process this transaction using same-day ACH.
  Note that this flag is not a guarantee the transaction will be processed the same day.
  Funds availability is highly dependent on the ACH network processing schedule.
  """
  sameDay: Boolean = false

  """
  Provides the receiving financial institution with information about the nature or purpose of the transaction.
  Examples include "ACCTVERIFY". "PAYROLL", "PAYMENT", etc.
  
  Maximum length: 10 characters. The characters should be alphanumeric.
  """
  companyEntryDescription: String!

  """
  Receiver’s individual name. This could be a person or a business.
  
  Maximum length: 22 characters. The characters should be alphanumeric.
  """
  individualName: String!

  """
  Receiver’s identification number. This could be a person or a business.
  
  Maximum length: 15 characters. The characters should be alphanumeric.
  """
  individualIdentificationNumber: String

  """
  Contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  **Maximum length:** 80 characters
  """
  paymentRelatedInformation: String
}

"""The return types when initiating an `OriginatedAchTransfer`."""
union InitiateAchTransferPayload = OriginatedAchTransfer | UserError | AccessDeniedError

"""
Input for creating a new simulated `ExternallyInitiatedACHTransfer`.

This is used only for testing.
"""
input SimulateNonOriginatedAchTransferInput {
  """
  A value to uniquely distinguish transfers, e.g. a UUID.
  
  This helps prevent duplicate transfers in error scenarios. If a failure happens and it is unclear
  if a transfer went through, it is safe to repeat the request with the same idempotency key. If the
  transfer already exists, the request will be deduped and the original transfer will be returned
  instead of a new transfer getting created for the same amount. If idempotency key is the same between
  two requests, the other fields will be ignored and the original transfer will be returned.
  
  This value is required. Maximum length: 255 characters.
  """
  idempotencyKey: String!

  """
  The Highnote `FinancialAccount` to pull funds from or push funds to.
  
  This must be a Highnote `FinancialAccount`.
  """
  financialAccountId: ID!

  """The amount of money being transferred."""
  amount: AmountInput!

  """The purpose of the transfer, e.g. deposit."""
  purpose: AchTransferPurpose!

  """
  Settlement date in YYYY-MM-DD format. If not specified, current date will be used.
  """
  settlementDate: String

  """
  The identifier of the simulated external organization initiating the transfer, e.g. 1234567890.
  
  It can be up to 10 alphanumeric characters.
  """
  companyIdentifier: String!

  """
  The name of the simulated external organization initiating the transfer, e.g. THESAMPLECOMPANY.
  
  It can be up to 16 alphanumeric characters.
  """
  companyName: String!

  """
  Arbitrary value describing the transfer entered by the simulated external organization.
  
  It can be up to 20 alphanumeric characters.
  If not specified, it will be undefined.
  """
  companyDiscretionaryData: String

  """
  Provides the receiving financial institution with information about the nature or purpose of the transaction.
  Examples include "ACCTVERIFY". "PAYROLL", "PAYMENT", etc.
  
  It can be up to 10 alphanumeric characters.
  """
  companyEntryDescription: String!

  """
  Receiver’s identification number. This could be a person or a business.
  
  This could be either a business or an individual. It can be up to 15 alphanumeric characters.
  If not specified, it will be undefined.
  """
  individualIdentificationNumber: String

  """
  Receiver’s individual name. This could be a person or a business.
  
  This could be either a business or an individual. It can be up to 22 alphanumric characters.
  If not specified, it will be populated as `THISISTHERECIEVEROFACH`
  """
  individualName: String!

  """
  Contains payment-related information provided by the originator of the transaction.
  It can include free-form text, structured data, or codes. The field supports alphanumeric characters,
  including the following symbols: ! " & ' ( ) \* + , - . / : ; ? = % ~ @ [ ] { } \\ | < > # $.
  
  **Example:** RMR\*IV\*0123456789\*\*999.99\\.
  
  Please note that this information may or may not be displayed to the recipient, based on the bank's
  capabilities, and method of access (i.e., online banking, statement, etc.)
  
  **Maximum length:** 80 characters
  """
  paymentRelatedInformation: String
}

"""
The return types when simulating receiving a `NonOriginatedAchTransfer`.
"""
union SimulateNonOriginatedAchTransferPayload = NonOriginatedAchTransfer | UserError | AccessDeniedError

"""
Input details when simulating the processing of an `OriginatedAchTransfer` or `NonOriginatedAchTransfer`.
"""
input SimulateAchTransferProcessingInput {
  """
  The Global ID of the `NonOriginatedAchTransfer` to simulate processing.
  """
  id: ID!
}

"""
The return types when simulating the processing of an `OriginatedAchTransfer` or `NonOriginatedAchTransfer`.
"""
union SimulateAchTransferProcessingPayload = OriginatedAchTransfer | NonOriginatedAchTransfer | UserError | AccessDeniedError

"""
Input details when simulating the return of an `OriginatedAchTransfer` or `NonOriginatedAchTransfer`.
"""
input SimulateAchTransferReturnInput {
  """The Global ID of the ACH transfer to simulate processing."""
  id: ID!

  """
  Additional details about why the `OriginatedAchTransfer` or `NonOriginatedAchTransfer` was returned.
  """
  statusFailureReason: AchTransferStatusFailureReason!
}

"""
The return types when simulating the return of an `OriginatedAchTransfer` or `NonOriginatedAchTransfer`.
"""
union SimulateAchTransferReturnPayload = OriginatedAchTransfer | NonOriginatedAchTransfer | UserError | AccessDeniedError

"""The connection type for `OriginatedAchTransfer`s."""
type OriginatedAchTransferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OriginatedAchTransferEdge!]
}

"""The connection type for `NonOriginatedAchTransfer`."""
type NonOriginatedAchTransferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NonOriginatedAchTransferEdge!]
}

"""The edge type for an `OriginatedAchTransfer`."""
type OriginatedAchTransferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `OriginatedAchTransfer`."""
  node: OriginatedAchTransfer
}

"""The edge type for a `NonOriginatedAchTransfer`."""
type NonOriginatedAchTransferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `NonOriginatedAchTransfer`."""
  node: NonOriginatedAchTransfer
}

"""
An event that occurs when an `OriginatedAchTransfer` is initiated by Highnote.
"""
type OriginatedAchTransferInitiatedEvent implements Node {
  """Uniquely identifies the `OriginatedAchTransferInitiatedEvent`."""
  id: ID!

  """
  The date the transfer was initiated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """Details about the `OriginatedAchTransfer` that was initiated."""
  transfer: OriginatedAchTransfer!
}

"""
An event that occurs when an `OriginatedAchTransfer` is processed as `PENDING` by Highnote.
"""
type OriginatedAchTransferPendingEvent implements Node {
  """Uniquely identifies the `OriginatedAchTransferPendingEvent`."""
  id: ID!

  """
  The date the transfer was initiated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  processedPendingAt: String

  """
  Details about the `OriginatedAchTransfer` that was processed as `PENDING` by Highnote.
  """
  transfer: OriginatedAchTransfer!
}

"""
An event that occurs when an `OriginatedAchTransfer` is sent to the external financial institution.
"""
type OriginatedAchTransferProcessingEvent implements Node {
  """Uniquely identifies the `OriginatedAchTransferProcessingEvent`."""
  id: ID!

  """
  The date and time the transfer is sent to the external financial institution for processing,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  sentToBankAt: String

  """
  Details about the `OriginatedAchTransfer` that was sent to the external financial institution.
  """
  transfer: OriginatedAchTransfer!
}

"""
An event that occurs when an `OriginatedAchTransfer` was processed (e.g. transitioned to `PROCESSED`) and reflected on the financial account.
"""
type OriginatedAchTransferProcessedEvent implements Node {
  """Uniquely identifies the `OriginatedAchTransferProcessedEvent`."""
  id: ID!

  """
  The date and time the transfer was processed (e.g. transitioned to `PROCESSED`) and reflected on the financial account,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  processedAt: String

  """
  Details about the `OriginatedAchTransfer` that was processed (e.g. transitioned to `PROCESSED`) and reflected on the financial account.
  """
  transfer: OriginatedAchTransfer!
}

"""
An event that occurs when an `OriginatedAchTransfer` is canceled by Highnote.
"""
type OriginatedAchTransferCanceledEvent implements Node {
  """Uniquely identifies the `OriginatedAchTransferCanceledEvent`."""
  id: ID!

  """
  The date the transfer was canceled by Highnote, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  canceledAt: String

  """
  Details about the `OriginatedAchTransfer` that was canceled by Highnote.
  """
  transfer: OriginatedAchTransfer!
}

"""
An event that occurs when an `OriginatedAchTransfer` is failed by Highnote.
"""
type OriginatedAchTransferFailedEvent implements Node {
  """Uniquely identifies the `OriginatedAchTransferFailedEvent`."""
  id: ID!

  """
  Additional details about why the originated transfer was failed by Highnote.
  """
  statusFailureReason: AchTransferStatusFailureReason

  """
  The date the transfer was failed by Highnote, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  failedAt: String

  """Details about the `OriginatedAchTransfer` that was failed by Highnote."""
  transfer: OriginatedAchTransfer!
}

"""
An event that occurs when a return received from the external financial institution for this transfer was processed by Highnote,
in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
"""
type OriginatedAchTransferReturnedEvent implements Node {
  """Uniquely identifies the `OriginatedAchTransferReturnedEvent`."""
  id: ID!

  """
  Additional details about why the originated transfer was returned by the external financial institution.
  """
  statusFailureReason: AchTransferStatusFailureReason

  """
  The date and time when a return received from the external financial institution for this transfer was processed by Highnote,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  returnProcessedAt: String

  """
  Details about the `OriginatedAchTransfer` that was returned by the external financial institution.
  """
  transfer: OriginatedAchTransfer!
}

"""
An event that occurs when a `NonOriginatedAchTransfer` is received from an external financial institution.
"""
type NonOriginatedAchTransferReceivedEvent implements Node {
  """Uniquely identifies the `NonOriginatedAchTransferReceivedEvent`."""
  id: ID!

  """
  The date the transfer was received by Highnote, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """Details about the `NonOriginatedAchTransfer` that was received."""
  transfer: NonOriginatedAchTransfer!
}

"""
An event that occurs when a `NonOriginatedAchTransfer` is processed by Highnote.
"""
type NonOriginatedAchTransferProcessedEvent implements Node {
  """Uniquely identifies the `NonOriginatedAchTransferProcessedEvent`."""
  id: ID!

  """
  The date and time the transfer was processed (e.g. transitioned to `PROCESSED`) and reflected on the financial account,
  in ISO 8601 date and time format, e.g. 2024-01-01T00:00:00.000Z.
  """
  processedAt: String

  """Details about the `NonOriginatedAchTransfer` that was processed."""
  transfer: NonOriginatedAchTransfer!
}

"""
An event that occurs when a `NonOriginatedAchTransfer` is failed by Highnote.
"""
type NonOriginatedAchTransferFailedEvent implements Node {
  """Uniquely identifies the `NonOriginatedAchTransferFailedEvent`."""
  id: ID!

  """Additional details about why the ACH transfer failed."""
  statusFailureReason: AchTransferStatusFailureReason

  """
  The date the transfer was failed by Highnote, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  failedAt: String

  """
  Details about the `NonOriginatedAchTransfer` that was failed by Highnote.
  """
  transfer: NonOriginatedAchTransfer!
}

"""
An event that occurs when a `NonOriginatedAchTransfer` is returned by Highnote.
"""
type NonOriginatedAchTransferReturnedEvent implements Node {
  """Uniquely identifies the `NonOriginatedAchTransferReturnedEvent`."""
  id: ID!

  """Additional details about why the ACH transfer failed."""
  statusFailureReason: AchTransferStatusFailureReason

  """
  The date the transfer was returned by Highnote to the external financial institution,
  in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  returnSentToBankAt: String

  """
  Details about the `NonOriginatedAchTransfer` that was returned by Highnote.
  """
  transfer: NonOriginatedAchTransfer!
}

"""
An event that occurs when an `OriginatedAchTransfer` or `NonOriginatedTransfer` has a hold added by Highnote.
"""
type AchTransferHoldAddedEvent implements Node {
  """Uniquely identifies the `AchTransferHoldAddedEvent`."""
  id: ID!

  """The previous hold status."""
  fromHoldStatus: AchHoldStatus

  """The previous hold type."""
  fromHoldType: AchHoldType

  """
  The date the transfer hold was added by Highnote, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  holdStatusAddedAt: String

  """Detains about the ACH transfer that had a hold added by Highnote."""
  transfer: AchTransfer!
}

"""
An event that occurs when an `OriginatedAchTransfer` or `NonOriginatedTransfer` has a hold removed by Highnote.
"""
type AchTransferHoldRemovedEvent implements Node {
  """Uniquely identifies the `AchTransferHoldRemovedEvent`."""
  id: ID!

  """The previous hold status."""
  fromHoldStatus: AchHoldStatus

  """The previous hold type."""
  fromHoldType: AchHoldType

  """
  The date the transfer hold was removed by Highnote, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  holdStatusRemovedAt: String

  """Detains about the ACH transfer that had a hold removed by Highnote."""
  transfer: AchTransfer!
}

"""The status of the `ReviewWorkflowEvent`"""
enum ReviewWorkflowEventStatus {
  """The event for review, e.g. wire transfer has been initiated."""
  PENDING

  """The event under review, e.g. wire transfer has been approved."""
  APPROVED

  """The event under review, e.g. wire transfer has been rejected."""
  REJECTED

  """The event under review, e.g. wire transfer was canceled."""
  CANCELED

  """The event under review, e.g. wire transfer has completed."""
  COMPLETED

  """The event under review, e.g. wire transfer has failed."""
  FAILED

  """The event under review, e.g. wire transfer is in an unspecified state."""
  UNSPECIFIED
}

"""
Input details when initiating an add wire transfer to `FinancialAccount`.
"""
input InitiateAddWiredFundsToFinancialAccountInput {
  """
  A value to uniquely distinguish transfers, e.g. a UUID.
  
  This helps prevent duplicate transfers in error scenarios. If a failure happens and it is unclear
  if a transfer went through, it is safe to repeat the request with the same idempotency key. If the
  transfer already exists, the request will be deduped and the original transfer will be returned
  instead of a new transfer getting created for the same amount. If idempotency key is the same between
  two requests, the other fields will be ignored and the original transfer will be returned.
  
  If not provided, a unique identifier will be generated.
  Maximum length: 255 characters.
  """
  idempotencyKey: String

  """The `FinancialAccount` to send funds to."""
  toFinancialAccountId: ID!

  """
  The monetary amount of the transfer, in cents, e.g. use USD `currencyCode` and  10000 `value` for $100.00.
  
  Maximum length: 10 digits, including cents. There may be additional limits on the size based on program.
  """
  amount: AmountInput!

  """
  A description of the wire transfer for later reference.
  Maximum length: 1024 characters
  """
  memo: String

  """
  Additional reference ID
  Maximum length: 255 characters
  """
  externalIdentifier: String
}

union ReviewWorkflowEventTransfer = WireTransfer

"""
An event representing the review process of a transfer. Use the `reviewState`
field to determine the current state of the review.
"""
type ReviewWorkflowEvent implements Node {
  """Global ID used to reference the `ReviewWorkflowEvent`."""
  id: ID!

  """The status of the transfer workflow."""
  reviewState: ReviewWorkflowEventStatus

  """
  The date and time the review was initiated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """
  The date and time the review was last updated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  updatedAt: String

  """The transfer associated with this workflow event."""
  transfer: ReviewWorkflowEventTransfer

  """
  The details of the wire transfer workflow review associated with this event.
  """
  reviewItem: WireTransferReviewItem
}

"""The details of an `WireTransferReview` initiated by Highnote."""
type WireTransferReview implements Node {
  """Global ID used to reference the `WireTransferReview`."""
  id: ID!

  """The `FinancialAccount` receiving funds."""
  toFinancialAccount: FinancialAccount

  """The monetary amount wired."""
  amount: Amount

  """The memo for this request."""
  memo: String

  """The externally generated ID associated with the wire transfer."""
  externalIdentifier: String
}

union WireTransferReviewItem = WireTransferReview

"""The input to start a document upload session."""
input StartDocumentUploadSessionInput {
  """The ID of the document upload session"""
  documentUploadSessionId: ID!
}

"""The input to generate a secure upload link"""
input CreateDocumentUploadLinkInput {
  """The ID of the document upload session"""
  documentUploadSessionId: ID!

  """The document type to be uploaded"""
  documentType: DocumentType!
}

"""The input to end a document upload session"""
input EndDocumentUploadSessionInput {
  """The ID of the document upload session"""
  documentUploadSessionId: ID!
}

union EndDocumentUploadSessionPayload = USAccountHolderApplicationDocumentUploadSession | CardProfileDocumentUploadSession | IdentityVerificationDocumentUploadSession | CheckPaymentDocumentUploadSession | UserError | AccessDeniedError

union CreateDocumentUploadLinkPayload = DocumentUploadLink | CheckPaymentDocumentUploadSession | CardArtDocument | UserError | AccessDeniedError

"""An interface representing an upload link"""
interface UploadLink {
  """Global ID used to reference the secure upload link"""
  id: ID!

  """The status of the upload"""
  status: DocumentUploadLinkStatusCode

  """A url to be used to upload the contents of the document."""
  uploadUrl: String

  """The date and time, in ISO 8601 format, this `upload link` was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `upload link` was last updated.
  """
  updatedAt: String
}

"""A secure upload link for a document upload session"""
type DocumentUploadLink implements Node & UploadLink {
  """Global ID used to reference the secure upload link"""
  id: ID!

  """
  The session which associates all of the files uploaded using the secure upload link
  """
  documentUploadSession: DocumentUploadSession

  """The document type that was uploaded"""
  documentType: DocumentType

  """The status of the upload"""
  status: DocumentUploadLinkStatusCode

  """The categorization of an uploaded document"""
  documentCategoryType: DocumentCategoryType

  """
  A url to be used to upload the contents of the document.
  
  ** Note: ** The maximum file size is 10 MB
  """
  uploadUrl: String

  """
  The date and time, in ISO 8601 format, this `document upload link` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `document upload link` was last updated.
  """
  updatedAt: String
}

"""The return types when a document upload session is started."""
union StartDocumentUploadSessionPayload = USAccountHolderApplicationDocumentUploadSession | CardProfileDocumentUploadSession | IdentityVerificationDocumentUploadSession | CheckPaymentDocumentUploadSession | UserError | AccessDeniedError

interface DocumentUploadSession {
  """Global ID used to reference the document upload session"""
  id: ID!

  """The current state of the document upload session"""
  status: DocumentUploadSessionStatusCode

  """
  The date and time, in ISO 8601 format, this `document upload session` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `document upload session` was last updated.
  """
  updatedAt: String

  """A list of documents uploaded via a secure document upload link"""
  documents: [UploadLink]
}

"""A document upload session for identity verification documents."""
type IdentityVerificationDocumentUploadSession implements Node & DocumentUploadSession {
  """Global ID used to reference the document upload session"""
  id: ID!

  """The current state of the document upload session"""
  status: DocumentUploadSessionStatusCode

  """
  The date and time, in ISO 8601 format, this `IdentityVerificationDocumentUploadSession` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `IdentityVerificationDocumentUploadSession` was last updated.
  """
  updatedAt: String

  """
  The date and time, in ISO 8601 format, this `IdentityVerificationDocumentUploadSession` will expire.
  """
  expiresAt: String

  """
  A list of `DocumentType` requested in order to verify the identity of the entity.
  """
  requestedDocuments: [DocumentType!]

  """A list of documents uploaded via a secure document upload link"""
  documents: [UploadLink]
}

"""A document upload session for a US Account Holder Application"""
type USAccountHolderApplicationDocumentUploadSession implements Node & DocumentUploadSession {
  """Global ID used to reference the document upload session"""
  id: ID!

  """The current state of the document upload session"""
  status: DocumentUploadSessionStatusCode

  """
  A list of primary document types that are compliant for upload. A primary document is a verifiable document used to provide evidence of identity containing personally identifiable information.
  """
  primaryDocumentTypes: [DocumentType!]

  """
  A list of secondary document types that are compliant for upload. A secondary document is additional substantiating evidence to verify the identity of the entity.
  """
  secondaryDocumentTypes: [DocumentType!]

  """
  A list of supporting document types that are compliant for upload. A supporting document contains information to correlate the identity of the entity.
  """
  supportingDocumentTypes: [DocumentType!]

  """
  A list of upload requirements, dependent upon the type of document upload
  """
  uploadRequirements: [UploadRequirement!]

  """A list of documents uploaded via a secure document upload link"""
  documents: [UploadLink]

  """
  A context to represent rules and configurations for the `USAccountHolderApplicationDocumentUploadSession`
  """
  documentContext: DocumentUploadSessionContext

  """
  A recommended list of documents to collect during this `USAccountHolderApplicationDocumentUploadSession`.
  """
  recommendedDocumentTypes: [DocumentType!]

  """
  The date and time, in ISO 8601 format, this `document upload session` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `document upload session` was last updated.
  """
  updatedAt: String
}

"""Details of the requirements for the upload."""
type UploadRequirement {
  """A list of a constraints for an upload"""
  constraints: [UploadRequirementConstraint]
}

"""A union representing a `DocumentUploadSessionContext`"""
union DocumentUploadSessionContext = AccountHolderApplicationDocumentUploadSessionContext

"""A document upload session context for an Account Holder's Application"""
type AccountHolderApplicationDocumentUploadSessionContext {
  """
  A context representing the relationship between the documents requested to be uploaded and the `AccountHolderVerificationResultCode`s presented during the Application process.
  """
  documentVerificationResultCodeContext: AccountHolderApplicationDocumentToVerificationResultCodeContext

  """
  A context representing the relationship between the `AccountHolderVerificationResultCode`s presented during the Application process and the documents requested.
  """
  verificationResultCodeDocumentContext: AccountHolderApplicationVerificationResultCodeToDocumentContext
}

"""
A context describing the impact of a `AccountHolderVerificationResultCode` on the requested `DocumentType`s presented on the `USAccountHolderApplicationDocumentUploadSession`
"""
type AccountHolderApplicationVerificationResultCodeToDocumentContext {
  """
  A list of entries representing the `AccountHolderVerificationResultCode` to `DocumentType` mapping.
  """
  entries: [AccountHolderApplicationVerificationResultCodeToDocumentEntry!]
}

"""
An entry providing a list of `DocumentType`s that address the `AccountHolderVerificationResultCode`
"""
type AccountHolderApplicationVerificationResultCodeToDocumentEntry {
  """
  The `AccountHolderVerificationResultCode` on the `AccountHolderCardProductApplication`
  """
  verificationResultCode: AccountHolderVerificationResultCode

  """A list of `DocumentType`"""
  documents: [DocumentType!]
}

"""
A context describing the impact of a `DocumentType` presented on the `USAccountHolderApplicationDocumentUploadSession` to the `AccountHolderVerificationResultCode`s
"""
type AccountHolderApplicationDocumentToVerificationResultCodeContext {
  """
  A list of entries representing the `DocumentType` to `AccountHolderVerificationResultCode` mapping.
  """
  entries: [AccountHolderApplicationDocumentToVerificationResultCodeEntry!]
}

"""
An entry providing a list of `AccountHolderVerificationResultCode`s that a `DocumentType` would address.
"""
type AccountHolderApplicationDocumentToVerificationResultCodeEntry {
  """A requested `DocumentType`"""
  document: DocumentType

  """A list of `AccountHolderVerificationResultCode`s"""
  verificationResultCodes: [AccountHolderVerificationResultCode!]
}

union UploadRequirementConstraint = DocumentUploadRequirementConstraint

"""A requirement constraint for a document upload"""
type DocumentUploadRequirementConstraint {
  """Allowed document type supported for a given upload requirement"""
  documentType: DocumentCategoryType

  """The number of documents required for a category type"""
  numberOfDocuments: Int
}

"""A status code representing the state of the document upload session"""
enum DocumentUploadSessionStatusCode {
  """The document upload session is created, but has not been initiated"""
  CREATED

  """
  The document upload session has been initiated and files can now be uploaded to the session
  """
  INITIATED

  """A session has started and a file upload request has been initiated."""
  IN_PROGRESS

  """
  A session has ended.
  Files can no longer be uploaded to the session.
  """
  SUBMITTED

  """
  A session has expired due to inactivity. A session can result in an expired state if it is never transitioned to submitted.
  Files can no longer be uploaded to the session.
  """
  EXPIRED
}

"""Document types that can be uploaded for identity verification."""
enum DocumentType {
  """A social security card"""
  SOCIAL_SECURITY_CARD

  """A birth certificate"""
  BIRTH_CERTIFICATE

  """A document representing a record of service in the US military"""
  US_MILITARY_RECORD_OF_SERVICE

  """A certificate of marriage"""
  MARRIAGE_CERTIFICATE

  """A certificate of a divorce"""
  DIVORCE_DECREE

  """A state issued permit"""
  STATE_ISSUED_PERMIT

  """A state issued benefit card"""
  STATE_ISSUED_BENEFIT_CARD

  """A tax form from the United States"""
  US_TAX_FORM

  """A W2 or Income tax form"""
  W2

  """
  A collection of tax forms documenting different types of payments made by an individual or a business that typically isn't your employer
  """
  FORM_1099

  """
  A form submitted by the trustee or issuer of your individual retirement arrangement (IRA) to report contributions, including any catch-up contributions, required minimum distributions (RMDs), and the fair market value (FMV) of the account
  """
  FORM_5498

  """
  A report on mortgage interest (including points, defined later) of $600 or more you received during the year in the course of your trade or business from an individual, including a sole proprietor
  """
  FORM_1098

  """A document confirming citizenship"""
  CERTIFICATE_OF_CITIZENSHIP

  """A document representing the medicare card"""
  MEDICARE_CARD

  """A legal name change document provided by the court"""
  COURT_ORDER_FOR_LEGAL_NAME_CHANGE

  """An identification card issued by a municipality"""
  MUNICIPAL_ID

  """
  A document permitting a person to drive a motor vehicle.
  
  The driver's license must be unexpired and valid.
  
  The document must show the driver's full name and full physical address. The address cannot be associated to a PO Box or CMRA.
  """
  DRIVERS_LICENSE

  """
  An official document issued by a government, certifying the holder's identity and citizenship and entitling them to travel under its protection to and from foreign countries
  """
  PASSPORT

  """
  A State ID Card is a government issued form of identification containing personal and biometric information, that allows its holder to prove their identity and citizenship.
  """
  STATE_ISSUED_ID

  """
  An identification document issued by the United State of America Military Armed Forces
  """
  STATE_US_MILITARY_ARMED_FORCES_ID

  """An permanent resident card issued by the United State of America"""
  STATE_US_PERMANENT_RESIDENT_CARD

  """
  A document that many consulates issue to identify the citizens of their country who reside abroad
  """
  STATE_CONSULAR_IDENTIFICATION_CARD

  """
  An identity document used by nationals of Mexico to enter the United States.
  """
  STATE_US_BORDER_CROSSING_CARD

  """
  An identity document indicating the right to employment within the United States of America.
  """
  STATE_US_EMPLOYMENT_AUTHORIZATION_CARD

  """
  Tribal identification cards are issued by tribes as proof of your enrollment and membership in the tribe
  """
  STATE_TRIBAL_ID

  """
  A utility bill is a monthly statement of the amount a household or business owes for essential services or utilities.
  
  The utility bill must be dated within the last 60 days.
  
  The document must show the biller's full name and full physical address. The address cannot be associated to a PO Box or CMRA.
  """
  UTILITY_BILL

  """
  A phone bill is an account or bill for the charges for a telephone and line and for calls made from it
  """
  PHONE_BILL

  """
  A cable bill is an account or bill for the charges for access to paid television.
  """
  CABLE_BILL

  """
  An internet bill is an account or bill for the charges for access to internet.
  """
  INTERNET_BILL

  """
  A printed record of the balance in a bank account and the amounts that have been paid into it and withdrawn from it, issued periodically to the holder of the account.
  
  The bank statement must be dated within the last 60 days.
  
  The document must show the account holder's full name and full physical address. The address cannot be associated to a PO Box or CMRA.
  """
  BANK_STATEMENT

  """A summary of the investments in a 401k retirement account"""
  STATEMENT_401K

  """
  The official document for complete information pertaining to your brokerage account's value, holdings, and activity
  """
  BROKERAGE_STATEMENT

  """
  An insurance document related to an insurance policy on the life of the policy holder
  """
  LIFE_INSURANCE

  """
  An insurance document related to an insurance policy on the health of the policy holder
  """
  HEALTH_INSURANCE

  """An insurance document related to an insurance policy on an automobile"""
  AUTO_INSURANCE

  """
  A document issued by an employer to pay an employee for services rendered.
  """
  PAY_STUB

  """
  A contractual arrangement calling for the user to pay the owner for use of property.
  
  The lease agreement must be current and valid.
  
  The document must show the user's full name and full physical address. The address cannot be associated to a PO Box or CMRA.
  """
  LEASE_AGREEMENT

  """
  Articles of incorporation for a business
  
  **Note: ** To be used only for a business account holder type
  """
  ARTICLES_OF_INCORPORATION

  """
  Non Profit 501c3 charter for a business
  
  **Note: ** To be used only for a business account holder type
  """
  NON_PROFIT_501_C3

  """
  Federal Employer Identification Number
  
  **Note: ** To be used only for a business account holder type
  """
  FEDERAL_EMPLOYER_IDENTIFICATION_NUMBER

  """
  Identification Document representing a social security card
  
  **Note: ** A social security for a business is only accepted for business' that are sole proprietorships.
  """
  SOLE_PROPRIETOR_SOCIAL_SECURITY_CARD

  """
  A key document used by limited liability companies (LLCs)  to outline the business' financial and functional decisions including rules, regulations, and provisions.
  
  **Note: ** To be used only for a business account holder type
  """
  OPERATING_AGREEMENT

  """
  A legal document that dictates the way a business is run and details the relationship between each partner
  
  **Note: ** To be used only for a business account holder type
  """
  PARTNERSHIP_AGREEMENT

  """
  A document indicating that the business has filed all reports and fees with the Secretary of State's office.
  It serves as proof, or evidence, that the entity exists and is authorized to transact business in the state
  
  **Note: ** To be used only for a business account holder type
  """
  CERTIFICATE_OF_GOOD_STANDING

  """
  A business tax return, indicating taxes filed for the filing year, proving the business is current with IRS filing requirements.
  
  **Note: ** To be used only for a business account holder type
  """
  IRS_ISSUED_TAX_RETURN

  """
  An estate planning document that allows the business to transfer ownership of its assets to a third party.
  
  **Note: ** To be used only for a business account holder type
  """
  TRUST_AGREEMENT

  """
  Permits issued by government agencies that allow individuals or companies to conduct business within the government's geographical jurisdiction.
  
  **Note: ** To be used only for a business account holder type
  """
  BUSINESS_LICENSE

  """
  Business registration issued by the Secretary of State.
  
  The business registration must be current and active within the State where the Business operates.
  
   The document must show the business name and full physical address.
  
  **Note: ** To be used only for a business account holder type
  """
  BUSINESS_REGISTRATION

  """
  IRS Form CP-575 - Confirmation of Federal Employer Identification Number letter.
  
  **Note: ** To be used only for a business account holder type
  """
  FORM_CP_575

  """
  Confirmation of application submission - Tax ID Number.
  
  **Note: ** To be used only for a business account holder type
  """
  TAX_ID_APPLICATION

  """
  The identification card and associated number used by the State or Federal entity to track an inmate
  """
  PRISON_ID

  """
  All certified document(s) granted to applicant at the time of discharge from a correctional institution
  """
  PRISON_RELEASE_PAPERWORK

  """
  A military record indicating an individuals release or dischage from active duty
  """
  CERTIFICATE_OF_RELEASE_OR_DISCHARGE_FROM_ACTIVE_DUTY

  """
  A VA award letter is issued by the Department of Veterans Affairs (VA) when a decision has been made regarding a veteran's claim for benefits.
  Specifically, this letter indicates a veteran's disability rating(s) along with the corresponding amount of monthly compensation.
  """
  VETERAN_AFFAIRS_BENEFITS_LETTER

  """
  A federal tax returrn issued by United States of America Internal Revenue Service.
  """
  IRS_ISSUED_FEDERAL_TAX_RETURN

  """A state tax return issued by a state in the United States."""
  IRS_ISSUED_STATE_TAX_RETURN

  """The card art is the background image of a Digital Card"""
  DIGITAL_BACKGROUND

  """The card art document is a front image of a Digital Card"""
  DIGITAL_FRONT_OF_CARD

  """The card art is the icon image of a Digital Card"""
  DIGITAL_ICON

  """The card art is the logo image of a Digital Card"""
  DIGITAL_LOGO

  """The card art document is a back image of a Physical Card"""
  PHYSICAL_BACK_OF_CARD

  """The card art document is a front image of a Physical Card"""
  PHYSICAL_FRONT_OF_CARD

  """The card art document is a front image of a Virtual Card"""
  VIRTUAL_FRONT_OF_CARD

  """The card art document for 3DS Verification Logo"""
  VIRTUAL_THREE_DS_VERIFICATION_LOGO

  """The signature of the account holder"""
  ACCOUNT_HOLDER_SIGNATURE
}

"""A categorization of an uploaded document"""
enum DocumentCategoryType {
  """A primary document"""
  PRIMARY_DOCUMENT_TYPE

  """A secondary document"""
  SECONDARY_DOCUMENT_TYPE

  """A supporting document type"""
  SUPPORTING_DOCUMENT_TYPE
}

"""A status representing a file upload"""
enum DocumentUploadLinkStatusCode {
  """
  The upload link has been created and is waiting for a file to be uploaded
  """
  PENDING

  """A file upload is currently in progress and is being processed"""
  IN_PROGRESS

  """
  A file upload completed successfully and has been securely stored in the document store
  """
  COMPLETED

  """
  A file upload has failed due to server communication and needs to be retried
  """
  FAILED

  """
  A file upload has been denied due to malicious content or malware present in the file
  """
  DENIED
}

"""
Indicates that identity verification documents have been requested for a `USPersonAccountHolder`.
"""
type PersonAccountHolderIdentityDocumentsRequestedEvent {
  """The `USPersonAccountHolder` for which documents have been requested."""
  personAccountHolder: USPersonAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The `IdentityVerificationDocumentUploadSession` created for the requested documents.
  """
  documentUploadSession: IdentityVerificationDocumentUploadSession

  """The reason identity verification documents are being requested."""
  reason: IdentityVerificationDocumentRequestReason
}

"""
Indicates that identity verification documents have been requested for a `USBusinessAccountHolder`.
"""
type BusinessAccountHolderIdentityDocumentsRequestedEvent {
  """The `USBusinessAccountHolder` for which documents have been requested."""
  businessAccountHolder: USBusinessAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The `IdentityVerificationDocumentUploadSession` created for the requested documents.
  """
  documentUploadSession: IdentityVerificationDocumentUploadSession

  """The reason identity verification documents are being requested."""
  reason: IdentityVerificationDocumentRequestReason
}

"""
Indicates that identity verification documents have been requested for a `USBusinessAuthorizedPerson`.
"""
type BusinessAuthorizedPersonIdentityDocumentsRequestedEvent {
  """
  The `USBusinessAuthorizedPerson` for which documents have been requested.
  """
  businessAuthorizedPerson: USBusinessAuthorizedPerson

  """
  The `USBusinessAccountHolder` to which the `USBusinessAuthorizedPerson` is associated.
  """
  businessAccountHolder: USBusinessAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The `IdentityVerificationDocumentUploadSession` created for the requested documents.
  """
  documentUploadSession: IdentityVerificationDocumentUploadSession

  """The reason identity verification documents are being requested."""
  reason: IdentityVerificationDocumentRequestReason
}

"""
Indicates that identity verification documents have been requested for a `USBusinessUltimateBeneficialOwner`.
"""
type BusinessUltimateBeneficialOwnerIdentityDocumentsRequestedEvent {
  """
  The `USBusinessUltimateBeneficialOwner` for which documents have been requested.
  """
  businessUltimateBeneficialOwner: USBusinessUltimateBeneficialOwner

  """
  The `USBusinessAccountHolder` to which the `USBusinessUltimateBeneficialOwner` is associated.
  """
  businessAccountHolder: USBusinessAccountHolder

  """The date and time, in ISO 8601 format, this event was created."""
  createdAt: String

  """
  The `IdentityVerificationDocumentUploadSession` created for the requested documents.
  """
  documentUploadSession: IdentityVerificationDocumentUploadSession

  """The reason identity verification documents are being requested."""
  reason: IdentityVerificationDocumentRequestReason
}

"""Reasons for which identity verification documents may be requested."""
enum IdentityVerificationDocumentRequestReason {
  """The documents are being requested for CIP verification."""
  CIP_VERIFICATION

  """
  The documents are being requested for an update initiated by the account holder.
  """
  ACCOUNT_HOLDER_UPDATE
}

"""
Whether the activity decreases or increases available cash or credit for
the account.
"""
enum FinancialAccountActivitySign {
  """The activity decreases available cash or credit."""
  NEGATIVE

  """The activity increases available cash or credit."""
  POSITIVE
}

union FinancialAccountActivitySource = DebitTransaction | CreditTransaction | PayrollTransfer | CreditFunds | DebitFunds | SecureDeposit | SecureDepositACHTransfer | SecureCardBalanceRepaymentACHTransfer | IntegratorInitiatedFundsWithdrawalACHTransfer | IntegratorInitiatedFundsDepositACHTransfer | FeeTransferEvent | InterFinancialAccountTransfer

"""
Details of an activity, such as a transfer or payment card transaction, for a Financial Account.
"""
type FinancialAccountActivity {
  """
  Whether the activity decreases or increases available cash or credit for
  the Financial Account.
  """
  sign: FinancialAccountActivitySign

  """
  If true, there are no more expected changes or updates to this activity.
  """
  isComplete: Boolean

  """The date and time, in ISO 8601 format, this activity was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this activity was updated."""
  updatedAt: String

  """
  The amount pending for this activity. For PaymentCard transactions, this
  represents the remaining amount authorized.
  """
  pendingAmount: Amount

  """
  The amount posted for this activity. For PaymentCard transactions, this
  represents the total amount cleared.
  """
  postedAmount: Amount

  """The source of this activity."""
  source: FinancialAccountActivitySource
}

"""Financial Account Activity Types to return"""
enum FinancialAccountActivityType {
  """Is the financial account activity a payment card type"""
  PAYMENT_CARD

  """Is the financial account activity an externally initiated ACH"""
  EXTERNALLY_INITIATED_ACH

  """Is the financial account activity an integrator initiated ACH"""
  INTEGRATOR_INITIATED_ACH

  """Is the financial account activity an account holder fee type"""
  ACCOUNT_HOLDER_FEE

  """Is the financial account activity an internal transfer type"""
  INTERNAL_TRANSFER
}

"""The connection type for `FinancialAccountActivity`."""
type FinancialAccountActivityConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinancialAccountActivityEdge!]
}

"""The edge type for a `FinancialAccountActivity`."""
type FinancialAccountActivityEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Financial Account Activity."""
  node: FinancialAccountActivity
}

"""Inputs for filtering Financial Account Activities."""
input FinancialAccountActivitiesFilterInput {
  postedAmount: MoneyFilterInput
  pendingAmount: MoneyFilterInput
  createdAt: TimestampFilterInput
  updatedAt: TimestampFilterInput
  isComplete: BooleanFilterInput
  isSignNegative: BooleanFilterInput
  activityType: FinancialAccountActivityTypeFilterInput
}

"""Additional details regarding a `FAILED` reward points transfer."""
enum RewardPointsTransferFailureReasonCode {
  """The account the money was coming from did not have enough funds."""
  INSUFFICIENT_FUNDS

  """The receiving account has been closed."""
  ACCOUNT_CLOSED

  """No matching account was found for the receiving account."""
  ACCOUNT_NOT_FOUND

  """
  The amount of the transfer does not match the currency of the receiving account.
  """
  ACCOUNT_CURRENCY_MISMATCH

  """The receiving account does not have the reward point feature enabled."""
  REWARD_POINT_FEATURE_NOT_ENABLED
}

"""Status of the reward points transfer."""
enum RewardPointsTransferStatus {
  """A transfer request has been initiated."""
  PENDING

  """The transfer has successfully completed."""
  COMPLETED

  """
  The transfer failed. Additional details are available in `RewardPointsTransferFailureReasonCode`.
  """
  FAILED
}

"""Details about the status of the reward points transfer."""
union RewardPointsTransferStatusDetails = RewardPointsTransferSuccessStatus | RewardPointsTransferFailureStatus

"""
The status of the reward points transfer that has not failed.

This could be statuses which are still pending work or that have successfully completed.
"""
type RewardPointsTransferSuccessStatus {
  """The status of the reward points transfer."""
  status: RewardPointsTransferStatus
}

"""Information about reward points transfers which have failed."""
type RewardPointsTransferFailureStatus {
  """The status of the failed transfer. This will always be `FAILED`."""
  status: RewardPointsTransferStatus

  """Additional details about why a transfer failed."""
  statusReasonCode: RewardPointsTransferFailureReasonCode
}

"""Source of transfer request for reward points transfer"""
enum RewardPointsTransferSource {
  """A transfer request has been initiated using api"""
  API @deprecated(reason: "`API` is deprecated in favor of `MANUAL_ADJUSTMENT`")

  """The transfer was initiated for a card transaction"""
  CARD_TRANSACTION

  """The transfer was manually created using API."""
  MANUAL_ADJUSTMENT
}

"""Reward points activity that was requested during transfer"""
enum RewardPointsActivityType {
  """Adds reward point(s) to a financial account that has this enabled."""
  AWARD

  """Redeems reward point(s) to a financial account that has this enabled."""
  REDEEM

  """Refunds reward point(s) to a financial account that has this enabled."""
  REFUND

  """Deducts reward point(s) to a financial account that has this enabled."""
  DEDUCT
}

"""A transfer for the purposes of reward points"""
type RewardPointsTransfer implements Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """The amount of the transfer."""
  rewardPointsAmount: Amount

  """The date and time, in ISO 8601 format, the transfer was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the transfer was last updated."""
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The status of the reward poimnts transfer."""
  status: RewardPointsTransferStatusDetails

  """Reward activity like AWARD, REDEEM, REFUND, DEDUCT"""
  activity: RewardPointsActivityType

  """Source for reward points transfer like CARD_TRANSACTION, API"""
  source: RewardPointsTransferSource

  """
  Description for the transfer
  ** Note: ** The maximum size is 1024 characters
  """
  memo: String

  """
  An optional tracker for external transaction identifier. Max character length is 255.
  """
  externalTransactionIdentifier: String

  """Reward points monetary value"""
  rewardPointsValue: Amount

  """
  Optional; used if the reward point transfer was applied using a redemption configuration.
  """
  redemptionConfiguration: RewardRedemptionConfiguration

  """
  Optional; used if the reward point transfer was applied using an earn rule.
  """
  rewardEarnRule: RewardEarnRule
}

"""The return types for finding transfer rules"""
union RewardPointsTransferConnectionPayload = RewardPointsTransferConnection | UserError | AccessDeniedError

"""The return types for finding transfer rules"""
union RewardPointsTransferPayload = RewardPointsTransfer | UserError | AccessDeniedError

"""The connection type for `RewardPointsTransfer`."""
type RewardPointsTransferConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RewardPointsTransferEdge!]
}

"""The edge type for a `RewardPointsTransfer`."""
type RewardPointsTransferEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String

  """The `RewardPointsTransfer`."""
  node: RewardPointsTransfer
}

"""
Input type for creating a `RewardMerchantCategoryEarnRule` that holds configuration for how transactions should earn rewards.
"""
input CreateRewardMerchantCategoryEarnRuleInput {
  """Name of Earning Rule. Should be between 1 and 255 characters."""
  name: String!

  """
  Earning Rate. This rate describes the amount of points earned relative to the amount of money spent. See `RewardEarnRateInput`.
  """
  rewardPointEarning: RewardEarnRateInput!

  """
  Collection of `MerchantCategory` that a transaction's MCC must exist within in order for this rule to earn reward points. This field must have at least one `MerchantCategory`
  """
  allowedList: [MerchantCategory!]!
}

"""
Input type for creating a `RewardDefaultEarnRule` that holds configuration for how transactions should earn rewards.
"""
input CreateRewardDefaultEarnRuleInput {
  """Name of Earning Rule. Should be between 1 and 255 characters."""
  name: String!

  """
  Earning Rate. This rate describes the amount of points earn related to the amount of money spent. See `RewardEarnRateInput`.
  """
  rewardPointEarning: RewardEarnRateInput!
}

"""
Input for entering `RewardEarnRate`. The number of points earned per `USD` on a transaction.
This rate should be between 0.0 and 100.0. Rounding on fractional points will be rounded down.
For example:

| rate                  |  transaction amount |  points earned
| --------------------- | ------------------- | --------------
| 1.0 point per dollar  |	$1                  |	1 point
| 1.5 points per dollar | $10                 | 15 points
"""
input RewardEarnRateInput {
  """
  The number of points earned per `USD` on a transaction.
  This rate should be between 0.0 and 100.0 with up to 3 digits of precision after the decimal point (i.e. 1.000).
  Rounding on fractional points will be rounded down.
  For example:
  
  | rate                  |  transaction amount |  points earned
  | --------------------- | ------------------- | --------------
  | 1.0 point per dollar  |	$1                  |	1 point
  | 1.5 points per dollar | $10                 | 15 points
  """
  rate: String!
}

"""
The number of points earned per `USD` on a transaction.
This rate should be between 0.0 and 100.0 with up to 3 digits of precision after the decimal point (i.e. 1.000).
Rounding on fractional points will be rounded down.
For example:

| rate                  |  transaction amount |  points earned
| --------------------- | ------------------- | --------------
| 1.0 point per dollar  |	$1                  |	1 point
| 1.5 points per dollar | $10                 | 15 points
"""
type RewardEarnRate {
  """
  The number of points earned per `USD` on a transaction.
  This rate should be between 0.0 and 100.0 with up to 3 digits of precision after the decimal point (i.e. 1.000).
  Rounding on fractional points will be rounded down.
  For example:
  
  | rate                  |  transaction amount |  points earned
  | --------------------- | ------------------- | --------------
  | 1.0 point per dollar  |	$1                  |	1 point
  | 1.5 points per dollar | $10                 | 15 points
  """
  rate: String
}

"""Input to attach `RewardEarnRule` to `CardProduct`."""
input AttachRewardEarnRuleToProductInput {
  """`RewardEarnRule` to attach."""
  rewardRule: RewardRuleAttachmentInput!

  """`CardProduct` id to attach to."""
  cardProductId: ID!

  """
  The date and time in ISO 8601 format, representing when the attachment should begin taking effect. This should be a date in the future.  Optional; if left blank this field will default to the timestamp when the mutation was called.
  """
  effectiveFrom: String

  """
  The date and time in ISO 8601 format, representing when the attachment should stop taking effect. This should be a date in the future. Leaving this field blank will result in the attachment remaining in effect indefinitely.
  """
  effectiveThrough: String
}

"""Input for attaching reward rules to an object."""
input RewardRuleAttachmentInput {
  """Global identifier of the `RewardEarnRule` to attach."""
  id: ID!
}

"""
Input for updating a `RewardRuleAttachment`. Note: only the effective through date is modifiable.
"""
input UpdateRewardRuleAttachmentInput {
  """Global ID used to reference the `RewardRuleAttachment`."""
  attachmentId: ID!

  """
  The date and time in ISO 8601 format, representing when the attachment should stop taking effect. This should be a date in the future. Leaving this field blank will result in the attachment remaining in effect indefinitely.
  """
  effectiveThrough: String!
}

"""
Types which can be returned for Create `RewardMerchantCategoryEarnRule`.
"""
union CreateRewardMerchantCategoryEarnRulePayload = RewardMerchantCategoryEarnRule | UserError | AccessDeniedError

"""Types which can be returned for Create `RewardDefaultEarnRule`."""
union CreateRewardDefaultEarnRulePayload = RewardDefaultEarnRule | UserError | AccessDeniedError

"""Types which can be returned for Attach Mcc reward earn rule."""
union AttachRewardEarnRuleToProductPayload = RewardRuleProductAttachment | UserError | AccessDeniedError

"""Types which can be returned for `UpdateRewardRuleAttachment`"""
union UpdateRewardRuleAttachmentPayload = RewardRuleProductAttachment | UserError | AccessDeniedError

"""Method of Earning for Rewards Rule."""
enum EarnRuleType {
  """Earning points on a per transaction basis."""
  PER_TRANSACTION_SPEND_AMOUNT
}

"""`RewardEarnRule` attachment object."""
interface RewardRuleAttachment {
  """Global ID used to reference the `RewardRuleAttachment`."""
  id: ID!

  """`RewardEarnRule` that is attached."""
  rewardEarnRule: RewardEarnRule

  """
  The date and time in ISO 8601 format, representing when the attachment should start taking effect.
  """
  effectiveFrom: String

  """
  The date and time in ISO 8601 format, representing when the attachment should stop taking effect.
  """
  effectiveThrough: String
}

"""`RewardEarnRule` attachment object attaching to a `CardProduct`"""
type RewardRuleProductAttachment implements RewardRuleAttachment {
  """Global ID used to reference the `RewardRuleAttachment`."""
  id: ID!

  """`RewardEarnRule` that is attached."""
  rewardEarnRule: RewardEarnRule

  """`CardProduct` that the `RewardEarnRule` is attached to."""
  cardProduct: CardProduct

  """
  The date and time in ISO 8601 format, representing when the attachment should start taking effect.
  """
  effectiveFrom: String

  """
  The date and time in ISO 8601 format, representing when the attachment should stop taking effect.
  """
  effectiveThrough: String
}

"""
Rule that holds configuration for how transactions should earn reward points.
"""
interface RewardEarnRule implements Node {
  """Global ID used to reference the reward earn rule."""
  id: ID!

  """Name of `RewardEarnRule`"""
  name: String

  """Objects that a rule is attached to."""
  attachments(
    """The number of object attachments to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardRuleAttachmentConnection

  """The date and time, in ISO 8601 format, when the earn rule was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, when the earn rule was updated."""
  updatedAt: String
}

"""
`RewardEarnRule` that will hold default reward configuration for transfers that have not accrued points from other `RewardEarnRules`s.
"""
type RewardDefaultEarnRule implements Node & RewardEarnRule {
  """Global ID used to reference the reward earn rule."""
  id: ID!

  """The `EarnRuleType`. For example, `PER_TRANSACTION_SPEND_AMOUNT`."""
  type: EarnRuleType

  """Name of this `RewardDefaultEarnRule`."""
  name: String

  """
  Earning Rate. This rate describes the amount of points earn related to the amount of money spent. (i.e., a rate of 1.5 means earning 15 points on a $10 transaction)
  """
  rewardPointEarning: RewardEarnRate

  """Objects that a rule is attached to."""
  attachments(
    """The number of object attachments to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardRuleAttachmentConnection

  """The date and time, in ISO 8601 format, when the earn rule was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, when the earn rule was updated."""
  updatedAt: String
}

"""
`RewardEarnRule` that will earn rewards on transfers for specific `MerchantCategory`s.
"""
type RewardMerchantCategoryEarnRule implements Node & RewardEarnRule {
  """Global ID used to reference the reward earn rule."""
  id: ID!

  """The `EarnRuleType`. For example, `PER_TRANSACTION_SPEND_AMOUNT`."""
  type: EarnRuleType

  """Name of `RewardMerchantCategoryEarnRule`"""
  name: String

  """
  Earning Rate. This rate describes the amount of points earn related to the amount of money spent. (i.e. rate of 1.5 means earning 15 points on a $10 transaction)
  """
  rewardPointEarning: RewardEarnRate

  """Objects that a rule is attached to."""
  attachments(
    """The number of object attachments to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardRuleAttachmentConnection

  """
  Collection of `MerchantCategory` that a transaction's MCC must exist within in order for this rule to earn reward points. This field must have at least one `MerchantCategory`.
  """
  allowedList: [MerchantCategory!]

  """
  Collection of `MerchantCategory` codes that a transaction's MCC must exist within in order for this rule to earn reward points. This field must have at least one `MerchantCategory` code.
  """
  allowedListCodes: [String!]

  """The date and time, in ISO 8601 format, when the earn rule was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, when the earn rule was updated."""
  updatedAt: String
}

"""The connection type for `RewardRuleAttachment`."""
type RewardRuleAttachmentConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RewardRuleAttachmentEdge!]
}

"""The edge type for a `RewardRuleAttachment`."""
type RewardRuleAttachmentEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String

  """The `RewardRuleAttachment`."""
  node: RewardRuleAttachment
}

"""The connection type for `RewardEarnRule`."""
type RewardEarnRuleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RewardEarnRuleEdge!]
}

"""The edge type for a `RewardEarnRule`."""
type RewardEarnRuleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String

  """The `RewardEarnRule`."""
  node: RewardEarnRule
}

"""Create `RewardRedemptionConfiguration`"""
input CreateRewardRedemptionConfigurationInput {
  """
  Name of Redemption Configuration
  Must be between 1 and 255 characters.
  """
  name: String!

  """
  Redemption Rate. This rate describes the value of money that can be redeemed for earned points. See `RewardRedemptionRateInput`.
  """
  rewardPointRedemption: RewardRedemptionRateInput!
}

"""Attach `RewardRedemptionConfiguration` to `CardProduct`."""
input AttachRewardRedemptionConfigurationToProductInput {
  """`RewardRedemptionConfiguration` to attach to."""
  redemptionConfiguration: RewardRedemptionConfigurationAttachmentInput!

  """`CardProduct` id to attach to."""
  cardProductId: ID!

  """
  The date and time in ISO 8601 format, when the attachment should begin taking effect. This should be a date in the future. Optional; leaving this field blank will default it to the timestamp when the mutation was called.
  """
  effectiveFrom: String

  """
  The date and time in ISO 8601 format, when the attachment should stop taking effect. This should be a date in the future. Optional; leaving this field blank will result in the attachment remaining in effect indefinitely.
  """
  effectiveThrough: String
}

"""Input for attaching `RewardRedemptionConfiguration` to an object."""
input RewardRedemptionConfigurationAttachmentInput {
  """Global identifier of the `RewardRedemptionConfiguration` to attach."""
  id: ID!
}

"""
Input for updating a `RewardRedemptionConfigurationAttachment`. Note: only the effective through date is modifiable.
"""
input UpdateRewardRedemptionConfigurationAttachmentInput {
  """
  Global ID used to reference the `RewardRedemptionConfigurationAttachment`.
  """
  attachmentId: ID!

  """
  The date and time in ISO 8601 format, representing when the attachment should stop taking effect. This should be a date in the future. Leaving this field blank will result in the attachment remaining in effect indefinitely.
  """
  effectiveThrough: String
}

"""
Input for entering `RewardRedemptionRate`. The amount of money that will be redeemed per point earned.
This rate should be between 0.0 and 100.0 with up to 3 digits of precision after the decimal point (i.e. 1.000).
Redemption value will be rounded down to according to the currency precision. For example:
    | rate                  |  points redeemed  |  redemption value
    | --------------------- | --------------    | -------------------
    | 1.0 USD per point     |	10 points         |	$10.00
    | 1.5 USD per point     | 10 points         | $15.00
    | 1.001 USD per point   | 10 points         | $10.01
"""
input RewardRedemptionRateInput {
  """
  Input for entering `RewardRedemptionRate`. The amount of money that will be redeemed per point earned.
  This rate should be between 0.0 and 100.0 with up to 3 digits of precision after the decimal point (i.e. 1.000).
  Redemption value will be rounded down to according to the currency precision. For example:
  
    | rate                  |  points redeemed  |  redemption value
    | --------------------- | --------------    | -------------------
    | 1.0 USD per point     |	10 points         |	$10.00
    | 1.5 USD per point     | 10 points         | $15.00
    | 1.001 USD per point   | 10 points         | $10.01
  """
  rate: String!
}

"""
Input for entering `RewardRedemptionRate`. The amount of money that will be redeemed per point earned.
This rate should be between 0.0 and 100.0 with up to 3 digits of precision after the decimal point (i.e. 1.000).
Redemption value will be rounded down to according to the currency precision. For example:
    | rate                  |  points redeemed  |  redemption value
    | --------------------- | --------------    | -------------------
    | 1.0 USD per point     |	10 points         |	$10.00
    | 1.5 USD per point     | 10 points         | $15.00
    | 1.001 USD per point   | 10 points         | $10.01
"""
type RewardRedemptionRate {
  """
  Input for entering `RewardRedemptionRate`. The amount of money that will be redeemed per point earned.
  This rate should be between 0.0 and 100.0 with up to 3 digits of precision after the decimal point (i.e. 1.000).
  Redemption value will be rounded down to according to the currency precision. For example:
    | rate                  |  points redeemed  |  redemption value
    | --------------------- | --------------    | -------------------
    | 1.0 USD per point     |	10 points         |	$10.00
    | 1.5 USD per point     | 10 points         | $15.00
    | 1.001 USD per point   | 10 points         | $10.01
  """
  rate: String
}

"""
Types which can be returned when creating a `RewardRedemptionConfiguration`.
"""
union CreateRewardRedemptionConfigurationPayload = RewardRedemptionConfiguration | UserError | AccessDeniedError

"""
Types which can be returned for attaching `RewardRedemptionConfiguration` to `CardProduct`.
"""
union AttachRewardRedemptionConfigurationToProductPayload = RewardRedemptionConfigurationProductAttachment | UserError | AccessDeniedError

"""
Types which can be returned for updating a `RewardRedemptionConfigurationAttachment`'s effective through date'
"""
union UpdateRewardRedemptionConfigurationAttachmentPayload = RewardRedemptionConfigurationProductAttachment | UserError | AccessDeniedError

"""Method of Redemption for Rewards Points."""
enum RedemptionConfigurationType {
  """Redeem points for statement credit."""
  STATEMENT_CREDIT
}

"""
Attachment object that a `RewardRedemptionConfiguration` is attached to.
"""
interface RewardRedemptionConfigurationAttachment {
  """
  Global ID used to reference the `RewardRedemptionConfigurationAttachment`.
  """
  id: ID!

  """`RewardRedemptionConfiguration` that is attached."""
  redemptionConfiguration: RewardRedemptionConfiguration

  """
  The date and time in ISO 8601 format, representing when the attachment should start taking effect.
  """
  effectiveFrom: String

  """
  The date and time in ISO 8601 format, representing when the attachment should stop taking effect.
  """
  effectiveThrough: String
}

"""
`CardProduct` attachment that a `RewardRedemptionConfiguration` is attached to.
"""
type RewardRedemptionConfigurationProductAttachment implements RewardRedemptionConfigurationAttachment {
  """
  Global ID used to reference the `RewardRedemptionConfigurationAttachment`.
  """
  id: ID!

  """`RewardRedemptionConfiguration` that is attached."""
  redemptionConfiguration: RewardRedemptionConfiguration

  """`CardProduct` that the `RewardRedemptionConfiguration` is attached to."""
  cardProduct: CardProduct

  """
  The date and time in ISO 8601 format, representing when the attachment should start taking effect.
  """
  effectiveFrom: String

  """
  The date and time in ISO 8601 format, representing when the attachment should stop taking effect.
  """
  effectiveThrough: String
}

"""
`RewardRedemptionConfiguration` holds configuration for how rewards points could be redeemed.
"""
type RewardRedemptionConfiguration implements Node {
  """Global ID used to reference the `RewardRedemptionConfiguration`."""
  id: ID!

  """The `RedemptionConfigurationType`. For example, `STATEMENT_CREDIT`."""
  type: RedemptionConfigurationType

  """Name of `RewardRedemptionConfiguration`"""
  name: String

  """
  Redemption Rate. This rate describes the value of money that can be redeemed for earned points. See `RewardRedemptionRate`.
  """
  rewardPointRedemption: RewardRedemptionRate

  """Objects that a `RewardRedemptionConfiguration` is attached to."""
  attachments(
    """The number of object attachments to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): RewardRedemptionConfigurationAttachmentConnection

  """
  The date and time, in ISO 8601 format, when the configuration was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, when the configuration was updated.
  """
  updatedAt: String
}

"""The connection type for `RewardRedemptionConfiguration`."""
type RewardRedemptionConfigurationConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RewardRedemptionConfigurationEdge!]
}

"""The edge type for a `RewardRedemptionConfiguration`."""
type RewardRedemptionConfigurationEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String

  """The `RewardRedemptionConfiguration`."""
  node: RewardRedemptionConfiguration
}

"""The connection type for `RewardRedemptionConfigurationAttachment`."""
type RewardRedemptionConfigurationAttachmentConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RewardRedemptionConfigurationAttachmentEdge!]
}

"""The edge type for a `RewardRedemptionConfigurationAttachment`."""
type RewardRedemptionConfigurationAttachmentEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String

  """The `RewardRedemptionConfigurationAttachment`."""
  node: RewardRedemptionConfigurationAttachment
}

"""Input type for redeeming reward points."""
input RedeemRewardsForStatementCreditInput {
  """
  Identifier for the `FinancialAccount` to use for this reward redemption.
  """
  financialAccountId: ID!

  """
  Redemption Criteria that will dictate how reward points will be redeemed.
  """
  redemption: RedemptionCriteriaInput!

  """Note to be attached to the redemption. Max character length is 1024."""
  memo: String

  """
  An optional tracker for external transaction identifier. Max character length is 255.
  """
  externalTransactionIdentifier: String
}

"""Redemption information required to redeem points."""
input RedemptionCriteriaInput {
  """
  Identifier of the `RewardRedemptionConfiguration` to use for this redemption. Note this `RewardRedemptionConfiguration` must have an attachment that is available for the target `FinancialAccount`"
  """
  redemptionConfigurationId: ID!

  """
  Number of points to redeem. Value should be greater than 0 and less than the reward point balance of the relevant account.
  """
  pointsToRedeem: UnsignedInt
}

"""Create a Manual Reward Point deduction."""
input CreateRewardPointsAdjustmentInput {
  """Financial Account id that will be the recipient of the adjustment."""
  financialAccountId: ID!

  """Reward activity operation : AWARD, DEDUCT"""
  activity: RewardPointsActivityTypeInput!

  """
  Amount of points that will be adjusted. Value should be between 0 and the reward point balance on the account.
  """
  pointsToAdjust: UnsignedInt!

  """memo description for the deduction. Max character length is 1024."""
  memo: String
}

"""Reward points activity that was requested during transfer"""
enum RewardPointsActivityTypeInput {
  """Add reward points to an enabled `FinancialAccount`."""
  AWARD

  """Deduct reward points from an enabled `FinancialAccount`."""
  DEDUCT
}

"""Input fields for shifting the current statement period"""
input SimulateShiftCurrentFinancialAccountStatementPeriodInput {
  """Financial Account Id"""
  financialAccountId: ID!

  """
  The new statement period boundary, in ISO 8601 format.
  Defaults to 60 seconds from now.
  
  **Note:** The new period boundary must be at least 60 second from now.
  """
  periodBoundary: String
}

"""Input fields for rolling over the current statement period"""
input SimulateRolloverCurrentFinancialAccountStatementPeriodInput {
  """Financial Account Id"""
  financialAccountId: ID!
}

"""
Types which can be returned for simulating statement period shift and rollover
"""
union SimulateFinancialAccountStatementPayload = FinancialAccount | UserError | AccessDeniedError

"""Interface for a Statement for a Financial Account."""
interface FinancialAccountStatement {
  """The unique id of the `FinancialAccountStatement`."""
  id: ID!

  """The date, in ISO 8601 format, the statement period starts."""
  periodStart: String

  """The date, in ISO 8601 format, the statement period ends."""
  periodEnd: String

  """The timestamp, in ISO 8601 format, the statement was opened."""
  openedAt: String

  """The timestamp, in ISO 8601 format, the statement was closed."""
  closedAt: String

  """The credit balance at the start of the period for the primary ledger."""
  startingPrimaryCreditBalance: Amount

  """The debit balance at the start of the period for the primary ledger."""
  startingPrimaryDebitBalance: Amount

  """The credit balance at the end of the period for the primary ledger."""
  endingPrimaryCreditBalance: Amount

  """The debit balance at the end of the period for the primary ledger."""
  endingPrimaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  primaryLedger: Ledger

  """
  The credit balance at the start of the period for the secondary ledger.
  """
  startingSecondaryCreditBalance: Amount

  """The debit balance at the start of the period for the secondary ledger."""
  startingSecondaryDebitBalance: Amount

  """The credit balance at the end of the period for the secondary ledger."""
  endingSecondaryCreditBalance: Amount

  """The debit balance at the end of the period for the secondary ledger."""
  endingSecondaryDebitBalance: Amount

  """The ledger associated with the secondary balance"""
  secondaryLedger: Ledger

  """The credit balance at the start of the period for the tertiary ledger."""
  startingTertiaryCreditBalance: Amount

  """The debit balance at the start of the period for the tertiary ledger."""
  startingTertiaryDebitBalance: Amount

  """The credit balance at the end of the period for the tertiary ledger."""
  endingTertiaryCreditBalance: Amount

  """The debit balance at the end of the period for the tertiary ledger."""
  endingTertiaryDebitBalance: Amount

  """The ledger associated with the tertiary balance"""
  tertiaryLedger: Ledger

  """
  statement entries.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statementEntries(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountStatementEntriesFilterInput
  ): FinancialAccountStatementEntryConnection

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""The connection type for `FinancialAccountStatement`."""
type FinancialAccountStatementConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinancialAccountStatementEdge!]
}

"""The edge type for a `FinancialAccountStatementy`."""
type FinancialAccountStatementEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Financial Account Statement."""
  node: FinancialAccountStatement
}

"""Inputs for filtering Financial Account Statement."""
input FinancialAccountStatementFilterInput {
  periodStart: TimestampFilterInput
  periodEnd: TimestampFilterInput
}

"""The connection type for `FinancialAccountStatementEntry`."""
type FinancialAccountStatementEntryConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FinancialAccountStatementEntryEdge!]
}

"""The edge type for a `FinancialAccountStatementEntry`."""
type FinancialAccountStatementEntryEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Financial Account Statement Entry."""
  node: FinancialAccountStatementEntry
}

"""Inputs for filtering Financial Account Statement Entry."""
input FinancialAccountStatementEntriesFilterInput {
  postDate: TimestampFilterInput
  isCredit: BooleanFilterInput
}

"""Interface for a FinancialAccountStatementSnapshot."""
interface FinancialAccountStatementSnapshot {
  """
  The date and time, in ISO 8601 format, the snapshot was calculated.
  Note that this will be the date/time of the last impactful event.
  """
  asOf: String

  """The current open statement"""
  currentOpenStatement: FinancialAccountStatement

  """The most recently closed statement"""
  latestClosedStatement: FinancialAccountStatement

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""FinancialAccountStatementEntry"""
interface FinancialAccountStatementEntry {
  """Credit amount of the transaction."""
  creditAmount: Amount

  """Debit amount of the transaction."""
  debitAmount: Amount

  """Credit balance of the account."""
  primaryCreditBalance: Amount

  """Debit balance of the account."""
  primaryDebitBalance: Amount

  """
  The date, in ISO 8601 format, the transaction was posted. (Different word for 'posted'?)
  """
  postDate: String

  """Ledger Entry for the entry"""
  ledgerEntry: LedgerEntry

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement for secured deposit commercial credit card accounts"""
type SecuredDepositCommercialCreditCardFinancialAccountStatement implements Node & FinancialAccountStatement {
  """The unique id of the `FinancialAccountStatement`."""
  id: ID!

  """The date, in ISO 8601 format, the statement period starts."""
  periodStart: String

  """The date, in ISO 8601 format, the statement period ends."""
  periodEnd: String

  """The timestamp, in ISO 8601 format, the statement was opened."""
  openedAt: String

  """The timestamp, in ISO 8601 format, the statement was closed."""
  closedAt: String

  """The credit balance at the start of the period for the primary ledger."""
  startingPrimaryCreditBalance: Amount

  """The debit balance at the start of the period for the primary ledger."""
  startingPrimaryDebitBalance: Amount

  """The credit balance at the end of the period for the primary ledger."""
  endingPrimaryCreditBalance: Amount

  """The debit balance at the end of the period for the primary ledger."""
  endingPrimaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  primaryLedger: Ledger

  """
  The credit balance at the start of the period for the secondary ledger.
  """
  startingSecondaryCreditBalance: Amount

  """The debit balance at the start of the period for the secondary ledger."""
  startingSecondaryDebitBalance: Amount

  """The credit balance at the end of the period for the secondary ledger."""
  endingSecondaryCreditBalance: Amount

  """The debit balance at the end of the period for the secondary ledger."""
  endingSecondaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  secondaryLedger: Ledger

  """The credit balance at the start of the period for the tertiary ledger."""
  startingTertiaryCreditBalance: Amount

  """The debit balance at the start of the period for the tertiary ledger."""
  startingTertiaryDebitBalance: Amount

  """The credit balance at the end of the period for the tertiary ledger."""
  endingTertiaryCreditBalance: Amount

  """The debit balance at the end of the period for the tertiary ledger."""
  endingTertiaryDebitBalance: Amount

  """The ledger associated with the tertiary balance"""
  tertiaryLedger: Ledger

  """The total from purchases for the statement period."""
  periodPurchasesAmount: Amount

  """The total from fees for the statement period."""
  periodFeesAmount: Amount

  """
  The total fee credit (for example due to waiving fees) for the statement period.
  """
  periodFeeCredit: Amount

  """The total refunds and payments for the statement period."""
  periodRefundsAndPaymentsAmount: Amount

  """The credit limit at the end of the period."""
  endingCreditLimit: Amount

  """The date, in ISO 8601 format, payment is due on end of day."""
  paymentDueOn: String

  """
  statement entries.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statementEntries(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountStatementEntriesFilterInput
  ): FinancialAccountStatementEntryConnection

  """History of repayments per statement"""
  repaymentHistory: [CreditRepaymentStatementApplication!]

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement entry for secured commercial credit card"""
type SecuredDepositCommercialCreditCardFinancialAccountStatementEntry implements FinancialAccountStatementEntry {
  """Credit amount of the transaction."""
  creditAmount: Amount

  """Debit amount of the transaction."""
  debitAmount: Amount

  """Credit balance of the account."""
  primaryCreditBalance: Amount

  """Debit balance of the account."""
  primaryDebitBalance: Amount

  """
  The date, in ISO 8601 format, the transaction was posted. (Different word for 'posted'?)
  """
  postDate: String

  """Ledger Entry for the entry"""
  ledgerEntry: LedgerEntry

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Current account snapshot for a secured deposit commercial credit card"""
type SecuredDepositCommercialCreditCardFinancialAccountStatementSnapshot implements FinancialAccountStatementSnapshot {
  """
  The date and time, in ISO 8601 format, the snapshot was calculated.
  Note that this will be the date/time of the last impactful event.
  """
  asOf: String

  """The current open statement"""
  currentOpenStatement: FinancialAccountStatement

  """The most recently closed statement"""
  latestClosedStatement: FinancialAccountStatement

  """The current amount due."""
  currentAmountDue: Amount

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement for credit pay in full card accounts"""
type CreditPayInFullCardFinancialAccountStatement implements Node & FinancialAccountStatement {
  """The unique id of the `FinancialAccountStatement`."""
  id: ID!

  """The date, in ISO 8601 format, the statement period starts."""
  periodStart: String

  """The date, in ISO 8601 format, the statement period ends."""
  periodEnd: String

  """The timestamp, in ISO 8601 format, the statement was opened."""
  openedAt: String

  """The timestamp, in ISO 8601 format, the statement was closed."""
  closedAt: String

  """The credit balance at the start of the period for the primary ledger."""
  startingPrimaryCreditBalance: Amount

  """The debit balance at the start of the period for the primary ledger."""
  startingPrimaryDebitBalance: Amount

  """The credit balance at the end of the period for the primary ledger."""
  endingPrimaryCreditBalance: Amount

  """The debit balance at the end of the period for the primary ledger."""
  endingPrimaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  primaryLedger: Ledger

  """
  The credit balance at the start of the period for the secondary ledger.
  """
  startingSecondaryCreditBalance: Amount

  """The debit balance at the start of the period for the secondary ledger."""
  startingSecondaryDebitBalance: Amount

  """The credit balance at the end of the period for the secondary ledger."""
  endingSecondaryCreditBalance: Amount

  """The debit balance at the end of the period for the secondary ledger."""
  endingSecondaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  secondaryLedger: Ledger

  """The credit balance at the start of the period for the tertiary ledger."""
  startingTertiaryCreditBalance: Amount

  """The debit balance at the start of the period for the tertiary ledger."""
  startingTertiaryDebitBalance: Amount

  """The credit balance at the end of the period for the tertiary ledger."""
  endingTertiaryCreditBalance: Amount

  """The debit balance at the end of the period for the tertiary ledger."""
  endingTertiaryDebitBalance: Amount

  """The ledger associated with the tertiary balance"""
  tertiaryLedger: Ledger

  """The total from purchases for the statement period."""
  periodPurchasesAmount: Amount

  """The total from fees for the statement period."""
  periodFeesAmount: Amount

  """
  The total fee credit (for example due to waiving fees) for the statement period.
  """
  periodFeeCredit: Amount

  """The total refunds and payments for the statement period."""
  periodRefundsAndPaymentsAmount: Amount

  """The credit limit at the end of the period."""
  endingCreditLimit: Amount

  """The date, in ISO 8601 format, payment is due on end of day."""
  paymentDueOn: String

  """
  The past due balance on the Financial Account as of the close of the statement’s billing cycle.
  """
  pastDueAmount: Amount

  """
  statement entries.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statementEntries(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountStatementEntriesFilterInput
  ): FinancialAccountStatementEntryConnection

  """History of repayments per statement"""
  repaymentHistory: [CreditRepaymentStatementApplication!]

  """
  The interest and fees that an account has accumulated as it relates to a `FinancialAccountStatement`.
  """
  accumulatedAccountInterestAndFees: AccumulatedAccountInterestAndFees

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement entry for credit pay in full card"""
type CreditPayInFullCardFinancialAccountStatementEntry implements FinancialAccountStatementEntry {
  """Credit amount of the transaction."""
  creditAmount: Amount

  """Debit amount of the transaction."""
  debitAmount: Amount

  """Credit balance of the account."""
  primaryCreditBalance: Amount

  """Debit balance of the account."""
  primaryDebitBalance: Amount

  """
  The date, in ISO 8601 format, the transaction was posted. (Different word for 'posted'?)
  """
  postDate: String

  """Ledger Entry for the entry"""
  ledgerEntry: LedgerEntry

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Current account snapshot for a credit pay in full card"""
type CreditPayInFullCardFinancialAccountStatementSnapshot implements FinancialAccountStatementSnapshot {
  """
  The date and time, in ISO 8601 format, the snapshot was calculated.
  Note that this will be the date/time of the last impactful event.
  """
  asOf: String

  """The current open statement"""
  currentOpenStatement: FinancialAccountStatement

  """The most recently closed statement"""
  latestClosedStatement: FinancialAccountStatement

  """The current amount due."""
  currentAmountDue: Amount

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement for consumer charge card accounts"""
type ConsumerChargeCardFinancialAccountStatement implements Node & FinancialAccountStatement {
  """The unique id of the `FinancialAccountStatement`."""
  id: ID!

  """The date, in ISO 8601 format, the statement period starts."""
  periodStart: String

  """The date, in ISO 8601 format, the statement period ends."""
  periodEnd: String

  """The timestamp, in ISO 8601 format, the statement was opened."""
  openedAt: String

  """The timestamp, in ISO 8601 format, the statement was closed."""
  closedAt: String

  """The credit balance at the start of the period for the primary ledger."""
  startingPrimaryCreditBalance: Amount

  """The debit balance at the start of the period for the primary ledger."""
  startingPrimaryDebitBalance: Amount

  """The credit balance at the end of the period for the primary ledger."""
  endingPrimaryCreditBalance: Amount

  """The debit balance at the end of the period for the primary ledger."""
  endingPrimaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  primaryLedger: Ledger

  """
  The credit balance at the start of the period for the secondary ledger.
  """
  startingSecondaryCreditBalance: Amount

  """The debit balance at the start of the period for the secondary ledger."""
  startingSecondaryDebitBalance: Amount

  """The credit balance at the end of the period for the secondary ledger."""
  endingSecondaryCreditBalance: Amount

  """The debit balance at the end of the period for the secondary ledger."""
  endingSecondaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  secondaryLedger: Ledger

  """The credit balance at the start of the period for the tertiary ledger."""
  startingTertiaryCreditBalance: Amount

  """The debit balance at the start of the period for the tertiary ledger."""
  startingTertiaryDebitBalance: Amount

  """The credit balance at the end of the period for the tertiary ledger."""
  endingTertiaryCreditBalance: Amount

  """The debit balance at the end of the period for the tertiary ledger."""
  endingTertiaryDebitBalance: Amount

  """The ledger associated with the tertiary balance"""
  tertiaryLedger: Ledger

  """The total from purchases for the statement period."""
  periodPurchasesAmount: Amount

  """The total from fees for the statement period."""
  periodFeesAmount: Amount

  """
  The total fee credit (for example due to waiving fees) for the statement period.
  """
  periodFeeCredit: Amount

  """The total refunds and payments for the statement period."""
  periodRefundsAndPaymentsAmount: Amount

  """The credit limit at the end of the period."""
  endingCreditLimit: Amount

  """The date, in ISO 8601 format, payment is due on end of day."""
  paymentDueOn: String

  """
  The past due balance on the Financial Account as of the close of the statement’s billing cycle.
  """
  pastDueAmount: Amount

  """
  statement entries.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statementEntries(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountStatementEntriesFilterInput
  ): FinancialAccountStatementEntryConnection

  """History of repayments per statement"""
  repaymentHistory: [CreditRepaymentStatementApplication!]

  """
  The interest and fees that an account has accumulated as it relates to a `FinancialAccountStatement`.
  """
  accumulatedAccountInterestAndFees: AccumulatedAccountInterestAndFees

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement entry for consumer charge card"""
type ConsumerChargeCardFinancialAccountStatementEntry implements FinancialAccountStatementEntry {
  """Credit amount of the transaction."""
  creditAmount: Amount

  """Debit amount of the transaction."""
  debitAmount: Amount

  """Credit balance of the account."""
  primaryCreditBalance: Amount

  """Debit balance of the account."""
  primaryDebitBalance: Amount

  """
  The date, in ISO 8601 format, the transaction was posted. (Different word for 'posted'?)
  """
  postDate: String

  """Ledger Entry for the entry"""
  ledgerEntry: LedgerEntry

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Current account snapshot for a consumer charge card"""
type ConsumerChargeCardFinancialAccountStatementSnapshot implements FinancialAccountStatementSnapshot {
  """
  The date and time, in ISO 8601 format, the snapshot was calculated.
  Note that this will be the date/time of the last impactful event.
  """
  asOf: String

  """The current open statement"""
  currentOpenStatement: FinancialAccountStatement

  """The most recently closed statement"""
  latestClosedStatement: FinancialAccountStatement

  """The current amount due."""
  currentAmountDue: Amount

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement for consumer revolving card accounts"""
type ConsumerRevolvingCardFinancialAccountStatement implements Node & FinancialAccountStatement {
  """The unique id of the `FinancialAccountStatement`."""
  id: ID!

  """The date, in ISO 8601 format, the statement period starts."""
  periodStart: String

  """The date, in ISO 8601 format, the statement period ends."""
  periodEnd: String

  """The timestamp, in ISO 8601 format, the statement was opened."""
  openedAt: String

  """The timestamp, in ISO 8601 format, the statement was closed."""
  closedAt: String

  """The credit balance at the start of the period for the primary ledger."""
  startingPrimaryCreditBalance: Amount

  """The debit balance at the start of the period for the primary ledger."""
  startingPrimaryDebitBalance: Amount

  """The credit balance at the end of the period for the primary ledger."""
  endingPrimaryCreditBalance: Amount

  """The debit balance at the end of the period for the primary ledger."""
  endingPrimaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  primaryLedger: Ledger

  """
  The credit balance at the start of the period for the secondary ledger.
  """
  startingSecondaryCreditBalance: Amount

  """The debit balance at the start of the period for the secondary ledger."""
  startingSecondaryDebitBalance: Amount

  """The credit balance at the end of the period for the secondary ledger."""
  endingSecondaryCreditBalance: Amount

  """The debit balance at the end of the period for the secondary ledger."""
  endingSecondaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  secondaryLedger: Ledger

  """The credit balance at the start of the period for the tertiary ledger."""
  startingTertiaryCreditBalance: Amount

  """The debit balance at the start of the period for the tertiary ledger."""
  startingTertiaryDebitBalance: Amount

  """The credit balance at the end of the period for the tertiary ledger."""
  endingTertiaryCreditBalance: Amount

  """The debit balance at the end of the period for the tertiary ledger."""
  endingTertiaryDebitBalance: Amount

  """The ledger associated with the tertiary balance"""
  tertiaryLedger: Ledger

  """The total from purchases for the statement period."""
  periodPurchasesAmount: Amount

  """The total from fees for the statement period."""
  periodFeesAmount: Amount

  """
  The total fee credit (for example due to waiving fees) for the statement period.
  """
  periodFeeCredit: Amount

  """The total from interest for the statement period."""
  periodInterestCharges: Amount

  """
  The total interest credit (for example due to waiving interest) for the statement period.
  """
  periodInterestCredit: Amount

  """The total refunds and payments for the statement period."""
  periodRefundsAndPaymentsAmount: Amount

  """The credit limit at the end of the period."""
  endingCreditLimit: Amount

  """The date, in ISO 8601 format, payment is due on end of day."""
  paymentDueOn: String

  """
  The past due balance on the Financial Account as of the close of the statement’s billing cycle.
  """
  pastDueAmount: Amount

  """Period's purchase details by Credit Plan for the statement"""
  periodPurchaseCreditPlan: [FinancialAccountStatementPurchaseCreditPlan!]

  """`InstallmentAgreement` activity for this statement."""
  periodInstallmentActivity: [FinancialAccountStatementInstallmentCreditPlanActivity!]

  """Payoff warning for the statement when balance is greater than zero"""
  payOffWarning: FinancialAccountStatementPayOffWarning

  """Period's minimum payment due to the statement"""
  periodMinimumPaymentDue: Amount

  """
  statement entries.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statementEntries(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountStatementEntriesFilterInput
  ): FinancialAccountStatementEntryConnection

  """History of repayments per statement"""
  repaymentHistory: [CreditRepaymentStatementApplication!]

  """
  The interest and fees that an account has accumulated as it relates to a `FinancialAccountStatement`.
  """
  accumulatedAccountInterestAndFees: AccumulatedAccountInterestAndFees

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement entry for consumer revolving card"""
type ConsumerRevolvingCardFinancialAccountStatementEntry implements FinancialAccountStatementEntry {
  """Credit amount of the transaction."""
  creditAmount: Amount

  """Debit amount of the transaction."""
  debitAmount: Amount

  """Credit balance of the account."""
  primaryCreditBalance: Amount

  """Debit balance of the account."""
  primaryDebitBalance: Amount

  """
  The date, in ISO 8601 format, the transaction was posted. (Different word for 'posted'?)
  """
  postDate: String

  """Ledger Entry for the entry"""
  ledgerEntry: LedgerEntry

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Current account snapshot for a consumer revolving card"""
type ConsumerRevolvingCardFinancialAccountStatementSnapshot implements FinancialAccountStatementSnapshot {
  """
  The date and time, in ISO 8601 format, the snapshot was calculated.
  Note that this will be the date/time of the last impactful event.
  """
  asOf: String

  """The current open statement"""
  currentOpenStatement: FinancialAccountStatement

  """The most recently closed statement"""
  latestClosedStatement: FinancialAccountStatement

  """The current amount due."""
  currentAmountDue: Amount

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement for commercial charge card accounts"""
type CommercialChargeCardFinancialAccountStatement implements Node & FinancialAccountStatement {
  """The unique id of the `FinancialAccountStatement`."""
  id: ID!

  """The date, in ISO 8601 format, the statement period starts."""
  periodStart: String

  """The date, in ISO 8601 format, the statement period ends."""
  periodEnd: String

  """The timestamp, in ISO 8601 format, the statement was opened."""
  openedAt: String

  """The timestamp, in ISO 8601 format, the statement was closed."""
  closedAt: String

  """The credit balance at the start of the period for the primary ledger."""
  startingPrimaryCreditBalance: Amount

  """The debit balance at the start of the period for the primary ledger."""
  startingPrimaryDebitBalance: Amount

  """The credit balance at the end of the period for the primary ledger."""
  endingPrimaryCreditBalance: Amount

  """The debit balance at the end of the period for the primary ledger."""
  endingPrimaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  primaryLedger: Ledger

  """
  The credit balance at the start of the period for the secondary ledger.
  """
  startingSecondaryCreditBalance: Amount

  """The debit balance at the start of the period for the secondary ledger."""
  startingSecondaryDebitBalance: Amount

  """The credit balance at the end of the period for the secondary ledger."""
  endingSecondaryCreditBalance: Amount

  """The debit balance at the end of the period for the secondary ledger."""
  endingSecondaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  secondaryLedger: Ledger

  """The credit balance at the start of the period for the tertiary ledger."""
  startingTertiaryCreditBalance: Amount

  """The debit balance at the start of the period for the tertiary ledger."""
  startingTertiaryDebitBalance: Amount

  """The credit balance at the end of the period for the tertiary ledger."""
  endingTertiaryCreditBalance: Amount

  """The debit balance at the end of the period for the tertiary ledger."""
  endingTertiaryDebitBalance: Amount

  """The ledger associated with the tertiary balance"""
  tertiaryLedger: Ledger

  """The total from purchases for the statement period."""
  periodPurchasesAmount: Amount

  """The total from fees for the statement period."""
  periodFeesAmount: Amount

  """
  The total fee credit (for example due to waiving fees) for the statement period.
  """
  periodFeeCredit: Amount

  """The total refunds and payments for the statement period."""
  periodRefundsAndPaymentsAmount: Amount

  """The credit limit at the end of the period."""
  endingCreditLimit: Amount

  """The date, in ISO 8601 format, payment is due on end of day."""
  paymentDueOn: String

  """
  The past due balance on the Financial Account as of the close of the statement’s billing cycle.
  """
  pastDueAmount: Amount

  """
  statement entries.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statementEntries(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountStatementEntriesFilterInput
  ): FinancialAccountStatementEntryConnection

  """History of repayments per statement"""
  repaymentHistory: [CreditRepaymentStatementApplication!]

  """
  The interest and fees that an account has accumulated as it relates to a `FinancialAccountStatement`.
  """
  accumulatedAccountInterestAndFees: AccumulatedAccountInterestAndFees

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement entry for Commercial Charge"""
type CommercialChargeCardFinancialAccountStatementEntry implements FinancialAccountStatementEntry {
  """Credit amount of the transaction."""
  creditAmount: Amount

  """Debit amount of the transaction."""
  debitAmount: Amount

  """Credit balance of the account."""
  primaryCreditBalance: Amount

  """Debit balance of the account."""
  primaryDebitBalance: Amount

  """
  The date, in ISO 8601 format, the transaction was posted. (Different word for 'posted'?)
  """
  postDate: String

  """Ledger Entry for the entry"""
  ledgerEntry: LedgerEntry

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Current account snapshot for a commercial charge card"""
type CommercialChargeCardFinancialAccountStatementSnapshot implements FinancialAccountStatementSnapshot {
  """
  The date and time, in ISO 8601 format, the snapshot was calculated.
  Note that this will be the date/time of the last impactful event.
  """
  asOf: String

  """The current open statement"""
  currentOpenStatement: FinancialAccountStatement

  """The most recently closed statement"""
  latestClosedStatement: FinancialAccountStatement

  """The current amount due."""
  currentAmountDue: Amount

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Statement for commercial revolving card accounts"""
type CommercialRevolvingCardFinancialAccountStatement implements Node & FinancialAccountStatement {
  """The unique id of the `FinancialAccountStatement`."""
  id: ID!

  """The date, in ISO 8601 format, the statement period starts."""
  periodStart: String

  """The date, in ISO 8601 format, the statement period ends."""
  periodEnd: String

  """The timestamp, in ISO 8601 format, the statement was opened."""
  openedAt: String

  """The timestamp, in ISO 8601 format, the statement was closed."""
  closedAt: String

  """The credit balance at the start of the period for the primary ledger."""
  startingPrimaryCreditBalance: Amount

  """The debit balance at the start of the period for the primary ledger."""
  startingPrimaryDebitBalance: Amount

  """The credit balance at the end of the period for the primary ledger."""
  endingPrimaryCreditBalance: Amount

  """The debit balance at the end of the period for the primary ledger."""
  endingPrimaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  primaryLedger: Ledger

  """
  The credit balance at the start of the period for the secondary ledger.
  """
  startingSecondaryCreditBalance: Amount

  """The debit balance at the start of the period for the secondary ledger."""
  startingSecondaryDebitBalance: Amount

  """The credit balance at the end of the period for the secondary ledger."""
  endingSecondaryCreditBalance: Amount

  """The debit balance at the end of the period for the secondary ledger."""
  endingSecondaryDebitBalance: Amount

  """The ledger associated with the primary balance"""
  secondaryLedger: Ledger

  """The credit balance at the start of the period for the tertiary ledger."""
  startingTertiaryCreditBalance: Amount

  """The debit balance at the start of the period for the tertiary ledger."""
  startingTertiaryDebitBalance: Amount

  """The credit balance at the end of the period for the tertiary ledger."""
  endingTertiaryCreditBalance: Amount

  """The debit balance at the end of the period for the tertiary ledger."""
  endingTertiaryDebitBalance: Amount

  """The ledger associated with the tertiary balance"""
  tertiaryLedger: Ledger

  """The total from purchases for the statement period."""
  periodPurchasesAmount: Amount

  """The total from fees for the statement period."""
  periodFeesAmount: Amount

  """
  The total fee credit (for example due to waiving fees) for the statement period.
  """
  periodFeeCredit: Amount

  """The total from interest for the statement period."""
  periodInterestCharges: Amount

  """
  The total interest credit (for example due to waiving interest) for the statement period.
  """
  periodInterestCredit: Amount

  """The total refunds and payments for the statement period."""
  periodRefundsAndPaymentsAmount: Amount

  """The credit limit at the end of the period."""
  endingCreditLimit: Amount

  """The date, in ISO 8601 format, payment is due on end of day."""
  paymentDueOn: String

  """
  The past due balance on the Financial Account as of the close of the statement’s billing cycle.
  """
  pastDueAmount: Amount

  """Period's purchase details by Credit Plan for the statement"""
  periodPurchaseCreditPlan: [FinancialAccountStatementPurchaseCreditPlan!]

  """`InstallmentAgreement` activity for this statement."""
  periodInstallmentActivity: [FinancialAccountStatementInstallmentCreditPlanActivity!]

  """Payoff warning for the statement when balance is greater than zero"""
  payOffWarning: FinancialAccountStatementPayOffWarning

  """Period's minimum payment due to the statement"""
  periodMinimumPaymentDue: Amount

  """
  statement entries.
  
  For information on Highnote's Search API, see our [Search guide](https://highnote.com/docs/basics/graphql-api/search).
  """
  statementEntries(
    """The number of Financial Account Activities to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String

    """Filter results to specific Financial Account Activities."""
    filterBy: FinancialAccountStatementEntriesFilterInput
  ): FinancialAccountStatementEntryConnection

  """History of repayments per statement"""
  repaymentHistory: [CreditRepaymentStatementApplication!]

  """
  The interest and fees that an account has accumulated as it relates to a `FinancialAccountStatement`.
  """
  accumulatedAccountInterestAndFees: AccumulatedAccountInterestAndFees

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""
`FinancialAccount` activity for this statement related to `InstallmentAgreement`s.
"""
type FinancialAccountStatementInstallmentCreditPlanActivity {
  """The `InstallmentAgreement`."""
  installmentAgreement: InstallmentAgreement

  """
  The fees associated with this `InstallmentAgreement` for this statement period.
  """
  periodFeesAmount: Amount

  """
  The fee credit (for example due to waiving fees) associated with this `InstallmentAgreement` for this statement period.
  """
  periodFeeCredit: Amount

  """
  The amount of principal paid down during this statement period for this `InstallmentAgreement`.
  """
  periodPrincipal: Amount

  """
  The amount the total balance, including principal and fees, is reduced by during this statement period for this `InstallmentAgreement`.
  """
  periodBalancePaid: Amount
}

"""Statement entry for Commercial Revolving"""
type CommercialRevolvingCardFinancialAccountStatementEntry implements FinancialAccountStatementEntry {
  """Credit amount of the transaction."""
  creditAmount: Amount

  """Debit amount of the transaction."""
  debitAmount: Amount

  """Credit balance of the account."""
  primaryCreditBalance: Amount

  """Debit balance of the account."""
  primaryDebitBalance: Amount

  """
  The date, in ISO 8601 format, the transaction was posted. (Different word for 'posted'?)
  """
  postDate: String

  """Ledger Entry for the entry"""
  ledgerEntry: LedgerEntry

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""Current account snapshot for a commercial revolving card"""
type CommercialRevolvingCardFinancialAccountStatementSnapshot implements FinancialAccountStatementSnapshot {
  """
  The date and time, in ISO 8601 format, the snapshot was calculated.
  Note that this will be the date/time of the last impactful event.
  """
  asOf: String

  """The current open statement"""
  currentOpenStatement: FinancialAccountStatement

  """The most recently closed statement"""
  latestClosedStatement: FinancialAccountStatement

  """The current amount due."""
  currentAmountDue: Amount

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

interface FinancialAccountStatementEvent {
  """Id for statement which is ready."""
  id: ID!

  """Account Id associated with this statement."""
  financialAccountId: ID
}

interface FinancialAccountStatementBalanceType {
  """Balance Type for the current statement"""
  balanceType: BalanceType

  """
  Purchase balance for this `CreditPlan`, subject to the interest charge for specific credit plan'
  """
  balanceSubjectToInterestAmount: Amount

  """
  Period's purchase interest charge for this `CreditPlan`, subject to the interest charge for specific balance for specific credit plan type'
  """
  interestChargedAmount: Amount
}

"""
Financial Account Statement purchase credit Plan with details related to purchase interest charge and balance subject to interest.
"""
type FinancialAccountStatementPurchaseCreditPlan implements FinancialAccountStatementBalanceType {
  """Balance Type for the current statement"""
  balanceType: BalanceType

  """
  Purchase balance for this `CreditPlan`, subject to the interest charge for specific credit plan'
  """
  balanceSubjectToInterestAmount: Amount

  """
  Period's purchase interest charge for this `CreditPlan`, subject to the interest charge for specific balance for specific credit plan type'
  """
  interestChargedAmount: Amount

  """
  The interest rate (APR) for this `CreditPlan` for this statement, expressed as a `Float` with up to 3 digit precision after the decimal point.
  If this `FinancialAccount` qualifies for a Servicemembers Civil Relief Act (SCRA) interest rate during this statement period, it will be reflected in this value.
  """
  apr: Float

  """
  For variable interest rates only. The current configuration of the index used to derive the variable APR.
  """
  index: Float

  """
  For variable interest rates only. The current configuration of the margin used to derive the variable APR.
  """
  margin: Float
}

"""
Warning for consumer to let them know about how much time it takes for them to pay statement balance and how additional payment they do with minimum or 36 months pay.
"""
type FinancialAccountStatementPayOffWarning {
  """Minimum amount paid by the consumer."""
  paymentCycles: [FinancialAccountStatementPayOffPayment!]
}

"""
The FinanceAccountStatementPayOffPayment is the amount paid by the consumer. This can be minimum or time based details.
"""
type FinancialAccountStatementPayOffPayment {
  """
  Pay off Type to identity if pay off details are associated with Fixed minimum pay or Fixed three year pay.
  """
  payOffType: PayOffType

  """Payment details for the consumer for define category."""
  paymentDetails: PayOffPaymentDetails
}

"""Payoff payment details."""
type PayOffPaymentDetails {
  """Pay off can be completed in how many estimated days."""
  estimatedPayOffDays: UnsignedInt

  """Pay off estimated total amount."""
  estimatedTotal: Amount

  """
  If you pay this amount each period, you will pay off your unpaid balance in estimatedPayOffDays.
  """
  periodPayment: Amount
}

"""The FinancialAccountStatementEvent notifies when a statement is ready."""
type FinancialAccountStatementReadyEvent implements Node & FinancialAccountStatementEvent {
  """Id for statement which is ready."""
  id: ID!

  """Account Id associated with this statement."""
  financialAccountId: ID
}

"""
The possible values for Payment Detail type of the Payoff warning associated with the statement
"""
enum PayOffType {
  """
  Estimated Total payment and time it takes with minimum payment amount of the statement.
  """
  MINIMUM_PAY_OFF

  """
  Estimated Total payment and minimum required to pay it within 3 years fix time.
  """
  THREE_YEAR_PAY_OFF
}

"""Plan and statement entries are based on specific balance type."""
enum BalanceType {
  """Plan and statement entries are based on the PURCHASE balance Type."""
  PURCHASE
}

"""The interest and fees that an account has accumulated."""
type AccumulatedAccountInterestAndFees {
  """
  The interest debit balance that has accumulated year to date, across all balance types.
  """
  yearToDateAccumulatedInterestDebit: Amount

  """
  The interest credit balance that has accumulated year to date, across all balance types.
  """
  yearToDateAccumulatedInterestCredit: Amount

  """
  The fee debit balance that has accumulated year to date, across all balance types.
  """
  yearToDateAccumulatedFeesDebit: Amount

  """
  The fee credit balance that has accumulated year to date, across all balance types.
  """
  yearToDateAccumulatedFeesCredit: Amount
}

"""The possible bank names."""
enum PartnerBankName {
  """The value representing Sutton."""
  SUTTON

  """The value representing Highnote."""
  HIGHNOTE

  """The value representing Bancorp."""
  BANCORP

  """The value representing CFSB."""
  CFSB

  """The value representing Celtic."""
  CELTIC

  """The value representing Cross River."""
  CROSS_RIVER

  """The value representing BNY."""
  BNY

  """The value representing Cass Bank."""
  CASS_BANK

  """The value representing Transpecos Bank."""
  TRANSPECOS_BANK

  """The value representing FinWise Bank."""
  FINWISE_BANK

  """The value representing Veritex Bank."""
  VERITEX_BANK
}

"""Input for `initiateCustomerCardTransactionDispute`."""
input InitiateCustomerCardTransactionDisputeInput {
  """
  The ID of the transaction event (AuthorizationAndClearEvent or ClearingEvent).
  """
  cardTransactionEventId: ID!

  """The category type of the dispute."""
  category: PaymentCardDisputeCategoryType!

  """The disputed amount."""
  amount: AmountInput!

  """
  The customer initiated date, in YYYY-MM-DD format, for the card transaction dispute.
  """
  customerInitiatedOn: String!

  """The customer claim type for the card transaction dispute."""
  customerClaimType: PaymentCardDisputeCustomerClaimType!

  """The customer contact information for the card transaction dispute."""
  customerContact: CustomerContactInput!

  """
  The subscriber note for the card transaction dispute. Maximum length is 2048.
  """
  subscriberNote: String
}

"""Input for customer contact information."""
input CustomerContactInput {
  """The email of the customer."""
  email: String!

  """The given name of the customer."""
  givenName: String!

  """The family name of the customer."""
  familyName: String!

  """The phone number of the customer."""
  phone: PhoneInput
}

"""Input for `SimulateUpdatePaymentCardTransactionChargebackInput`."""
input SimulateUpdatePaymentCardTransactionChargebackInput {
  """The ID of the chargeback."""
  id: ID!

  """The ID of the dispute."""
  disputeId: ID!

  """The status of the chargeback"""
  status: PaymentCardChargebackStatus
}

"""Input for `simulateInitiateCardTransactionDispute`."""
input SimulateInitiateCardTransactionDisputeInput {
  """
  The ID of the transaction event (AuthorizationAndClearEvent or ClearingEvent).
  """
  cardTransactionEventId: ID!

  """The category type of the dispute."""
  category: PaymentCardDisputeCategoryType!

  """The disputed amount."""
  amount: AmountInput!
}

"""Input for `simulateUpdateCardTransactionDispute`."""
input SimulateUpdateCardTransactionDisputeInput {
  """The ID of the PaymentCardTransactionDispute"""
  id: ID!

  """The status of the dispute."""
  status: PaymentCardDisputeStatus
}

"""Input for `simulateInitiateCardTransactionChargeback`."""
input SimulateInitiateCardTransactionChargebackInput {
  """The ID of the dispute."""
  disputeId: ID!

  """The requested amount."""
  amount: AmountInput!
}

"""Input for `simulateIssueCreditForCardTransactionDispute`."""
input SimulateIssueCreditForCardTransactionDisputeInput {
  """The ID of the dispute."""
  id: ID!

  """Indicates whether the Issuer or Merchant is liable for the dispute."""
  liability: PaymentCardDisputeLiability
}

"""Input for `simulateIssueProvisionalCreditForCardTransactionDispute`."""
input SimulateIssueProvisionalCreditForCardTransactionDisputeInput {
  """The ID of the dispute."""
  id: ID!

  """The ID of the chargeback."""
  chargebackId: ID!
}

"""Input for `simulateResolvePaymentCardTransactionChargeback`"""
input SimulateResolvePaymentCardTransactionChargebackInput {
  """The ID of the chargeback."""
  id: ID!

  """The ID of the dispute."""
  disputeId: ID!

  """
  The received amount from the external network.
  If received amount is 0, the chargeback is resolved as a loss.
  """
  receivedAmount: AmountInput!
}

"""
Input for `simulateFinalizeProvisionalCreditForCardTransactionDispute`.
"""
input SimulateFinalizeProvisionalCreditForCardTransactionDisputeInput {
  """The ID of the dispute."""
  id: ID!

  """The Liability for the dispute."""
  liability: PaymentCardDisputeLiability!

  """The amount to finalize the provisional credit."""
  amount: AmountInput!
}

"""The possible dispute liability types for a payment card transaction."""
enum PaymentCardDisputeLiability {
  """The Issuer is liable for the dispute."""
  ISSUER_LIABLE

  """The Merchant is liable for the dispute."""
  MERCHANT_LIABLE
}

"""The possible return types of `PaymentCardTransactionDisputePayload`."""
union PaymentCardTransactionDisputePayload = PaymentCardTransactionDispute | UserError | AccessDeniedError

"""
The possible return types of `SimulatePaymentCardTransactionDisputePayload`.
"""
union SimulatePaymentCardTransactionDisputePayload = PaymentCardTransactionDispute | UserError | AccessDeniedError

"""Input for simulate creating application documents upload sessions."""
input SimulateCreateApplicationDocumentsUploadSessionsInput {
  """The ID of the application."""
  applicationId: ID!

  """The memo of the manual review."""
  memo: String

  """The requested documents for each applicant."""
  requestedDocuments: [RequestedDocuments!]
}

"""
Input for agent servicing application manual review requested documents.
"""
input RequestedDocuments {
  """The ID of the applicant."""
  applicantId: ID!

  """The requested document types for the applicant."""
  documentTypes: [DocumentType!]
}

"""The possible return types of `SimulateApplicationManualReviewPayload`."""
union SimulateApplicationManualReviewPayload = AccountHolderCardProductApplication | UserError | AccessDeniedError

"""The input details for suspending a `FinancialAccount`."""
input SuspendFinancialAccountInput {
  """The `FinancialAccount` ID to be suspended."""
  id: ID!

  """The reason for suspending the `FinancialAccount`."""
  suspensionReason: FinancialAccountSuspensionReasonInput!

  """
  The memo for suspending the `FinancialAccount`.
  
  Regex: ^[a-zA-Z\d$ ',.\-\_!@#$%^&*+=`?"\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\n]+$
  Memo has a max length of 2048 characters.
  For compliance and security reasons, memo should not contain any sensitive information, such as PII or PCI.
  """
  memo: String!
}

"""The input details for unsuspending a `FinancialAccount`."""
input UnsuspendFinancialAccountInput {
  """The `FinancialAccount` ID to be unsuspended."""
  id: ID!

  """
  The memo for unsuspending the `FinancialAccount`.
  
  Regex: ^[a-zA-Z\d$ ',.\-\_!@#$%^&*+=`?"\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\n]+$
  Memo has a max length of 2048 characters.
  For compliance and security reasons, memo should not contain any sensitive information, such as PII or PCI.
  """
  memo: String!
}

"""The reason input for suspending a `FinancialAccount`."""
enum FinancialAccountSuspensionReasonInput {
  """The `FinancialAccount` is being suspended due to suspected fraud."""
  SUSPECTED_FRAUD

  """The `FinancialAccount` is being suspended due to delinquency."""
  DELINQUENCY

  """
  The `FinancialAccount` is being suspended due to related ACH transfer returns.
  """
  ACH_RETURNS

  """
  The `FinancialAccount` is being suspended due to account holder request.
  """
  ACCOUNT_HOLDER_REQUEST

  """
  The `FinancialAccount` is being suspended due to lost or stolen `PaymentCard`.
  """
  LOST_OR_STOLEN_CARD

  """The `FinancialAccount` is being suspended due to account review."""
  ACCOUNT_REVIEW
}

"""The reason for a `FinancialAccountAttribute`."""
enum FinancialAccountAttributeReason {
  """The `FinancialAccount` is being suspended due to unspecified reason."""
  PROGRAM_OWNER_INITIATED_SUSPENSION_REASON_UNSPECIFIED

  """The `FinancialAccount` is being suspended due to suspected fraud."""
  PROGRAM_OWNER_INITIATED_SUSPENSION_REASON_SUSPECTED_FRAUD

  """The `FinancialAccount` is being suspended due to delinquency."""
  PROGRAM_OWNER_INITIATED_SUSPENSION_REASON_DELINQUENCY

  """
  The `FinancialAccount` is being suspended due to related ACH transfer returns.
  """
  PROGRAM_OWNER_INITIATED_SUSPENSION_REASON_ACH_RETURNS

  """
  The `FinancialAccount` is being suspended due to account holder request.
  """
  PROGRAM_OWNER_INITIATED_SUSPENSION_REASON_ACCOUNT_HOLDER_REQUEST

  """
  The `FinancialAccount` is being suspended due to lost or stolen `PaymentCard`.
  """
  PROGRAM_OWNER_INITIATED_SUSPENSION_REASON_LOST_OR_STOLEN_CARD

  """The `FinancialAccount` is being suspended due to account review."""
  PROGRAM_OWNER_INITIATED_SUSPENSION_REASON_ACCOUNT_REVIEW
}

union FinancialAccountPayload = FinancialAccount | UserError | AccessDeniedError

"""Input to simulate a card digital wallet token activation."""
input SimulateCardDigitalWalletTokenActivationInput {
  """The ID of the payment card to create digital wallet token."""
  paymentCardId: ID!
}

"""Input to simulate a card digital wallet token activation."""
input SimulateCardDigitalWalletTokenActivatedInput {
  """The ID of the card digital wallet token to be activated."""
  cardDigitalWalletTokenId: ID!
}

"""Simulate card digital wallet token payload."""
union SimulateCardDigitalWalletTokenPayload = CardDigitalWalletToken | UserError | AccessDeniedError

union AddPaymentCardDigitalWalletTokenApplePayDevicePushProvisioningPayload = PaymentCardDigitalWalletTokenApplePayDevicePushProvisioning | UserError | AccessDeniedError

union AddPaymentCardDigitalWalletTokenGooglePayPushProvisioningPayload = PaymentCardDigitalWalletTokenGooglePayPushProvisioning | UserError | AccessDeniedError

"""The Payment Card Digital Wallet Device Type."""
enum PaymentCardDigitalWalletDeviceType {
  """
  A Mobile Device. Examples include an iPhone, Samsung Galaxy, or Google Pixel.
  """
  MOBILE

  """
  A Digital Watch. Examples include an iWatch, Samsung Galaxy Watch4, or Fitbit.
  """
  WATCH

  """
  A wireless, portable personal computer with a touchscreen interface. Examples include an iPad, Samsung Galaxy Tablet, or Amazon Fire HD.
  """
  TABLET
}

"""
Input to Provision a `PaymentCard` to an Apple Pay Eligible Device via Push Provisioning.
"""
input AddPaymentCardToApplePayByDevicePushProvisioningInput {
  """The ID of the payment card to be push provisioned."""
  paymentCardId: ID!

  """Specifies the type of device which is initiating the provisioning."""
  deviceType: PaymentCardDigitalWalletDeviceType!

  """A Base64-encoded list of certificates."""
  certificates: [String!]!

  """A Base64-encoded, one-time use nonce generated by Apple’s servers."""
  nonce: String!

  """A Base64-encoded device and account specific signature of the nonce."""
  nonceSignature: String!
}

"""
Input to Provision a `PaymentCard` to a Google Pay Eligible Device via Push Provisioning.
"""
input AddPaymentCardToGooglePayByDevicePushProvisioningInput {
  """The ID of the payment card to be push provisioned."""
  paymentCardId: ID!

  """Specifies the type of device which is initiating the provisioning."""
  deviceType: PaymentCardDigitalWalletDeviceType!

  """
  Display Name describes the Payment Card in the user interface. Highnote can return this value in the response which the Subscriber’s mobile app can override before calling pushTokenize on the wallet app. If not provided, Highnote will leverage the name of the product.
  """
  displayName: String

  """Token provisioning wallet details."""
  walletDetails: WalletDetailsInput
}

"""Highnote supported Client Wallet Providers."""
enum WalletProviderType {
  """Google Pay Wallet"""
  GOOGLE_PAY

  """Samsung Pay Wallet"""
  SAMSUNG_PAY
}

"""Token provisioning wallet details"""
input WalletDetailsInput {
  """The client wallet providers defined in 'WalletProviderType'"""
  clientWalletProvider: WalletProviderType!

  """
  Client-provided consumer ID that identifies the Wallet Account Holder entity.
  """
  clientWalletAccountIdentifier: String!

  """
  Stable device identification set by Wallet Provider. Could be computer identifier or ID tied to hardware such as TEE_ID or SE_ID.
  """
  clientDeviceIdentifier: String
}

"""
Return type to push provision a `PaymentCard` to an Apple Pay Enabled Device.
"""
type PaymentCardDigitalWalletTokenApplePayDevicePushProvisioning {
  """The `PaymentCard` requested to be push provisioned"""
  paymentCard: PaymentCard

  """
  A Base64-encoded cipher text containing the card data, nonce, and nonce signature generated by Highnote.
  """
  encryptedPassData: String

  """
  A Base64-encoded cryptographic OTP required to activate the Card by the Network. This data is not interpreted by Apple and the formats and contents are Network-specific. The Network and Highnote are responsible for validating the OTP and activating the Card.
  """
  activationData: String

  """
  A Base64-encoded ephemeral public key. The `ephemeralPublicKey` can be used in `PKEncryptionSchemeECC_V2`.
  """
  ephemeralPublicKey: String

  """
  The date and time, in ISO 8601 format, this `PaymentCardDigitalWalletTokenApplePayDevicePushProvisioning` was created.
  """
  createdAt: String
}

"""
Return type to push provision a `PaymentCard` to a Google Pay Enabled Device.
"""
type PaymentCardDigitalWalletTokenGooglePayPushProvisioning {
  """The `PaymentCard` requested to be push provisioned"""
  paymentCard: PaymentCard

  """
  The Opaque Payment Credential is an encrypted object that is created by Highnote and passed to Google Pay during push provisioning.
  """
  opaquePaymentCard: String

  """
  The card networks that the Highnote platform uses to issue Payment Cards.
  """
  network: PaymentCardNetwork

  """The Token Service Provider"""
  tokenServiceProvider: String

  """A customer friendly name to appear on the Digital Wallet."""
  displayName: String

  """The billing address information of the `PaymentCard`"""
  billingAddress: Address

  """A structured object representing the name of the Cardholder"""
  cardholderName: DigitalWalletPushProvisioningCardholderName

  """
  The date and time, in ISO 8601 format, this `PaymentCardDigitalWalletTokenGooglePayPushProvisioning` was created.
  """
  createdAt: String
}

"""Type representing common fields of a person's name."""
type DigitalWalletPushProvisioningCardholderName {
  """
  A formatted name, composing the components of the name into a single field
  """
  formattedName: String

  """The part of the name that identifies a person."""
  givenName: String

  """Additional part of name that identifies a person."""
  middleName: String

  """Part of a personal name that identifies a family, tribe, or community."""
  familyName: String

  """Provides additional information about the person (e.g. Jr., Sr.)"""
  suffix: String

  """One or more words used before the person's name (e.g. Mx., Dr.)."""
  title: String
}

interface CardDigitalWalletTokenEvent implements Node {
  """The ID used to reference the `CardDigitalWalletToken` in operations."""
  id: ID!

  """Payment card ID for which token was issued."""
  paymentCardId: ID

  """The current status of the `CardDigitalWalletToken`."""
  tokenStatus: DigitalWalletTokenStatus

  """The previous status of the `CardDigitalWalletToken`."""
  tokenPreviousStatus: DigitalWalletTokenStatus

  """The reason for the status change."""
  reason: DigitalWalletTokenStatusChangeReason
}

"""
The CardDigitalWalletTokenActivatedEvent is triggered when a `CardDigitalWalletToken` has been activated.
"""
type CardDigitalWalletTokenActivatedEvent implements Node & CardDigitalWalletTokenEvent {
  """The ID used to reference the `CardDigitalWalletToken` in operations."""
  id: ID!

  """Payment card ID for which token was issued."""
  paymentCardId: ID

  """The current status of the `CardDigitalWalletToken`."""
  tokenStatus: DigitalWalletTokenStatus

  """The previous status of the `CardDigitalWalletToken`."""
  tokenPreviousStatus: DigitalWalletTokenStatus

  """The reason for the status change."""
  reason: DigitalWalletTokenStatusChangeReason
}

"""
The CardDigitalWalletTokenSuspendedEvent is triggered when a  `CardDigitalWalletToken` has been suspended.
"""
type CardDigitalWalletTokenSuspendedEvent implements Node & CardDigitalWalletTokenEvent {
  """The ID used to reference the `CardDigitalWalletToken` in operations."""
  id: ID!

  """Payment card ID for which token was issued."""
  paymentCardId: ID

  """The current status of the `CardDigitalWalletToken`."""
  tokenStatus: DigitalWalletTokenStatus

  """The previous status of the `CardDigitalWalletToken`."""
  tokenPreviousStatus: DigitalWalletTokenStatus

  """The reason for the status change."""
  reason: DigitalWalletTokenStatusChangeReason
}

"""
The CardDigitalWalletTokenTerminatedEvent is triggered when a  `CardDigitalWalletToken` has been terminated.
"""
type CardDigitalWalletTokenTerminatedEvent implements Node & CardDigitalWalletTokenEvent {
  """The ID used to reference the `CardDigitalWalletToken` in operations."""
  id: ID!

  """Payment card ID for which token was issued."""
  paymentCardId: ID

  """The current status of the `CardDigitalWalletToken`."""
  tokenStatus: DigitalWalletTokenStatus

  """The previous status of the `CardDigitalWalletToken`."""
  tokenPreviousStatus: DigitalWalletTokenStatus

  """The reason for the status change."""
  reason: DigitalWalletTokenStatusChangeReason
}

"""The status of a `CardDigitalWalletToken`."""
enum DigitalWalletTokenStatus {
  """The `CardDigitalWalletToken` is requested and pending activation."""
  REQUESTED

  """The `CardDigitalWalletToken` is active and ready for use."""
  ACTIVE

  """
  The `CardDigitalWalletToken` has been suspended and authorizations will fail until the `CardDigitalWalletToken` is `ACTIVE` again.
  """
  SUSPENDED

  """
  The `CardDigitalWalletToken` has been terminated and all future authorizations will fail.
  """
  TERMINATED
}

"""The reason for a `CardDigitalWalletToken` status change."""
enum DigitalWalletTokenStatusChangeReason {
  """Cardholder successfully authenticated with an activation method."""
  ACTIVATION_METHOD

  """Cardholder called customer agent for verification."""
  CUSTOMER_SERVICE_AGENT

  """Cardholder reported token device lost."""
  DEVICE_LOST

  """Cardholder reported token device stolen."""
  DEVICE_STOLEN

  """Issuer or Cardholder reported fraudulent token transactions."""
  FRAUDULENT_TRANSACTIONS

  """Cardholder reported token device found."""
  DEVICE_FOUND

  """Issuer or Cardholder reported no fraudulent token transactions."""
  NON_FRAUDULENT_TRANSACTIONS

  """Financial Account has been closed."""
  ACCOUNT_CLOSED

  """Cardholder Account has been closed by issuer."""
  ACCOUNT_HOLDER_DELETED

  """Network request."""
  NETWORK_INITIATED

  """Other reason."""
  OTHER
}

"""The return types when attaching a `SpendRule` to a `FinancialAccount`."""
union AttachSpendRuleToFinancialAccountPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when detaching a `SpendRule` from a `FinancialAccount`.
"""
union DetachSpendRuleFromFinancialAccountPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when attaching a `VelocityRule` to a `FinancialAccount`.
"""
union AttachVelocityRuleToFinancialAccountPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when detaching a `VelocityRule` from a `FinancialAccount`.
"""
union DetachVelocityRuleFromFinancialAccountPayload = FinancialAccount | UserError | AccessDeniedError

"""
The return types when attaching a spend control rule to a card product.
"""
union AttachSpendRuleToCardProductPayload = CardProduct | UserError | AccessDeniedError

"""The return types when detaching a spend rule from a card product."""
union DetachSpendRuleFromCardProductPayload = CardProduct | UserError | AccessDeniedError

"""
The return types when attaching a spend control rule to a payment card.
"""
union AttachSpendRuleToPaymentCardPayload = PaymentCard | UserError | AccessDeniedError

"""
The return types when detaching a spend control rule from a payment card.
"""
union DetachSpendRuleFromPaymentCardPayload = PaymentCard | UserError | AccessDeniedError

"""The return types when creating a new category rule."""
union CreateMerchantCategorySpendRulePayload = MerchantCategorySpendRule | UserError | AccessDeniedError

"""The return types when updating an existing category rule."""
union UpdateMerchantCategorySpendRulePayload = MerchantCategorySpendRule | UserError | AccessDeniedError

"""The return types when creating a new country rule."""
union CreateMerchantCountrySpendRulePayload = MerchantCountrySpendRule | UserError | AccessDeniedError

"""The return types when updating an existing country rule."""
union UpdateMerchantCountrySpendRulePayload = MerchantCountrySpendRule | UserError | AccessDeniedError

"""The return types when creating a new amount limit rule."""
union CreateAmountLimitSpendRulePayload = AmountLimitSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing amount limit rule."""
union UpdateAmountLimitSpendRulePayload = AmountLimitSpendRule | UserError | AccessDeniedError

"""The return types when creating a new count limit rule."""
union CreateCountLimitSpendRulePayload = CountLimitSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing count limit rule."""
union UpdateCountLimitSpendRulePayload = CountLimitSpendRule | UserError | AccessDeniedError

"""
The return types when creating a new `CardTransactionProcessingTypeConditionSpendRule`.
"""
union CreateCardTransactionProcessingTypeConditionSpendRulePayload = CardTransactionProcessingTypeConditionSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `CardTransactionProcessingTypeConditionSpendRule`.
"""
union UpdateCardTransactionProcessingTypeConditionSpendRulePayload = CardTransactionProcessingTypeConditionSpendRule | UserError | AccessDeniedError

"""The return types when creating a new CVV rule."""
union CreateCVVSpendRulePayload = CVVSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing CVV rule."""
union UpdateCVVSpendRulePayload = CVVSpendRule | UserError | AccessDeniedError

"""The return types when creating a new street address rule."""
union CreateStreetAddressSpendRulePayload = StreetAddressSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing street address rule."""
union UpdateStreetAddressSpendRulePayload = StreetAddressSpendRule | UserError | AccessDeniedError

"""The return types when creating a new merchant identifier rule."""
union CreateMerchantIdentifierSpendRulePayload = MerchantIdentifierSpendRule | UserError | AccessDeniedError

"""The return types when creating a new deposit amount limit rule."""
union CreateDepositAmountLimitSpendRulePayload = DepositAmountLimitSpendRule | UserError | AccessDeniedError

"""The return types when creating a new deposit count limit rule."""
union CreateDepositCountLimitSpendRulePayload = DepositCountLimitSpendRule | UserError | AccessDeniedError

"""
The return types when creating a new cash deposit processing network rule.
"""
union CreateDepositProcessingNetworkSpendRulePayload = DepositProcessingNetworkSpendRule | UserError | AccessDeniedError

"""The return types when creating a new conditional rule set rule."""
union CreateConditionalRuleSetSpendRulePayload = ConditionalRuleSetSpendRule | UserError | AccessDeniedError

"""The return types when updating a deposit amount limit rule."""
union UpdateDepositAmountLimitSpendRulePayload = DepositAmountLimitSpendRule | UserError | AccessDeniedError

"""The return types when updating a deposit count limit rule."""
union UpdateDepositCountLimitSpendRulePayload = DepositCountLimitSpendRule | UserError | AccessDeniedError

"""The return types when updating a cash deposit processing network rule."""
union UpdateDepositProcessingNetworkSpendRulePayload = DepositProcessingNetworkSpendRule | UserError | AccessDeniedError

"""The return types when updating a conditional rule set rule."""
union UpdateConditionalRuleSetSpendRulePayload = ConditionalRuleSetSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing merchant identifier rule."""
union UpdateMerchantIdentifierSpendRulePayload = MerchantIdentifierSpendRule | UserError | AccessDeniedError

"""The return types when creating a point of service category rule."""
union CreatePointOfServiceCategorySpendRulePayload = PointOfServiceCategorySpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing a point of service category rule.
"""
union UpdatePointOfServiceCategorySpendRulePayload = PointOfServiceCategorySpendRule | UserError | AccessDeniedError

"""The return types when creating a postal code verification rule."""
union CreatePostalCodeVerificationSpendRulePayload = PostalCodeVerificationSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing postal code verification rule.
"""
union UpdatePostalCodeVerificationSpendRulePayload = PostalCodeVerificationSpendRule | UserError | AccessDeniedError

"""The return types when deleting an existing spend rule."""
union DeleteSpendRulePayload = SpendRuleContainer | UserError | AccessDeniedError

"""The return types when deleting an existing velocity rule."""
union DeleteVelocityRulePayload = VelocityRuleContainer | UserError | AccessDeniedError

"""The return types when creating a `PanEntryModeSpendRule`."""
union CreatePanEntryModeSpendRulePayload = PanEntryModeSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing `PanEntryModeSpendRule`."""
union UpdatePanEntryModeSpendRulePayload = PanEntryModeSpendRule | UserError | AccessDeniedError

"""The return types when creating a `CardDataInputCapabilitySpendRule`."""
union CreateCardDataInputCapabilitySpendRulePayload = CardDataInputCapabilitySpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `CardDataInputCapabilitySpendRule`.
"""
union UpdateCardDataInputCapabilitySpendRulePayload = CardDataInputCapabilitySpendRule | UserError | AccessDeniedError

"""The return types when creating a `MinimumAmountLimitSpendRule`."""
union CreateMinimumAmountLimitSpendRulePayload = MinimumAmountLimitSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `MinimumAmountLimitSpendRule`.
"""
union UpdateMinimumAmountLimitSpendRulePayload = MinimumAmountLimitSpendRule | UserError | AccessDeniedError

"""
The return types when creating a `MaximumPercentVarianceOnPseudoBalanceSpendRule`.
"""
union CreateMaximumPercentVarianceOnPseudoBalanceSpendRulePayload = MaximumPercentVarianceOnPseudoBalanceSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `MaximumPercentVarianceOnPseudoBalanceSpendRule`.
"""
union UpdateMaximumPercentVarianceOnPseudoBalanceSpendRulePayload = MaximumPercentVarianceOnPseudoBalanceSpendRule | UserError | AccessDeniedError

"""
The return types when creating a `MaximumAmountVarianceOnPseudoBalanceSpendRule`.
"""
union CreateMaximumAmountVarianceOnPseudoBalanceSpendRulePayload = MaximumAmountVarianceOnPseudoBalanceSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `MaximumAmountVarianceOnPseudoBalanceSpendRule`.
"""
union UpdateMaximumAmountVarianceOnPseudoBalanceSpendRulePayload = MaximumAmountVarianceOnPseudoBalanceSpendRule | UserError | AccessDeniedError

"""The return types when creating a `DaysWithinCardCreateDateSpendRule`."""
union CreateDaysWithinCardCreateDateSpendRulePayload = DaysWithinCardCreateDateSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `DaysWithinCardCreateDateSpendRule`.
"""
union UpdateDaysWithinCardCreateDateSpendRulePayload = DaysWithinCardCreateDateSpendRule | UserError | AccessDeniedError

"""
The return types when creating a `DaysWithinAccountCreateDateSpendRule`.
"""
union CreateDaysWithinAccountCreateDateSpendRulePayload = DaysWithinAccountCreateDateSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `DaysWithinAccountCreateDateSpendRule`.
"""
union UpdateDaysWithinAccountCreateDateSpendRulePayload = DaysWithinAccountCreateDateSpendRule | UserError | AccessDeniedError

"""The return types when creating a `VisaRiskScoreSpendRule`."""
union CreateVisaRiskScoreSpendRulePayload = VisaRiskScoreSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing `VisaRiskScoreSpendRule`."""
union UpdateVisaRiskScoreSpendRulePayload = VisaRiskScoreSpendRule | UserError | AccessDeniedError

"""The return types when creating a `MastercardFraudScoreSpendRule`."""
union CreateMastercardFraudScoreSpendRulePayload = MastercardFraudScoreSpendRule | UserError | AccessDeniedError

"""
The return types when updating an existing `MastercardFraudScoreSpendRule`.
"""
union UpdateMastercardFraudScoreSpendRulePayload = MastercardFraudScoreSpendRule | UserError | AccessDeniedError

"""The return types when updating an existing `VelocityRule`."""
union UpdateVelocityRulePayload = VelocityRule | UserError | AccessDeniedError

"""The details of the spend rule to attach to the Payment Card"""
input AttachSpendRuleToFinancialAccountInput {
  """The Global ID of the Payment Card to attach the spend rule."""
  financialAccountId: ID!

  """The details of the spend rule to attach to the Payment Card."""
  spendRule: AttachSpendRuleInput!
}

"""The details of the spend rule to detach from the Payment Card."""
input DetachSpendRuleFromFinancialAccountInput {
  """The Global ID of the Payment Card to detach the spend rule."""
  financialAccountId: ID!

  """The details of the spend rule to detach from the Payment Card."""
  spendRule: DetachSpendRuleInput!
}

"""The details of the `VelocityRule` to attach to the `FinancialAccount`"""
input AttachVelocityRuleToFinancialAccountInput {
  """The Global ID of the `FinancialAccount` to attach the `VelocityRule`."""
  financialAccountId: ID!

  """The details of the `VelocityRule` to attach to the `FinancialAccount`."""
  velocityRule: VelocityRuleInput!
}

"""
The details of the `VelocityRule` to detach from the `FinancialAccount`
"""
input DetachVelocityRuleFromFinancialAccountInput {
  """
  The Global ID of the `FinancialAccount` connected to the `VelocityRule`.
  """
  financialAccountId: ID!

  """
  The details of the `VelocityRule` to detach from the `FinancialAccount`.
  """
  velocityRule: VelocityRuleInput!
}

"""The details of the spend rule to attach to the Card Product"""
input AttachSpendRuleToCardProductInput {
  """The Global ID of the Card Product to attach the spend rule."""
  cardProductId: ID!

  """The details of the spend rule to attach to the Card Product."""
  spendRule: AttachSpendRuleInput!
}

"""The details of the spend rule to detach from the Card Product"""
input DetachSpendRuleFromCardProductInput {
  """The Global ID of the Card Product to detach the spend rule."""
  cardProductId: ID!

  """The details of the spend rule to detach from the Card Product."""
  spendRule: DetachSpendRuleInput!
}

"""The details of the spend rule to attach to the Payment Card"""
input AttachSpendRuleToPaymentCardInput {
  """The Global ID of the Payment Card to attach the spend rule."""
  paymentCardId: ID!

  """The details of the spend rule to attach to the Payment Card."""
  spendRule: AttachSpendRuleInput!
}

"""The details of the spend rule to detach from the Payment Card."""
input DetachSpendRuleFromPaymentCardInput {
  """The Global ID of the Payment Card to detach the spend rule."""
  paymentCardId: ID!

  """The details of the spend rule to detach from the Payment Card."""
  spendRule: DetachSpendRuleInput!
}

"""The details of the spend rule to attach."""
input AttachSpendRuleInput {
  """The Global ID of the Spend Rule to attach."""
  id: ID!

  """
  The version of the spend rule to attach.
  
  To always use the latest version, set `version` to `LATEST`.
  """
  version: String!
}

"""The details of the spend rule to detach."""
input DetachSpendRuleInput {
  """The Global ID of the Spend Rule to detach."""
  id: ID!
}

"""The details of the spend rule to create."""
input CreateMerchantCategorySpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The merchant categories that will be allowed during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [MerchantCategory!]

  """
  The merchant categories that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [MerchantCategory!]

  """
  The merchant category codes that will be allowed during authorizations.
  
  Min: 1
  Max: 500
  """
  allowedMcc: [String!]

  """
  The merchant category codes that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blockedMcc: [String!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the spend rule to create."""
input CreateMerchantCountrySpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The merchant countries that will be allowed during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [ISO3166Alpha3Country!]

  """
  The merchant countries that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [ISO3166Alpha3Country!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the spend rule to create."""
input CreateCVVSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The `CVVResponseCode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [CVVResponseCode!]

  """
  The `CVVResponseCode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [CVVResponseCode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the spend rule to create."""
input CreateStreetAddressSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The `AVSResponseCode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [AVSResponseCode!]

  """
  The `AVSResponseCode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [AVSResponseCode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the spend rule to create."""
input CreateMerchantIdentifierSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The merchant identifiers you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [String!]

  """
  The merchant identifiers you want to block during authorizations.
  
  Matching values will result in a declined authorization.
  
  Min: 1
  Max: 500
  """
  blocked: [String!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `CreateAmountLimitSpendRuleInput` spend rule to create.
"""
input CreateAmountLimitSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """The maximum amount to allow for a single authorization."""
  maximumAmount: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `CreateCountLimitSpendRuleInput` spend rule to create.
"""
input CreateCountLimitSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """The maximum count of transactions."""
  maximumCount: Int!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `PointOfServiceCategorySpendRule` spend rule to create.
"""
input CreatePointOfServiceCategorySpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The `PointOfServiceCategoryCondition` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [PointOfServiceCategoryCondition!]

  """
  The `PointOfServiceCondition` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [PointOfServiceCategoryCondition!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `PostalCodeVerificationSpendRule` spend rule to create.
"""
input CreatePostalCodeVerificationSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The `PostalCodeResponseCode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [PostalCodeResponseCode!]

  """
  The `PostalCodeResponseCode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [PostalCodeResponseCode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `PostalCodeVerificationSpendRule` spend rule to update.
"""
input UpdatePostalCodeVerificationSpendRuleInput {
  """The Global ID of the Postal Code Verification Spend Rule to update."""
  spendRuleId: ID!

  """A name for the rule for future reference."""
  name: String

  """
  The `PostalCodeResponseCode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [PostalCodeResponseCode!]

  """
  The `PostalCodeResponseCode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [PostalCodeResponseCode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `DepositAmountLimitSpendRule` to create."""
input CreateDepositAmountLimitSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """The maximum amount to allow for a single deposit."""
  maximumAmount: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `DepositProcessingNetworkSpendRule` spend rule to create.
"""
input CreateDepositProcessingNetworkSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The list of possible `DepositProcessingNetwork` that will be allowed during cash deposits.
  Min: 1
  Max: 500
  """
  allowed: [DepositProcessingNetwork!]

  """
  The list of possible `DepositProcessingNetwork` that will result in declined cash deposits.
  Min: 1
  Max: 500
  """
  blocked: [DepositProcessingNetwork!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `DepositCountLimitSpendRule` to create."""
input CreateDepositCountLimitSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """The maximum count of deposits."""
  maximumCount: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `ConditionalRuleSetSpendRule` to create"""
input CreateConditionalRuleSetSpendRuleInput {
  """The name of the `ConditionalRuleSetSpendRule`"""
  name: String!

  """The action to apply to the transaction event, if the rule passes"""
  allow: Boolean!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `PointOfServiceCategorySpendRule` spend rule to update.
"""
input UpdatePointOfServiceCategorySpendRuleInput {
  """The Global ID of the Merchant Category Spend Rule to update."""
  spendRuleId: ID!

  """A name for the rule for future reference."""
  name: String

  """
  The `PointOfServiceCondition` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [PointOfServiceCategoryCondition!]

  """
  The `PointOfServiceCondition` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [PointOfServiceCategoryCondition!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MerchantCategorySpendRule` spend rule you want to update.
"""
input UpdateMerchantCategorySpendRuleInput {
  """The Global ID of the Merchant Category Spend Rule to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The merchant categories that will be allowed during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [MerchantCategory!]

  """
  The merchant categories that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [MerchantCategory!]

  """
  The merchant category codes that will be allowed during authorizations.
  
  Min: 1
  Max: 500
  """
  allowedMcc: [String!]

  """
  The merchant category codes that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blockedMcc: [String!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MerchantCountrySpendRule` spend rule you want to update.
"""
input UpdateMerchantCountrySpendRuleInput {
  """The Global ID of the Merchant Country Spend Rule to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The merchant countries that will be allowed during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [ISO3166Alpha3Country!]

  """
  The merchant countries that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [ISO3166Alpha3Country!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `CVVSpendRule` spend rule you want to update."""
input UpdateCVVSpendRuleInput {
  """The Global ID of the CVV Spend Rule to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The `CVVResponseCode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [CVVResponseCode!]

  """
  The `CVVResponseCode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [CVVResponseCode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `StreetAddressSpendRule` spend rule you want to update.
"""
input UpdateStreetAddressSpendRuleInput {
  """The Global ID of the `StreetAddressSpendRule` to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The `AVSResponseCode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [AVSResponseCode!]

  """
  The `AVSResponseCode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [AVSResponseCode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MerchantIdentifierSpendRule` spend rule you want to update.
"""
input UpdateMerchantIdentifierSpendRuleInput {
  """The Global ID of the `MerchantIdentifierSpendRule` to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The merchant identifiers you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [String!]

  """
  The merchant identifiers you want to block during authorizations.
  
  Matching values will result in a declined authorization.
  
  Min: 1
  Max: 500
  """
  blocked: [String!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `AmountLimitSpendRule` spend rule you want to update.
"""
input UpdateAmountLimitSpendRuleInput {
  """The Global ID of the Amount Limit Spend Rule to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """The maximum amount to allow for a single authorization."""
  maximumAmount: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `CountLimitSpendRule` spend rule you want to update.
"""
input UpdateCountLimitSpendRuleInput {
  """The Global ID of the Count Limit Spend Rule to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """The maximum count of transactions."""
  maximumCount: Int!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `DepositProcessingNetworkSpendRule` spend rule to update.
"""
input UpdateDepositProcessingNetworkSpendRuleInput {
  """The Global ID of the `DepositProcessingNetworkSpendRule` to update."""
  spendRuleId: ID!

  """A name for the rule for future reference."""
  name: String!

  """
  The list of possible `DepositProcessingNetwork` that will be allowed during cash deposits.
  Min: 1
  Max: 500
  """
  allowed: [DepositProcessingNetwork!]

  """
  The list of possible `DepositProcessingNetwork` that will result in declined cash deposits.
  Min: 1
  Max: 500
  """
  blocked: [DepositProcessingNetwork!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `DepositAmountLimitSpendRule` to update."""
input UpdateDepositAmountLimitSpendRuleInput {
  """Global ID of the `DepositAmountLimitSpendRule` to update."""
  spendRuleId: ID!

  """A name for the rule for future reference."""
  name: String

  """The maximum amount to allow for a single deposit."""
  maximumAmount: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `DepositCountLimitSpendRule` to update."""
input UpdateDepositCountLimitSpendRuleInput {
  """Global ID of the `DepositCountLimitSpendRule` to update."""
  spendRuleId: ID!

  """A name for the rule for future reference."""
  name: String

  """The maximum count of deposits."""
  maximumCount: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `ConditionalRuleSetSpendRule` to update"""
input UpdateConditionalRuleSetSpendRuleInput {
  """Global ID of the `ConditionalRuleSetSpendRule` to update."""
  spendRuleId: ID!

  """The name of the `ConditionalRuleSetSpendRule`"""
  name: String

  """The action to apply to the transaction event, if the rule passes"""
  allow: Boolean!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `VelocityRule` to update"""
input UpdateVelocityRuleInput {
  """Global ID of the `VelocityRule` to update."""
  velocityRuleId: ID!

  """A name for the rule for future reference."""
  name: String!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `CardTransactionProcessingTypeConditionSpendRule` to create
"""
input CreateCardTransactionProcessingTypeConditionSpendRuleInput {
  """The name of the `CardTransactionProcessingTypeConditionSpendRule`"""
  name: String

  """
  The list of possible `CardTransactionProcessingType` that will be allowed.
  Min: 1
  Max: 500
  """
  allowed: [CardTransactionProcessingType!]

  """
  The list of possible `CardTransactionProcessingType` that will result in a decline.
  Min: 1
  Max: 500
  """
  blocked: [CardTransactionProcessingType!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `CardTransactionProcessingTypeConditionSpendRule` to update
"""
input UpdateCardTransactionProcessingTypeConditionSpendRuleInput {
  """
  Global ID of the `CardTransactionProcessingTypeConditionSpendRule` to update.
  """
  spendRuleId: ID!

  """The name of the `CardTransactionProcessingTypeConditionSpendRule`"""
  name: String

  """
  The list of possible `CardTransactionProcessingType` that will be allowed.
  Min: 1
  Max: 500
  """
  allowed: [CardTransactionProcessingType!]

  """
  The list of possible `CardTransactionProcessingType` that will result in a decline.
  Min: 1
  Max: 500
  """
  blocked: [CardTransactionProcessingType!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the spend rule you want to delete."""
input DeleteSpendRuleInput {
  """The Global ID of the Spend Rule to delete."""
  spendRuleId: ID!
}

"""The details of the velocity rule you want to delete."""
input DeleteVelocityRuleInput {
  """The Global ID of the Velocity Rule to delete."""
  velocityRuleId: ID!
}

interface SpendRule implements Node {
  """Global ID used to reference the Spend Rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks certain merchant categories codes (MCC) during authorizations.
"""
type MerchantCategorySpendRule implements Node & SpendRule {
  """
  Global ID used to reference the Merchant Category Spend Rule in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The merchant categories that will be allowed during authorizations."""
  allowed: [MerchantCategory!]

  """The merchant categories that will result in declined authorizations."""
  blocked: [MerchantCategory!]

  """
  The merchant category codes that will be allowed during authorizations.
  """
  allowedMcc: [String!]

  """
  The merchant category codes that will result in declined authorizations.
  """
  blockedMcc: [String!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks certain CVV response codes during authorizations.
"""
type CVVSpendRule implements Node & SpendRule {
  """Global ID used to reference the CVV Spend Rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The `CVVResponseCode` values that will be allowed during authorizations.
  """
  allowed: [CVVResponseCode!]

  """
  The `CVVResponseCode` values that will result in declined authorizations.
  """
  blocked: [CVVResponseCode!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks certain AVS response codes during authorizations.

**Note** A `StreetAddressSpendRule` only applies to street numbers. To control postal codes, use `PostalCodeSpendRule`.
"""
type StreetAddressSpendRule implements Node & SpendRule {
  """Global ID used to reference the spend rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The `AVSResponseCode` values that will be allowed during authorizations.
  """
  allowed: [AVSResponseCode!]

  """
  The `AVSResponseCode` values that will result in declined authorizations.
  """
  blocked: [AVSResponseCode!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks authorizations based on merchant identifier.

A merchant identifier is typically a numeric string representing the merchant in an acquirer's or network's system.
"""
type MerchantIdentifierSpendRule implements Node & SpendRule {
  """Global ID used to reference the spend rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The merchant identifiers that will be allowed during authorizations."""
  allowed: [String!]

  """
  The merchant identifiers you want to block during authorizations.
  
  Matching values will result in a declined authorization.
  """
  blocked: [String!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks certain merchant countries during authorizations.
"""
type MerchantCountrySpendRule implements Node & SpendRule {
  """
  Global ID used to reference the Merchant Category Spend Rule in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The merchant countries that will be allowed during authorizations."""
  allowed: [ISO3166Alpha3Country!]

  """The merchant countries that will result in declined authorizations."""
  blocked: [ISO3166Alpha3Country!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that limits the dollar amount during authorizations.
"""
type AmountLimitSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the Merchant Category Spend Rule in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum amount to allow for a single authorization."""
  maximumAmount: Amount

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""A Spend Control rule that limits the number of allowed transactions."""
type CountLimitSpendRule implements Node & SpendRule {
  """Global ID used to reference the Count Limit Spend Rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum count of transactions to allow."""
  maximumCount: Int

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks certain point of service categories during authorizations.
"""
type PointOfServiceCategorySpendRule implements Node & SpendRule {
  """
  Global ID used to reference the Merchant Category Spend Rule in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The point of services that will be allowed during authorizations."""
  allowed: [PointOfServiceCategoryCondition!]

  """The point of services that will result in declined authorizations."""
  blocked: [PointOfServiceCategoryCondition!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks certain postal code response codes during authorizations.
"""
type PostalCodeVerificationSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the Postal Code Verification Spend Rule in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The postal code response codes that will be allowed during authorizations.
  """
  allowed: [PostalCodeResponseCode!]

  """
  The postal code response codes that will result in declined authorizations.
  """
  blocked: [PostalCodeResponseCode!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""A rule that limits the dollar amount that can be deposited."""
type DepositAmountLimitSpendRule implements Node & SpendRule {
  """Global ID used to reference the rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum amount to allow for a single deposit."""
  maximumAmount: Amount

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A rule that limits which processing networks can be used to make a deposit.
"""
type DepositProcessingNetworkSpendRule implements Node & SpendRule {
  """Global ID used to reference the spend rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The `DepositProcessingNetwork` values that will be allowed during deposits.
  """
  allowed: [DepositProcessingNetwork!]

  """
  The `DepositProcessingNetwork` values that will result in declined deposits.
  """
  blocked: [DepositProcessingNetwork!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A rule that limits the number of times that a cash deposit can be made.
"""
type DepositCountLimitSpendRule implements Node & SpendRule {
  """Global ID used to reference the rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum count of allowed deposits."""
  maximumCount: UnsignedInt

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A rule that combines multiple other spend rule results together in an all or none approach.
Must be used as a cumulativeRule for a `VelocityRule` with a `PER_TRANSACTION` window.
The resulting `VelocityRule` will have a passing result if all spendRules on the
`VelocityRule` pass or if all spendRules on the `VelocityRule` fail.
"""
type ConditionalRuleSetSpendRule implements Node & SpendRule {
  """Global ID used to reference the rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The action to apply to the transaction event, if the rule passes"""
  allow: Boolean

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""A rule that will allow or block `CardTransactionProcessingType`."""
type CardTransactionProcessingTypeConditionSpendRule implements Node & SpendRule {
  """Global ID used to reference the rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The list of `CardTransactionProcessingType` that will be allowed.
  Min: 1
  Max: 500
  """
  allowed: [CardTransactionProcessingType!]

  """
  The list of `CardTransactionProcessingType` that will be blocked.
  Min: 1
  Max: 500
  """
  blocked: [CardTransactionProcessingType!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The connection type for Spend Rule."""
type SpendRuleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpendRuleEdge!]
}

"""The edge type for a SpendRule."""
type SpendRuleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Spend Rule."""
  node: SpendRule
}

"""The connection type for `SpendRuleResult`."""
type SpendRuleResultConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpendRuleResultEdge!]
}

"""Edge for `SpendRuleResult`."""
type SpendRuleResultEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `SpendRuleResult`."""
  node: SpendRuleResult
}

"""The result of applying a spend rule to an event."""
interface SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The attached level. (Platform, Product, Card)"""
  attachedLevel: AttachedLevel
}

"""The result of applying a merchant category spend rule to an event."""
type MerchantCategorySpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The merchant category of the event."""
  valuesTested: [MerchantCategory!]

  """The spend rule attached at the time of the event."""
  spendRule: MerchantCategorySpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The result of applying a merchant country spend rule to an event."""
type MerchantCountrySpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The merchant country of the event."""
  valuesTested: [ISO3166Alpha3Country!]

  """The spend rule attached at the time of the event."""
  spendRule: MerchantCountrySpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The result of applying a merchant identifier spend rule to an event."""
type MerchantIdentifierSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The merchant identifiers of the event."""
  valuesTested: [String!]

  """The spend rule attached at the time of the event."""
  spendRule: MerchantIdentifierSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The result of applying a CVV spend rule to an event."""
type CVVSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The CVV response codes of the event."""
  valuesTested: [CVVResponseCode!]

  """The spend rule attached at the time of the event."""
  spendRule: CVVSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The result of applying a street address spend rule to an event."""
type StreetAddressSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The AVS response codes of the event."""
  valuesTested: [AVSResponseCode!]

  """The spend rule attached at the time of the event."""
  spendRule: StreetAddressSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The result of applying an amount limit spend rule to an event."""
type AmountLimitSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested amounts of the event."""
  valuesTested: [Amount!]

  """The spend rule attached at the time of the event."""
  spendRule: AmountLimitSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
The result of applying a point of service category spend rule to an event.
"""
type PointOfServiceCategorySpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested points of service of the event."""
  valuesTested: [PointOfServiceCategory!]

  """The spend rule attached at the time of the event."""
  spendRule: PointOfServiceCategorySpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The result of applying a `DepositAmountLimitSpendRule` to an event."""
type DepositAmountLimitSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested amount of the event."""
  valuesTested: [Amount!]

  """The spend rule attached at the time of the event."""
  spendRule: DepositAmountLimitSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
The result of applying a `DepositProcessingNetworkSpendRule` to an event.
"""
type DepositProcessingNetworkSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `DepositProcessingNetwork` of the event."""
  valuesTested: [DepositProcessingNetwork!]

  """The spend rule attached at the time of the event."""
  spendRule: DepositProcessingNetworkSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
The result of applying a `PostalCodeVerificationSpendRule` to an event.
"""
type PostalCodeVerificationSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `PostalCodeResponseCode` of the event."""
  valuesTested: [PostalCodeResponseCode!]

  """The spend rule attached at the time of the event."""
  spendRule: PostalCodeVerificationSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
The result of applying a `CardTransactionProcessingTypeConditionSpendRule` to an event.
"""
type CardTransactionProcessingTypeConditionSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `CardTransactionProcessingType` of the event."""
  valuesTested: [CardTransactionProcessingType!]

  """The spend rule attached at the time of the event."""
  spendRule: CardTransactionProcessingTypeConditionSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""A container that holds a `SpendRule`."""
type SpendRuleContainer {
  """A Spending Rule."""
  spendRule: SpendRule
}

"""A container that holds a `VelocityRule`."""
type VelocityRuleContainer {
  """A Velocity Rule."""
  velocityRule: VelocityRule
}

"""
The recommendation to `ALLOW` or `BLOCK` an event based on the application of the spend rule.
"""
enum SpendRuleRecommendation {
  """Allow the event."""
  ALLOW

  """Block the event."""
  BLOCK

  """A recommendation could not be determined."""
  NONE
}

"""The Attached Level."""
enum AttachedLevel {
  """UNSPECIFIED"""
  UNSPECIFIED

  """PLATFORM"""
  PLATFORM

  """PRODUCT"""
  PRODUCT

  """CARD"""
  CARD

  """ACCOUNT"""
  ACCOUNT
}

"""
A Spend Control rule that blocks certain account holders during authorization.
"""
type RestrictedAccountHolderSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `RestrictedAccountHolderSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The account holders that are allowed during authorization. This is not used.
  """
  allowed: [ID!]

  """The account holders that are blocked during authorization."""
  blocked: [ID!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The result of applying a `RestrictedAccountHolderSpendRule` to an event.
"""
type RestrictedAccountHolderSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The account holder of the event."""
  valuesTested: [ID!]

  """The spend rule attached at the time of the event."""
  spendRule: RestrictedAccountHolderSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
A Spend Control rule that blocks certain card holders during authorization.
"""
type RestrictedCardHolderSpendRule implements Node & SpendRule {
  """The card holders that are blocked during authorization."""
  blocked: [ID!]

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  Global ID used to reference the `RestrictedCardholderSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The list of revisions for this spend rule."""
  revisions(
    """The cursor to start the page."""
    after: String

    """The number of revisions to return."""
    first: Int = 20
  ): SpendRuleConnection

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The result of applying a `RestrictedCardHolderSpendRule` to an event."""
type RestrictedCardHolderSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The card holder of the event."""
  valuesTested: [ID!]

  """The spend rule attached at the time of the event."""
  spendRule: RestrictedCardHolderSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The details of the `PanEntryModeSpendRule` to be created."""
input CreatePanEntryModeSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The `PanEntryMode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [PanEntryMode!]

  """
  The `PanEntryMode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [PanEntryMode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The details of the `PanEntryModeSpendRule` to be updated."""
input UpdatePanEntryModeSpendRuleInput {
  """The Global ID of the `PanEntryModeSpendRule` to update."""
  spendRuleId: ID!

  """A name for the rule for future reference."""
  name: String

  """
  The `PanEntryMode` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [PanEntryMode!]

  """
  The `PanEntryMode` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [PanEntryMode!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `CardDataInputCapabilitySpendRule` spend rule to create.
"""
input CreateCardDataInputCapabilitySpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The `CardDataInputCapability` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [CardDataInputCapability!]

  """
  The `CardDataInputCapability` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [CardDataInputCapability!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `CardDataInputCapabilitySpendRule` spend rule to update.
"""
input UpdateCardDataInputCapabilitySpendRuleInput {
  """The Global ID of the `CardDataInputCapabilitySpendRule` to update."""
  spendRuleId: ID!

  """A name for the rule for future reference."""
  name: String

  """
  The `CardDataInputCapability` values you want to allow during authorizations.
  
  Min: 1
  Max: 500
  """
  allowed: [CardDataInputCapability!]

  """
  The `CardDataInputCapability` values that will result in declined authorizations.
  
  Min: 1
  Max: 500
  """
  blocked: [CardDataInputCapability!]

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that allows or blocks certain `PanEntryMode` types during authorizations.
"""
type PanEntryModeSpendRule implements Node & SpendRule {
  """Global ID used to reference the `PanEntryModeSpendRule` in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The `PanEntryMode` types that will be allowed during authorizations."""
  allowed: [PanEntryMode!]

  """The `PanEntryMode` types that will result in declined authorizations."""
  blocked: [PanEntryMode!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The result of applying a `PanEntryModeSpendRule` to an event."""
type PanEntryModeSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `PanEntryMode` of the event."""
  valuesTested: [PanEntryMode!]

  """The spend rule attached at the time of the event."""
  spendRule: PanEntryModeSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
A Spend Control rule that allows or blocks certain `CardDataInputCapability` types during authorizations.
"""
type CardDataInputCapabilitySpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `CardDataInputCapabilitySpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The `CardDataInputCapability` types that will be allowed during authorizations.
  """
  allowed: [CardDataInputCapability!]

  """
  The `CardDataInputCapability` types that will result in declined authorizations.
  """
  blocked: [CardDataInputCapability!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The result of applying a `CardDataInputCapabilitySpendRule` to an event.
"""
type CardDataInputCapabilitySpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `CardDataInputCapability` of the event."""
  valuesTested: [CardDataInputCapability!]

  """The spend rule attached at the time of the event."""
  spendRule: CardDataInputCapabilitySpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The details of the `MinimumAmountLimitSpendRule` spend rule to create."""
input CreateMinimumAmountLimitSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """The exact amount to allow for a single authorization."""
  minimumAmount: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MinimumAmountLimitSpendRule` spend rule you want to update.
"""
input UpdateMinimumAmountLimitSpendRuleInput {
  """The Global ID of the `MinimumAmountLimitSpendRule` to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """The exact amount to allow for a single authorization."""
  minimumAmount: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MaximumPercentVarianceOnPseudoBalanceSpendRule` spend rule to create.
"""
input CreateMaximumPercentVarianceOnPseudoBalanceSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The percentage over the account's original balance that is permitted for additional spending.
  """
  percentVariance: Int!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MaximumPercentVarianceOnPseudoBalanceSpendRule` spend rule you want to update.
"""
input UpdateMaximumPercentVarianceOnPseudoBalanceSpendRuleInput {
  """
  The Global ID of the `MaximumPercentVarianceOnPseudoBalanceSpendRule` to update.
  """
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The percentage over the account's original balance that is permitted for additional spending.
  """
  percentVariance: Int!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MaximumAmountVarianceOnPseudoBalanceSpendRule` spend rule to create.
"""
input CreateMaximumAmountVarianceOnPseudoBalanceSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The `Amount` over the account's original balance that is permitted for additional spending.
  """
  amountVariance: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MaximumAmountVarianceOnPseudoBalanceSpendRule` spend rule you want to update.
"""
input UpdateMaximumAmountVarianceOnPseudoBalanceSpendRuleInput {
  """
  The Global ID of the `MaximumAmountVarianceOnPseudoBalanceSpendRule` to update.
  """
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The `Amount` over the account's original balance that is permitted for additional spending.
  """
  amountVariance: AmountInput!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that only allows transactions for a specified amount.
"""
type MinimumAmountLimitSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `MinimumAmountLimitSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The exact amount to allow for a single transaction."""
  minimumAmount: Amount

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The result of applying a `MinimumAmountLimitSpendRule` to an event."""
type MinimumAmountLimitSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `Amount` of the event."""
  valuesTested: [Amount!]

  """The spend rule attached at the time of the event."""
  spendRule: MinimumAmountLimitSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
A Spend Control rule that allows for spending up to a specified percentage over the account's original balance.
"""
type MaximumPercentVarianceOnPseudoBalanceSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `MaximumPercentVarianceOnPseudoBalanceSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The percentage over the account's original balance that is permitted for additional spending.
  """
  percentVariance: Int

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The result of applying a `MaximumPercentVarianceOnPseudoBalanceSpendRule` to an event.
"""
type MaximumPercentVarianceOnPseudoBalanceSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `Amount` of the event."""
  valuesTested: [Amount!]

  """The spend rule attached at the time of the event."""
  spendRule: MaximumPercentVarianceOnPseudoBalanceSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
A Spend Control rule that allows for spending up to a specified `Amount` above the account's original balance'.
"""
type MaximumAmountVarianceOnPseudoBalanceSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `MaximumAmountVarianceOnPseudoBalanceSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The `Amount` over the account's original balance that is permitted for additional spending.
  """
  amountVariance: Amount

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The result of applying a `MaximumAmountVarianceOnPseudoBalanceSpendRule` to an event.
"""
type MaximumAmountVarianceOnPseudoBalanceSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The tested `Amount` of the event."""
  valuesTested: [Amount!]

  """The spend rule attached at the time of the event."""
  spendRule: MaximumAmountVarianceOnPseudoBalanceSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
The details of the `DaysWithinCardCreateDateSpendRule` spend rule to create.
"""
input CreateDaysWithinCardCreateDateSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The maximum number of days elapsed since the creation of the `PaymentCard` before transactions are declined.
  """
  maximumDaysCardCreated: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `DaysWithinCardCreateDateSpendRule` spend rule you want to update.
"""
input UpdateDaysWithinCardCreateDateSpendRuleInput {
  """The Global ID of the `DaysWithinCardCreateDateSpendRule` to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The maximum number of days elapsed since the creation of the `PaymentCard` before transactions are declined.
  """
  maximumDaysCardCreated: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `DaysWithinAccountCreateDateSpendRule` spend rule to create.
"""
input CreateDaysWithinAccountCreateDateSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The maximum number of days since the creation of the `FinancialAccount` before transactions are declined.
  """
  maximumDaysAccountCreated: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `DaysWithinAccountCreateDateSpendRule` spend rule you want to update.
"""
input UpdateDaysWithinAccountCreateDateSpendRuleInput {
  """The Global ID of the `DaysWithinAccountCreateDateSpendRule` to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The maximum number of days since the creation of the `FinancialAccount` before transactions are declined.
  """
  maximumDaysAccountCreated: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that blocks transactions if the `PaymentCard` was created more than a specified number of days ago.
"""
type DaysWithinCardCreateDateSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `DaysWithinCardCreateDateSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The maximum number of days elapsed since the creation of the `PaymentCard` before transactions are declined.
  """
  maximumDaysCardCreated: UnsignedInt

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The result of applying a `DaysWithinCardCreateDateSpendRule` to an event.
"""
type DaysWithinCardCreateDateSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """
  The number of days since the `PaymentCard` was created at the time of the event.
  """
  daysCardCreated: UnsignedInt

  """The spend rule attached at the time of the event."""
  spendRule: DaysWithinCardCreateDateSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
A Spend Control rule that blocks transactions if the card's `FinancialAccount` was created more than a specified number of days ago.
"""
type DaysWithinAccountCreateDateSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `DaysWithinAccountCreateDateSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The maximum number of days since the creation of the `FinancialAccount` before transactions are declined.
  """
  maximumDaysAccountCreated: UnsignedInt

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The result of applying a `DaysWithinAccountCreateDateSpendRule` to an event.
"""
type DaysWithinAccountCreateDateSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """
  The number of days since the `FinancialAccount` was created at the time of the event.
  """
  daysAccountCreated: UnsignedInt

  """The spend rule attached at the time of the event."""
  spendRule: DaysWithinAccountCreateDateSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The details of the `VisaRiskScoreSpendRule` spend rule to create."""
input CreateVisaRiskScoreSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The maximum Visa Risk Score allowed for a transaction before transaction is declined.
  
  **Minimum:** 0
  **Maximum:** 99
  """
  maximumVisaRiskScore: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `VisaRiskScoreSpendRule` spend rule you want to update.
"""
input UpdateVisaRiskScoreSpendRuleInput {
  """The Global ID of the `VisaRiskScoreSpendRule` to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The maximum Visa Risk Score allowed for a transaction before transaction is declined.
  
  **Minimum:** 0
  **Maximum:** 99
  """
  maximumVisaRiskScore: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that blocks transactions if the Visa Risk Score is above a configured threshold.
"""
type VisaRiskScoreSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `VisaRiskScoreSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The maximum Visa Risk Score allowed for a transaction before transaction is declined.
  """
  maximumVisaRiskScore: UnsignedInt

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The result of applying a `VisaRiskScoreSpendRule` to an event."""
type VisaRiskScoreSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The Visa Risk Score for this transaction."""
  visaRiskScore: UnsignedInt

  """The spend rule attached at the time of the event."""
  spendRule: VisaRiskScoreSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""
The details of the `MastercardFraudScoreSpendRule` spend rule to create.
"""
input CreateMastercardFraudScoreSpendRuleInput {
  """A name for the rule for future reference."""
  name: String!

  """
  The maximum Mastercard Fraud Score allowed for a transaction before transaction is declined.
  
  **Minimum:** 0
  **Maximum:** 999
  """
  maximumMastercardFraudScore: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
The details of the `MastercardFraudScoreSpendRule` spend rule you want to update.
"""
input UpdateMastercardFraudScoreSpendRuleInput {
  """The Global ID of the `MastercardFraudScoreSpendRule` to update."""
  spendRuleId: ID!

  """The name for the rule for future reference."""
  name: String

  """
  The maximum Mastercard Fraud Score allowed for a transaction before transaction is declined.
  **Minimum:** 0
  **Maximum:** 999
  """
  maximumMastercardFraudScore: UnsignedInt!

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""
A Spend Control rule that blocks transactions if the Mastercard Fraud Score is above a configured threshold.
"""
type MastercardFraudScoreSpendRule implements Node & SpendRule {
  """
  Global ID used to reference the `MastercardFraudScoreSpendRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The maximum Mastercard Fraud Score allowed for a transaction before transaction is declined.
  """
  maximumMastercardFraudScore: UnsignedInt

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The date and time, in ISO 8601 format, the spend rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the spend rule was last updated.
  """
  updatedAt: String

  """The list of revisions for this spend rule."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): SpendRuleConnection

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The result of applying a `MastercardFraudScoreSpendRule` to an event."""
type MastercardFraudScoreSpendRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The Mastercard Fraud Score for this transaction."""
  mastercardFraudScore: UnsignedInt

  """The spend rule attached at the time of the event."""
  spendRule: MastercardFraudScoreSpendRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""The details of the `VelocityRule` to create"""
input CreateVelocityRuleInput {
  """The name of the `VelocityRule`"""
  name: String!

  """
  The following `cumulativeRule` must be a rule that represents a cumulative amount.
  When the all of the conditions of the non-cumulative SpendRules are true this amount will increment.
  """
  cumulativeRule: AttachSpendRuleInput!

  """
  The SpendRules to attach to `VelocityRule`. Note: Up to 3 allowed, 1-2 recommended
  When all of the compounded SpendRules below are true then the transaction amount will be added to the cumulative sum.
  """
  spendRules: [AttachSpendRuleInput!]

  """The velocity cadence time frame"""
  velocityRuleWindow: VelocityRuleWindow!

  """
  Optional `VelocityConstraintLevel` at which the cumulative spend rule will be evaluated.
  
  Defaults to `CARD` when `VelocityRule` is directly attached to a card
  All other times defaults to `ACCOUNT`
  """
  velocityConstraintLevelOverride: VelocityConstraintLevel

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""A enum of `VelocityRule` evaluation windows"""
enum VelocityRuleWindow {
  """
  A single calendar day. UTC start to UTC end 00:00:00 UTC to 11:59.59:00 UTC
  """
  DAILY

  """A calendar week. UTC start of week to UTC end of week."""
  WEEKLY

  """A calendar month. UTC start of month to UTC end of month."""
  MONTHLY

  """
  90 calendar days moving window. One calendar day is from UTC start of day to UTC end of day.
  """
  NINETY_DAYS

  """A calendar year. UTC start of year to UTC end of year."""
  YEARLY

  """
  Per transaction (associated velocity rule is evaluated on every transaction individually).
  """
  PER_TRANSACTION

  """
  A cooldown period of one minute. The associated velocity rule will only allow transactions that comply with a
  one-minute cooldown window. For example, with a count rule of 1, the cardholder must wait one minute between
  transactions.
  """
  COOLDOWN_MINUTE

  """
  A cooldown period of one hour. The associated velocity rule will only allow transactions that comply with a
  one-hour cooldown window. For example, with a count rule of 1, the cardholder must wait one hour between
  transactions.
  """
  COOLDOWN_HOUR
}

"""The level at which a cumulative rule will be evaluated."""
enum VelocityConstraintLevel {
  """
  This constraint level will evaluate the associated cumulative rule at the card level.
  """
  CARD

  """
  This constraint level will evaluate the associated cumulative rule at the account level.
  """
  ACCOUNT

  """
  This constraint level will evaluate the associated cumulative rule at the card level.
  If the card is reissued all balances will transfer to new card
  """
  CARD_LINEAGE

  """
  This constraint level will evaluate the associated cumulative rule at the platform level.
  """
  PLATFORM

  """
  This constraint level will evaluate the associated cumulative rule at the product level.
  """
  PRODUCT
}

"""
A `VelocityRule` is window constrained authorization control that is composed of at most 3 SpendRules and 1 cumulative `SpendRule` (e.g. `AmountLimitSpendRule`)
"""
type VelocityRule implements Node {
  """Global ID used to reference the `VelocityRule` in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The evaluation window of a `VelocityRule`"""
  velocityRuleWindow: VelocityRuleWindow

  """The cumulative rule attached to the `VelocityRule`"""
  cumulativeRule: SpendRule

  """The SpendRules attached to the `VelocityRule`"""
  spendRules: [SpendRule]

  """
  The current version of the rule. Specific versions can be attached and detached from CardProducts and PaymentCards.
  """
  version(filterBy: String): String

  """The date and time, in ISO 8601 format, the `VelocityRule` was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the `VelocityRule` was last updated.
  """
  updatedAt: String

  """The list of revisions for this `VelocityRule`."""
  revisions(
    """The number of revisions to return."""
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): VelocityRuleConnection

  """
  Optional `VelocityConstraintLevel` at which the cumulative spend rule will be evaluated.
  
  Defaults to `CARD` when `VelocityRule` is directly attached to a card
  All other times defaults to `ACCOUNT`
  """
  velocityConstraintLevelOverride: VelocityConstraintLevel

  """The `ApplicableRuleUserType` for which the rule will be evaluated."""
  userType: ApplicableRuleUserType
}

"""The return types when creating a new `VelocityRule`."""
union CreateVelocityRulePayload = VelocityRule | UserError | AccessDeniedError

"""The details of the `VelocityRule` to attach to the `PaymentCard`"""
input AttachPaymentCardVelocityRuleInput {
  """The Global ID of the `PaymentCard` to attach the `VelocityRule`."""
  paymentCardId: ID!

  """The details of the `VelocityRule` to attach to the `PaymentCard`."""
  velocityRule: VelocityRuleInput!
}

"""The return types when attaching a `VelocityRule` to a `PaymentCard`."""
union AttachPaymentCardVelocityRulePayload = VelocityRuleAssociation | UserError | AccessDeniedError

"""The types that a `VelocityRule` could be associated to."""
union VelocityRuleAssociatedType = PaymentCard | CardProduct

"""A `VelocityRule` that is or was attached."""
type VelocityRuleAssociation {
  """The `VelocityRule`"""
  velocityRule: VelocityRule

  """The name assigned to the rule."""
  name: String

  """The associated entity the `VelocityRule` is attached to"""
  associatedTo: VelocityRuleAssociatedType

  """
  The current version of the rule. Specific versions can be attached and detached.
  """
  version: String

  """The date and time, in ISO 8601 format, the `VelocityRule` was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the `VelocityRule` was last updated.
  """
  updatedAt: String
}

"""The details of the `VelocityRule`"""
input VelocityRuleInput {
  """The Global ID of the `VelocityRule`."""
  velocityRuleId: ID!

  """
  The specific `VelocityRule` version. If not provided will use the latest
  """
  version: String
}

"""The details of the `VelocityRule` to detach from the `PaymentCard`"""
input DetachPaymentCardVelocityRuleInput {
  """The Global ID of the `PaymentCard` connected to the `VelocityRule`."""
  paymentCardId: ID!

  """
  The details of the `VelocityRule` to detach from the `PaymentCard`.
  
  NOTE: version does not matter here
  """
  velocityRule: VelocityRuleInput!
}

"""The return types when detaching a `VelocityRule` from a `PaymentCard`."""
union DetachPaymentCardVelocityRulePayload = VelocityRuleAssociation | UserError | AccessDeniedError

"""The details of the `VelocityRule` to attach to the `CardProduct`"""
input AttachCardProductVelocityRuleInput {
  """The Global ID of the `CardProduct` to attach the `VelocityRule`."""
  cardProductId: ID!

  """The details of the `VelocityRule` to attach to the `CardProduct`."""
  velocityRule: VelocityRuleInput!
}

"""The return types when attaching a `VelocityRule` to a `CardProduct`."""
union AttachCardProductVelocityRulePayload = VelocityRuleAssociation | UserError | AccessDeniedError

"""The details of the `VelocityRule` to detach from the `CardProduct`"""
input DetachCardProductVelocityRuleInput {
  """The Global ID of the `CardProduct` connected to the `VelocityRule`."""
  cardProductId: ID!

  """The details of the `VelocityRule` to detach from the `CardProduct`."""
  velocityRule: VelocityRuleInput!
}

"""The return types when detaching a `VelocityRule` from a `CardProduct`."""
union DetachCardProductVelocityRulePayload = VelocityRuleAssociation | UserError | AccessDeniedError

"""The connection type for `VelocityRule`."""
type VelocityRuleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VelocityRuleEdge!]
}

"""The edge type for a `VelocityRule`."""
type VelocityRuleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `VelocityRule`."""
  node: VelocityRule
}

"""DEPRECATED: The balance details of a `VelocityRule`"""
type VelocityRuleBalance {
  """The current amount balance for the `VelocityRule`"""
  currentBalance: Amount

  """The remaining amount balance for the `VelocityRule`"""
  remainingBalance: Amount

  """Indicates the `VelocityRule` the balance is associated to."""
  velocityRule: VelocityRule
}

"""The return types when getting a `VelocityRule` balance."""
union VelocitySpendRuleBalance = VelocitySpendRuleAmountBalance | VelocitySpendRuleCountBalance

"""The amount balance details of a `VelocityRule`"""
type VelocitySpendRuleAmountBalance {
  """The current amount balance for the `VelocityRule`"""
  currentBalance: Amount

  """The remaining amount balance for the `VelocityRule`"""
  remainingBalance: Amount

  """The computed current amount balance for the `VelocityRule`"""
  computedCurrentBalance: Amount

  """The computed remaining amount balance for the `VelocityRule`"""
  computedRemainingBalance: Amount

  """The date and time, in ISO 8601 format, the balance was last updated."""
  asOfDate: String

  """Indicates the `VelocityRule` the balance is associated to."""
  velocityRule: VelocityRule

  """The attached level. (Platform, Product, Card)"""
  attachedLevel: AttachedLevel
}

"""The count balance details of a `VelocityRule`"""
type VelocitySpendRuleCountBalance {
  """The current count balance for the `VelocityRule`"""
  currentCountBalance: Int

  """The remaining count balance for the `VelocityRule`"""
  remainingCountBalance: Int

  """The computed current count balance for the `VelocityRule`"""
  computedCurrentCountBalance: Int

  """The computed remaining count balance for the `VelocityRule`"""
  computedRemainingCountBalance: Int

  """The date and time, in ISO 8601 format, the balance was last updated."""
  asOfDate: String

  """Indicates the `VelocityRule` the balance is associated to."""
  velocityRule: VelocityRule

  """The attached level. (Platform, Product, Card)"""
  attachedLevel: AttachedLevel
}

"""The result of applying an `VelocityRule` to an event."""
type VelocityRuleResult implements SpendRuleResult {
  """
  The recommendation to `ALLOW` or `BLOCK` an event based on the result of the rule.
  """
  recommendation: SpendRuleRecommendation

  """A message describing the result."""
  message: String

  """The `VelocityRule` attached at the time of the event."""
  velocityRule: VelocityRule

  """The attached level."""
  attachedLevel: AttachedLevel
}

"""A `CheckRule` that will put a check on hold if the amount is exceeded."""
type AmountLimitCheckRule implements Node {
  """Global ID used to reference the `AmountLimitCheckRule` in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum amount to allow for a check."""
  maximumAmount: Amount

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The list of revisions for this check rule."""
  revisions(
    """
    The number of revisions to return.
    Default `first` is set to `20`.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): CheckRuleConnection

  """The date and time, in ISO 8601 format, the rule was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the rule was last updated."""
  updatedAt: String
}

"""
A `CheckRule` that will put a check on hold if the number of checks is exceeded.
"""
type CountLimitCheckRule implements Node {
  """Global ID used to reference the `CountLimitCheckRule` in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum number of checks to allow."""
  maximumCount: Int

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The list of revisions for this check rule."""
  revisions(
    """
    The number of revisions to return.
    Default `first` is set to `20`.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): CheckRuleConnection

  """The date and time, in ISO 8601 format, the rule was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the rule was last updated."""
  updatedAt: String
}

"""The connection type for `CheckRule`."""
type CheckRuleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CheckRuleEdge!]
}

"""The edge type for a `CheckRule`."""
type CheckRuleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!
}

"""
A `RuleCollection` is a set of `SpendRule`, `TransferRule`, `InterFinancialAccountTransferRule`, `RiskRule`,
`VelocityRule`, `VelocityRiskRule`, `VelocityTransferRule`, and/or `VelocityInterFinancialAccountTransferRule`
that can be used as a template to attach to a `PaymentCard`, `FinancialAccount`, `CardProduct` or `Platform`
in 1 operation
"""
type RuleCollection implements Node {
  """Global ID used to reference the `RuleCollection`."""
  id: ID!

  """The rule collection version."""
  version: String

  """The name assigned to the `RuleCollection`."""
  name: String

  """The list of `SpendRule` objects in this `RuleCollection`."""
  spendRules: [SpendRule!]

  """
  The list of `InterFinancialAccountTransferRule` objects in this `RuleCollection`
  """
  interFinancialAccountTransferRules: [InterFinancialAccountTransferRule!]

  """
  The list of `VelocityInterFinancialAccountTransferRule` objects in this `RuleCollection`
  """
  velocityInterFinancialAccountTransferRules: [VelocityInterFinancialAccountTransferRule!]

  """
  The list of `VelocityRule` objects in this `RuleCollection`.
  VelocityRules are also known as VelocitySpendRules
  Note: Up to 5 allowed
  """
  velocitySpendRules: [VelocityRule!]

  """
  The date and time, in ISO 8601 format, the rule collection was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the rule collection was last updated.
  """
  updatedAt: String
}

"""
A `RuleCollectionRevision` is a specific version of a `RuleCollection`.
"""
type RuleCollectionRevision implements Node {
  """Global ID used to reference the `RuleCollectionRevision`."""
  id: ID!

  """
  Global ID used to reference the `RuleCollection` that this revision is of.
  """
  publicRuleCollectionId: ID!

  """The rule collection version."""
  version: String

  """The name assigned to the `RuleCollectionRevision`."""
  name: String

  """The list of `SpendRule` objects in this `RuleCollectionRevision`."""
  spendRules: [SpendRule!]

  """
  The list of `InterFinancialAccountTransferRule` objects in this `RuleCollectionRevision`
  """
  interFinancialAccountTransferRules: [InterFinancialAccountTransferRule!]

  """
  The list of `VelocityInterFinancialAccountTransferRule` objects in this `RuleCollectionRevision`
  """
  velocityInterFinancialAccountTransferRules: [VelocityInterFinancialAccountTransferRule!]

  """
  The list of `VelocityRule` objects in this `RuleCollectionRevision`.
  VelocityRules are also known as VelocitySpendRules
  Note: Up to 5 allowed
  """
  velocitySpendRules: [VelocityRule!]

  """
  The date and time, in ISO 8601 format, the rule collection revision was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the rule collection revision was last updated.
  """
  updatedAt: String
}

"""The transaction processing type for a card event"""
enum CardTransactionProcessingType {
  """Goods and services. Category: `DEBIT`."""
  GOODS_AND_SERVICES

  """Cash. Category: `DEBIT`."""
  CASH

  """Adjustment. Category: `DEBIT`."""
  ADJUSTMENT_DEBIT

  """Goods and services with cash disbursement. Category: `DEBIT`."""
  GOODS_AND_SERVICES_WITH_CASH_DISBURSEMENT

  """Non-cash financial for funding. Category: `DEBIT`."""
  NON_CASH_FINANCIAL_FOR_FUNDING

  """Quasi-Cash and scrip. Category: `DEBIT`."""
  QUASI_CASH_AND_SCRIP

  """Funds withdrawal for electronic purse. Category: `DEBIT`."""
  FUNDS_WITHDRAWAL_FOR_ELECTRONIC_PURSE

  """Payment to another party. Category: `DEBIT`."""
  PAYMENT_TO_ANOTHER_PARTY

  """Payment debit (P2P). Category: `DEBIT`."""
  PAYMENT_DEBIT

  """Returns. Category: `CREDIT`."""
  RETURNS

  """Deposits/Deposit payments. Category: `CREDIT`."""
  DEPOSITS

  """Adjustment. Category: `CREDIT`."""
  ADJUSTMENT_CREDIT

  """Payment from third party. Category: `CREDIT`."""
  PAYMENT_FROM_THIRD_PARTY

  """Payment credit (P2P). Category: `CREDIT`."""
  PAYMENT_CREDIT

  """Payment enclosed. Category: `CREDIT`."""
  PAYMENT_ENCLOSED

  """Available funds inquiry. Category: `INQUIRY_SERVICE`."""
  AVAILABLE_FUNDS_INQUIRY

  """Balance inquiry. Category: `INQUIRY_SERVICE`."""
  BALANCE_INQUIRY

  """Account Verification. Category: `INQUIRY_SERVICE`."""
  ACCOUNT_VERIFICATION

  """
  Cardholder accounts transfer. Category: `TRANSFER_PAYMENT_TRANSFER_SERVICE`.
  """
  CARDHOLDER_ACCOUNTS_TRANSFER

  """PIN Unblock. Category: `PRIVATE_USE`."""
  PIN_UNBLOCK

  """PIN change. Category: `PRIVATE_USE`."""
  PIN_CHANGE

  """Notification to bank. Category: `PRIVATE_USE`."""
  NOTIFICATION_TO_BANK

  """Load funds onto a prepaid card. Category: `CREDIT`."""
  LOAD_OF_PREPAID_OR_STORED_VALUE_CARD

  """Used to collect miscellaneous fees. Category: `DEBIT`."""
  FEE_COLLECTION_DEBIT

  """
  Enables funds to be credited to account numbers for a purpose other than refunding a purchase. Category: `CREDIT`.
  """
  ORIGINAL_CREDIT

  """Used to remit miscellaneous fees. Category: `CREDIT`."""
  FUNDS_DISBURSEMENT_CREDIT

  """
  Request to provide transaction history by ATM. Category: `INQUIRY_SERVICE`.
  """
  ATM_MINI_STATEMENT

  """Eligibility inquiry. Category: `INQUIRY_SERVICE`."""
  ELIGIBILITY_INQUIRY
}

"""
The return type for finding inter financial account transfer rule balances
"""
union VelocityInterFinancialAccountTransferRuleBalanceConnectionPayload = VelocityInterFinancialAccountTransferRuleBalanceConnection

"""
The connection type for `VelocityInterFinancialAccountTransferRuleBalance`.
"""
type VelocityInterFinancialAccountTransferRuleBalanceConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VelocityInterFinancialAccountTransferRuleBalanceEdge!]
}

"""
The edge type for a `VelocityInterFinancialAccountTransferRuleBalance`.
"""
type VelocityInterFinancialAccountTransferRuleBalanceEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `VelocityInterFinancialAccountTransferRuleBalance`."""
  node: VelocityInterFinancialAccountTransferRuleBalance
}

"""The balance, tracking either amount or count."""
union VelocityInterFinancialAccountTransferRuleBalance = VelocityInterFinancialAccountTransferRuleAmountBalance | VelocityInterFinancialAccountTransferRuleCountBalance

"""
The amount balance details of an amount `VelocityInterFinancialAccountTransferRule`.
"""
type VelocityInterFinancialAccountTransferRuleAmountBalance {
  """
  The current balance for the `VelocityInterFinancialAccountTransferRule`
  """
  currentBalance: Amount

  """
  The remaining balance for the `VelocityInterFinancialAccountTransferRule`
  """
  remainingBalance: Amount

  """
  The computed current balance for the `VelocityInterFinancialAccountTransferRule`
  """
  computedCurrentBalance: Amount

  """
  The computed remaining balance for the `VelocityInterFinancialAccountTransferRule`
  """
  computedRemainingBalance: Amount

  """The date and time, in ISO 8601 format, the balance was last updated."""
  asOfDate: String

  """
  Indicates the `VelocityInterFinancialAccountTransferRule` the balance is associated to.
  """
  velocityInterFinancialAccountTransferRule: VelocityInterFinancialAccountTransferRule
}

"""
The count balance details of a count `VelocityInterFinancialAccountTransferRule`.
"""
type VelocityInterFinancialAccountTransferRuleCountBalance {
  """The current count for the `VelocityInterFinancialAccountTransferRule`"""
  currentCount: UnsignedInt

  """
  The remaining count for the `VelocityInterFinancialAccountTransferRule`
  """
  remainingCount: UnsignedInt

  """
  The computed current count for the `VelocityInterFinancialAccountTransferRule`
  """
  computedCurrentCount: UnsignedInt

  """
  The computed remaining count for the `VelocityInterFinancialAccountTransferRule`
  """
  computedRemainingCount: UnsignedInt

  """The date and time, in ISO 8601 format, the balance was last updated."""
  asOfDate: String

  """
  Indicates the `VelocityInterFinancialAccountTransferRule` the balance is associated to.
  """
  velocityInterFinancialAccountTransferRule: VelocityInterFinancialAccountTransferRule
}

"""A enum of `FeedbackCode` codes"""
enum FeedbackCode {
  """This code will tell the risk system to override the rule results."""
  OVERRIDE_RULE_RESULTS_TO_ACCEPTED

  """This code will indicate that the override was denied."""
  OVERRIDE_RULE_RESULTS_TO_DENIED
}

"""
The result of a `InterFinancialAccountTransferRule` execution in the risk layer.
"""
interface InterFinancialAccountTransferRuleResult {
  """A status representing the result of the rule’s evaluation."""
  status: InterFinancialAccountTransferRuleResultStatus

  """A message describing the result."""
  message: String
}

"""A enum of `InterFinancialAccountTransferRuleResult` statuses"""
enum InterFinancialAccountTransferRuleResultStatus {
  """The rule passed"""
  PASSED

  """The rule failed"""
  FAILED

  """The rule was not ran."""
  NOT_RAN

  """No decision was made for the rule"""
  NO_DECISION

  """The rule was flagged with a warning"""
  WARNING

  """The rule had a unknown failure."""
  EXCEPTION
}

"""Result of `AmountLimitInterFinancialAccountTransferRule`"""
type AmountLimitInterFinancialAccountTransferRuleResult implements InterFinancialAccountTransferRuleResult {
  """A status representing the result of the rule’s evaluation."""
  status: InterFinancialAccountTransferRuleResultStatus

  """A message describing the result."""
  message: String

  """Amount limit inter financial account transfer rule"""
  interFinancialAccountTransferRule: AmountLimitInterFinancialAccountTransferRule
}

"""Result of `TransferPurposeInterFinancialAccountTransferRule`"""
type TransferPurposeInterFinancialAccountTransferRuleResult implements InterFinancialAccountTransferRuleResult {
  """A status representing the result of the rule’s evaluation."""
  status: InterFinancialAccountTransferRuleResultStatus

  """A message describing the result."""
  message: String

  """Transfer purpose inter financial account transfer rule"""
  interFinancialAccountTransferRule: TransferPurposeInterFinancialAccountTransferRule
}

"""
The result of applying a `VelocityInterFinancialAccountTransferRule` to an event.
"""
type VelocityInterFinancialAccountTransferRuleResult implements InterFinancialAccountTransferRuleResult {
  """A status representing the result of the rule’s evaluation."""
  status: InterFinancialAccountTransferRuleResultStatus

  """A message describing the result."""
  message: String

  """
  The `VelocityInterFinancialAccountTransferRule` attached at the time of the event.
  """
  velocityInterFinancialAccountTransferRule: VelocityInterFinancialAccountTransferRule

  """
  This field will be populated if an override is attempted. It will indicate if the override was allowed or denied.
  """
  feedbackCode: FeedbackCode
}

"""
The result of applying a `WatchlistInterFinancialAccountTransferRule` to an event.
"""
type WatchlistInterFinancialAccountTransferRuleResult implements InterFinancialAccountTransferRuleResult {
  """A status representing the result of the rule’s evaluation."""
  status: InterFinancialAccountTransferRuleResultStatus

  """A message describing the result."""
  message: String

  """
  The `WatchlistInterFinancialAccountTransferRule` attached at the time of the event.
  """
  interFinancialAccountTransferRule: WatchlistInterFinancialAccountTransferRule

  """
  This field will be populated if an override is attempted. It will indicate if the override was allowed or denied.
  """
  feedbackCode: FeedbackCode
}

"""
The input type for viewing `InstallmentEligibilityForTransactionEvents`.
"""
input InstallmentEligibilityForTransactionEventsInput {
  """
  A list of globally unique identifiers for the relevant `TransactionEvent`s. Must be `ClearingEvent`s or `AuthorizationAndClearEvent`s. Must be between 1 and 20 identifiers, inclusive.
  """
  cardTransactionEventIds: [ID!]!
}

"""
Types which can be returned when querying `InstallmentEligibilityForTransactionEvents`.
"""
union InstallmentEligibilityForTransactionEventsPayload = InstallmentEligibilityForTransactionEvents | UserError | AccessDeniedError

"""The input type for viewing `InstallmentOffersForTransactionEvent`."""
input InstallmentOffersForTransactionEventInput {
  """
  The globally unique identifier for the relevant `TransactionEvent`. Must be a `ClearingEvent` or an `AuthorizationAndClearEvent`.
  """
  cardTransactionEventId: ID!
}

"""
Types which can be returned when querying `InstallmentOffersForTransaction`.
"""
union InstallmentOffersForTransactionEventPayload = InstallmentOffersForTransactionEvent | UserError | AccessDeniedError

"""
Input for activating an `InstallmentAgreement` for a `Transaction` by providing a `TransactionEvent`.
"""
input ActivateInstallmentAgreementForTransactionEventInput {
  """
  The `AuthorizationAndClearEvent` or `ClearingEvent` associated with the `Transaction` to convert into installments.
  """
  cardTransactionEventId: ID!

  """
  The unique identifier for the `CreditPlan` to use to convert this `Transaction` into installments.
  """
  creditPlanId: ID!
}

"""
Types which can be returned when converting a `Transaction` into an `InstallmentAgreement`.
"""
union ActivateInstallmentAgreementForTransactionEventPayload = InstallmentAgreement | UserError | AccessDeniedError

"""Input for attaching a fee to a `CreditPlan`."""
input AttachFeeToCreditPlanInput {
  """The fee configuration to attach to this `CreditPlan`."""
  fee: CreditPlanFeeInput

  """
  The unique identifier for the `CreditPlan` to attach this `FeeSchedule` to. This must be of `CreditBalanceType` `INSTALLMENT`.
  """
  creditPlanId: ID!
}

"""
Types which can be returned when attaching a `FeeSchedule` to a `CreditPlan`.
"""
union AttachFeeToCreditPlanPayload = CreditPlan | UserError | AccessDeniedError

"""
Create a `CreditPlan` for a `CardProduct` based on a `CreditPlanTemplate`.
"""
input CreateCardProductCreditPlanInput {
  """
  The name for this `CreditPlan`. Supports up to 255 alphanumeric characters. Does not need to be unique.
  """
  name: String!

  """
  The id for the `CreditPlanTemplate` to use when creating this `CreditPlan`. For plans with a `CreditBalanceType` of `INSTALLMENT`, please use `createCardProductInstallmentCreditPlan`.
  """
  creditPlanTemplateId: ID!

  """The id for the `CardProduct` to use when creating this `CreditPlan`."""
  productId: ID!

  """
  The percentage of the `FinancialAccount`'s credit limit that will be available for this `CreditPlan`. Must be an integer value between 0 and 100 inclusive.
  """
  percentageOfCreditLimit: UnsignedInt!

  """
  The interest rate (APR) to apply by default for this `CreditPlan`. Must be a positive floating point number with up to 3 digit precision after the decimal point.
  """
  defaultApr: Float!
}

"""
Types which can be returned when creating a `CreditPlan` for a `CardProduct`.
"""
union CreateCardProductCreditPlanPayload = CreditPlan | UserError | AccessDeniedError

"""
Create a `CreditPlan` for a `CardProduct` with a `BalanceType` of `INSTALLMENT`, based on a `CreditPlanTemplate`.
"""
input CreateCardProductInstallmentCreditPlanInput {
  """
  The name for this `CreditPlan`. Supports up to 255 alphanumeric characters. Does not need to be unique.
  """
  name: String!

  """
  The id for the `CreditPlanTemplate` to use when creating this `CreditPlan`. Must have a `CreditBalanceType` of `INSTALLMENT`.
  """
  creditPlanTemplateId: ID!

  """The id for the `CardProduct` to use when creating this `CreditPlan`."""
  productId: ID!

  """
  The minimum cleared `Amount` a `Transaction` can have to be eligible to convert into installments. Optional; if included, will be validated against the provided `CreditPlanTemplate`.
  """
  minimumPrincipalAmount: AmountInput

  """
  The maximum cleared `Amount` a `Transaction` can have to be eligible to convert into installments. Optional; if included, will be validated against the provided `CreditPlanTemplate`.
  """
  maximumPrincipalAmount: AmountInput

  """
  The number of periods for an `InstallmentAgreement` based on this `CreditPlan`.
  """
  numberOfInstallmentPeriods: UnsignedInt!

  """The fee configuration for this `CreditPlan`."""
  fee: CreditPlanFeeInput
}

"""
The input type for `CreditPlan` fee configuration. Currently only used for `CreditPlan`s of `CreditBalanceType` `INSTALLMENT`.
"""
input CreditPlanFeeInput {
  """The identifier for the `FeeSchedule` to attach to the `CreditPlan`."""
  scheduleId: ID
}

"""
Types which can be returned when creating a `CreditPlan` with `CreditBalanceType` of `INSTALLMENT` for a `CardProduct`.
"""
union CreateCardProductInstallmentCreditPlanPayload = CreditPlan | UserError | AccessDeniedError

"""
Input fields for shifting the current statement period backward and aging the Financial Account.
"""
input SimulateBackwardShiftAndAgeCurrentFinancialAccountStatementPeriodInput {
  """`FinancialAccount` id"""
  financialAccountId: ID!

  """The number of billing cycles to shift the current statement backward."""
  numberOfCyclesToShiftCurrentStatementBackward: UnsignedInt!
}

"""Types which can be returned for simulating account aging."""
union SimulateFinancialAccountAgingPayload = FinancialAccount | AccessDeniedError | UserError

"""
The input type for creating a revolving `CardProductCreditConfiguration`
"""
input CreateRevolvingCreditCardProductConfigurationInput {
  """The globally unique id for the `CreditProduct`"""
  cardProductId: ID!

  """
  The input type for the account aging configuration available on a `CardProduct`. For example, the number of days until a payment is due, and until an account is
  """
  accountAgingConfiguration: CreditAccountAgingProductConfigurationInput!

  """
  The input type for the minimum payment configuration available on a `CardProduct`. For example, whether the minimum payment includes the past due amount, interest, and fees.
  """
  minimumPaymentConfiguration: CreditMinimumPaymentCardProductConfigurationInput!

  """
  The billing statement configuration available on a `CardProduct`. Required for `Revolving` credit `CardProduct`s.
  """
  billingCycleConfiguration: CreditBillingCycleCardProductConfigurationInput!
}

"""The input type for creating a charge `CardProductCreditConfiguration`"""
input CreateChargeCreditCardProductConfigurationInput {
  """The globally unique id for the `CreditProduct`"""
  cardProductId: ID!

  """
  The input type for the account aging configuration available on a `CardProduct`. For example, the number of days until a payment is due, and until an account is
  """
  accountAgingConfiguration: CreditAccountAgingProductConfigurationInput!

  """The billing statement configuration available on a `CardProduct`."""
  billingCycleConfiguration: CreditBillingCycleCardProductConfigurationInput!
}

"""
The input type for the account aging configuration available on a `CardProduct`. For example, the number of days until a payment is due, and until an account is
considered `DELINQUENT`, `SUSPENDED`, or `CLOSED`.
"""
input CreditAccountAgingProductConfigurationInput {
  """
  The number of days between when a payment is due and when a `FinancialAccount` becomes delinquent if the payment is not made. Must be greater than zero.
  """
  delinquentInDays: UnsignedInt!

  """
  The number of days between when a payment is due and when a `FinancialAccount` becomes suspended if the payment is not made. Must be greater than zero.
  """
  suspendedInDays: UnsignedInt!

  """
  The number of days between when a payment is due and when a `FinancialAccount` becomes closed if the payment is not made. Must be greater than zero.
  """
  chargeOffInDays: UnsignedInt!

  """
  The number of days between when a late fee is assessed and when it is due. Must be greater than or equal to zero.
  """
  lateFeeGracePeriodInDays: UnsignedInt!
}

"""
The input type for the minimum payment configuration available on a `CardProduct`. For example, whether the minimum payment includes the past due amount, interest, and fees.
"""
input CreditMinimumPaymentCardProductConfigurationInput {
  """
  The percentage of the card balance used to calculate the minimum payment. Must be between 0 and 100. A value of '100' indicates '100%'.
  """
  percentage: Float!

  """
  The minimum threshold for the minimum payment. For example, minimum payments are at least $25. Must be greater than or equal to zero.
  """
  thresholdAmount: AmountInput!
}

"""The billing statement configuration available on a `CardProduct`."""
input CreditBillingCycleCardProductConfigurationInput {
  """Number of days included in the grace period"""
  billingCycleGracePeriodInDays: UnsignedInt
}

"""
Types that can be returned when creating a `CardProductCreditConfiguration`.
"""
union CreateCreditCardProductConfigurationPayload = CreditCardProductConfiguration | AccessDeniedError | UserError

"""Input fields for activating a `CreditPlan` for a `CardProduct`."""
input ActivateCardProductCreditPlanInput {
  """Global id for the `CardProduct`"""
  id: ID!

  """
  The date this plan starts to be in effect for new `FinancialAccount`s, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`. Must be in the future. Must be unique across similar `CreditPlan`s for this `CardProduct`. Optional; if not included, the `CreditPlan` will be active immediately and this value will be set to the current date.
  """
  effectiveFromDate: Date

  """
  The date this plan stops being in effect for new `FinancialAccount`s, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`. Optional; if not included, the plan is treated as indefinite, with no set ending.
  """
  effectiveThroughDate: Date
}

"""Types that can be returned for `ActivateCardProductCreditPlan`."""
union ActivateCardProductCreditPlanPayload = CreditPlan | UserError | AccessDeniedError

"""
Interface for a delinquency for a `FinancialAccount` associated with a credit product.
"""
interface FinancialAccountDelinquency {
  """
  The due date of the oldest contiguous delinquent Statement. Null if the `FinancialAccount` is not currently delinquent.
  """
  delinquencyStartedOn: String

  """
  Number of days since the due date of the oldest contiguous delinquent statement. 0 if the `FinancialAccount` is not currently delinquent.
  """
  totalDaysDelinquent: UnsignedInt

  """
  The current amount deliquent, including any interest or fees, for this `FinancialAccount`.
  """
  totalAmount: Amount

  """
  Count of contiguous delinquent cycles for this `FinancialAccount`. 0 if the `FinancialAccount` is not currently delinquent.
  """
  numberOfCycles: UnsignedInt

  """
  A list of contiguous billing cycles where this `FinancialAccount` was delinquent.
  """
  currentDelinquentCycles: [FinancialAccountDelinquencyCycle]
}

"""
A billing cycle where a `FinancialAccount` is delinquent at some point.
"""
interface FinancialAccountDelinquencyCycle {
  """
  The unique identifier for the `FinancialAccount` statement for this billing cycle.
  """
  statementId: ID!

  """
  The `FinancialAccount` statement for this billing cycle. Includes information such as periodStart, periodEnd, and paymentDueOn.
  """
  statement: FinancialAccountStatement

  """
  Days elapsed between the due date of the oldest contiguous delinquent cycle and the periodEnd of this cycle.
  """
  daysDelinquent: UnsignedInt

  """
  The amount delinquent, including any interest or fees, at the periodEnd of this cycle.
  """
  amount: Amount

  """The total amount of repayments applied to this billing cycle."""
  totalRepaymentsApplied: Amount

  """
  A list of repayments applied to this billing cycle. Please note that only the first 20 repayments for a cycle will be returned.
  """
  repayments: [CreditRepaymentStatementApplication!]

  """
  The delinquency state of this `FinancialAccount` at the periodEnd of this cycle. Can be DELINQUENT or CURRENT.
  """
  state: FinancialAccountDelinquencyState

  """The date and time when this was updated, in ISO 8601 format."""
  updatedAt: String

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String
}

"""A payment towards a balance owed for a credit product."""
type CreditRepayment {
  """The total amount of the repayment."""
  amount: Amount

  """The method used to repay the credit balance. For example, `ACH`."""
  repaymentMethod: CreditRepaymentMethod

  """
  Whether the repayment decreases (`CREDIT`) or increases (`DEBIT`) the owed balance.
  """
  repaymentType: CreditRepaymentType

  """
  Used for manual credit repayments. This field represents notes about the adjustment. Can include UTF-8 or ASCII characters, with a maximum length of 1024 characters.
  """
  memo: String

  """
  Used for manual credit repayments. This is a list of references, such as support ticket identifiers or other external identifiers. Can include UTF-8 or ASCII characters, with a maximum length of 255 characters for each reference.
  """
  references: [String!]

  """The date and time this was created, in ISO 8601 format."""
  createdAt: String

  """The date and time this was updated, in ISO 8601 format."""
  updatedAt: String
}

"""An application of a repayment to a statement."""
type CreditRepaymentStatementApplication {
  """The statement this repayment is being applied to."""
  statement: FinancialAccountStatement

  """
  The `CreditRepayment` associated with this `CreditRepaymentStatementApplication`.
  """
  sourceRepayment: CreditRepayment

  """The amount applied to this statement."""
  appliedAmount: Amount
}

"""The methods available to repay a credit balance. For example, `ACH`."""
enum CreditRepaymentMethod {
  ACH
  MANUAL_ADJUSTMENT
  FEE_ADJUSTMENT
  INTEREST_ADJUSTMENT
  REWARD_BALANCE
}

"""
Whether the Credit Repayment decreases the owed balance (a `CREDIT`) or increases the owed balance (a `DEBIT`).
"""
enum CreditRepaymentType {
  CREDIT
  DEBIT
}

"""`FinancialAccount` delinquency state."""
enum FinancialAccountDelinquencyState {
  """Most recent required payment was received before its due date."""
  CURRENT

  """At least one required payment was not received before its due date."""
  DELINQUENT

  """Account is chargedOff and now in the process of closing."""
  CLOSING

  """Account is closed."""
  CLOSED
}

"""
Delinquency for a `FinancialAccount` associated with a credit pay in full product.
"""
type CreditPayInFullFinancialAccountDelinquency implements FinancialAccountDelinquency {
  """
  The due date of the oldest contiguous delinquent Statement. Null if the `FinancialAccount` is not currently delinquent.
  """
  delinquencyStartedOn: String

  """
  Number of days since the due date of the oldest contiguous delinquent statement. 0 if the `FinancialAccount` is not currently delinquent.
  """
  totalDaysDelinquent: UnsignedInt

  """
  The current amount deliquent, including any interest or fees, for this `FinancialAccount`.
  """
  totalAmount: Amount

  """
  Count of contiguous delinquent cycles for this `FinancialAccount`. 0 if the `FinancialAccount` is not currently delinquent.
  """
  numberOfCycles: UnsignedInt

  """
  A list of contiguous billing cycles where this `FinancialAccount` was delinquent.
  """
  currentDelinquentCycles: [CreditPayInFullFinancialAccountDelinquencyCycle]
}

"""
A billing cycle where a `FinancialAccount` associated with a credit pay in full product is delinquent at some point.
"""
type CreditPayInFullFinancialAccountDelinquencyCycle implements FinancialAccountDelinquencyCycle {
  """
  The unique identifier for the financial account statement for this billing cycle.
  """
  statementId: ID!

  """
  The financial account statement for this billing cycle. Includes information such as periodStart, periodEnd, and paymentDueOn.
  """
  statement: CreditPayInFullCardFinancialAccountStatement

  """
  Days elapsed between the due date of the oldest contiguous delinquent cycle and the periodEnd of this cycle.
  """
  daysDelinquent: UnsignedInt

  """
  The amount delinquent, including any interest or fees, at the periodEnd of this cycle.
  """
  amount: Amount

  """The total Amount of repayments applied to this billing cycle."""
  totalRepaymentsApplied: Amount

  """
  A list of repayments applied to this billing cycle. Please note that only the first 20 repayments for a cycle will be returned.
  """
  repayments: [CreditRepaymentStatementApplication!]

  """
  The delinquency state of this `FinancialAccount` at the periodEnd of this cycle, such as CURRENT, DELINQUENT, or CLOSING.
  """
  state: FinancialAccountDelinquencyState

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was last updated."""
  updatedAt: String
}

"""The current delinquency state of this `FinancialAccount`."""
type CurrentFinancialAccountDelinquencyState {
  """The delinquency state, such as CURRENT, DELINQUENT, or CLOSING."""
  state: FinancialAccountDelinquencyState

  """
  The date and time, in ISO 8601 format, the `FinancialAccount` transitioned to this state.
  """
  updatedAt: String
}

"""
The transition of a `FinancialAccount` to a certain `FinancialAccountDelinquencyState`, such as CURRENT, DELINQUENT, or CLOSING.
"""
type DelinquencyStateTransition {
  """
  The delinquency state this `FinancialAccount` is transitioning to, such as CURRENT, DELINQUENT, or CLOSING.
  """
  newState: FinancialAccountDelinquencyState

  """
  The date and time, in ISO 8601 format, the `FinancialAccount` transitioned to this state.
  """
  createdAt: String
}

"""A billing cycle for a credit product."""
type BillingCycle {
  """
  The delinquency state of this `FinancialAccount` for this cycle, as of now. Can be CURRENT, DELINQUENT, or CLOSING.
  """
  currentCycleState: CurrentFinancialAccountDelinquencyState

  """The statement for this `BillingCycle`."""
  statement: FinancialAccountStatement

  """
  If the `BillingCycle` has a terminal state of DELINQUENT or CLOSING, the number of days since the delinquency started. If the `BillingCycle` has a terminal state of CURRENT, this value is 0.
  """
  totalDaysDelinquent: UnsignedInt

  """
  The amount delinquent, including any interest or fees, at the close of this cycle.
  """
  amountDelinquent: Amount

  """
  A list of `DelinquencyStateTransition`s that overlap with this `BillingCycle`.
  """
  stateTransitionHistory: [DelinquencyStateTransition]

  """
  A list of repayments applied to this billing cycle. Please note that only the first 20 repayments for a cycle will be returned.
  """
  repayments: [CreditRepaymentStatementApplication!]

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was updated."""
  updatedAt: String
}

"""The connection type for a `BillingCycle`."""
type BillingCycleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BillingCycleEdge!]
}

"""The edge type for a `BillingCycle`."""
type BillingCycleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `BillingCycle`."""
  node: BillingCycle
}

"""The input type for filtering `BillingCycle`."""
input BillingCycleFilterInput {
  """
  This filter input accepts a `TimestampFilterInputRange` including a `start` and `end` timestamp in ISO 8601 format.
  It returns any cycles where the period start or period end is within the provided range (inclusive).
  
  For example, if the provided range is `2023-01-15` to `2023-02-01` it would return a cycle with
  a period start of `2023-01-01` and a period end of `2023-02-01`, in addition to a cycle with period start of `2023-02-01` and a
  period end of `2023-03-01`.
  """
  statementPeriodStartOrEndBetween: TimestampFilterInputRange
}

"""The input type for filtering `CreditPlan`."""
input CreditPlanFilterInput {
  """The type of `CreditPlan`. For example, `STANDARD` or `PROMOTIONAL`."""
  planType: CreditPlanType

  """The type of balance. For example, `PURCHASE` or `INSTALLMENT`."""
  balanceType: CreditBalanceType

  """The status of the `CreditPlan`. For example, `INACTIVE` or `ACTIVE`."""
  status: CreditPlanStatus
}

"""The input type for filtering `CreditPlanTemplate`."""
input CreditPlanTemplateFilterInput {
  """The type of balance. For example, `PURCHASE` or `INSTALLMENT`."""
  balanceType: CreditBalanceType
}

"""The type of `CreditPlan`. For example, `STANDARD` or `PROMOTIONAL`."""
enum CreditPlanType {
  STANDARD
  PROMO @deprecated(reason: "Please use PROMOTIONAL")
  PROMOTIONAL
}

"""
The status of the `CreditPlan`. For example, `ACTIVE`, `INACTIVE`, or `DEPRECATED`.
"""
enum CreditPlanStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

"""
The status of the `CreditPlanTemplate`. For example, `ACTIVE`, `INACTIVE`, or `DEPRECATED`.
"""
enum CreditPlanTemplateStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

"""
The type of balance this `CreditPlan` applies to. For example, `PURCHASE`, `CASH_ADVANCE`, `INSTALLMENT`, or `BALANCE_TRANSFER`.
"""
enum CreditBalanceType {
  PURCHASE
  CASH_ADVANCE
  INSTALLMENT
  BALANCE_TRANSFER
}

"""
The category of this `Repayment`. For example, `PURCHASE`, `INTEREST`, or `FEES`.
"""
enum RepaymentCategory {
  PURCHASE
  INTEREST
  FEES
}

"""Whether the interest rate is fixed or variable."""
enum InterestRateType {
  FIXED
  VARIABLE
}

"""The index used for interest rate calculation. For example, `PRIME`."""
enum InterestRateIndex {
  PRIME
  LIBOR
}

"""Whether interest accrues using a `SIMPLE` or `COMPOUND` formula."""
enum InterestAccrualType {
  SIMPLE
  COMPOUND
}

"""
The date used to calculate interest accrual. For example, `TRANSACTION_POST_DATE`, `FIRST_DAY_OF_BILLING_PERIOD`, or `PAYMENT_DUE_DATE`.
"""
enum InterestAccrualMethod {
  TRANSACTION_POST_DATE
  FIRST_DAY_OF_BILLING_PERIOD
  PAYMENT_DUE_DATE
}

"""
Whether interest is assessed `DAILY` or on the `STATEMENT` cycle close date.
"""
enum InterestAssessmentSchedule {
  STATEMENT
  DAILY
}

"""Whether statement cycles are `WEEKLY` or `MONTHLY`."""
enum CreditStatementCyclePeriod {
  WEEKLY
  MONTHLY
}

"""Whether the grace period is `FLOATING` or `FIXED`."""
enum CreditStatementGracePeriodType {
  FLOATING
  FIXED
}

"""
A range type for interest rates (APRs), including a minimum and maximum value.
"""
type InterestRateRange {
  """
  The minimum interest rate (APR), expressed as a `Float` with up to 3 digit precision after the decimal point.
  """
  minimum: Float

  """
  The maximum interest rate (APR), expressed as a `Float` with up to 3 digit precision after the decimal point.
  """
  maximum: Float
}

"""The risk based pricing policy."""
type RiskBasedPricingPolicy {
  """Whether or not to use risk based pricing."""
  isRiskBased: Boolean
}

"""The installment policy for this `CreditPlan`."""
type CreditPlanInstallmentPolicy {
  """
  The number of periods for an `InstallmentAgreement` based on this `CreditPlan`.
  """
  numberOfPeriods: UnsignedInt

  """
  The minimum and maximum cleared `Amount` a `Transaction` can have to be eligible to convert into installments.
  """
  principalAmountRange: AmountRange
}

"""The interest policy for this `CreditPlan`."""
type CreditPlanInterestPolicy {
  """Whether the interest rate is fixed or variable."""
  rateType: InterestRateType

  """
  For variable interest rates only. The current configuration of the index used to derive the variable APR.
  """
  index: InterestRateIndexConfiguration

  """Whether interest accrues using a `SIMPLE` or `COMPOUND` formula."""
  accrualType: InterestAccrualType

  """
  The date used to calculate interest accrual. For example, `TRANSACTION_POST_DATE`, `FIRST_DAY_OF_BILLING_PERIOD`, or `PAYMENT_DUE_DATE`.
  """
  accrualMethod: InterestAccrualMethod

  """
  Whether interest is assessed `DAILY` or on the `STATEMENT` cycle close date.
  """
  assessmentSchedule: InterestAssessmentSchedule

  """
  The default interest rate (APR) for this `CreditPlan`, expressed as a `Float` with up to 3 digit precision after the decimal point.
  """
  defaultApr: Float

  """
  The Servicemembers Civil Relief Act (SCRA) interest rate for this `CreditPlan`, expressed as a `Float` with up to 3 digit precision after the decimal point.
  """
  scraApr: Float
}

"""The interest policy for this `CreditPlanTemplate`."""
type CreditPlanTemplateInterestPolicy {
  """Whether the interest rate is fixed or variable."""
  rateType: InterestRateType

  """Whether interest accrues using a `SIMPLE` or `COMPOUND` formula."""
  accrualType: InterestAccrualType

  """
  The date used to calculate interest accrual. For example, `TRANSACTION_POST_DATE`, `FIRST_DAY_OF_BILLING_PERIOD`, or `PAYMENT_DUE_DATE`.
  """
  accrualMethod: InterestAccrualMethod

  """
  Whether interest is assessed `DAILY` or on the `STATEMENT` cycle close date.
  """
  assessmentSchedule: InterestAssessmentSchedule

  """
  The range of potential interest rates (APRs) available through this `CreditPlanTemplate`.
  """
  aprRange: InterestRateRange

  """
  The index used for interest rate calculation. For example, `PRIME` or `LIBOR`.
  """
  variableAprIndex: InterestRateIndex

  """
  The Servicemembers Civil Relief Act (SCRA) interest rate for this `CreditPlanTemplate`, expressed as a `Float` with up to 3 digit precision after the decimal point.
  """
  scraApr: Float
}

"""The installment policy for this `CreditPlanTemplate`."""
type CreditPlanTemplateInstallmentPolicy {
  """
  The minimum and maximum number of periods allowed for an `InstallmentAgreement` created from this `CreditPlanTemplate`. For example, if the range is 1 to 6 periods, a duration of 3 would be allowed but a duration of 7 would not.
  """
  numberOfPeriodsRange: UnsignedIntegerRange

  """
  The minimum and maximum `Amount`s that can be converted into an `InstallmentAgreement` created from this `CreditPlanTemplate`.
  """
  principalAmountRange: AmountRange
}

"""
`CreditPlans` define the credit and interest terms of a credit `CardProduct`. For example, they include the interest rate (APR), the way interest will accrue and be assessed, and the effective dates of the plan.
"""
type CreditPlan implements Node {
  """The globally unique identifier for this `CreditPlan`."""
  id: ID!

  """
  The name for this `CreditPlan`. Supports up to 255 alphanumeric characters. Does not need to be unique.
  """
  name: String

  """
  The status of this `CreditPlan`. For example, `ACTIVE`, `INACTIVE`, or `DEPRECATED`.
  """
  status: CreditPlanStatus

  """The type of `CreditPlan`. For example, `STANDARD` or `PROMOTIONAL`."""
  planType: CreditPlanType

  """
  The type of transaction this `CreditPlan` applies to. For example, `PURCHASE`, `CASH_ADVANCE`, `INSTALLMENT`, or `BALANCE_TRANSFER`.
  """
  balanceType: CreditBalanceType

  """The risk based pricing policy for this `CreditPlan`."""
  riskBasedPricingPolicy: RiskBasedPricingPolicy

  """
  The percentage of the `FinancialAccount`'s credit limit that will be available for this `CreditPlan`.
  """
  percentageOfCreditLimit: UnsignedInt

  """The interest policy for this `CreditPlan`."""
  interestPolicy: CreditPlanInterestPolicy

  """The installment policy for this `CreditPlan`."""
  installmentPolicy: CreditPlanInstallmentPolicy

  """The `FeeSchedule` attached to this `CreditPlan`."""
  feeSchedule: FeeSchedule

  """
  The date this plan starts to be in effect for new `FinancialAccount`s, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`.
  """
  effectiveFromDate: Date

  """
  The date this plan stops being in effect for new `FinancialAccount`s, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-02-15`. If null, the plan is treated as indefinite, with no set ending.
  """
  effectiveThroughDate: Date

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was updated."""
  updatedAt: String
}

"""The connection type for a `CreditPlan`."""
type CreditPlanConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditPlanEdge!]
}

"""The edge type for a `CreditPlan`."""
type CreditPlanEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `CreditPlan`."""
  node: CreditPlan
}

"""
`CreditPlanTemplates` provide a base configuration for creating a `CreditPlan`. For example, they define the interest policy, the transaction and plan types, and the maximum credit limit allowed by the `CreditPlan`.
"""
type CreditPlanTemplate implements Node {
  """The globally unique identifier for this `CreditPlanTemplate`."""
  id: ID!

  """
  The name for this `CreditPlanTemplate`. Supports up to 255 alphanumeric characters. Does not need to be unique.
  """
  name: String

  """
  The status of this `CreditPlanTemplate`. For example, `ACTIVE`, `INACTIVE`, or `DEPRECATED`.
  """
  status: CreditPlanTemplateStatus

  """
  The type of `CreditPlan` this template supports. For example, `STANDARD` or `PROMOTIONAL`.
  """
  planType: CreditPlanType

  """
  The type of transaction this `CreditPlanTemplate` applies to. For example, `PURCHASE`, `CASH_ADVANCE`, `INSTALLMENT`, or `BALANCE_TRANSFER`.
  """
  balanceType: CreditBalanceType

  """The risk based pricing policy for this `CreditPlanTemplate`."""
  riskBasedPricingPolicy: RiskBasedPricingPolicy

  """The interest policy for this `CreditPlanTemplate`."""
  interestPolicy: CreditPlanTemplateInterestPolicy

  """The installment policy for this `CreditPlanTemplate`."""
  installmentPolicy: CreditPlanTemplateInstallmentPolicy

  """
  The maximum credit limit allowed by this plan, expressed as an `Amount`.
  """
  maximumCreditLimit: Amount

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was updated."""
  updatedAt: String
}

"""The connection type for a `CreditPlanTemplate`."""
type CreditPlanTemplateConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditPlanTemplateEdge!]
}

"""The edge type for a `CreditPlanTemplate`."""
type CreditPlanTemplateEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `CreditPlanTemplate`."""
  node: CreditPlanTemplate
}

"""
The credit configuration values for `CreditPlan`s available on a `FinancialAccount`. For example, the interest rate configured for this `FinancialAccount` for this `CreditPlan`.
"""
type CreditPlanFinancialAccountConfiguration {
  """
  The type of balance this configuration applies to. For example, `PURCHASE`, `CASH_ADVANCE`, `INSTALLMENT`, or `BALANCE_TRANSFER`.
  """
  balanceType: CreditBalanceType

  """
  Details about the interest that will be charged, such as the annual percentage rate (APR).
  """
  interest: InterestDetails

  """The `CreditPlan` this configuration applies to."""
  creditPlan: CreditPlan
}

"""
A `CreditPlan` for `PURCHASE` balances that is configured with an APR for this `FinancialAccount`.
"""
type FinancialAccountPurchaseCreditPlan {
  """
  The annual percentage rate (APR) that will be charged for purchases under this `CreditPlan` for this `FinancialAccount`.
  """
  apr: Float

  """The `CreditPlan` this configuration applies to."""
  creditPlan: CreditPlan
}

"""The current configuration of the index used for variable APRs."""
type InterestRateIndexConfiguration {
  """The index used; for example, `PRIME`."""
  type: InterestRateIndex

  """The value of this interest rate index."""
  value: Float

  """
  The date this interest rate index value goes into effect, in YYYY-MM-DD (ISO 8601 RFC 3339) date format.
  """
  effectiveDate: Date
}

"""The credit configuration for this `FinancialAccount`."""
type CreditFinancialAccountConfiguration {
  """
  The Servicemembers Civil Relief Act (SCRA) configuration for this `FinancialAccount`.
  """
  servicemembersCivilReliefAct: ServicemembersCivilReliefActConfiguration

  """
  The Military Lending Act (MLA) configuration for this `FinancialAccount`.
  """
  militaryLendingAct: MilitaryLendingActConfiguration

  """A list of credit plan configurations for this `FinancialAccount`."""
  interestRates: [CreditPlanFinancialAccountConfiguration!] @deprecated(reason: "Please use `purchasePlans` on `FinancialAccount` instead.")
}

"""
The credit configuration values available on a `CardProduct`. For example, account aging, minimum payment, and repayment configuration.
"""
type CreditCardProductConfiguration {
  """
  The account aging configuration available on a `CardProduct`. For example, the number of days until a payment is due, and until an account is
  considered `DELINQUENT`, `SUSPENDED`, or `CLOSED`.
  """
  accountAging: CreditAccountAgingCardProductConfiguration

  """
  The minimum payment configuration available on a `CardProduct`. For example, whether the minimum payment includes the past due amount, interest, and fees.
   Used for Revolving Card Products only.
  """
  minimumPayment: CreditMinimumPaymentCardProductConfiguration

  """
  The repayment configuration available on a `CardProduct`. Used for Revolving Card Products only.
  """
  repayment: CreditRepaymentCardProductConfiguration

  """
  The interest configuration available on a `CardProduct`. Used for Revolving Card Products only.
  """
  interest: CreditInterestApplicationCardProductConfiguration

  """
  The billing statement configuration available on a `CardProduct`. Used for Revolving Card Products only.
  """
  billingCycleConfiguration: CreditBillingCycleCardProductConfiguration
}

"""
The account aging configuration available on a `CardProduct`. For example, the number of days until a payment is due, and until an account is
considered `DELINQUENT`, `SUSPENDED`, or `CLOSED`.
"""
type CreditAccountAgingCardProductConfiguration {
  """
  The number of days between when a payment is due and when a `FinancialAccount` becomes delinquent if the payment is not made.
  """
  delinquentInDays: UnsignedInt

  """
  The number of days between when a payment is due and when a `FinancialAccount` becomes suspended if the payment is not made.
  """
  suspendedInDays: UnsignedInt

  """
  The number of days between when a payment is due and when a `FinancialAccount` becomes closed if the payment is not made.
  """
  chargeOffInDays: UnsignedInt

  """
  The number of days between when a payment is assessed (cycle close date) and when it is due.
  """
  lateFeeGracePeriodInDays: UnsignedInt
}

"""
The minimum payment configuration available on a `CardProduct`. For example, whether the minimum payment includes the past due amount, interest, and fees.
"""
type CreditMinimumPaymentCardProductConfiguration {
  """
  The percentage of the card balance used to calculate the minimum payment. A value of '100' indicates '100%'.
  """
  percentage: Float

  """
  The minimum threshold for the minimum payment. For example, minimum payments are at least $25.
  """
  thresholdAmount: Amount

  """Whether the minimum payment includes past due amount or not."""
  includesPastDueAmount: Boolean

  """Whether the minimum payment includes interest amount or not."""
  includesInterestAmount: Boolean

  """Whether the minimum payment includes fees charged or not."""
  includesFeesCharged: Boolean
}

"""The repayment configuration available on a `CardProduct`."""
type CreditRepaymentCardProductConfiguration {
  """
  The order in which to apply a repayment across categories such as principal, interest, and fees.
  """
  repaymentWaterfall: [RepaymentCategory!]
}

"""The interest calculation configuration available on a `CardProduct`."""
type CreditInterestApplicationCardProductConfiguration {
  """Whether or not to include purchase amount when calculating interest."""
  includesPurchase: Boolean

  """Whether or not to include fees when calculating interest."""
  includesFees: Boolean
}

"""The billing statement configuration available on a `CardProduct`."""
type CreditBillingCycleCardProductConfiguration {
  """
  Whether statement cycles are `WEEKLY` or `MONTHLY`. Please note that `WEEKLY` cycles must have a `FIXED` grace period and `MONTHLY` cycles must have a `FLOATING` grace period.
  """
  billingCyclePeriod: CreditStatementCyclePeriod

  """
  Whether the grace period is `FLOATING` or `FIXED`. Please note that `WEEKLY` cycles must have a `FIXED` grace period and `MONTHLY` cycles must have a `FLOATING` grace period.
  """
  billingCycleGracePeriodType: CreditStatementGracePeriodType

  """Number of days included in the grace period"""
  billingCycleGracePeriodInDays: UnsignedInt

  """
  Number of days before payment is due to send notification(s).
  
  **Examples:** `With Due Date of 1/15 and a Grace Period of 10 days, billingCyclePaymentDueNotificationDays of [5,3,1] would produce notifications on 1/10, 1/12, and 1/14."`
  """
  billingCyclePaymentDueNotificationsDays: [UnsignedInt!]
}

"""The connection type for a `InstallmentAgreement`."""
type InstallmentAgreementConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InstallmentAgreementEdge!]
}

"""The edge type for a `InstallmentAgreement`."""
type InstallmentAgreementEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `InstallmentAgreement`."""
  node: InstallmentAgreement
}

"""The input type for filtering `InstallmentAgreement`."""
input InstallmentAgreementFilterInput {
  """
  The status of the `InstallmentAgreement`. For example, `OPEN` or `REVERSE` or `PAID_OFF or `CHARGE_OFF`.
  """
  installmentAgreementStatus: InstallmentAgreementStatus

  """The `ID`s of `TransactionEvent`s to include in results."""
  transactionEventIds: [ID!]
}

"""The Military Lending Act (MLA) configuration."""
type MilitaryLendingActConfiguration {
  """
  The date this `MilitaryLendingActConfiguration` starts to be in effect, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`.
  """
  effectiveFrom: Date

  """
  The date this `MilitaryLendingActConfiguration` stops being in effect, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`. Optional; if not present, this configuration is treated as indefinite, with no set end date.
  """
  effectiveThrough: Date

  """The date and time when this was updated, in ISO 8601 format."""
  updatedAt: String

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String
}

"""The Servicemembers Civil Relief Act (SCRA) configuration."""
type ServicemembersCivilReliefActConfiguration {
  """
  The status of this configuration. For example, `PENDING`, `APPROVED`, or `REJECTED`.
  """
  status: ServicemembersCivilReliefActStatus

  """
  The start date for this configuration, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`.
  """
  effectiveFrom: Date

  """
  The end date for this configuration, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`. Optional; if not present, this configuration is treated as indefinite, with no set end date.
  """
  effectiveThrough: Date

  """
  The start date of active duty, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`.
  """
  activeDutyFrom: Date

  """
  The end date of active duty, in YYYY-MM-DD (ISO 8601 RFC 3339) date format. For example, `2023-01-15`.
    Optional; if not present, active duty is treated as indefinite, with no set ending. Cannot be in the past. Must be after `activeDutyFromDate`.
  """
  activeDutyThrough: Date

  """The date and time when this was updated, in ISO 8601 format."""
  updatedAt: String

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String
}

"""
Possible status values for a `ServicemembersCivilReliefActConfiguration`.
"""
enum ServicemembersCivilReliefActStatus {
  PENDING
  APPROVED
  REJECTED
}

"""
Details about the interest that will be charged, such as the annual percentage rate (APR).
"""
type InterestDetails {
  """The annual percentage rate (APR)."""
  apr: Float

  """
  For variable interest rates only. The current configuration of the index used to derive the variable APR.
  """
  index: Float

  """
  For variable interest rates only. The current configuration of the margin used to derive the variable APR.
  """
  margin: Float
}

"""The terms in play for a `CreditPlan`, such as interest rate."""
type CreditPlanTerms {
  """The `CreditPlan` for this configuration."""
  creditPlan: CreditPlan

  """
  Details about the interest that will be charged, such as the annual percentage rate (APR).
  """
  interest: InterestDetails
}

"""A financial event that represents a credit card transfer."""
type CreditCardTransferEvent implements Node {
  """Global ID used to reference the transfer in operations."""
  id: ID!

  """
  The type of balance this `CreditPlan` applies to. For example, `PURCHASE`, `CASH_ADVANCE`, `INSTALLMENT`, or `BALANCE_TRANSFER`.
  """
  balanceType: CreditBalanceType

  """
  Details about the interest that will be charged, such as the annual percentage rate (APR).
  """
  interestDetails: InterestDetails

  """
  The direction funds are moving in the perspective of the customer.
  * when DEBIT, funds are moving out of the customer's account
  * when CREDIT, funds are moving into the customer's account
  """
  accountingDirection: AccountingDirection

  """The `FinancialAccountStatement` associated with this event."""
  statement: FinancialAccountStatement

  """The `CreditPlan` associated with this event."""
  creditPlan: CreditPlan
}

"""
The installment eligibility status of the provided `TransactionEvent`s.
"""
type InstallmentEligibilityForTransactionEvents {
  """A list showing installment eligibility status by `TransactionEvent`."""
  eligibilityByTransactionEvent: [InstallmentEligibilityForTransactionEvent!]
}

"""The installment eligibility status of a `TransactionEvent`."""
type InstallmentEligibilityForTransactionEvent {
  """The relevant `TransactionEvent`."""
  transactionEvent: TransactionEvent

  """
  The installment eligibility status. For example, `ELIGIBLE` or `NOT_ELIGIBLE`.
  """
  eligibility: CreditInstallmentEligibilityStatusForTransactionEvent
}

"""
Possible status values for installment eligibility for a `TransactionEvent`.
"""
enum CreditInstallmentEligibilityStatusForTransactionEvent {
  """
  Indicates that the `TransactionEvent` meets the `Amount` range for at least one active `CreditPlan` of `CreditBalanceType` `INSTALLMENT`, and that the `TransactionEvent` has not yet been converted into an `InstallmentAgreement`.
  """
  ELIGIBLE

  """
  Indicates that either the `TransactionEvent` does not have an `Amount` within range for an active `CreditPlan` of `CreditBalanceType` `INSTALLMENT`, or the `TransactionEvent` has already been converted into an `InstallmentAgreement`.
  """
  NOT_ELIGIBLE
}

"""The available `InstallmentOffer`s for a given `TransactionEvent`."""
type InstallmentOffersForTransactionEvent {
  """The `TransactionEvent` associated with these `InstallmentOffer`s."""
  transactionEvent: TransactionEvent

  """The available `InstallmentOffer`s for the `TransactionEvent`."""
  offers: [InstallmentOffer!]
}

"""An offer to convert a transaction into installments."""
type InstallmentOffer {
  """The `CreditPlan` associated with this `InstallmentOffer`."""
  creditPlan: CreditPlan

  """Details including principal and fees for this `InstallmentOffer`."""
  details: InstallmentOfferDetails
}

"""Details about the `Amount` due for installment offer."""
type InstallmentOfferDetails {
  """
  The total cost of converting this into installments, including principal and fees.
  """
  totalCost: Amount

  """The total principal that is being converted into installments."""
  totalPrincipal: Amount

  """The total fees charged for this installment offer."""
  totalFees: Amount

  """The `Amount` of principal due per period for this offer."""
  principalDuePerPeriod: Amount

  """The `Amount` of fees charged per period for this offer."""
  feesChargedPerPeriod: Amount
}

"""Possible status values for an `InstallmentAgreement`"""
enum InstallmentAgreementStatus {
  OPEN
  PAID_OFF
  CHARGED_OFF
  REVERSED
}

"""`InstallmentAgreement` status history."""
type InstallmentAgreementStatusHistory {
  """The previous status."""
  previousStatus: InstallmentAgreementStatus

  """The new status."""
  newStatus: InstallmentAgreementStatus

  """The date and time when the status changed, in ISO 8601 format."""
  createdAt: String
}

"""An arrangement to convert a `Transaction` into installments."""
type InstallmentAgreement implements Node {
  """The unique identifier for this `InstallmentAgreement`."""
  id: ID!

  """The status of this `InstallmentAgreement`."""
  status: InstallmentAgreementStatus

  """The status history of this `InstallmentAgreement`."""
  statusHistory: [InstallmentAgreementStatusHistory!]

  """
  The original offer information such as the relevant `CreditPlan`, and the total and per-installment amounts due.
  """
  agreement: InstallmentOffer

  """The `TransactionEvent` associated with this `InstallmentAgreement`."""
  transactionEvent: TransactionEvent

  """
  The progress to date and remaining obligations for this `InstallmentAgreement`.
  """
  snapshot: InstallmentAgreementSnapshot

  """
  The date and time, in ISO 8601 format, the first statement where an installment is due starts.
  """
  installmentAgreementPeriodStart: String

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was most recently updated."""
  updatedAt: String
}

"""
The progress to date and remaining obligations for this `InstallmentAgreement`.
"""
type InstallmentAgreementSnapshot {
  """The date and time, in ISO 8601 format, this was updated."""
  asOf: String

  """Details about past completed installments."""
  installmentPaymentsCompleted: InstallmentAgreementCompletedRollup

  """Details about remaining installments."""
  installmentPaymentsRemaining: InstallmentAgreementRemainingRollup
}

"""A summary of completed `InstallmentAgreement` activity."""
type InstallmentAgreementCompletedRollup {
  """The principal balance paid to date for this `InstallmentAgreement`."""
  principalBalancePaid: Amount

  """The fees paid to date for this `InstallmentAgreement`."""
  feesPaid: Amount

  """
  The number of installments completed to date for this `InstallmentAgreement`.
  """
  numberOfInstallmentsCompleted: UnsignedInt
}

"""A summary of remaining `InstallmentAgreement` activity."""
type InstallmentAgreementRemainingRollup {
  """The remaining principal balance due for this `InstallmentAgreement`."""
  principalBalanceRemaining: Amount

  """
  The remaining fees due for this `InstallmentAgreement`. This is a sum of per period fees for the remaining periods.
  """
  estimatedFeesRemaining: Amount

  """The number of installments remaining for this `InstallmentAgreement`."""
  numberOfInstallmentsRemaining: UnsignedInt
}

"""Response type for waive fee."""
union FeeTransferEventPayload = FeeTransferEvent | UserError | AccessDeniedError

"""Response type for simulate create fee schedule."""
union SimulateCreateAndActivateFeeSchedulePayload = FeeSchedule | UserError | AccessDeniedError

"""Simulated fee schedule input."""
input SimulateCreateAndActivateFeeScheduleInput {
  """Fee schedule associated to a card product."""
  cardProductId: ID!

  """Fee configuration details about activity and fee amount to be charged."""
  feeConfigurations: [SimulateFeeConfigurationInput!]
}

"""Simulated fee configuration input."""
input SimulateFeeConfigurationInput {
  """The activity for which the fee is charged."""
  feeActivityType: FeeTransferEventFeeActivityTypeInput!

  """Fee amount to be charged."""
  feeAmount: SimulatedFeeAmountInput!
}

"""Fee amount to be charged."""
input SimulatedFeeAmountInput {
  """
  Fee amount to be charged. It cannot be combined with feePercentage or feeBasisPoints.
  """
  feeAmount: AmountInput

  """
  Basis points representation of the fee percentage to be charged. eg: 125 basis points = 1.25%
  """
  feeBasisPoints: UnsignedInt
}

"""The connection type for Fee Transfer Event."""
type FeeTransferEventConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeeTransferEventEdge!]
}

"""The connection type for Fee Schedule."""
type FeeScheduleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeeScheduleEdge!]
}

"""The edge type for a Fee Transfer Event."""
type FeeTransferEventEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Fee Transfer Event."""
  node: FeeTransferEvent
}

"""The edge type for a Fee Schedule."""
type FeeScheduleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Fee schedule."""
  node: FeeSchedule
}

"""A Fee Transfer Event."""
type FeeTransferEvent implements Node {
  """Global ID used to reference the Fee Transfer Event in operations."""
  id: ID!

  """Details about this fee transfer event."""
  feeTransfer: FeeTransfer
}

"""Union of charged fee transfer and reversed fee transfer."""
union FeeTransfer = ChargedFeeTransfer | ReversedFeeTransfer

"""
Charged fee transfer. Fees are charged to the account holder and transferred from

account holder financial account to income financial account.
"""
type ChargedFeeTransfer {
  """
  The Financial account of account holder from where the fee is deducted.
  """
  originatingAccount: FinancialAccount

  """The income financial account of receiving fees."""
  receivingAccount: FinancialAccount

  """
  The Card product associated with the financial activity from the account holder that triggered the fee charge.
  """
  cardProduct: CardProduct

  """The activity for which the fee is charged."""
  feeActivityType: FeeTransferEventFeeActivityType

  """The configured fee amount."""
  feeAmount: Amount

  """The actual fee amount charged."""
  transferedFeeAmount: Amount @deprecated(reason: "Use feeTransferAmount instead.")

  """The date and time, in ISO 8601 format, the fee was charged."""
  transferDate: String

  """The Fee transfer event status."""
  status: FeeTransferStatusDetails

  """Fee charge rule that was applied to this fee transfer event."""
  feeChargeRule: FeeChargeRule

  """
  Details of the charge activity of account holder that is triggering fee transfer event.
  """
  feeChargeActvity: FeeChargeActivity

  """The actual fee amount charged."""
  feeTransferAmount: Amount
}

"""Reversed fee transfer. Reversing the charged fee transfer."""
type ReversedFeeTransfer {
  """
  The Financial account from where the fee is reversed. This field is available when status is COMPLETE.
  """
  originatingAccount: FinancialAccount

  """
  The Financial account that receives the reversed fee. This field is available when status is COMPLETE.
  """
  receivingAccount: FinancialAccount

  """
  The actual fee amount reversed. This field is available when status is COMPLETE.
  """
  transferedFeeAmount: Amount @deprecated(reason: "Use feeTransferAmount instead.")

  """The date and time, in ISO 8601 format, the fee was reversed."""
  transferDate: String

  """The fee transfer event status."""
  status: FeeTransferStatusDetails

  """Memo"""
  memo: String

  """The original fee transfer event that was reversed."""
  sourceFeeTransferEvent: FeeTransferEvent

  """The actual fee amount charged."""
  feeTransferAmount: Amount
}

"""Activity that is triggering the fee transfer event."""
union FeeChargeActivity = PhysicalPaymentCardOrder | PaymentCard | FinancialAccount | SecureDepositACHTransfer | SecureCardBalanceRepaymentACHTransfer | IntegratorInitiatedFundsWithdrawalACHTransfer | IntegratorInitiatedFundsDepositACHTransfer | AuthorizationAndClearEvent | ClearingEvent | BalanceInquiryEvent

"""Details about the status of the fee transfer."""
union FeeTransferStatusDetails = NonFailureFeeTransferStatus | FailureFeeTransferStatus

"""Non failure fee transfer event status."""
type NonFailureFeeTransferStatus {
  """The fee transfer event status."""
  status: FeeTransferEventStatus
}

"""Failure fee transfer event status."""
type FailureFeeTransferStatus {
  """The fee transfer event status."""
  status: FeeTransferEventStatus

  """Additional details for failure."""
  reasonDetails: FeeTransferEventFailure
}

"""Fee schedule. It has set of fee configurations."""
type FeeSchedule implements Node {
  """Global ID used to reference the fee schedule."""
  id: ID!

  """The Fee schedule that is associated to a Card Product."""
  feeScheduleAssociatedTo: FeeScheduleAssociatedTo

  """Set of fee configurations for this fee schedule."""
  feeConfigurations: [FeeConfiguration!]

  """The date and time, in ISO 8601 format, the fee schedule was activated."""
  activationDate: String

  """Status of fee schedule."""
  status: FeeScheduleStatus

  """The date and time, in ISO 8601 format, the fee schedule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the fee schedule was last updated.
  """
  updatedAt: String
}

"""
A fee configuration. Fee configuration consists of account holder activity that is being
charged and the rules that determines what fee charge is applicable.
"""
type FeeConfiguration {
  """ID used to reference the fee configuration."""
  id: ID!

  """The account holder activity for which fee is charged."""
  feeActivityType: FeeTransferEventFeeActivityType

  """Set of rules that determine amount of fee to be charged."""
  feeChargeRules: [FeeChargeRule!]

  """
  The date and time, in ISO 8601 format, the fee configuration was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the fee configuration was last updated.
  """
  updatedAt: String
}

"""Fee schedules associated to."""
union FeeScheduleAssociatedTo = CardProduct

"""A fee charge rule."""
type FeeChargeRule implements Node {
  """ID used to reference the fee charge rule."""
  id: ID!

  """Fee charge rule name."""
  name: String

  """
  Order at which this fee charge rule will be applied against other applicable fee charge rules.
  """
  order: Int

  """The value of fee charged when this charge rule is applied."""
  value: FeeChargeValue

  """
  The list of conditions that determine if this fee charge rule should be applied.
  All conditions must be true for this charge rule to apply.
  """
  conditions: [FeeChargeRuleCondition!]

  """
  The date and time, in ISO 8601 format, the fee charge rule was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the fee charge rule was last updated.
  """
  updatedAt: String
}

"""Fee charge value."""
union FeeChargeValue = FixedFeeChargeValue | VariableFeeChargeValue

"""Fee charge rule condition."""
union FeeChargeRuleCondition = FeeChargeRuleAmountCondition | FeeChargeRuleCountCondition

"""
A fee charge condition that is based on amount in account holder activity.
"""
type FeeChargeRuleAmountCondition {
  """ID used to reference fee charge rule amount condition."""
  id: ID!

  """The description of fee charge rule amount condition."""
  description: String

  """
  The logical condition with regard to amount in account holder activity.
  """
  condition: AmountFeeCondition

  """The amount of account holder activity is aggregated at."""
  aggregatedAt: FeeConditionAggregation

  """The duration for which amount is aggregated before it resets."""
  aggregationDuration: FeeChargeConditionDuration

  """
  The date and time, in ISO 8601 format, the fee charge rule amount condition was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the fee charge rule amount condition was last updated.
  """
  updatedAt: String
}

"""
A fee charge condition that is based on count of account holder activity.
"""
type FeeChargeRuleCountCondition {
  """ID used to reference the fee charge rule count condition."""
  id: ID!

  """The description of fee charge rule count condition."""
  description: String

  """The logical condition with regard to count of account holder activity."""
  condition: CountFeeCondition

  """The count of account holder activity is aggregated at."""
  aggregatedAt: FeeConditionAggregation

  """
  The duration for which the count of account holder activity is aggregated before it resets.
  """
  aggregationDuration: FeeChargeConditionDuration

  """
  The date and time, in ISO 8601 format, the fee charge rule count condition was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the fee charge rule count condition was last updated.
  """
  updatedAt: String
}

"""The logical condition which compares count of account holder activity."""
type CountFeeCondition {
  """
  The count value against which account holder activity count is compared.
  """
  value: CountFeeConditionValue

  """The fee charge condition comparison operator."""
  operator: FeeChargeOperator
}

"""
The logical condition which compares amount in account holder activity.
"""
type AmountFeeCondition {
  """
  The amount value against which amount in account holder activity is compared.
  """
  value: AmountFeeConditionValue

  """The fee charge condition comparison operator."""
  operator: FeeChargeOperator
}

"""Count Condition value."""
type CountFeeConditionValue {
  """The fee charge condition count used with COUNT condition type."""
  count: Int

  """
  The fee charge condition maximum count used with COUNT condition type.
  Used with BETWEEN condition operator.
  """
  maximumCount: Int
}

"""Amount Condition value."""
type AmountFeeConditionValue {
  """The fee charge condition amount used with AMOUNT condition type."""
  amount: Amount

  """
  The fee charge condition maximum amount used with AMOUNT condition type.
  Used with BETWEEN condition operator.
  """
  maximumAmount: Amount
}

"""A Fee Transfer Event Failure."""
type FeeTransferEventFailure {
  """The type of failure."""
  type: FeeTransferEventFailureType

  """Additional details."""
  reason: String
}

"""Flat amount fee charge value."""
type FixedFeeChargeValue {
  """The flat fee amount to be charged."""
  amount: Amount
}

"""Percentage based fee charge value."""
type VariableFeeChargeValue {
  """
  Basis points representation of the fee percentage to be charged. eg: 125 basis points = 1.25%
  """
  basisPoints: UnsignedInt
}

"""Inputs for filtering Fee Schedules."""
input FeeScheduleFilterInput {
  """The date and time, in ISO 8601 format, the fee schedule was activated."""
  activationDate: TimestampFilterInput

  """The date and time, in ISO 8601 format, the fee schedule was created."""
  createDate: TimestampFilterInput

  """The date and time, in ISO 8601 format, the fee schedule was updated."""
  updateDate: TimestampFilterInput
}

"""Waive fee input."""
input WaiveFeeTransferInput {
  """Fee transfer event to be reversed."""
  feeTransferEventId: ID!

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!

  """
  The optional memo of the `WaiveFeeTransfer`.
  
  Maximum length: 1024 characters
  """
  memo: String
}

"""Status of the Fee Transfer Event."""
enum FeeTransferEventStatus {
  """The Fee Transfer Event is pending."""
  PENDING

  """The Fee Transfer Event completed."""
  COMPLETE

  """
  The Fee Transfer Event failed. Additional details are available in failureReason.
  """
  FAIL
}

"""The possible fee types that can be charged."""
enum FeeTransferEventFeeActivityType {
  """ATM withdrawal (in-network)"""
  ATM_WITHDRAWAL_IN_NETWORK_FEE

  """ATM withdrawal (international, in-network)"""
  ATM_WITHDRAWAL_IN_NETWORK_INTERNATIONAL_FEE

  """ATM withdrawal (out-of-network)"""
  ATM_WITHDRAWAL_OUT_OF_NETWORK_FEE

  """ATM withdrawal (international)"""
  ATM_WITHDRAWAL_OUT_OF_NETWORK_INTERNATIONAL_FEE

  """ATM decline"""
  ATM_DECLINE_FEE

  """ATM decline (international)"""
  ATM_DECLINE_INTERNATIONAL_FEE

  """ATM balance inquiry (in-network)"""
  ATM_BALANCE_INQUIRY_IN_NETWORK_FEE

  """ATM balance inquiry (international, in-network)"""
  ATM_BALANCE_INQUIRY_IN_NETWORK_INTERNATIONAL_FEE

  """ATM balance inquiry (out-of-network)"""
  ATM_BALANCE_INQUIRY_OUT_OF_NETWORK_FEE

  """ATM balance inquiry (international)"""
  ATM_BALANCE_INQUIRY_OUT_OF_NETWORK_INTERNATIONAL_FEE

  """International transaction"""
  INTERNATIONAL_TRANSACTION_FEE

  """Credit Installment"""
  INSTALLMENT_FEE

  """Physical card reissue (new PAN)"""
  PHYSICAL_CARD_REISSUE_FEE

  """Expedited physical card"""
  EXPEDITED_PHYSICAL_CARD_FEE

  """Monthly account anniversary fee"""
  MONTHLY_ACCOUNT_ANNIVERSARY_FEE

  """Virtual card reissue (new PAN)"""
  VIRTUAL_CARD_REISSUE_FEE

  """Returned ACH origication"""
  RETURN_PAYMENT_FEE

  """Account initiation"""
  ACCOUNT_INITIATION_FEE

  """Late Payment"""
  LATE_PAYMENT_FEE

  """Cash back at point of sale terminal"""
  CASH_BACK_POS_FEE

  """Cash back at bank tell"""
  CASH_BACK_OTC_FEE

  """Account inactivity"""
  ACCOUNT_INACTIVITY_FEE
}

"""The reasons a Fee Transfer Event could fail."""
enum FeeTransferEventFailureType {
  """
  The originating account of the FeeTransferEvent did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """The originating or receiving account is closed."""
  ACCOUNT_CLOSED

  """The originating or receiving account was not found."""
  ACCOUNT_NOT_FOUND

  """The originating and receiving account have different currency."""
  CURRENCY_MISMATCH

  """
  The originating or receiving account does not belong to the organization.
  """
  NOT_AN_ORGANIZATION_OWNED_ACCOUNT

  """Organization not provided."""
  ORGANIZATION_ID_NOT_PROVIDED

  """The originating or receiving account not provided."""
  ACCOUNT_NOT_PROVIDED

  """Idempotency Key not provided."""
  IDEMPOTENCY_KEY_NOT_PROVIDED

  """Transfer amount is negative or zero."""
  TRANSFER_AMOUNT_IS_NEGATIVE_OR_ZERO

  """The originating and receiving account do not belong to same product."""
  ACCOUNTS_DO_NOT_BELONG_TO_SAME_PRODUCT

  """Transaction Id not provided."""
  TRANSACTION_ID_NOT_PROVIDED

  """The originating or receiving account is not active."""
  ACCOUNT_NOT_ACTIVE

  """The originating account does not have credit limit set."""
  CREDIT_LIMIT_NOT_SET_ON_ACCOUNT

  """
  The originating account does not have enough balance to reduce credit limit.
  """
  NOT_ENOUGH_BALANCE_TO_REDUCE_CREDIT_LIMIT

  """Transfer amount exceeding maximum program card balance."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_CARD_BALANCE

  """Transfer is not supported on product."""
  TRANSFER_NOT_SUPPORTED_ON_PRODUCT

  """Card funding feature not enabled on account."""
  CARD_FUNDING_FEATURE_NOT_ENABLED

  """Accounts do not have same primary account holder."""
  TRANSFER_CONDITION_SAME_PRIMARY_ACCOUNT_HOLDER_NOT_SATISFIED

  """Payroll advance feature not enabled."""
  PAYROLL_ADVANCE_FEATURE_NOT_ENABLED

  """Payroll employer advance feature not enabled."""
  PAYROLL_EMPLOYER_ADVANCE_FEATURE_NOT_ENABLED

  """Fransfer amount exceeds allowed max program load limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_LOAD_LIMIT

  """Ach load is not allowed by program."""
  ACH_LOAD_NOT_ALLOWED_BY_PROGRAM

  """Tenant Id is not provided."""
  TENANT_ID_NOT_PROVIDED

  """Transfer amount exceeds allowed max program reload limit."""
  TRANSFER_AMOUNT_EXCEEDING_MAX_PROGRAM_RELOAD_LIMIT

  """Secured card feature is not enabled on account."""
  SECURE_CARD_FEATURE_NOT_ENABLED

  """Corporate bank account feature is not enabled."""
  CORPORATE_BANK_ACCOUNT_FEATURE_NOT_ENABLED

  """Reward point feature not enabled."""
  REWARD_POINT_FEATURE_NOT_ENABLED

  """Transfer amount below program minimum reload limit."""
  TRANSFER_AMOUNT_BELOW_MIN_PROGRAM_RELOAD_LIMIT

  """Dda feature is not enabled on account."""
  DDA_FEATURE_NOT_ENABLED

  """Originated ach unload not supported on product"""
  ORIGINATED_ACH_UNLOAD_NOT_SUPPORTED_ON_PRODUCT

  """Fleet card feature is not enabled on account."""
  FLEET_FEATURE_NOT_ENABLED

  """Product funding feature is not enabled on account."""
  PRODUCT_FUNDING_FEATURE_NOT_ENABLED

  """Product funding feature is not enabled on account."""
  FUNDING_CARD_NOT_SUPPORTED

  """Debit card feature is not enabled on account."""
  DEBIT_CARD_FEATURE_NOT_ENABLED

  """Prepaid card feature is not enabled on account."""
  PREPAID_CARD_FEATURE_NOT_ENABLED

  """Funding account feature is not enabled on account."""
  FUNDING_ACCOUNT_FEATURE_NOT_ENABLED

  """Cash fund out not supported on product."""
  CASH_FUND_OUT_NOT_SUPPORTED_ON_PRODUCT

  """Credit card feature is not enabled on account."""
  CREDIT_CARD_FEATURE_NOT_ENABLED

  """Commercial credit Pay In Full card feature is not enabled on account."""
  COMMERCIAL_CREDIT_PAY_IN_FULL_FEATURE_NOT_ENABLED
}

"""The possible Fee Charge Condition operator types."""
enum FeeChargeOperator {
  """Equal"""
  EQUAL

  """Not equal"""
  NOT_EQUAL

  """Greater than."""
  GREATER_THAN

  """Less than."""
  LESS_THAN

  """Greater than or equal."""
  GREATER_THAN_OR_EQUAL

  """Less than or equal."""
  LESS_THAN_OR_EQUAL

  """Between count/amount and maximumCount/maximumAmount inclusive."""
  BETWEEN
}

"""The possible Fee Charge Condition accumulation durations."""
enum FeeChargeConditionDuration {
  """Applies to all without aggregation."""
  NONE

  """Calendar day (UTC). Accumulated count/amount is reset each day."""
  DAY

  """
  Calendar week, starting on Sunday (UTC). Accumulated count/amount is reset each week.
  """
  WEEK

  """Calendar month (UTC). Accumulated count/amount is reset each month."""
  MONTH

  """Calendar year (UTC). Accumulated count/amount is reset each year."""
  YEAR

  """Lifetime of the account. Accumulated count/amount is never reset."""
  LIFETIME
}

"""Type to which fee condition is attached."""
enum FeeConditionAggregation {
  """Account."""
  ACCOUNT

  """Payment Card."""
  PAYMENT_CARD
}

"""Fee schedule status."""
enum FeeScheduleStatus {
  """
  The fee schedule is pending. Pending status is when fee schedule activation date is in future.
  """
  PENDING

  """Fee schedule is active and currently applicable."""
  ACTIVE

  """The fee schedule is inactive and no longer applicable."""
  INACTIVE
}

"""The possible fee types that can be charged."""
enum FeeTransferEventFeeActivityTypeInput {
  """ATM withdrawal (in-network)"""
  ATM_WITHDRAWAL_IN_NETWORK_FEE

  """ATM withdrawal (international, in-network)"""
  ATM_WITHDRAWAL_IN_NETWORK_INTERNATIONAL_FEE

  """ATM withdrawal (out-of-network)"""
  ATM_WITHDRAWAL_OUT_OF_NETWORK_FEE

  """ATM withdrawal (international)"""
  ATM_WITHDRAWAL_OUT_OF_NETWORK_INTERNATIONAL_FEE

  """ATM decline"""
  ATM_DECLINE_FEE

  """ATM decline (international)"""
  ATM_DECLINE_INTERNATIONAL_FEE

  """ATM balance inquiry (in-network)"""
  ATM_BALANCE_INQUIRY_IN_NETWORK_FEE

  """ATM balance inquiry (international, in-network)"""
  ATM_BALANCE_INQUIRY_IN_NETWORK_INTERNATIONAL_FEE

  """ATM balance inquiry (out-of-network)"""
  ATM_BALANCE_INQUIRY_OUT_OF_NETWORK_FEE

  """ATM balance inquiry (international)"""
  ATM_BALANCE_INQUIRY_OUT_OF_NETWORK_INTERNATIONAL_FEE

  """International transaction"""
  INTERNATIONAL_TRANSACTION_FEE

  """Credit Installment"""
  INSTALLMENT_FEE

  """Physical card reissue (new PAN)"""
  PHYSICAL_CARD_REISSUE_FEE

  """Expedited physical card"""
  EXPEDITED_PHYSICAL_CARD_FEE

  """Monthly account anniversary fee"""
  MONTHLY_ACCOUNT_ANNIVERSARY_FEE

  """Virtual card reissue (new PAN)"""
  VIRTUAL_CARD_REISSUE_FEE

  """Returned ACH origination"""
  RETURN_PAYMENT_FEE

  """Account initiation"""
  ACCOUNT_INITIATION_FEE

  """Late Payment"""
  LATE_PAYMENT_FEE

  """Cash back at point of sale terminal"""
  CASH_BACK_POS_FEE

  """Cash back at bank tell"""
  CASH_BACK_OTC_FEE

  """Account inactivity"""
  ACCOUNT_INACTIVITY_FEE
}

"""
An `InterFinancialAccountTransferRule` that will result in the decline of an inter financial account transfer if the maximum amount is exceeded.
"""
type AmountLimitInterFinancialAccountTransferRule implements Node & InterFinancialAccountTransferRule {
  """
  Global ID used to reference the `AmountLimitInterFinancialAccountTransferRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum amount to allow for an inter financial account transfer."""
  maximumAmount: Amount

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """Indicates the account type to monitor."""
  interFinancialAccountTransferAccountType: InterFinancialAccountTransferAccountType

  """The list of revisions for this transfer rule."""
  revisions(
    """
    The number of revisions to return.
    
    Default `first` is set to `20`.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): InterFinancialAccountTransferRuleConnection

  """The date and time, in ISO 8601 format, the transfer rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the transfer rule was last updated.
  """
  updatedAt: String
}

"""A rule applicable to Inter Financial Account Transfers."""
interface InterFinancialAccountTransferRule {
  """Global ID used to reference the transfer rule in operations."""
  id: ID!

  """The name assigned to the rule."""
  name: String

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The list of revisions for this transfer rule."""
  revisions(
    """
    The number of revisions to return.
    
    Default `first` is set to `20`.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): InterFinancialAccountTransferRuleConnection

  """The date and time, in ISO 8601 format, the rule was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, the rule was last updated."""
  updatedAt: String
}

"""
The subject account type to which the inter financial account transfer rule applies.
"""
enum InterFinancialAccountTransferAccountType {
  """
  The account from which an inter financial account transfer moves funds.
  """
  SOURCE
}

"""
A `InterFinancialAccountTransferRule` that will put an inter financial account transfer on hold if the count is exceeded.
This `TransferRule` must be used in a `VelocityInterFinancialAccountTransferRule`.
"""
type CountLimitInterFinancialAccountTransferRule implements Node & InterFinancialAccountTransferRule {
  """
  Global ID used to reference the `CountLimitInterFinancialAccountTransferRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The maximum count of inter financial account transfers to allow."""
  maximumCount: Int

  """Indicates the account type to monitor."""
  interFinancialAccountTransferAccountType: InterFinancialAccountTransferAccountType

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The list of revisions for this transfer rule."""
  revisions(
    """
    The number of revisions to return.
    
    Default `first` is set to `20`.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): InterFinancialAccountTransferRuleConnection

  """The date and time, in ISO 8601 format, the transfer rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the transfer rule was last updated.
  """
  updatedAt: String
}

"""
A `VelocityInterFinancialAccountTransferRule` is window constrained inter financial account transfer control that is composed of at most
3 `ConditionalInterFinancialAccountTransferRules` and 1 cumulative `CumulativeInterFinancialAccountTransferRule` (e.g. `AmountLimitInterFinancialAccountTransferRule`)
"""
type VelocityInterFinancialAccountTransferRule implements Node {
  """
  Global ID used to reference the `VelocityInterFinancialAccountTransferRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The evaluation window of a `VelocityInterFinancialAccountTransferRule`"""
  velocityRuleWindow: VelocityRuleWindow

  """
  The cumulative rule attached to the `VelocityInterFinancialAccountTransferRule`
  """
  cumulativeInterFinancialAccountTransferRule: CumulativeInterFinancialAccountTransferRule

  """
  The conditional rules attached to the `VelocityInterFinancialAccountTransferRule`
  """
  conditionalInterFinancialAccountTransferRules: [ConditionalInterFinancialAccountTransferRule]

  """
  The current version of the rule. Specific versions can be attached and detached from CardProducts.
  """
  version(filterBy: String): String

  """
  The date and time, in ISO 8601 format, the `VelocityTransferRule` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, the `VelocityTransferRule` was last updated.
  """
  updatedAt: String
}

"""
All possible cumulative rules to be used with a `VelocityInterFinancialAccountTransferRule`
"""
union CumulativeInterFinancialAccountTransferRule = AmountLimitInterFinancialAccountTransferRule | CountLimitInterFinancialAccountTransferRule

"""
All possible conditional rules to be used with a `VelocityInterFinancialAccountTransferRule`
"""
union ConditionalInterFinancialAccountTransferRule = TransferPurposeInterFinancialAccountTransferRule

"""The return types for finding inter financial account transfer rules."""
union InterFinancialAccountTransferRuleConnectionPayload = InterFinancialAccountTransferRuleConnection | AccessDeniedError

"""The connection type for `InterFinancialAccountTransferRule`."""
type InterFinancialAccountTransferRuleConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InterFinancialAccountTransferRuleEdge!]
}

"""The edge type for a `InterFinancialAccountTransferRule`."""
type InterFinancialAccountTransferRuleEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `InterFinancialAccountTransferRule`."""
  node: InterFinancialAccountTransferRule
}

"""
A `InterFinancialAccountTransferRule` that will block an inter financial account transfer if the transfer purpose is not allowed or blocked.
"""
type TransferPurposeInterFinancialAccountTransferRule implements Node & InterFinancialAccountTransferRule {
  """
  Global ID used to reference the `TransferPurposeInterFinancialAccountTransferRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The transfer purposes that will be allowed."""
  allowed: [TransferPurpose!]

  """The transfer purposes that will be blocked."""
  blocked: [TransferPurpose!]

  """
  The current version of the rule. Specific versions can be attached and detached from card products and payment cards.
  """
  version: String

  """The list of revisions for this transfer rule."""
  revisions(
    """
    The number of revisions to return.
    
    Default `first` is set to `20`.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): InterFinancialAccountTransferRuleConnection

  """The date and time, in ISO 8601 format, the transfer rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the transfer rule was last updated.
  """
  updatedAt: String
}

"""A inter account transfer rule that is connected to the watchlist."""
type WatchlistInterFinancialAccountTransferRule implements Node & InterFinancialAccountTransferRule {
  """
  Global ID used to reference the `WatchlistInterFinancialAccountTransferRule` in operations.
  """
  id: ID!

  """The name assigned to the rule."""
  name: String

  """The current version of the rule."""
  version: String

  """The list of revisions for this transfer rule."""
  revisions(
    """
    The number of revisions to return.
    
    Default `first` is set to `20`.
    """
    first: Int = 20

    """The cursor to start the page."""
    after: String
  ): InterFinancialAccountTransferRuleConnection

  """The date and time, in ISO 8601 format, the transfer rule was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, the transfer rule was last updated.
  """
  updatedAt: String
}

"""The connection type for Report."""
type ReportConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReportEdge!]
}

"""The edge type for a Report."""
type ReportEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The report object."""
  node: Report
}

"""The return types when calling `initiateOrganizationReport`."""
union InitiateOrganizationReportPayload = Report | UserError | AccessDeniedError

"""
Describes the current status of a report and where it can be downloaded from.
"""
type Report implements Node {
  """Global ID used to reference the Report in operations."""
  id: ID!

  """The current status of an Report."""
  status: ReportStatus

  """Describes which type of report was generated."""
  reportType: ReportType

  """Describes why the report is in a failed state, if applicable."""
  statusReason: String

  """Used to download the contents of the report, if available."""
  download: ReportDownload

  """
  The start date and time, in ISO 8601 format, that the report was generated for.
  """
  start: String

  """
  The end date and time, in ISO 8601 format, that the report was generated for.
  """
  end: String

  """The date and time, in ISO 8601 format, this was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this was updated."""
  updatedAt: String
}

"""Contains information related to downloading a report."""
type ReportDownload {
  """The URL to download the report from."""
  url: String
}

"""
The details needed in order to generate a report for
an `Organization`.
"""
input InitiateOrganizationReportInput {
  """The type of report to be generated for an `Organization`."""
  reportType: OrganizationReportType!

  """Parameters used to generate the Report."""
  parameters: ReportParametersInput!
}

"""The parameters used to generate Report."""
input ReportParametersInput {
  """The date range used to generate the report."""
  between: ReportParameterTimestampRangeInput!

  """ledger report specific parameters."""
  ledgerReportParameters: LedgerReportParametersInput
}

"""
The time range used to generate a report.
All external report requests must be supplied with this Parameter.
Timestamp value range in ISO 8601 format.
"""
input ReportParameterTimestampRangeInput {
  """ISO 8601 format and inclusive"""
  start: String!

  """ISO 8601 format and inclusive."""
  end: String!
}

"""
ledger report parameters.
these are additional, optional, parameters applicable only to ledger report.
"""
input LedgerReportParametersInput {
  """ledger names to be included in the ledger report."""
  ledgerNames: [LedgerName!]

  """Financial account names to be included in the ledger report."""
  financialAccountNames: [String!]

  """Financial account ids to be included in the ledger report."""
  financialAccountIds: [ID!]

  """Financial event names to be included in the ledger report."""
  financialEventTypes: [FinancialEventType!]
}

"""Filters reports by `ReportStatus`."""
input ReportStatusFilterInput {
  includes: [ReportStatus!]
}

"""Filters reports by `ReportType`."""
input ReportTypeFilterInput {
  includes: [ReportType!]
}

"""All available report types."""
enum ReportType {
  """Metro2 file formatted for credit report furnishing with Experian."""
  EXPERIAN_CREDIT_REPORT

  """
  This report contains ledger entries across all financial accounts for the organization.
  """
  LEDGER_ENTRY

  """
  This report contains card interchange and transaction settlement activity across all financial accounts for the organization.
  """
  CARD_INTERCHANGE_ACTIVITY

  """
  This report contains all card transaction event activities across all financial accounts for the organization.
  """
  CARD_TRANSACTION_ACTIVITY

  """
  This report contains all the enhanced data (level 2/3) sent by the payment networks for cleared fleet transactions for a specific time period
  """
  FLEET_ENHANCED_DATA_SUMMARY

  """This is the RPA purchase agreement for a given day"""
  RECEIVABLE_SALE_AGREEMENT

  """
  This report contains the overall amount(s) being sold on a given business day
  """
  RECEIVABLE_SALE

  """
  This report contains the breakdown of each financial account’s receivable being sold on a given business day (sum to the amount in the Receivable Sale report)
  """
  RECEIVABLE_ACCOUNTS_SALE

  """
  This report contains the breakdown of each transaction’s receivable being sold on a given business day (sum to the amount in the Receivable Sale report)
  """
  RECEIVABLE_SALE_TRANSACTIONS

  """
  This is the credit loan tape report across all financial accounts for the organization.
  """
  CREDIT_LOAN_TAPE

  """
  This is the negative balance report across all financial accounts for the organization.
  """
  NEGATIVE_ACCOUNT_BALANCE
}

"""
Available report types that apply to `Organizations` and that can be passed into
`initiateOrganizationReport`.
"""
enum OrganizationReportType {
  """Metro2 file formatted for credit report furnishing with Experian."""
  EXPERIAN_CREDIT_REPORT

  """
  This report contains ledger entries across all financial accounts for the organization.
  """
  LEDGER_ENTRY

  """
  This report contains card interchange and transaction settlement activity across all financial accounts for the organization.
  """
  CARD_INTERCHANGE_ACTIVITY

  """
  This report contains all card transaction event activities across all financial accounts for the organization.
  """
  CARD_TRANSACTION_ACTIVITY

  """
  This report contains all the enhanced data (level 2/3) sent by the payment networks for cleared fleet transactions for a specific time period
  """
  FLEET_ENHANCED_DATA_SUMMARY

  """This is the RPA purchase agreement for a given day"""
  RECEIVABLE_SALE_AGREEMENT

  """
  This report contains the overall amount(s) being sold on a given business day
  """
  RECEIVABLE_SALE

  """
  This report contains the breakdown of each financial account’s receivable being sold on a given business day (sum to the amount in the Receivable Sale report)
  """
  RECEIVABLE_ACCOUNTS_SALE

  """
  This report contains the breakdown of each transaction’s receivable being sold on a given business day (sum to the amount in the Receivable Sale report)
  """
  RECEIVABLE_SALE_TRANSACTIONS

  """
  This is the credit loan tape report across all financial accounts for the organization.
  """
  CREDIT_LOAN_TAPE

  """
  This is the negative balance report across all financial accounts for the organization.
  """
  NEGATIVE_ACCOUNT_BALANCE
}

"""Represents the current status of a Report."""
enum ReportStatus {
  """Indicates the the report is still being generated."""
  IN_PROGRESS

  """Indicates the report has been generated and is ready to be downloaded."""
  COMPLETED

  """Indicates the report failed to generate."""
  FAILED
}

"""Used to filter which reports are requested."""
input ReportFilterInput {
  """Filters reports by ReportStatus."""
  status: ReportStatusFilterInput

  """Filters reports by ReportType."""
  reportType: ReportTypeFilterInput

  """Filter reports by timestamp range for createDate"""
  createDateFilter: TimestampFilterInputRange
}

"""Provides information about the current usage of a report type."""
type ReportUsage {
  """The report type that the usage metrics applies to."""
  reportType: ReportType

  """
  The limit of the number of reports that can be generated within a 24 hour period. The 24 hour
  period is defined as midnight to midnight, Eastern Time.
  """
  limit: UnsignedInt

  """
  The number of reports remaining for the report type in the given period.
  """
  limitRemaining: UnsignedInt

  """
  The date and time, in ISO 8601 format, for the end of the current period.
  """
  periodEnd: String
}

"""Digital Card art properties for a card art document upload session"""
type DigitalCardArtDocument {
  """The files for digital card art"""
  cardArt: CardArtDocument!

  """Digital wallet provider"""
  digitalWalletProviders: [DigitalWalletProvider!]
}

"""A selected set of Card Profiles for a given card product"""
interface CardProfileSetInterface {
  """ID of the card profile set."""
  id: ID!

  """Status of the card profile set."""
  status: CardProfileSetStatus

  """Name of the card profile set."""
  name: String

  """Intent of the card profile set."""
  intent: CardProfileSetIntent

  """Network of the card profile set."""
  network: CardProfileSetNetwork

  """Preferred `CardProfileSet` configuration"""
  preferredConfiguration: Boolean

  """Card Product of the card profile set."""
  cardProduct: CardProduct

  """Physical Card Profiles of the card profile set."""
  physicalCardProfiles: [PhysicalCardProfile!]

  """Digital Card Profiles of the card profile set."""
  digitalCardProfiles: [DigitalCardProfile!]

  """Virtual Card Profiles of the card profile set."""
  virtualCardProfiles: [VirtualCardProfile!]

  """
  The date and time, in ISO 8601 format, this `CardProfileSet` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `CardProfileSet` was last updated.
  """
  updatedAt: String

  """A description about the card profile set."""
  description: String
}

"""A document upload session for a card profile"""
type CardProfileDocumentUploadSession implements Node & DocumentUploadSession {
  """
  A list of documents uploaded via a secure card art document upload link
  """
  documents: [CardArtDocument!]

  """Global ID used to reference the card art document upload session"""
  id: ID!

  """The current state of the card art document upload session"""
  status: DocumentUploadSessionStatusCode

  """
  The date and time, in ISO 8601 format, this `document upload session` was last updated.
  """
  updatedAt: String

  """
  The date and time, in ISO 8601 format, this `document upload session` was created.
  """
  createdAt: String

  """The date and time the card art document upload session will expire."""
  expiration: String

  """Card Product of the card art document Upload Session."""
  cardProduct: CardProduct!

  """
  List of allowed document types for the card art document upload session
  """
  allowedDocumentTypes: [CardArtDocumentType!]
}

"""Physical Card Profile attributes"""
type PhysicalCardProfile implements CardProfile & Node {
  """ID of the physical card profile."""
  id: ID!

  """Status of the physical card profile."""
  status: CardProfileStatus

  """Payment Network Status of the physical card profile."""
  paymentNetworkStatus: CardProfilePaymentNetworkStatus

  """Vendor Status of the physical card profile."""
  vendorStatus: CardProfileVendorStatus

  """Bank Status of the physical card profile."""
  bankStatus: CardProfileBankStatus

  """Vendor Name of the physical card profile."""
  vendorName: PhysicalCardVendorName

  """Vendor program external id for the physical card profile"""
  vendorProgramExternalIdentifier: String

  """Carrier for the physical card profile."""
  carrier: String

  """Packaging for the physical card profile."""
  packaging: String

  """The fleet option configuration ID"""
  fleetOptionConfigurationId: ID

  """The fleet option configuration version"""
  fleetOptionConfigurationVersion: Int

  """External contactless profile id"""
  externalContactlessProfileIdentifier: String

  """Chip profile id"""
  chipProfileIdentifier: String

  """Card Material of the physical card profile."""
  physicalCardMaterial: PhysicalCardMaterial

  """Card Holder Agreement ID of the physical card profile."""
  cardHolderAgreementId: ID

  """Card Product of the physical card profile."""
  cardProduct: CardProduct

  """Card personalization."""
  cardPersonalization: PhysicalCardPersonalization

  """Payment card shipment"""
  defaultPaymentCardShipment: CardProfileShipment

  """Card art"""
  cardArt: [CardArtDocument!]

  """
  The date and time, in ISO 8601 format, this `physical card profile` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `physical card profile` was last updated.
  """
  updatedAt: String

  """Name of the `PhysicalCardProfile`."""
  name: String

  """Description about the `PhysicalCardProfile`."""
  description: String

  """The list of `CardProfileSet` related to this `PhysicalCardProfile`."""
  cardProfileSetRelationships: [CardProfileSetRelationship!]

  """Form factor"""
  formFactor: FormFactorType
}

"""CardProfileShipment"""
type CardProfileShipment {
  """Courier information."""
  courier: CardProfileShipmentCourier

  """Sender details."""
  senderDetails: PaymentCardSenderDetails
}

"""The details of the shipping information."""
type CardProfileShipmentCourier {
  """Shipping method."""
  method: PaymentCardShippingMethod

  """Whether signature is required on delivery."""
  signatureRequiredOnDelivery: Boolean
}

"""The details of the sender."""
type PaymentCardSenderDetails {
  """Sender address. The address to where the shipment should be returned."""
  address: Address

  """The company who is sending the shipment."""
  companyName: String

  """The name of a person to who is sending the shipment."""
  name: Name
}

"""The subscriber text for 3DS Verifications for Browsers"""
type VirtualCardBrowserText {
  """Text with info on finding help for virtual card online transactions"""
  browserHelpText: String!

  """Text with browser terms of use for virtual card online transactions"""
  browserTerms: String!
}

"""The subscriber text for 3DS Verifications for Mobile Apps"""
type VirtualCardAppText {
  """Text with info on finding help for virtual card mobile transactions"""
  appHelpText: String!

  """Text with app terms of use for virtual card mobile transactions"""
  appInfo: String!
}

"""Card Profile common interface"""
interface CardProfile {
  """ID of the card profile."""
  id: ID!

  """Status of the card profile."""
  status: CardProfileStatus

  """Card Holder Agreement ID of the card profile."""
  cardHolderAgreementId: ID

  """Card Product of the card profile."""
  cardProduct: CardProduct

  """
  The date and time, in ISO 8601 format, this `virtual card profile` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `virtual card profile` was last updated.
  """
  updatedAt: String

  """Name of the `CardProfile`."""
  name: String

  """Description about the `CardProfile`."""
  description: String

  """The list of `CardProfileSet` related to this `CardProfile`."""
  cardProfileSetRelationships: [CardProfileSetRelationship!]
}

"""Virtual Card Profile attributes"""
type VirtualCardProfile implements CardProfile & Node {
  """ID of the virtual card profile."""
  id: ID!

  """Status of the virtual card profile."""
  status: CardProfileStatus

  """Payment Network Status of the virtual card profile."""
  paymentNetworkStatus: CardProfilePaymentNetworkStatus

  """Bank Status of the virtual card profile."""
  bankStatus: CardProfileBankStatus

  """Card Holder Agreement ID of the virtual card profile."""
  cardHolderAgreementId: ID

  """Card Product of the virtual card profile."""
  cardProduct: CardProduct

  """Personalization type for the virtual card profile"""
  personalization: VirtualCardPersonalizationType

  """Specify intended POS behavior for card"""
  serviceCode: ServiceCode

  """Card art"""
  cardArt: [CardArtDocument!]

  """
  The date and time, in ISO 8601 format, this `virtual card profile` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `virtual card profile` was last updated.
  """
  updatedAt: String

  """Name of the `VirtualCardProfile`."""
  name: String

  """Description about the `VirtualCardProfile`."""
  description: String

  """The list of `CardProfileSet` related to this `VirtualCardProfile`."""
  cardProfileSetRelationships: [CardProfileSetRelationship!]

  """
  The browser text displayed to cardholder during 3DS verification for online transactions
  """
  browserText: VirtualCardBrowserText

  """
  The native app text displayed to cardholder during 3DS verification for mobile transactions
  """
  appText: VirtualCardAppText
}

"""Digital Card Profile attributes"""
type DigitalCardProfile implements CardProfile & Node {
  """ID of the digital card profile."""
  id: ID!

  """Status of the digital card profile."""
  status: CardProfileStatus

  """Payment Network Status of the digital card profile."""
  paymentNetworkStatus: CardProfilePaymentNetworkStatus

  """Bank Status of the digital card profile."""
  bankStatus: CardProfileBankStatus

  """Card Holder Agreement ID of the digital card profile."""
  cardHolderAgreementId: ID

  """Card Product of the digital card profile."""
  cardProduct: CardProduct

  """Digital Art colors in hex format."""
  colors: DigitalArtColors

  """Card art"""
  cardArt: [DigitalCardArtDocument!]

  """
  The date and time, in ISO 8601 format, this `digital card profile` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `digital card profile` was last updated.
  """
  updatedAt: String

  """
  The external id of the digital card profile used by the network for the card art configuration.
  """
  externalProfileId: String

  """Name of the `DigitalCardProfile`."""
  name: String

  """Description about the `DigitalCardProfile`."""
  description: String

  """The list of `CardProfileSet` related to this `DigitalCardProfile`."""
  cardProfileSetRelationships: [CardProfileSetRelationship!]

  """The list of allowed source entry methods for digital wallet tokens."""
  sourceEntryMethods: [CardDigitalWalletTokenSourceEntryMethod!]
}

"""A secure upload link for a card art document upload session"""
type CardArtDocument implements Node & UploadLink {
  """
  The date and time, in ISO 8601 format, this `document upload link` was created.
  """
  createdAt: String

  """The document type that was uploaded"""
  documentType: CardArtDocumentType

  """
  The session which associates all of the files uploaded using the secure upload link
  """
  documentUploadSession: CardProfileDocumentUploadSession

  """Global ID used to reference the secure upload link"""
  id: ID!

  """The status of the upload"""
  status: DocumentUploadLinkStatusCode

  """
  The date and time, in ISO 8601 format, this `document upload link` was last updated.
  """
  updatedAt: String

  """
  A url to be used to upload the contents of the document.
  
  ** Note: ** The maximum file size is 10 MB
  """
  uploadUrl: String

  """a url to be used to download the contents of the document."""
  downloadUrl: String
}

"""Digital card Art color customizations"""
type DigitalArtColors {
  """PAN color in hex format: #a9b1c0"""
  panColor: String!

  """PAN color in RGB format: rgb(169, 177, 192)"""
  panColorRgb: String!

  """Background color in hex format: #a9b1c0"""
  backgroundColor: String!

  """Background color in RGB format: rgb(169, 177, 192)"""
  backgroundColorRgb: String!

  """Card descriptor color in hex format: #a9b1c0"""
  cardDescriptorColor: String!

  """Card descriptor color in RGB format: rgb(169, 177, 192)"""
  cardDescriptorColorRgb: String!
}

"""A selected set of Card Profiles for a given card product"""
type CardProfileSet implements Node & CardProfileSetInterface {
  """ID of the card profile set."""
  id: ID!

  """Status of the card profile set."""
  status: CardProfileSetStatus

  """Name of the card profile set."""
  name: String

  """Intent of the card profile set."""
  intent: CardProfileSetIntent

  """Network of the card profile set."""
  network: CardProfileSetNetwork

  """The bin details associated with the card profile set."""
  binDetails: CardProfileBin

  """Preferred `CardProfileSet` configuration"""
  preferredConfiguration: Boolean

  """Card Product of the card profile set."""
  cardProduct: CardProduct

  """Physical Card Profiles of the card profile set."""
  physicalCardProfiles: [PhysicalCardProfile!]

  """Digital Card Profiles of the card profile set."""
  digitalCardProfiles: [DigitalCardProfile!]

  """Virtual Card Profiles of the card profile set."""
  virtualCardProfiles: [VirtualCardProfile!]

  """
  The date and time, in ISO 8601 format, this `CardProfileSet` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `CardProfileSet` was last updated.
  """
  updatedAt: String

  """Description about the `CardProfileSet`."""
  description: String
}

"""A selected set of Card Profiles for a given card product"""
type CardProfileSetRestricted implements Node & CardProfileSetInterface {
  """ID of the card profile set."""
  id: ID!

  """Status of the card profile set."""
  status: CardProfileSetStatus

  """Name of the card profile set."""
  name: String

  """Intent of the card profile set."""
  intent: CardProfileSetIntent

  """Network of the card profile set."""
  network: CardProfileSetNetwork

  """The bin assignment id associated with the card profile set."""
  cardProductBinAssignmentId: ID

  """Preferred `CardProfileSet` configuration"""
  preferredConfiguration: Boolean

  """Card Product of the card profile set."""
  cardProduct: CardProduct!

  """Physical Card Profiles of the card profile set."""
  physicalCardProfiles: [PhysicalCardProfile!]

  """Digital Card Profiles of the card profile set."""
  digitalCardProfiles: [DigitalCardProfile!]

  """Virtual Card Profiles of the card profile set."""
  virtualCardProfiles: [VirtualCardProfile!]

  """
  The date and time, in ISO 8601 format, this `CardProfileSetRestricted` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `CardProfileSetRestricted` was last updated.
  """
  updatedAt: String

  """Description about the `CardProfileSet`."""
  description: String
}

"""The connection type for `CardProfileSetConnection`."""
type CardProfileSetConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CardProfileSetEdge!]
}

"""The edge type for CardProfileSet."""
type CardProfileSetEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The Card Profile Set."""
  node: CardProfileSet
}

"""The personalization for a line."""
type PhysicalCardPersonalizationLine {
  """The line type for the physical card line."""
  type: PhysicalCardPersonalizationLineType

  """The line value for the physical card line."""
  line: String
}

"""The personalization line for a physical card"""
type PhysicalCardPersonalization {
  """The format for the physical card profile look and feel."""
  format: PhysicalCardPersonalizationFormat!

  """The line 1 personalization for the physical card."""
  line1: PhysicalCardPersonalizationLine!

  """The line 2 personalization for the physical card."""
  line2: PhysicalCardPersonalizationLine!

  """The type of physical card"""
  physicalCardType: PhysicalCardType
}

"""the format of a physical card"""
enum PhysicalCardPersonalizationFormat {
  """Embossed"""
  EMBOSSED

  """Printed"""
  PRINTED
}

"""The type of physical card."""
enum PhysicalCardType {
  """Magnetic Stripe Only"""
  MAGNETIC_STRIPE_ONLY

  """EMV Chip Contact Only"""
  EMV_CHIP_CONTACT_ONLY

  """Contactless Only"""
  CONTACTLESS_ONLY

  """EMV Chip Contactless"""
  EMV_CHIP_CONTACTLESS
}

"""Digital Wallet Provider"""
enum DigitalWalletProvider {
  """Apple Pay"""
  APPLE_PAY

  """Google Pay"""
  GOOGLE_PAY

  """Samsung Pay"""
  SAMSUNG_PAY
}

"""Card Profile states."""
enum CardProfileStatus {
  """The profile was approved."""
  APPROVED

  """The profile is currently being processed."""
  PENDING

  """The profile requires further review."""
  IN_REVIEW

  """The profile is ready for review."""
  READY_FOR_REVIEW

  """The profile is inactive."""
  INACTIVE
}

"""Physical Card Material"""
enum PhysicalCardMaterial {
  """Plastic"""
  PLASTIC

  """Metal"""
  METAL
}

"""Physical Card Profile Payment Network Status"""
enum CardProfilePaymentNetworkStatus {
  """Network Status is PENDING"""
  PENDING

  """Network Status is ready for review"""
  READY_FOR_REVIEW

  """Network Status is in review"""
  IN_REVIEW

  """Network Status is approved"""
  APPROVED
}

"""Physical Card Profile Vendor Status"""
enum CardProfileVendorStatus {
  """Vendor Status is PENDING"""
  PENDING

  """Vendor Status is ready for review"""
  READY_FOR_REVIEW

  """Vendor Status is in review"""
  IN_REVIEW

  """Vendor Status is approved"""
  APPROVED
}

"""Payment Card Profile Bank Status"""
enum CardProfileBankStatus {
  """Bank Status is PENDING"""
  PENDING

  """Bank Status is ready for review"""
  READY_FOR_REVIEW

  """Bank Status is in review"""
  IN_REVIEW

  """Bank Status is approved"""
  APPROVED
}

"""Card Profile Set states"""
enum CardProfileSetStatus {
  """Card Profile Set Status is PENDING"""
  PENDING

  """Card Profile Set Status is ready for review"""
  READY_FOR_REVIEW

  """Card Profile Set Status is in review"""
  IN_REVIEW

  """Card Profile Set Status is approved"""
  APPROVED

  """Card Profile Set Status is inactive"""
  INACTIVE

  """Card Profile Set Status is archived"""
  ARCHIVED
}

"""Card Profile Set Intent"""
enum CardProfileSetIntent {
  """Intended to issue Physical cards"""
  PHYSICAL

  """Intended to issue Digital cards"""
  DIGITAL

  """Intended to issue Virtual cards"""
  VIRTUAL
}

"""Card Profile Set Network"""
enum CardProfileSetNetwork {
  """Card Profile Set Network is VISA"""
  VISA

  """Card Profile Set Network is MASTERCARD"""
  MASTERCARD
}

"""The line type for the physical card profile"""
enum PhysicalCardPersonalizationLineType {
  """The physical card profile is track has default Business Name"""
  BUSINESS_NAME

  """The physical card profile is track has default Cardholder Name"""
  ACCOUNT_HOLDER_NAME

  """The physical card profile track has Custom Name"""
  CUSTOM
}

"""The Personalization type for the virtual card profile"""
enum VirtualCardPersonalizationType {
  """The virtual card profile track has default Business Name"""
  BUSINESS_NAME

  """The virtual card profile track has default person Name"""
  PERSON_NAME

  """The virtual card profile track has business authorized person Name"""
  BUSINESS_AUTHORIZED_PERSON_NAME
}

"""The type of card art document"""
enum CardArtDocumentType {
  """The card art document is a front image of a Physical Card"""
  PHYSICAL_FRONT_OF_CARD

  """The card art document is a back image of a Physical Card"""
  PHYSICAL_BACK_OF_CARD

  """The card art document is a front image of a Digital Card"""
  DIGITAL_FRONT_OF_CARD

  """The card art is the background image of a Digital Card"""
  DIGITAL_BACKGROUND

  """The card art is the logo image of a Digital Card"""
  DIGITAL_LOGO

  """The card art is the icon image of a Digital Card"""
  DIGITAL_ICON

  """The card art document is a front image of a Virtual Card"""
  VIRTUAL_FRONT_OF_CARD

  """The card logo for 3DS verification"""
  VIRTUAL_THREE_DS_VERIFICATION_LOGO
}

"""The vendors for a physical card"""
enum PhysicalCardVendorName {
  """TAG"""
  TAG

  """ARROW_EYE"""
  ARROW_EYE

  """DIGISEQ"""
  DIGISEQ
}

"""The payload for querying card profile sets"""
union CardProfileSetConnectionPayload = CardProfileSetConnection | AccessDeniedError | UserError

"""The input to filter card profile sets"""
input FilteredCardProfileSetsInput {
  status: CardProfileSetStatusInput
  cardProductId: IDFilterInput!
}

"""The input to filter card profile sets on a 'CardProduct'"""
input FilteredCardProductCardProfileSetsInput {
  status: CardProfileSetStatusInput
}

"""The input to filter by card profile set status"""
input CardProfileSetStatusInput {
  """Value matches the provided card profile set status."""
  equals: CardProfileSetStatus

  """Value does not match any of the provided card profile set statuses."""
  excludes: [CardProfileSetStatus!]

  """Value matches any of the provided card profile set statuses."""
  includes: [CardProfileSetStatus!]

  """Value does not match the provided card profile set status."""
  notEquals: CardProfileSetStatus
}

"""The card profile set relationship"""
type CardProfileSetRelationship {
  """ID of the `CardProfileSetRelationship`."""
  id: ID!

  """The parent `CardProfileSet`."""
  cardProfileSet: CardProfileSet

  """
  The date and time, in ISO 8601 format, this `CardProfileSetRelationship` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `CardProfileSetRelationship` was last updated.
  """
  updatedAt: String
}

"""Specify intended POS behavior for card"""
enum ServiceCode {
  """International use magnetic stripe card."""
  INTERNATIONAL_NORMAL_NO_RESTRICTION

  """International use EMV chip card."""
  INTERNATIONAL_ICC_NORMAL_NO_RESTRICTION

  """Magnetic stripe only card."""
  NATIONAL_NORMAL_NO_RESTRICTION
}

"""The details of a card profile bin."""
type CardProfileBin {
  """The ID of the `CardProfileBin`."""
  id: ID!

  """The bin length."""
  length: UnsignedInt

  """The first digits of the bin based on the defined bin length."""
  firstDigitsOfBin: String

  """The configured card brand."""
  network: PaymentCardNetwork

  """The payment card bin classification."""
  classification: PaymentCardBinClassification

  """The payment card bin funding model."""
  fundingModel: PaymentCardBinFundingModel
}

"""The filters used to scope the type of `PaymentTransaction`s returned."""
input PaymentTransactionFilterInput {
  """
  Filter `PaymentTransaction`s by the `CardProduct` used to make the payment.
  
  **Note:** This filter only supports `equals` currently, all other comparison operators will be ignored.
  """
  cardProductId: IDFilterInput

  """
  Filter `PaymentTransaction`s by the `contractId` used to make the payment.
  
  **Note:** This filter only supports `equals` currently, all other comparison operators will be ignored.
  """
  contractId: IDFilterInput

  """
  Filter `PaymentTransaction`s by the `CardHolder`s name used to make the payment.
  
  **Note:** This filter only supports `equals` currently, all other comparison operators will be ignored.
  """
  cardHolderName: StringFilterInput

  """
  Filter `PaymentTransaction`s by the `CardHolder`s email used to make the payment.
  
  **Note:** This filter only supports `equals` currently, all other comparison operators will be ignored.
  """
  cardHolderEmail: StringFilterInput

  """
  Filter `PaymentTransaction`s by it's `PaymentInstruction.disburseTo` ID.
  
  **Note:** This filter only supports `equals` currently, all other comparison operators will be ignored.
  """
  disburseToId: IDFilterInput

  """
  Filter `PaymentTransaction`s by transfer IDs created when `PaymentInstruction`s resolve.
  """
  transferId: IDFilterInput

  """
  Filter `PaymentTransaction`s by `authorizationIdentifier` created when a `PaymentTransaction` is captured.
  """
  authorizationIdentifier: StringFilterInput
}

"""Used to represent cardHolder data."""
input CardHolderInput {
  """
  The full name as represented on the card.
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  """
  fullName: String

  """The email address associated with the Card Holder."""
  email: String

  """The billing address associated with the card."""
  billingAddress: AddressInput
}

"""Used to represent a Payment Card."""
input PaymentCardInput {
  """The primary account number for the payment card."""
  cardNumber: String!

  """
  The year the payment card expires.
  
  Must be formatted as YY.
  """
  expiryYear: String!

  """
  The month the payment card expires.
  
  Must be formatted as MM.
  """
  expiryMonth: String!

  """
  The card security code for the payment card.
  
  [See this link for more](https://en.wikipedia.org/wiki/Card_security_code).
  """
  securityCode: String
}

"""
Possible values for the `PaymentTransactionAddressCodeResponseCode` enum.
"""
enum PaymentTransactionAddressCodeResponseCode {
  """The check was requested to be skipped in the API."""
  SKIPPED

  """The address does match the processor's records."""
  MATCHED

  """The address does not match the processor's records."""
  NOT_MATCHED

  """The address check was not verified by the processor."""
  NOT_VERIFIED

  """The address was not provided at the time of the transaction."""
  NOT_PROVIDED

  """The address was provided but the processor was unable to verify it."""
  UNKNOWN
}

"""Possible values for the `PaymentTransactionCardCodeResponseCode` enum."""
enum PaymentTransactionPostalCodeResponseCode {
  """The check was requested to be skipped in the API."""
  SKIPPED

  """The postal code does match the processor's records."""
  MATCHED

  """The postal code does not match the processor's records."""
  NOT_MATCHED

  """The postal code check was not verified by the processor."""
  NOT_VERIFIED

  """The postal code was not provided at the time of the transaction."""
  NOT_PROVIDED

  """
  The postal code was provided but the processor was unable to verify it.
  """
  UNKNOWN
}

"""
Possible values for the `PaymentTransactionSecurityCodeResponseCode` enum.
"""
enum PaymentTransactionSecurityCodeResponseCode {
  """The check was requested to be skipped in the API."""
  SKIPPED

  """The security code does match the processor's records."""
  MATCHED

  """The security code does not match the processor's records."""
  NOT_MATCHED

  """The security code check was not verified by the processor."""
  NOT_VERIFIED

  """The security code was not provided at the time of the transaction."""
  NOT_PROVIDED

  """
  The security code was provided but the processor was unable to verify it.
  """
  UNKNOWN
}

"""Possible response codes from the processor for a payment transaction."""
enum PaymentTransactionResponseCodeProcessorResponseCode {
  """The authorization was approved."""
  APPROVED

  """
  The authorization was declined. The customer should contact their
  bank for more information on the decline.
  """
  DO_NOT_HONOR

  """The authorization was declined due to the card number being invalid."""
  INVALID_CARD_NUMBER

  """
  The authorization was declined due to the insufficient funds in the account.
  """
  INSUFFICIENT_FUNDS

  """The authorization was declined due to the card being expired."""
  EXPIRED_CARD

  """The authorization was declined due to a security code mismatch."""
  BAD_CVV2

  """The authorization was declined due to the card not being activiated."""
  UNACTIVATED_CARD

  """The authorization was declined due to the card being suspended."""
  SUSPENDED_CARD

  """The authorization was declined due to the card being terminated."""
  TERMINATED_CARD

  """
  The authorization was declined due to the authorization expiration being invalid.
  """
  INVALID_AUTHORIZATION_EXPIRATION

  """
  The authorization was declined due to the card being blocked from transacting.
  """
  BLOCKED_CARD

  """The authorization was declined due to the card being restricted."""
  TRANSACTION_NOT_PERMITTED

  """
  The authorization was declined due to the card's address verification failing.
  """
  RE_ENTER_TRANSACTION

  """The authorization was declined due to the card being closed."""
  CLOSED_ACCOUNT

  """
  The authorization was declined because of a special condition on the card.
  This could be due to the card being temporarily suspended or having an issue with the financial account.
  """
  SPECIAL_CONDITION_NO_PICK_UP

  """
  The authorization was declined due to the merchant not being authorized to process the transaction.
  """
  INVALID_MERCHANT

  """
  The authorization was declined due to incorrect information being provided, or attempting a faulty operation such as refunding a refund.
  This is a generic catch-all response code for a transaction that cannot be declined under other specific response codes.
  """
  INVALID_TRANSACTION

  """
  The authorization was declined due to the approval amount being over the limit.
  """
  EXCEEDS_APPROVAL_AMOUNT_LIMIT

  """
  The authorization was declined because number of transaction exceeded the issuer or approved limit over a set period of time.
  """
  EXCEEDS_WITHDRAWAL_FREQUENCY_LIMIT

  """
  The authorization was declined due to the card being restricted from transacting in this region or country.
  """
  RESTRICTED_LOCATION

  """The authorization response code did not match any of the other codes."""
  UNKNOWN
}

"""Response codes for a payment transaction."""
type PaymentTransactionResponseCode {
  """
  The authorization response code identifier provided by the processor for this `PaymentTransaction` on a successful authorization.
  """
  authorizationIdentifier: String

  """
  The response code from the processor for this `PaymentTransaction`.
  This will include both approval and decline codes.
  """
  processorResponseCode: PaymentTransactionResponseCodeProcessorResponseCode

  """The address code response code for this `PaymentTransaction`."""
  addressCode: PaymentTransactionAddressCodeResponseCode

  """The postal code response code for this `PaymentTransaction`."""
  postalCode: PaymentTransactionPostalCodeResponseCode

  """The security code response code for this `PaymentTransaction`."""
  securityCode: PaymentTransactionSecurityCodeResponseCode
}

"""The connection type for the `paymentTransactions` query."""
type PaymentTransactionsConnection {
  """Information about the current page."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentTransactionsEdge!]
}

"""The edge type for the `paymentTransactions` query."""
type PaymentTransactionsEdge {
  """The cursor for this edge for use in pagination."""
  cursor: String!

  """The `PaymentTransaction`"""
  node: PaymentTransaction
}

"""A payment transaction. This is a record of a payment being made."""
interface PaymentTransaction implements Node {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8602 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String

  """
  The direction funds are moving in the perspective of the customer.
  * when DEBIT, funds are moving out of the customer's account
  * when CREDIT, funds are moving into the customer's account
  """
  accountingDirection: AccountingDirection

  """
  The payment instrument used for the `PaymentTransaction`. Instrument data can be used to display information to the user without violating PCI compliance.
  """
  instrument: PaymentInstrument

  """The status of this `PaymentTransaction`."""
  status: PaymentTransactionStatus

  """Events that have occurred on this `PaymentTransaction`."""
  events: [PaymentTransactionEvent!]

  """Lifecycle steps that have occurred on this `PaymentTransaction`."""
  steps: [PaymentTransactionLifecycleStep!]

  """The total authorized amount remaining for this `PaymentTransaction`."""
  authorizedRemainingAmount: Amount

  """
  The total authorization amount requested for this `PaymentTransaction`.
  """
  requestedAuthorizationAmount: Amount

  """The total amount authorized for this `PaymentTransaction`."""
  authorizedAmount: Amount

  """The total amount settled for this `PaymentTransaction`."""
  settledAmount: Amount

  """The total amount disbursed for this `PaymentTransaction`."""
  disbursedAmount: Amount

  """
  The total authorized amount that has been canceled for this `PaymentTransaction`.
  """
  canceledAmount: Amount

  """The total amount refunded for this `PaymentTransaction`."""
  refundedAmount: Amount

  """The response codes for this `PaymentTransaction`."""
  responseCode: PaymentTransactionResponseCode

  """The fee breakdown for this `PaymentTransaction`."""
  fees: [PaymentTransactionFee!]

  """The total amount of fees associated with this `PaymentTransaction`."""
  totalFeeAmount: Amount

  """The total payable amount for this `PaymentTransaction`."""
  totalPayableAmount: Amount

  """
  The originating `PaymentOrder` that this transaction was initiated from.
  """
  order: PaymentOrder
}

"""Fee associated with a `PaymentTransaction`."""
interface PaymentTransactionFee {
  """The amount of the fee."""
  feeAmount: Amount

  """
  The direction the fees are moving in the perspective of the subscriber.
  * when DEBIT, this fee is deducted from the total payable amount.
  * when CREDIT, this fee is credited to the total payable amount.
  """
  accountingDirection: AccountingDirection
}

"""A fee associated with interchange a `PaymentTransaction`."""
type InterchangeFeePaymentTransactionFee implements PaymentTransactionFee {
  """The amount of the fee."""
  feeAmount: Amount

  """
  The direction the fees are moving in the perspective of the subscriber.
  * when DEBIT, this fee is deducted from the total payable amount.
  * when CREDIT, this fee is credited to the total payable amount.
  """
  accountingDirection: AccountingDirection
}

"""A fee associated with network processing the `PaymentTransaction`."""
type NetworkFeePaymentTransactionFee implements PaymentTransactionFee {
  """The amount of the fee."""
  feeAmount: Amount

  """
  The direction the fees are moving in the perspective of the subscriber.
  * when DEBIT, this fee is deducted from the total payable amount.
  * when CREDIT, this fee is credited to the total payable amount.
  """
  accountingDirection: AccountingDirection
}

"""A fee associated for the merchant to process the `PaymentTransaction`."""
type MerchantFeePaymentTransactionFee implements PaymentTransactionFee {
  """The amount of the fee."""
  feeAmount: Amount

  """
  The direction the fees are moving in the perspective of the subscriber.
  * when DEBIT, this fee is deducted from the total payable amount.
  * when CREDIT, this fee is credited to the total payable amount.
  """
  accountingDirection: AccountingDirection
}

"""
This fee is undetermined. Contact Highnote to get more details about this fee.
"""
type UndeterminedFeePaymentTransactionFee implements PaymentTransactionFee {
  """The amount of the fee."""
  feeAmount: Amount

  """
  The direction the fees are moving in the perspective of the subscriber.
  * when DEBIT, this fee is deducted from the total payable amount.
  * when CREDIT, this fee is credited to the total payable amount.
  """
  accountingDirection: AccountingDirection
}

"""
A payment transaction for a purchase. This is a record of a payment being made.
"""
type PaymentDebitTransaction implements PaymentTransaction & Node {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String

  """
  The direction funds are moving in the perspective of the customer.
  
  For a `PaymentDebitTransaction`, this will always be `DEBIT`.
  """
  accountingDirection: AccountingDirection

  """
  The payment instrument used for the `PaymentTransaction`. Instrument data can be used to display information to the user without violating PCI compliance.
  """
  instrument: PaymentInstrument

  """The status of this `PaymentTransaction`."""
  status: PaymentTransactionStatus

  """Events that have occurred on this `PaymentTransaction`."""
  events: [PaymentTransactionEvent!]

  """Lifecycle steps that have occurred on this `PaymentTransaction`."""
  steps: [PaymentTransactionLifecycleStep!]

  """The total authorized amount remaining for this `PaymentTransaction`."""
  authorizedRemainingAmount: Amount

  """
  The total authorization amount requested for this `PaymentTransaction`.
  """
  requestedAuthorizationAmount: Amount

  """The total amount authorized for this `PaymentTransaction`."""
  authorizedAmount: Amount

  """The total amount settled for this `PaymentTransaction`."""
  settledAmount: Amount

  """The total amount disbursed for this `PaymentTransaction`."""
  disbursedAmount: Amount

  """
  The total authorized amount that has been canceled for this `PaymentTransaction`.
  """
  canceledAmount: Amount

  """The total amount refunded for this `PaymentTransaction`."""
  refundedAmount: Amount

  """The response codes for this `PaymentTransaction`."""
  responseCode: PaymentTransactionResponseCode

  """Any refunds that were initiated from this PaymentTransaction."""
  refunds: [PaymentCreditTransaction!]

  """The Network Transaction ID for this `PaymentTransaction`."""
  networkTransactionIdentifier: String

  """The fee breakdown for this `PaymentTransaction`."""
  fees: [PaymentTransactionFee!]

  """The total amount of fees associated with this `PaymentTransaction`."""
  totalFeeAmount: Amount

  """The total payable amount for this `PaymentTransaction`."""
  totalPayableAmount: Amount

  """
  The originating `PaymentOrder` that this transaction was initiated from.
  """
  order: PaymentOrder
}

"""
A payment transaction for a refund. This is a record of a payment being refunded.
"""
type PaymentCreditTransaction implements PaymentTransaction & Node {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String

  """
  The direction funds are moving in the perspective of the customer.
  
  For a `PaymentCreditTransaction`, this will always be `CREDIT`.
  """
  accountingDirection: AccountingDirection

  """
  The payment instrument used for the `PaymentTransaction`. Instrument data can be used to display information to the user without violating PCI compliance.
  """
  instrument: PaymentInstrument

  """The status of this `PaymentTransaction`."""
  status: PaymentTransactionStatus

  """Events that have occurred on this `PaymentTransaction`."""
  events: [PaymentTransactionEvent!]

  """Lifecycle steps that have occurred on this `PaymentTransaction`."""
  steps: [PaymentTransactionLifecycleStep!]

  """The total authorized amount remaining for this `PaymentTransaction`."""
  authorizedRemainingAmount: Amount

  """
  The total authorization amount requested for this `PaymentTransaction`.
  """
  requestedAuthorizationAmount: Amount

  """The total amount authorized for this `PaymentTransaction`."""
  authorizedAmount: Amount

  """The total amount settled for this `PaymentTransaction`."""
  settledAmount: Amount

  """The total amount disbursed for this `PaymentTransaction`."""
  disbursedAmount: Amount

  """
  The total authorized amount that has been canceled for this `PaymentTransaction`.
  """
  canceledAmount: Amount

  """The total amount refunded for this `PaymentTransaction`."""
  refundedAmount: Amount

  """The response codes for this `PaymentTransaction`."""
  responseCode: PaymentTransactionResponseCode

  """
  The originating `PaymentDebitTransaction` that this refund was initiated from.
  """
  originatedPaymentTransaction: PaymentDebitTransaction

  """The fee breakdown for this `PaymentTransaction`."""
  fees: [PaymentTransactionFee!]

  """The total amount of fees associated with this `PaymentTransaction`."""
  totalFeeAmount: Amount

  """The total payable amount for this `PaymentTransaction`."""
  totalPayableAmount: Amount

  """
  The reason why the `PaymentTransaction` was refunded to the original payment method
  """
  refundReason: PaymentCreditTransactionRefundReason

  """
  Include additional information regarding the refund for tracking and analysis
  """
  refundNote: String

  """
  The originating `PaymentOrder` that this transaction was initiated from.
  """
  order: PaymentOrder
}

"""Used to represent data available on a Payment Card."""
type PaymentCardInstrument {
  """The payment card brand."""
  brand: AcquiringPaymentCardBrand

  """The last 4 digits of the payment card."""
  last4: String

  """
  The year the payment card expires.
  
  Formatted as YYYY.
  """
  expiryYear: String

  """
  The month the payment card expires.
  
  Formatted as MM.
  """
  expiryMonth: String

  """The cardHolder data for the payment card."""
  cardHolder: CardHolder

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""The brand which the payment card belongs to."""
enum AcquiringPaymentCardBrand {
  """The payment card brand is unknown."""
  UNKNOWN

  """The payment card belongs to the Visa brand."""
  VISA

  """The payment card belongs to the Mastercard brand."""
  MASTERCARD

  """The payment card belongs to the American Express brand."""
  AMERICAN_EXPRESS

  """The payment card belongs to the Discover brand."""
  DISCOVER

  """The payment card belongs to the JCB brand."""
  JCB

  """The payment card belongs to the Diners Club brand."""
  DINERS_CLUB

  """The payment card belongs to the UnionPay brand."""
  UNIONPAY

  """The payment card belongs to the Maestro brand."""
  MAESTRO
}

"""Used to represent cardHolder data."""
type CardHolder {
  """The full name as represented on the card."""
  fullName: String

  """The email address associated with the Card Holder."""
  email: String

  """The billing address associated with the card."""
  billingAddress: Address
}

"""Represents a synchronous payment event at Highnote."""
interface PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""Represents a synchronous card authorized payment event at Highnote."""
type CardPaymentAuthorizedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a synchronous card incremental authorized payment event at Highnote.
"""
type CardPaymentIncrementalAuthorizedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a synchronous card authorization declined payment event at Highnote.
"""
type CardPaymentAuthorizationDeclinedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""Represents a synchronous card reversed payment event at Highnote."""
type CardPaymentReversedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a synchronous card partial reversed payment event at Highnote.
"""
type CardPaymentPartialReversedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""Represents a synchronous card capturing payment event at Highnote."""
type CardPaymentCapturingEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""Represents a synchronous card captured payment event at Highnote."""
type CardPaymentCapturedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount @deprecated(reason: "Use `CardPaymentCaptureProcessingEvent` instead.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Use `CardPaymentCaptureProcessingEvent` instead.")

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String @deprecated(reason: "Use `CardPaymentCaptureProcessingEvent` instead.")
}

"""
Represents a synchronous card capture processing payment event at Highnote.
"""
type CardPaymentCaptureProcessingEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""Represents a synchronous card settled payment event at Highnote."""
type CardPaymentSettledEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount @deprecated(reason: "Use `CardPaymentClearedEvent` instead.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Use `CardPaymentClearedEvent` instead.")

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String @deprecated(reason: "Use `CardPaymentClearedEvent` instead.")
}

"""Represents a synchronous card cleared payment event at Highnote."""
type CardPaymentClearedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a synchronous card clearing failed payment event at Highnote.
"""
type CardPaymentClearingFailedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""Represents a synchronous card disbursed payment event at Highnote."""
type CardPaymentDisbursedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a synchronous card incremental authorization declined payment event at Highnote.
"""
type CardPaymentIncrementalAuthorizationDeclinedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a synchronous card reversal declined payment event at Highnote.
"""
type CardPaymentReversalDeclinedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a synchronous card capture declined payment event at Highnote.
"""
type CardPaymentCaptureDeclinedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""Represents a disbursement payout event for a `PaymentTransaction`."""
type CardPaymentPayoutEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String
}

"""
Represents a completed payout transfer event for a `PaymentTransaction`.

This event is created when the funds are transferred.

See `transferedTo` for more details in where it transferred to.
"""
type PayoutTransferCompletedEvent implements PaymentTransactionEvent {
  """The amount effected by the `PaymentTransactionEvent`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String

  """The node where the funds were transferred to."""
  transferredTo: TransferredEventNode
}

union TransferredEventNode = InterFinancialAccountTransfer

"""The status of a `PaymentTransactionLifecycleStep`"""
enum PaymentTransactionLifecycleStepStatus {
  """
  The step has not completed yet. Further events are expected for this step.
  """
  PENDING

  """The step has completed. No further events are expected for this step."""
  COMPLETED

  """
  The step has been declined. An event has returned for this step that prevents the step from continuing.
  """
  DECLINED

  """The step status does not match any of the other statuses."""
  UNKNOWN
}

"""
A payment transaction event. This is a record of a payment transaction moving money.
"""
interface PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """Events associated with this event."""
  events: [PaymentTransactionEvent!]

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction
}

"""
Record of a payment transaction authorizing an amount with a `PaymentMethod`.
"""
type CardAuthorizedStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount @deprecated(reason: "Use `CardAuthorizationStep` instead.")

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus @deprecated(reason: "Use `CardAuthorizationStep` instead.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Use `CardAuthorizationStep` instead.")

  """Events associated with this event."""
  events: [PaymentTransactionEvent!] @deprecated(reason: "Use `CardAuthorizationStep` instead.")

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction @deprecated(reason: "Use `CardAuthorizationStep` instead.")
}

"""
Record of a payment transaction authorizing an amount with a `PaymentMethod`.
"""
type CardAuthorizationStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """Events associated with this event."""
  events: [PaymentTransactionEvent!]

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction
}

"""Record of a payment transaction authorized some incremental amount."""
type CardIncrementalAuthorizedStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount @deprecated(reason: "Use `CardIncrementalAuthorizationStep` instead.")

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus @deprecated(reason: "Use `CardIncrementalAuthorizationStep` instead.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Use `CardIncrementalAuthorizationStep` instead.")

  """Events associated with this event."""
  events: [PaymentTransactionEvent!] @deprecated(reason: "Use `CardIncrementalAuthorizationStep` instead.")

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction @deprecated(reason: "Use `CardIncrementalAuthorizationStep` instead.")
}

"""Record of a payment transaction authorized some incremental amount."""
type CardIncrementalAuthorizationStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """Events associated with this event."""
  events: [PaymentTransactionEvent!]

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction
}

"""Record of a payment transaction authorization being canceled."""
type CardReversedStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount @deprecated(reason: "Use `CardReversalStep` instead.")

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus @deprecated(reason: "Use `CardReversalStep` instead.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Use `CardReversalStep` instead.")

  """Events associated with this event."""
  events: [PaymentTransactionEvent!] @deprecated(reason: "Use `CardReversalStep` instead.")

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction @deprecated(reason: "Use `CardReversalStep` instead.")
}

"""Record of a payment transaction authorization being canceled."""
type CardReversalStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """Events associated with this event."""
  events: [PaymentTransactionEvent!]

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction
}

"""
Deprecated: Reference `CardAuthorizationStep` and `CardCaptureStep` instead of `CardAuthorizationAndCaptureStep`.
"""
type CardAuthorizationAndCaptureStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount @deprecated(reason: "Highnote will return `CardAuthorizationStep` and `CardCaptureStep` instead of `CardAuthorizationAndCaptureStep`.")

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus @deprecated(reason: "Highnote will return `CardAuthorizationStep` and `CardCaptureStep` instead of `CardAuthorizationAndCaptureStep`.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Highnote will return `CardAuthorizationStep` and `CardCaptureStep` instead of `CardAuthorizationAndCaptureStep`.")

  """Events associated with this event."""
  events: [PaymentTransactionEvent!] @deprecated(reason: "Highnote will return `CardAuthorizationStep` and `CardCaptureStep` instead of `CardAuthorizationAndCaptureStep`.")

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction @deprecated(reason: "Highnote will return `CardAuthorizationStep` and `CardCaptureStep` instead of `CardAuthorizationAndCaptureStep`.")
}

"""
Record of a payment transaction refunding an amount to a `PaymentMethod`.
"""
type CardCreditedStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount @deprecated(reason: "Use `CardCreditStep` instead.")

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus @deprecated(reason: "Use `CardCreditStep` instead.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Use `CardCreditStep` instead.")

  """Events associated with this event."""
  events: [PaymentTransactionEvent!] @deprecated(reason: "Use `CardCreditStep` instead.")

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction @deprecated(reason: "Use `CardCreditStep` instead.")
}

"""
Record of a payment transaction refunding an amount to a `PaymentMethod`.
"""
type CardCreditStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """Events associated with this event."""
  events: [PaymentTransactionEvent!]

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction
}

"""
Record of a payment transaction capturing an amount with a `PaymentMethod`.
"""
type CardCapturedStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount @deprecated(reason: "Use `CardCaptureStep` instead.")

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus @deprecated(reason: "Use `CardCaptureStep` instead.")

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String @deprecated(reason: "Use `CardCaptureStep` instead.")

  """Events associated with this event."""
  events: [PaymentTransactionEvent!] @deprecated(reason: "Use `CardCaptureStep` instead.")

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction @deprecated(reason: "Use `CardCaptureStep` instead.")
}

"""
Record of a payment transaction capturing an amount with a `PaymentMethod`.
"""
type CardCaptureStep implements PaymentTransactionLifecycleStep {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The current status for this step."""
  status: PaymentTransactionLifecycleStepStatus

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """Events associated with this event."""
  events: [PaymentTransactionEvent!]

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransaction
}

"""Different statues that a `PaymentTransaction` can be."""
enum PaymentTransactionStatus {
  """
  PENDING indicates that there are required `PaymentTransactionLifecycleStep`s that have not yet been completed. Once all the required steps are completed, this state will transition.
  """
  PENDING

  """
  COMPLETED indicates that the `PaymentTransactionLifecycleStep` has finished with required states and disbursed the funds.
  """
  COMPLETED

  """
  REVERSED indicates that all remaining authorized amounts on this `PaymentTransaction` have been reversed.
  """
  REVERSED

  """
  PENDING_DISPUTE indicates that the `PaymentTransaction` has a pending dispute.
  """
  PENDING_DISPUTE

  """DISPUTED indicates that the `PaymentTransaction` has a dispute."""
  DISPUTED

  """
  DECLINED indicates that the `PaymentTransaction` was declined. This can happen if the payment method was invalid, or the payment method has insufficient funds.
  """
  DECLINED
}

"""Used to represent the payment method data."""
union PaymentInstrument = PaymentCardInstrument

interface PaymentTransactionSummary {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """
  The direction funds are moving in the perspective of the customer.
  * when DEBIT, funds are moving out of the customer's account
  * when CREDIT, funds are moving into the customer's account
  """
  accountingDirection: AccountingDirection

  """The total authorized amount remaining for this `PaymentTransaction`."""
  authorizedRemainingAmount: Amount

  """
  The total authorization amount requested for this `PaymentTransaction`.
  """
  requestedAuthorizationAmount: Amount

  """The total amount authorized for this `PaymentTransaction`."""
  authorizedAmount: Amount

  """The total amount settled for this `PaymentTransaction`."""
  settledAmount: Amount

  """The total amount disbursed for this `PaymentTransaction`."""
  disbursedAmount: Amount

  """
  The total authorized amount that has been canceled for this `PaymentTransaction`.
  """
  canceledAmount: Amount

  """The total amount refunded for this `PaymentTransaction`."""
  refundedAmount: Amount

  """The response codes for this `PaymentTransaction`."""
  responseCode: PaymentTransactionResponseCode

  """
  The payment instrument used for the `PaymentTransaction`. Instrument data can be used to display information to the user without violating PCI compliance.
  """
  instrument: PaymentInstrument
}

type PaymentDebitTransactionSummary implements PaymentTransactionSummary {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """
  The direction funds are moving in the perspective of the customer.
  * when DEBIT, funds are moving out of the customer's account
  * when CREDIT, funds are moving into the customer's account
  """
  accountingDirection: AccountingDirection

  """The total authorized amount remaining for this `PaymentTransaction`."""
  authorizedRemainingAmount: Amount

  """
  The total authorization amount requested for this `PaymentTransaction`.
  """
  requestedAuthorizationAmount: Amount

  """The total amount authorized for this `PaymentTransaction`."""
  authorizedAmount: Amount

  """The total amount settled for this `PaymentTransaction`."""
  settledAmount: Amount

  """The total amount disbursed for this `PaymentTransaction`."""
  disbursedAmount: Amount

  """
  The total authorized amount that has been canceled for this `PaymentTransaction`.
  """
  canceledAmount: Amount

  """The total amount refunded for this `PaymentTransaction`."""
  refundedAmount: Amount

  """The response codes for this `PaymentTransaction`."""
  responseCode: PaymentTransactionResponseCode

  """The Network Transaction ID for this `PaymentTransaction`."""
  networkTransactionIdentifier: String

  """
  The payment instrument used for the `PaymentTransaction`. Instrument data can be used to display information to the user without violating PCI compliance.
  """
  instrument: PaymentInstrument
}

type PaymentCreditTransactionSummary implements PaymentTransactionSummary {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """
  The direction funds are moving in the perspective of the customer.
  * when DEBIT, funds are moving out of the customer's account
  * when CREDIT, funds are moving into the customer's account
  """
  accountingDirection: AccountingDirection

  """The total authorized amount remaining for this `PaymentTransaction`."""
  authorizedRemainingAmount: Amount

  """
  The total authorization amount requested for this `PaymentTransaction`.
  """
  requestedAuthorizationAmount: Amount

  """The total amount authorized for this `PaymentTransaction`."""
  authorizedAmount: Amount

  """The total amount settled for this `PaymentTransaction`."""
  settledAmount: Amount

  """The total amount disbursed for this `PaymentTransaction`."""
  disbursedAmount: Amount

  """
  The total authorized amount that has been canceled for this `PaymentTransaction`.
  """
  canceledAmount: Amount

  """The total amount refunded for this `PaymentTransaction`."""
  refundedAmount: Amount

  """The response codes for this `PaymentTransaction`."""
  responseCode: PaymentTransactionResponseCode

  """
  The ID for the originating `PaymentDebitTransaction` that this refund was initiated from.
  """
  originatedPaymentTransactionId: ID!

  """
  The payment instrument used for the `PaymentTransaction`. Instrument data can be used to display information to the user without violating PCI compliance.
  """
  instrument: PaymentInstrument

  """
  The reason why the `PaymentCreditTransaction` was refunded to the original payment method
  """
  refundReason: PaymentCreditTransactionRefundReason

  """
  Include additional information regarding the refund for tracking and analysis
  """
  refundNote: String
}

"""
A payment transaction lifecycle step summary. This is a summary record of a payment transaction moving money returned
from a mutation.
"""
interface PaymentTransactionLifecycleStepSummary {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentTransactionSummary
}

"""
Record of a payment transaction authorizing an amount with a `PaymentMethod`.
"""
type CardAuthorizationStepSummary implements PaymentTransactionLifecycleStepSummary {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The `PaymentTransactionSummary` associated with this event."""
  transaction: PaymentDebitTransactionSummary
}

"""
Record of a payment transaction capturing an amount with a `PaymentMethod`.
"""
type CardCaptureStepSummary implements PaymentTransactionLifecycleStepSummary {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The `PaymentTransactionSummary` associated with this event."""
  transaction: PaymentDebitTransactionSummary
}

"""
Record of an `PaymentOrder` capturing an amount with a `PaymentMethod`.
"""
type CardCapturePaymentOrderSummary implements PaymentTransactionLifecycleStepSummary {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The `PaymentTransactionSummary` associated with this event."""
  transaction: PaymentDebitTransactionSummary

  """The `PaymentOrder` associated with this `PaymentTransaction`."""
  order: PaymentOrder
}

"""Input for authroizing a payment card."""
input AuthorizePaymentCardInput {
  """The payment card to authorize."""
  paymentCard: PaymentCardInput!

  """The cardHolder to associate the payment card with."""
  cardHolder: CardHolderInput

  """The amount to authorize."""
  amount: AmountInput!

  """
  How the payment was initiated.
  If the payment was initiated by the customer, include the way in which payment details were given (i.e. via the web, over the phone, by mail, etc).
  If the payment was merchant initiated, define the reason for the payment (i.e. recurring, installment, etc).
  """
  paymentInitiator: AcquiringPaymentInitiator

  """Indicates that the `PaymentCardInput` is stored externally."""
  externalCredentialOnFile: AcquiringExternalCredentialOnFileInput

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""Input for authorizing a `PaymentMethodToken`."""
input AuthorizePaymentMethodTokenInput {
  """The `PaymentMethodToken` to authorize."""
  paymentMethodTokenId: ID!

  """The amount to authorize."""
  amount: AmountInput!

  """
  How the payment was initiated.
  If the payment was initiated by the customer, include the way in which payment details were given (i.e. via the web, over the phone, by mail, etc).
  If the payment was merchant initiated, define the reason for the payment (i.e. recurring, installment, etc).
  """
  paymentInitiator: AcquiringPaymentInitiator

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""Record of a payment transaction authorization being canceled."""
type CardReversalStepSummary implements PaymentTransactionLifecycleStepSummary {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The `PaymentTransaction` associated with this event."""
  transaction: PaymentDebitTransactionSummary
}

"""
Record of a payment transaction refunding an amount to a `PaymentMethod`.
"""
type CardCreditStepSummary implements PaymentTransactionLifecycleStepSummary {
  """The amount for this `PaymentTransaction`."""
  amount: Amount

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The `PaymentTransactionSummary` associated with this event."""
  transaction: PaymentCreditTransactionSummary
}

"""Input for capturing a payment transaction."""
input CapturePaymentTransactionInput {
  """The payment transaction to capture."""
  paymentTransactionId: ID!

  """
  The amount to capture.
  
  Defaults to capture the remaining authorized amount.
  """
  amount: AmountInput

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
Input for canceling the remaining authorized amount from a payment transaction.
"""
input CancelPaymentTransactionInput {
  """The payment transaction to cancel the remaining authorized amount."""
  paymentTransactionId: ID!

  """
  The amount to cancel.
  
  Defaults to cancel the remaining authorized amount.
  """
  amount: AmountInput

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
The reason why the `PaymentTransaction` was refunded to the original payment method
"""
enum PaymentCreditTransactionRefundReason {
  """
  The transaction was refunded since it was a duplicate of a previous transaction.
  """
  DUPLICATE_TRANSACTION

  """The transaction was refunded at the behest of the customer."""
  CUSTOMER_REQUESTED

  """
  The transaction was refunded as the payment was directed to the wrong recipient.
  """
  INCORRECT_RECIPIENT

  """
  The transaction was refunded due the determination that the payment was fraudulent.
  """
  FRAUD

  """The transaction was refunded for another reason."""
  OTHER
}

"""Input for refunding a payment transaction."""
input RefundPaymentTransactionInput {
  """The payment transaction to refund."""
  paymentTransactionId: ID!

  """The amount to refund."""
  amount: AmountInput!

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey

  """
  The reason why the `PaymentTransaction` was refunded to the original payment method
  """
  refundReason: PaymentCreditTransactionRefundReason!

  """
  Include additional information regarding the refund for tracking and analysis
  """
  refundNote: String
}

"""Input for verifying a payment card."""
input VerifyPaymentCardInput {
  """The payment card to verify."""
  paymentCard: PaymentCardInput!

  """The cardHolder to associate the payment card with."""
  cardHolder: CardHolderInput

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """The idempotency key for this request."""
  idempotencyKey: IdempotencyKey
}

"""
Enum representing the different ways that a payment has been initiated.
"""
enum AcquiringPaymentInitiator {
  """The payment method was submitted to the merchant on the web."""
  CUSTOMER_INITIATED_VIA_WEB

  """
  The payment method was submitted to the merchant over mail order, or telephone.
  """
  CUSTOMER_INITIATED_VIA_MAIL_ORDER_OR_TELEPHONE_ORDER

  """
  The payment method was submitted to the merchant with an agreement to store the payment method for recurring payments.
  """
  CUSTOMER_INITIATED_RECURRING_FIRST

  """
  The merchant is using a customer's stored payment method and the payment is unscheduled.
  
  An example of when to use this would be reloading a balance or collecting payment after conditions have been met to take payment.
  """
  MERCHANT_INITIATED_TRANSACTION_UNSCHEDULED

  """
  The merchant is using a customer's stored payment method and the payment is recurring.
  
  An example of this is paying for a subscription.
  """
  MERCHANT_INITIATED_TRANSACTION_RECURRING
}

"""Input for specifying an externally stored credential on file."""
input AcquiringExternalCredentialOnFileInput {
  """
  The network transaction id to use for this transaction.
  
  Required, except when `intendToStore` is `false`.
  """
  networkTransactionIdentifier: String

  """
  Indicates that the `PaymentCardInput` will be stored externally, after
  the `PaymentCardInput` has been used in this transaction successfully.
  
  Required, except when `networkTransactionIdentifier` is provided.
  """
  intendToStore: Boolean
}

"""Input for charging a payment card."""
input ChargePaymentCardInput {
  """The payment card to charge."""
  paymentCard: PaymentCardInput!

  """The cardHolder to associate the tokenized payment card with."""
  cardHolder: CardHolderInput

  """The amount to charge."""
  amount: AmountInput!

  """
  How the payment was initiated.
  If the payment was initiated by the customer, include the way in which payment details were given (i.e. via the web, over the phone, by mail, etc).
  If the payment was merchant initiated, define the reason for the payment (i.e. recurring, installment, etc).
  """
  paymentInitiator: AcquiringPaymentInitiator

  """Indicates that the `PaymentCardInput` is or will be stored externally."""
  externalCredentialOnFile: AcquiringExternalCredentialOnFileInput

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""Input for charging an `PaymentOrder` via a `PaymentMethodToken`."""
input ChargePaymentOrderPaymentMethodTokenInput {
  """The `PaymentOrder` to charge."""
  orderId: ID!

  """
  The amount to charge. If not provided, the remaining authorized amount will be charged.
  """
  amount: AmountInput

  """The `PaymentMethodToken` to charge."""
  paymentMethodTokenId: ID!

  """
  How the payment was initiated.
  If the payment was initiated by the customer, include the way in which payment details were given (i.e. via the web, over the phone, by mail, etc).
  If the payment was merchant initiated, define the reason for the payment (i.e. recurring, installment, etc).
  """
  paymentInitiator: AcquiringPaymentInitiator

  """Indicates that the `PaymentCardInput` is or will be stored externally."""
  externalCredentialOnFile: AcquiringExternalCredentialOnFileInput

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""Input for charging an `PaymentOrder`."""
input ChargePaymentOrderInput {
  """The payment card to charge."""
  paymentCard: PaymentCardInput!

  """The cardHolder to associate the tokenized payment card with."""
  cardHolder: CardHolderInput

  """The ID of the `PaymentOrder` to charge."""
  orderId: ID!

  """
  The amount to charge. If not provided, the remaining authorized amount will be charged.
  """
  amount: AmountInput

  """
  How the payment was initiated.
  If the payment was initiated by the customer, include the way in which payment details were given (i.e. via the web, over the phone, by mail, etc).
  If the payment was merchant initiated, define the reason for the payment (i.e. recurring, installment, etc).
  """
  paymentInitiator: AcquiringPaymentInitiator

  """Indicates that the `PaymentCardInput` is or will be stored externally."""
  externalCredentialOnFile: AcquiringExternalCredentialOnFileInput

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""Input for charging a `PaymentMethodToken`."""
input ChargePaymentMethodTokenInput {
  """The `PaymentMethodToken` to charge."""
  paymentMethodTokenId: ID!

  """The amount to charge."""
  amount: AmountInput!

  """
  How the payment was initiated.
  If the payment was initiated by the customer, include the way in which payment details were given (i.e. via the web, over the phone, by mail, etc).
  If the payment was merchant initiated, define the reason for the payment (i.e. recurring, installment, etc).
  """
  paymentInitiator: AcquiringPaymentInitiator

  """
  Optional contract ID to use for this transaction.
  
  If not provided, the default contract ID will be used.
  """
  contractId: ID

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""Response codes for a payment card verification."""
type PaymentCardVerificationResponseCode {
  """The response code from the processor for this verification."""
  processorResponseCode: PaymentTransactionResponseCodeProcessorResponseCode

  """The address code response code for this verification."""
  addressCode: PaymentTransactionAddressCodeResponseCode

  """The postal code response code for this verification."""
  postalCode: PaymentTransactionPostalCodeResponseCode

  """The security code response code for this verification."""
  securityCode: PaymentTransactionSecurityCodeResponseCode
}

"""The result of a verification check ran against a payment card."""
type PaymentCardVerification {
  """The result of the verification ran on the payment card."""
  responseCode: PaymentCardVerificationResponseCode

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String
}

"""Result of authorizing a payment card."""
union AuthorizePaymentCardPayload = AccessDeniedError | UserError | CardAuthorizationStepSummary

"""Result of authorizing a payment method token."""
union AuthorizePaymentMethodTokenPayload = AccessDeniedError | UserError | CardAuthorizationStepSummary

"""Result of capturing a payment transaction."""
union CapturePaymentTransactionPayload = AccessDeniedError | UserError | CardCaptureStepSummary

"""Result of charging a payment card."""
union ChargePaymentCardPayload = AccessDeniedError | UserError | CardCaptureStepSummary

"""Result of charging an order."""
union ChargePaymentOrderPayload = AccessDeniedError | UserError | CardCapturePaymentOrderSummary

"""Result of charging a payment method token."""
union ChargePaymentMethodTokenPayload = AccessDeniedError | UserError | CardCaptureStepSummary

"""Result of canceling a payment transaction."""
union CancelPaymentTransactionPayload = AccessDeniedError | UserError | CardReversalStepSummary

"""Result of refunding a payment transaction."""
union RefundPaymentTransactionPayload = AccessDeniedError | UserError | CardCreditStepSummary

"""Result of verifying a payment card."""
union VerifyPaymentCardPayload = AccessDeniedError | UserError | PaymentCardVerification

"""Describes start and end timestamp of returned response."""
type BusinessMetricTimeRange {
  """An ISO 8601 value (inclusive) for the beginning date."""
  start: String

  """An ISO 8601 value (inclusive) for the ending date."""
  end: String
}

"""Sort types of the metric returned in response."""
enum BusinessMetricAttributeSortedDirection {
  """Ascending order."""
  ASCENDING

  """Descending order."""
  DESCENDING
}

"""Describes generic metric Result interface."""
interface BusinessMetricResult {
  """An ISO 8601 value (inclusive) for the beginning and end date."""
  timeRange: BusinessMetricTimeRange

  """Data freshness timestamp of metrics."""
  asOf: String
}

"""Describes attributes of a sorted metric."""
interface BusinessMetricSortAttribute {
  """Sort by Ascending or Descending, Descending as default."""
  sortedDirection: BusinessMetricAttributeSortedDirection
}

"""Describes metric Result of card product application metric."""
type CardProductApplicationBusinessMetricResult implements BusinessMetricResult {
  """An ISO 8601 value (inclusive) for the beginning and end date."""
  timeRange: BusinessMetricTimeRange

  """Data freshness timestamp of metrics."""
  asOf: String

  """Returned list of cardProductApplicationBusinessMetrics."""
  cardProductApplicationBusinessMetrics: [CardProductApplicationBusinessMetric!]
}

"""Describes the metrics for applications."""
type CardProductApplicationBusinessMetric {
  """An ISO 8601 value (inclusive) for the beginning and end date."""
  timeRange: BusinessMetricTimeRange

  """The created applications."""
  createdApplications: CreatedOrApprovedApplicationBusinessMetricAttribute

  """The approved applications."""
  approvedApplications: CreatedOrApprovedApplicationBusinessMetricAttribute

  """The denied applications."""
  deniedApplications: UnsignedInt

  """The in review applications."""
  inReviewApplications: UnsignedInt

  """The pending applications."""
  pendingApplications: UnsignedInt

  """The closed applications."""
  closedApplications: UnsignedInt
}

"""Describes attributes of an approved application metric."""
type CreatedOrApprovedApplicationBusinessMetricAttribute {
  """The total number of approved or created applications."""
  total: UnsignedInt

  """The total authorized user number."""
  authorizedUsers: UnsignedInt

  """The total account holder number."""
  accountHolders: UnsignedInt
}

"""Used to filter which application metrics are requested."""
input CardProductApplicationBusinessMetricFilterInput {
  """Filters application metrics by TimeRange, start and end are inclusive."""
  timeRange: TimestampFilterInputRange

  """Filters application metrics by CardProductId, optional."""
  cardProductIds: [String!]
}

"""Describes metric Result of card product transaction metric."""
type PaymentCardTransactionBusinessMetricResult implements BusinessMetricResult {
  """An ISO 8601 value (inclusive) for the beginning and end date."""
  timeRange: BusinessMetricTimeRange

  """Data freshness timestamp of metrics."""
  asOf: String

  """Returned list of PaymentCardTransactionBusinessMetric."""
  paymentCardTransactionBusinessMetrics: [PaymentCardTransactionBusinessMetric!]
}

"""Describes the metrics for transactions."""
type PaymentCardTransactionBusinessMetric {
  """An ISO 8601 value (inclusive) for the beginning and end date."""
  timeRange: BusinessMetricTimeRange

  """The approved authorized transaction attributes."""
  approvedAuthorization: TransactionBusinessMetricAttribute

  """The declined transaction attributes."""
  declinedAuthorization: DeclinedTransactionBusinessMetricAttribute

  """The cleared transaction attributes."""
  clearedTransactions: ClearedTransactionBusinessMetricAttribute
}

"""Describes attributes of a transaction metric."""
type TransactionBusinessMetricAttribute {
  """The count field attributes of a transaction."""
  count: UnsignedInt

  """The amount field attributes of a transaction."""
  amount: Amount
}

"""Describes attributes of a declined transaction reason metric."""
type DeclinedTransactionResponseCodeBusinessMetricAttribute {
  """The total number of declined transactions."""
  count: UnsignedInt

  """The total amount of declined transactions."""
  amount: Amount

  """Declined response code."""
  responseCode: TransactionEventResponseCode
}

"""Describes declined transaction reasons metric."""
type DeclinedTransactionResponseCodeBusinessMetric implements BusinessMetricSortAttribute {
  """Sort by Ascending or Descending, Descending as default."""
  sortedDirection: BusinessMetricAttributeSortedDirection

  """Declined response code attributes."""
  responseCodeAttributes: [DeclinedTransactionResponseCodeBusinessMetricAttribute!]
}

"""Describes attributes of a declined transaction metric."""
type DeclinedTransactionBusinessMetricAttribute {
  """The count field attributes of a transaction."""
  count: UnsignedInt

  """The amount field attributes of a transaction."""
  amount: Amount

  """List of response codes."""
  responseCode: DeclinedTransactionResponseCodeBusinessMetric
}

"""
Describes attributes of a cleared transaction merchant Category metric.
"""
type ClearedTransactionMerchantCategoryBusinessMetricAttribute {
  """The total number of cleared transactions for the merchant category."""
  count: UnsignedInt

  """The total amount of cleared transactions for the merchant category."""
  amount: Amount

  """Merchant category."""
  merchantCategory: MerchantCategory
}

"""Describes attributes of a cleared transaction merchant name metric."""
type ClearedTransactionMerchantNameBusinessMetricAttribute {
  """The total number of cleared transactions for the merchant."""
  count: UnsignedInt

  """The total amount of cleared transactions for the merchant."""
  amount: Amount

  """Merchant name."""
  merchantName: String
}

"""Describes cleared transaction merchant category metrics."""
type ClearedTransactionBusinessMetricTopMerchantCategory implements BusinessMetricSortAttribute {
  """Sort by Ascending or Descending, Descending as default."""
  sortedDirection: BusinessMetricAttributeSortedDirection

  """Top merchant category."""
  topMerchantCategoryAttributes: [ClearedTransactionMerchantCategoryBusinessMetricAttribute!]
}

"""Describes cleared transaction merchant metrics."""
type ClearedTransactionBusinessMetricTopMerchantName implements BusinessMetricSortAttribute {
  """Sort by Ascending or Descending, Descending as default."""
  sortedDirection: BusinessMetricAttributeSortedDirection

  """Top merchant name."""
  topMerchantNameAttributes: [ClearedTransactionMerchantNameBusinessMetricAttribute!]
}

"""Describes attributes of a cleared transaction metric."""
type ClearedTransactionBusinessMetricAttribute {
  """The total number of cleared transactions."""
  count: UnsignedInt

  """The total amount of cleared transactions."""
  amount: Amount

  """Top merchant category."""
  topMerchantCategory: ClearedTransactionBusinessMetricTopMerchantCategory

  """Top merchant name."""
  topMerchantName: ClearedTransactionBusinessMetricTopMerchantName
}

"""Used to filter which transaction metrics are requested."""
input PaymentCardTransactionBusinessMetricFilterInput {
  """Filters transaction metrics by TimeRange, start and end are inclusive."""
  timeRange: TimestampFilterInputRange

  """Filters transaction metrics by CardProductId, optional."""
  cardProductIds: [String!]

  """Filters transaction metrics by merchant category codes, optional."""
  merchantCategoryCodes: [String!]

  """Filters transaction metrics by merchant name, optional."""
  merchantNames: [String!]
}

"""The input to update existing `CustomFields`."""
input UpdateCustomFieldsInput {
  """
    The ID of the object associated with the `CustomFields`.
  C
  """
  id: ID!

  """The input to specify `CustomFields` key value pairs."""
  customFields: [CustomFieldInput!]
}

"""The input to clear all `CustomFields` keys associated with the object."""
input DeleteCustomFieldsInput {
  """The ID of the object associated with the `CustomFields`."""
  id: ID!
}

"""The input to specify a `CustomFields` key value pair."""
input CustomFieldInput {
  """The key of the custom field."""
  key: String!

  """The value of the custom field."""
  value: String!
}

"""The return types for `CustomFields`."""
union CustomFieldsPayload = CustomFieldsResult | UserError | AccessDeniedError

"""The result object returned when you update CustomFields."""
type CustomFieldsResult {
  """The `CustomFields` associated with the object."""
  customFields: [CustomField!]
}

"""The interface for an element of `CustomFields`."""
interface CustomField {
  """The key of the custom field."""
  key: String!
}

"""The string value data type for an element of `CustomFields`."""
type CustomStringField implements CustomField {
  """The key of the custom field."""
  key: String!

  """The value of the custom field."""
  value: String!
}

"""Input representing parts of an address for tokenization."""
input TokenizeAddressInput {
  """
  The number and street of the address.
  
  The validation for the `address` uses the following regex pattern `^\s*\S+(?:\s+\S+){1,3} `.
  
  This pattern matches two to four groups of non-whitespace characters. These can include special characters like dashes or slashes. For example, 'Cozy Cottage', '200 Lake Road', '123 Second Street NW', and '111 1/2 Center Street' all match.
  
  When the field is used for creating an application, it will also validate that a PO Box is not included using this regex pattern `^(?:((\S([^pPOo])+)|(?:[0-9]+)))\s(?:[0-9A-Za-z\.]|[^\S\r\n])+$`.
  """
  streetAddress: String

  """
  Additional data about the address, e.g. apartment or unit numbers.
  
  The validation for the `extendedAddress` uses the following regex pattern `^[a-zA-Z\d',. \-#]+(([',. \-#][a-zA-Z ])?[a-zA-Z.]*)*$`.
  
  It checks for numeric string with special characters and whitespace.
  """
  extendedAddress: String

  """
  The postal code of the address.  The value can include 5 numbers only or a hyphen - and 4 numbers
  """
  postalCode: String!

  """
  A region for the address based on the two letter state [IS0 3166 standard](https://en.wikipedia.org/wiki/ISO_3166-2:US), including districts and outlying areas.
  """
  region: String

  """
  The locality of the address (e.g. town, city)
  
  The validation for the `locality` uses the following regex pattern `^['\p{L}]+(?:[ \p{L},'-:])*$`.
  
  It checks to ensure it begins with a single quote or any letter, followed by whitespace, commas, single quote, any letter, or character in this set '()*+,-./0123456789: .
  """
  locality: String

  """
  The [three letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) where the address resides.
  """
  countryCodeAlpha3: String
}

"""Input for tokenizing a card payment method's card holder information."""
input TokenizeCardPaymentMethodCardHolderInput {
  """
  The full name as represented on the card.
  **Minimum length:** 1 character
  **Maximum length:** 255 characters
  """
  fullName: String

  """The billing address associated with the card."""
  billingAddress: TokenizeAddressInput
}

"""Input for tokenizing a payment card."""
input TokenizeCardPaymentMethodInput {
  """The payment card to tokenize."""
  paymentCard: PaymentCardInput!

  """The cardHolder to associate the tokenized payment card with."""
  cardHolder: TokenizeCardPaymentMethodCardHolderInput
}

"""How many times this `PaymentMethodToken` can be used."""
enum PaymentMethodTokenUsage {
  """This `PaymentMethodToken` can be used multiple times."""
  REUSABLE

  """
  This `PaymentMethodToken` can only be used once and then becomes invalid.
  """
  SINGLE_USE
}

"""Types to expect while requesting a scoped payment method token."""
union ScopedPaymentMethodTokenPayload = ScopedPaymentMethodToken | UserError | AccessDeniedError

"""
A short lived token representing the payment method limited to a scope of usage.
"""
type ScopedPaymentMethodToken {
  """Global ID used to reference this object."""
  token: String

  """Scope of the token"""
  scope: TokenScope

  """
  The date and time, in ISO 8601 format, the short lived payment method token will expire.
  """
  expiresAt: String
}

"""A token representing a payment method."""
type PaymentMethodToken implements Node {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object was updated."""
  updatedAt: String

  """How many times this `PaymentMethodToken` can be used."""
  usage: PaymentMethodTokenUsage

  """
  The payment instrument used for the `PaymentMethodToken`. Instrument data can be used to display information to the user without violating PCI compliance.
  """
  instrument: PaymentInstrument

  """
  The date and time, in ISO 8601 format, the payment method token will expire.
  """
  expiresAt: String

  """
  A short lived scoped payment method token for the `PaymentMethodToken`.
  """
  token(scope: TokenScope!): ScopedPaymentMethodTokenPayload
}

"""Result of tokenizing a payment card."""
union TokenizeCardPaymentMethodPayload = PaymentMethodToken | AccessDeniedError | UserError

"""Input fields for `validateAddress`."""
input ValidateAddressInput {
  """Address to be validated."""
  address: AddressInput!

  """
  The idempotency key for this request.
  
  This is a random string such as UUIDv4 used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  
  Minimum length: 5 characters
  Maximum length: 255 characters
  """
  idempotencyKey: IdempotencyKey!
}

"""Types which can be returned for `validateAddress`."""
union ValidateAddressPayload = AddressValidationResult | UserError | AccessDeniedError

"""Types which can be returned for `validateAddress` outcome."""
union AddressValidationOutcome = AddressValidatedResult | AddressValidatedWithChangesResult | AddressIncompleteResult | AddressInvalidResult

"""Result of `validatedAddress`."""
type AddressValidationResult {
  """Outcome of the address validation."""
  outcome: AddressValidationOutcome
}

"""
`Address` validation result type returned when address is validated without any changes.
"""
type AddressValidatedResult {
  """The validated address token."""
  token: ValidatedAddressToken
}

"""
`Address` validation result type returned when address is validated with changes.
"""
type AddressValidatedWithChangesResult {
  """List of address components that were changed."""
  componentsChanged: [AddressComponent!]

  """The validated address token."""
  token: ValidatedAddressToken
}

"""`Address` validation result type returned when address is incomplete."""
type AddressIncompleteResult {
  """List of address components that are missing."""
  componentsMissing: [AddressComponent!]

  """The address as provided to `validateAddress`."""
  provided: Address
}

"""`Address` validation result type returned when address is invalid."""
type AddressInvalidResult {
  """List of address components that are invalid."""
  componentsInvalid: [AddressComponent!]

  """The address as provided to `validateAddress`."""
  provided: Address
}

interface ValidAddress {
  """Global ID used to reference this object."""
  id: ID!

  """The address as provided to `validateAddress`."""
  provided: Address

  """The standardized version of the provided address."""
  standardized: Address

  """Additional information about the address."""
  labels: [ValidatedAddressLabel!]

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String
}

"""The `ValidatedAddressToken`."""
type ValidatedAddressToken implements ValidAddress {
  """Global ID used to reference this object."""
  id: ID!

  """The address as provided to `validateAddress`."""
  provided: Address

  """The standardized version of the provided address."""
  standardized: Address

  """Additional information about the address."""
  labels: [ValidatedAddressLabel!]

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String

  """The date and time, in ISO 8601 format, this object will expire."""
  expiresAt: String
}

"""The `ValidatedAddress`."""
type ValidatedAddress implements Node & ValidAddress {
  """Global ID used to reference this object."""
  id: ID!

  """The address as provided to `validateAddress`."""
  provided: Address

  """The standardized version of the provided address."""
  standardized: Address

  """Additional information about the address."""
  labels: [ValidatedAddressLabel!]

  """The date and time, in ISO 8601 format, this object was created."""
  createdAt: String
}

"""Possible address components."""
enum AddressComponent {
  """The number and street of the address."""
  STREET_ADDRESS

  """Additional data about the address, e.g. apartment or unit number."""
  EXTENDED_ADDRESS

  """The locality of the address, e.g. town or city."""
  LOCALITY

  """A region for the address, e.g. state or province."""
  REGION

  """The postal code of the address."""
  POSTAL_CODE

  """The country code where the address resides."""
  COUNTRY_CODE_ALPHA_3
}

"""Possible labels for a validated address."""
enum ValidatedAddressLabel {
  """PO Box."""
  PO_BOX

  """Business address."""
  BUSINESS

  """Residential address."""
  RESIDENTIAL

  """Commercial Mail Receiving Agency address."""
  CMRA

  """Vacant address."""
  VACANT

  """Inactive address."""
  INACTIVE

  """Unsecured location address."""
  UNSECURED_LOCATION

  """Extended portion of the address is unconfirmed."""
  UNCONFIRMED_EXTENDED_ADDRESS
}

"""Possible scope of the token."""
enum TokenScope {
  """E-Commerce scope."""
  ECOMMERCE
}

"""Input to provision an Account Holder"""
input ProvisionAccountHolderInput {
  """
  A UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey!

  """
  The unique identifier of the account holder being provisioned. This field should be a valid ID representing the account holder.
  """
  accountHolderId: ID!

  """
  A list of actions to be performed during the provisioning process. Each action represents a specific operation or step to be executed.
  """
  actions: [ProvisionAccountHolderAction!]!

  """
  Required input specific to the actions being performed. This allows for additional details or parameters needed for the actions.
  """
  actionInput: ProvisionAccountHolderActionInput!
}

"""
Input object for specifying actions during the provisioning of an account holder.

This type contains the inputs required for various provisioning actions, such as creating an application, setting a financial account credit limit, or issuing a payment card.
"""
input ProvisionAccountHolderActionInput {
  """
  Input details required to create an account holder application.
  
  This field provides the necessary parameters for processing an application for the account holder.
  """
  createAccountHolderCardProductApplicationInput: ProvisionCreateAccountHolderCardProductApplicationInput

  """
  Input details required to issue a financial account for the account holder.
  
  This field includes the necessary parameters to establish and configure a new financial account.
  """
  issueFinancialAccountForApplicationInput: ProvisionIssueFinancialAccountForApplicationInput

  """
  Input details for setting or updating the credit limit of a financial account.
  
  This field contains the parameters needed to define or modify the credit limit for the account holder’s financial account.
  """
  initiateFinancialAccountCreditLimitUpdateFromProductFundingInput: ProvisionInitiateFinancialAccountCreditLimitUpdateFromProductFundingInput

  """
  Input details required to issue a payment card associated with the account holder’s financial account.
  
  This field provides the necessary parameters for issuing a payment card.
  """
  issuePaymentCardForFinancialAccountInput: ProvisionIssuePaymentCardForFinancialAccountInput

  """
  Input details for linking an account holder with verified external bank account.
  """
  linkVerifiedExternalBankAccountInput: LinkVerifiedExternalBankInput
}

"""
Input for provisioning an issued payment card for a financial account.

This input type includes options for configuring the newly issued payment card.
"""
input ProvisionIssuePaymentCardForFinancialAccountInput {
  """
  Options for the newly issued payment card. This field specifies the configuration details and preferences for the card issuance.
  """
  options: IssuePaymentCardOptionsInput!
}

"""
Input for setting the credit limit of a financial account.

This input type includes details for specifying the credit limit amount and an optional description.
"""
input ProvisionInitiateFinancialAccountCreditLimitUpdateFromProductFundingInput {
  """
  The amount of credit limit to be set for the payment card. This field specifies the new credit limit amount.
  """
  amount: AmountInput!

  """
  An optional description or memo for the credit limit update. This field provides context or notes about the credit limit change for future reference.
  """
  memo: String
}

"""
Input for issuing a new financial account.

This input type includes fields for specifying an external identifier and the name of the financial account.
"""
input ProvisionIssueFinancialAccountForApplicationInput {
  """
  The name of the financial account. This field is required and should provide a meaningful name for the account.
  """
  name: String!
}

"""
Input for linking an account holder with a verified external bank account
"""
input LinkVerifiedExternalBankInput {
  """
  The token provided by account holder as part of the GenerateVerifiedExternalBankAccountLinkToken process
  """
  publicToken: String!
}

"""
Input for an account holder's application process.

This input type includes fields for consent to terms and conditions, IP address details, and credit report pull consent.
"""
input ProvisionCreateAccountHolderCardProductApplicationInput {
  """
  The unique identifier of the card product associated with the account holder. This field should be a valid ID representing the card product.
  """
  cardProductId: ID!

  """
  Details on the acceptance of the terms and conditions of the card holder agreement. This field captures the applicant's consent to the agreement.
  """
  cardHolderAgreementConsent: ConsentInput!

  """
  Details on the account holder's consent to pull their credit report as part of the card product application. This field captures the applicant's consent for this specific action.
  """
  accountHolderCreditReportPullConsent: ConsentInput
}

"""
Represents the details of an account holder provisioning action.

This type includes the various inputs required for different provisioning actions, such as creating an application, setting a credit limit, or issuing a payment card.
"""
type ProvisionAccountHolderActionDetail {
  """
  Input details for creating an account holder application. This field contains the parameters needed to process the application.
  """
  createAccountHolderCardProductApplicationInput: ProvisionCreateAccountHolderCardProductApplicationActionDetail

  """
  Input details for creating a financial account. This field includes the parameters necessary to establish a new financial account for the account holder.
  """
  issueFinancialAccountForApplicationInput: ProvisionIssueFinancialAccountForApplicationActionDetail

  """
  Input details for setting a credit limit on a financial account. This field specifies the parameters required to update the credit limit for the financial account.
  """
  initiateFinancialAccountCreditLimitUpdateFromProductFundingInput: ProvisionInitiateFinancialAccountCreditLimitUpdateFromProductFundingActionDetail

  """
  Input details for issuing a payment card for a financial account. This field contains the parameters needed to issue a new payment card associated with the specified financial account.
  """
  issuePaymentCardForFinancialAccountInput: ProvisionIssuePaymentCardForFinancialAccountActionDetail

  """Input details for linking external bank account."""
  linkVerifiedExternalBankAccountInput: ProvisionLinkVerifiedExternalBankAccountActionDetail
}

"""
Input for provisioning an issued payment card for a financial account.

This input type includes options for configuring the newly issued payment card.
"""
type ProvisionIssuePaymentCardForFinancialAccountActionDetail {
  """
  Options for the newly issued payment card. This field specifies the configuration details and preferences for the card issuance.
  """
  options: IssuePaymentCardOptionsDetail
}

"""
Input for setting the credit limit of a financial account.

This input type includes details for specifying the credit limit amount and an optional description.
"""
type ProvisionInitiateFinancialAccountCreditLimitUpdateFromProductFundingActionDetail {
  """
  The amount of credit limit to be set for the payment card. This field specifies the new credit limit amount.
  """
  amount: Amount

  """
  An optional description or memo for the credit limit update. This field provides context or notes about the credit limit change for future reference.
  """
  memo: String
}

"""
Request contents for ProvisionIssueFinancialAccountForApplicationAction
"""
type ProvisionIssueFinancialAccountForApplicationActionDetail {
  """
  The name of the financial account. This field is required and should provide a meaningful name for the account.
  """
  name: String
}

"""Details for an account holder's application process."""
type ProvisionCreateAccountHolderCardProductApplicationActionDetail {
  """
  Details on the acceptance of the terms and conditions of the card holder agreement. This field captures the applicant's consent to the agreement.
  """
  cardHolderAgreementConsent: ConsentAgreement

  """
  Details on the account holder's consent to pull their credit report as part of the card product application. This field captures the applicant's consent for this specific action.
  """
  accountHolderCreditReportPullConsent: ConsentAgreement
}

"""Details for linking verified external bank account."""
type ProvisionLinkVerifiedExternalBankAccountActionDetail {
  """
  The token provided by account holder as part of the GenerateVerifiedExternalBankAccountLinkToken process
  """
  publicToken: String
}

"""
Defines the different actions that can be performed during the provisioning process for an account holder.

Each action represents a specific step or operation to be executed.
"""
enum ProvisionAccountHolderAction {
  """
  Creates an application for an Account Holder. This action starts the application process.
  """
  CREATE_APPLICATION

  """
  Issues an account based on an application. When used in conjunction with `CREATE_APPLICATION`, this action will use the provided `AccountHolderCardProductApplication` to issue the account.
  """
  ISSUE_FINANCIAL_ACCOUNT

  """
  Sets a credit limit on a `FinancialAccount`. When used with `ISSUE_FINANCIAL_ACCOUNT`, this action will apply the credit limit to the specified `FinancialAccount`.
  """
  SET_CREDIT_LIMIT

  """
  Issues a Payment Card for a `FinancialAccount`. When used with `ISSUE_FINANCIAL_ACCOUNT`, this action will issue the `PaymentCard` to the specified `FinancialAccount`
  """
  ISSUE_PAYMENT_CARD

  """
  Registers the Account Holder with Visa's Payable Automation solution, facilitating integration with Visa's payment systems.
  """
  REGISTER_VISA_PAYABLE_FUNDING_ACCOUNT

  """
  Notifies the configured provider that the workflow has been completed. Provider configurations are determined as part of the technical solution.
  
  Note: This action will only be executed upon approval of the technical solution.
  """
  NOTIFY_PROVIDER

  """Link verified external bank account with a `FinancialAccount`"""
  LINK_VERIFIED_EXTERNAL_BANK_ACCOUNT
}

"""
Union type representing the possible payloads for provisioning an account holder.

This union includes the outcomes of provisioning actions, error messages, and access permissions.
"""
union ProvisionAccountHolderPayload = AccountHolderProvisioning | UserError | AccessDeniedError

"""
Represents the provisioning process for an account holder.

This type includes information about the provisioning request, its current and next actions, outcomes, and timestamps, as well as the sequence of workflow actions involved.
"""
type AccountHolderProvisioning implements Node {
  """
  A UUIDv4 string used to uniquely identify requests. This field ensures that duplicate requests are not processed more than once and provides idempotency for the request.
  """
  idempotencyKey: IdempotencyKey

  """
  A unique identifier for this provisioning instance. This field helps to uniquely identify and reference a specific provisioning request.
  """
  id: ID!

  """
  The account holder associated with this provisioning request. This field provides details about the account holder being provisioned.
  """
  accountHolder: AccountHolder

  """
  The outcome of the provisioning process. This field provides details about the result of the provisioning, including any errors or completion status.
  """
  outcome: AccountHolderProvisioningOutcome

  """
  The next action to be performed in the provisioning workflow. This field specifies what action is scheduled to follow the current one.
  """
  nextAction: AccountHolderProvisioningWorkflowAction

  """
  The current action being executed in the provisioning workflow. This field provides details about the ongoing action in the provisioning process.
  """
  currentAction: AccountHolderProvisioningWorkflowAction

  """
  The date and time when this provisioning request was created, represented in ISO 8601 format. This timestamp indicates when the record was initially created.
  """
  createdAt: String

  """
  The date and time when this provisioning request was last updated, represented in ISO 8601 format. This timestamp reflects the most recent modification to the record.
  """
  updatedAt: String

  """
  A list of workflow actions associated with this provisioning request. This field includes all actions performed or scheduled during the provisioning process.
  """
  workflowActions: [AccountHolderProvisioningWorkflowAction!]
}

"""
Represents the outcome of the account holder provisioning process.

It includes both the current status of the process and the specific reason or result of that status.
"""
type AccountHolderProvisioningOutcome {
  """
  The current status of the provisioning process, such as whether it is in progress, completed, or in error.
  """
  status: AccountHolderProvisioningStatus
}

"""
Represents an action in the workflow for provisioning an account holder.

This type includes details about the action performed, its outcome, associated inputs, the order of execution, and related nodes.
"""
type AccountHolderProvisioningWorkflowAction implements Node {
  """
  Globally unique ID to fetch a Node. This field provides a unique identifier for the node, allowing for its retrieval and reference.
  """
  id: ID!

  """The `AccountHolderProvisioning` this action belongs to."""
  accountHolderProvisioning: AccountHolderProvisioning

  """
  The specific action being performed in the provisioning workflow. This field specifies the type of provisioning action executed, such as creating an application or setting a credit limit.
  """
  action: ProvisionAccountHolderAction

  """
  The outcome of the provisioning workflow action. This field provides details about the result of the action, indicating whether it was successful or encountered issues.
  """
  outcome: AccountHolderProvisioningWorkflowActionDetail

  """
  Input related to the provisioning action. This field contains details about the input parameters used for the action, such as application details or configuration settings.
  """
  actionInput: ProvisionAccountHolderActionDetail

  """
  The order in which the action was executed within the workflow. This field specifies the sequence of the action to maintain the correct processing order.
  """
  executionOrder: UnsignedInt

  """
  The node associated with the provisioning action. This field can be one of several types, including account applications, financial accounts, payment cards, or workflow action results, providing additional context about the action.
  """
  node: AccountHolderProvisioningActionNode
}

"""
Union type representing the different types of nodes involved in account holder provisioning actions.

This union can include various result types, such as account applications, financial accounts, payment cards, or workflow action outcomes.
"""
union AccountHolderProvisioningActionNode = AccountHolderCardProductApplication | FinancialAccount | PaymentCard | InterFinancialAccountTransfer | WorkflowActionResultOutcome | UserError

"""
Represents the outcome of a workflow action, including metadata and the result.

This type includes information about the action's creation and update timestamps, as well as the result of the action.
"""
type WorkflowActionResultOutcome {
  """
  The date and time when this result outcome was created, represented in ISO 8601 format. This timestamp indicates when the record was initially created.
  """
  createdAt: String

  """
  The date and time when this result outcome was last updated, represented in ISO 8601 format. This timestamp reflects the most recent modification to the record.
  """
  updatedAt: String

  """
  The result of the workflow action, which can be one of several possible result types. This field provides the details specific to the action performed.
  """
  result: WorkflowActionResult
}

"""
Union type representing the possible results from a workflow action.

This union can be one of several result types, including email notification results or Visa Payable Automation results.
"""
union WorkflowActionResult = WorkflowActionEmailNotificationResult | WorkflowActionVisaPayableAutomationResult | WorkflowActionLinkVerifiedExternalBankAccountResult

"""
Results from a workflow action related to sending an email notification.

This type includes details about the email, such as recipients, sender, provider, and delivery time.
"""
type WorkflowActionEmailNotificationResult {
  """
  The recipient's email addresses. This field specifies where the email notification was sent.
  """
  to: [String!]

  """
  The sender's email address. This field indicates who sent the email notification.
  """
  from: String

  """
  The provider used to send the email notification. This field references the provider involved in the email delivery process.
  """
  provider: ProvisionWorkflowProvider

  """
  The date and time when the email notification was delivered, represented as an ISO 8601 string. This field indicates when the email was successfully sent.
  """
  deliveredAt: String
}

"""
Results from a workflow action related to Visa's Payable Automation solution.

This type includes details specific to the Visa Payable Automation process, such as buyer and account IDs.
"""
type WorkflowActionVisaPayableAutomationResult {
  """
  The unique identifier for the buyer in Visa's Payable Automation system. This ID is used to reference the buyer's account or profile.
  """
  buyerIdentifier: String

  """
  The unique identifier for the proxy pool account in Visa's Payable Automation system. This ID is associated with the proxy account used for transactions or funding.
  """
  proxyPoolAccountIdentifier: String
}

"""
Results from a workflow action related to linking an account holder with a verified external bank account.
"""
type WorkflowActionLinkVerifiedExternalBankAccountResult {
  """a list of ExternalFinancialBankAccount"""
  externalFinancialBankAccounts: [ExternalFinancialBankAccount!]
}

"""
Defines the providers involved in the provisioning workflow.

Currently supported providers are listed, with their associated configuration and usage details.
"""
enum ProvisionWorkflowProvider {
  """
  Bottom Line: A provider that may offer services related to provisioning, such as payment solutions or account management.
  """
  BOTTOM_LINE
}

"""
Represents the outcome of the account holder provisioning process.
It includes both the current status of the process and the specific reason or result of that status.
"""
type AccountHolderProvisioningWorkflowActionDetail {
  """
  The current status of the provisioning process, such as whether it is in progress, completed, or in error.
  """
  status: AccountHolderProvisioningWorkflowActionStatus
}

"""
Represents the different statuses that an account holder provisioning process can be in, from initiation to completion.

Each status reflects a specific stage of the process, including potential error handling and review.
"""
enum AccountHolderProvisioningWorkflowActionStatus {
  """The provisioning process has been initiated but has not yet started."""
  INITIATED

  """The provisioning process is currently in progress."""
  IN_PROGRESS

  """
  An error occurred during the provisioning process. Further action may be required to resolve the issue.
  """
  ERROR

  """The provisioning process has been successfully completed."""
  COMPLETED

  """The action was part of the provisioning process but was not executed."""
  NOT_EXECUTED
}

"""
Represents the different statuses that an account holder provisioning process can be in, from initiation to completion.

Each status reflects a specific stage of the process, including potential error handling and review.
"""
enum AccountHolderProvisioningStatus {
  """The provisioning process has been initiated but has not yet started."""
  INITIATED

  """The provisioning process is currently in progress."""
  IN_PROGRESS

  """
  An error occurred during the provisioning process. Further action may be required to resolve the issue.
  """
  ERROR

  """The provisioning process has been successfully completed."""
  COMPLETED

  """
  The provisioning process has been rejected due to an issue encountered during processing, preventing its completion.
  """
  REJECTED
}

"""
Allows for the specification of payment instructions for `PaymentOrder`s, which allows choice on how to disburse funds for each `PaymentOrderItem`.

Must define either `disbursementPercent` or `disbursementAmount`, but not both.

If choosing to specify an amount to disburse, the amount must be in the same currency as the `PaymentOrderItem` and all disbursementAmount must sum to the total amount of the `PaymentOrderItem`.
If choosing to specify a percentage to disburse, the sum of all disbursementPercent must equal 100.
"""
input PaymentInstructionInput {
  """
  The Highnote `Node` ID to disburse funds to. This must be a Highnote `FinancialAccount`.
  """
  disburseToId: ID!

  """
  The amount to disburse for this `PaymentOrderItem` in percentage.
  
  Where `100` is 100% of the total amount of the `PaymentOrderItem`.
  """
  disbursementPercent: Int

  """
  The amount to disburse for this `PaymentOrderItem`.
  
  The amount must be in the same currency as the `PaymentOrderItem` and all disbursementAmount must sum to the total amount of the `PaymentOrderItem`.
  """
  disbursementAmount: AmountInput
}

"""Input for creating a new `PaymentOrderItemFromCatalogItem`."""
input PaymentOrderItemFromCatalogItemInput {
  """The `CatalogItem` ID to add to the `PaymentOrder`."""
  id: ID!

  """
  Overwrite product name for this `PaymentOrderItemFromCustomItem`.
  
  Supports up to 255 alphanumeric characters.
  """
  name: String

  """
  Overwrite the product description for this `PaymentOrderItemFromCustomItem`.
  
  Supports up to 255 alphanumeric characters.
  """
  description: String

  """
  Overwritten amount for this `PaymentOrderItemFromCatalogItem` per individual item.
  """
  amountPerItem: AmountInput

  """
  Specifies the payment instructions for this `PaymentOrderItemFromCatalogItem`.
  """
  paymentInstructions: [PaymentInstructionInput!]

  """The quantity of the this `PaymentOrderItemFromCatalogItem`."""
  quantity: UnsignedInt!

  """
  An optional external reference ID for this `PaymentOrderItemFromCatalogItem`.
  
  Supports up to 255 alphanumeric characters.
  """
  externalIdentifier: String
}

"""Input for creating a new `PaymentOrderItemFromCustomItem`."""
input PaymentOrderItemFromCustomItemInput {
  """
  The product name for this `PaymentOrderItemFromCustomItem`.
  
  Supports up to 255 alphanumeric characters.
  """
  name: String!

  """
  The product description for this `PaymentOrderItemFromCustomItem`.
  
  Supports up to 255 alphanumeric characters.
  """
  description: String

  """
  The amount for this `PaymentOrderItemFromCustomItem` per individual item.
  """
  amountPerItem: AmountInput!

  """
  Specifies the payment instructions for this `PaymentOrderItemFromCustomItem`.
  """
  paymentInstructions: [PaymentInstructionInput!]

  """The quantity of the this `PaymentOrderItemFromCustomItem`."""
  quantity: UnsignedInt!

  """
  An optional external reference ID for this `PaymentOrderItemFromCustomItem`.
  
  Supports up to 255 alphanumeric characters.
  """
  externalIdentifier: String
}

"""Input for creating a new `PaymentOrder`."""
input CreatePaymentOrderInput {
  """
  Predefined items to add to the `PaymentOrder`. These items are defined in the catalog and can be queried independently. `CatalogItem`s can be use to showcase products and services that are available for purchase.
  """
  catalogItems: [PaymentOrderItemFromCatalogItemInput!]

  """
  Custom items to add to the `PaymentOrder`. These are one-off items defined at the time the order is created. They cannot be queried outside of the `PaymentOrder`.
  """
  customItems: [PaymentOrderItemFromCustomItemInput!]

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""The `Node` types that `PaymentInstruction` can disburse funds to."""
union PaymentInstructionDisbursementTarget = FinancialAccount

"""
The `PaymentInstruction` type defines where funds dirbused to, and the amount to disburse for an `PaymentOrderItem`.
"""
type PaymentInstruction {
  """The Highnote `Node` that funds will be disbursed to."""
  disburseTo: PaymentInstructionDisbursementTarget

  """
  The amount to disburse for this `PaymentOrderItem` in percentage, and the `FinancialAccount` to disburse to.
  
  Will be `null` if the payment instructions were provided as an amount.
  """
  disbursementPercent: Int

  """
  The amount to disburse for this `PaymentOrderItem` by `Amount`, and the `FinancialAccount` to disburse to.
  
  Will be `null` if the payment instructions were provided as a percentage.
  """
  disbursementAmount: Amount
}

"""
The `PaymentOrderLineItem` type defines an item and the quantity of that item for an `PaymentOrder`.
"""
type PaymentOrderLineItem {
  """Reference to the item for this `PaymentOrderLineItem`."""
  item: PaymentOrderItem

  """The quantity of the item for this `PaymentOrderLineItem`."""
  quantity: UnsignedInt
}

"""
An `PaymentOrder` is used to represent a collection of items that a customer wants to purchase.
"""
type PaymentOrder implements Node {
  """Global ID used to reference this object."""
  id: ID!

  """`PaymentTransaction`s associated with this `PaymentOrder`."""
  transactions: [PaymentTransaction!]

  """Line items associated with this `PaymentOrder`."""
  lineItems: [PaymentOrderLineItem!]

  """
  The total amount for this `PaymentOrder`. This is the amount that the customer will be charged.
  """
  totalAmount: Amount
}

interface PaymentOrderItem {
  """The product name for this `PaymentOrderItem`."""
  name: String

  """The product description for this `PaymentOrderItem`."""
  description: String

  """The amount for this `PaymentOrderItem` per individual item."""
  amountPerItem: Amount

  """
  Breakdown of the payment instructions for the `PaymentOrderItem` by `Amount`.
  """
  paymentInstructions: [PaymentInstruction!]

  """An optional external reference ID for this `PaymentOrderItem`."""
  externalIdentifier: String
}

"""
A custom one time item that is added to an `PaymentOrder`. These are one-off items defined at the time the order is created. They cannot be queried outside of the `PaymentOrder`.
"""
type PaymentOrderItemFromCustomItem implements PaymentOrderItem {
  """The product name for this `PaymentOrderItemFromCustomItem`."""
  name: String

  """The product description for this `PaymentOrderItemFromCustomItem`."""
  description: String

  """
  The amount for this `PaymentOrderItemFromCustomItem` per individual item.
  """
  amountPerItem: Amount

  """
  Breakdown of the payment instructions for the `PaymentOrderItemFromCustomItem` by `Amount`.
  """
  paymentInstructions: [PaymentInstruction!]

  """An optional external reference ID for this `PaymentOrderItem`."""
  externalIdentifier: String
}

"""An defined item that can be added to an `PaymentOrder`."""
type CatalogItem {
  """The ID of the `CatalogItem`."""
  id: ID!

  """The name of the `CatalogItem`."""
  name: String

  """The description of the `CatalogItem`."""
  description: String

  """The amount for this `CatalogItem` per individual item."""
  amountPerItem: Amount

  """
  Breakdown of the payment instructions for the `CatalogItem` by `Amount`.
  """
  paymentInstructions: [PaymentInstruction!]

  """An optional external reference ID for this `PaymentOrderItem`."""
  externalIdentifier: String
}

"""A catalog item that is added to an `PaymentOrder`."""
type PaymentOrderItemFromCatalogItem implements PaymentOrderItem {
  """The product name for this `PaymentOrderItemFromCatalogItem`."""
  name: String

  """The product description for this `PaymentOrderItemFromCatalogItem`."""
  description: String

  """
  The amount for this `PaymentOrderItemFromCatalogItem` per individual item.
  """
  amountPerItem: Amount

  """
  Breakdown of the payment instructions for the `PaymentOrderItemFromCatalogItem` by `Amount`.
  """
  paymentInstructions: [PaymentInstruction!]

  """
  Reference to the original `CatalogItem` for this `PaymentOrderItemFromCatalogItem`.
  """
  catalogItem: CatalogItem

  """An optional external reference ID for this `PaymentOrderItem`."""
  externalIdentifier: String
}

"""Result of creating a new `PaymentOrder`."""
union CreatePaymentOrderPayload = AccessDeniedError | UserError | PaymentOrder

"""The connection type for `FinancialAccountBalanceSearchResult`"""
type FinancialAccountBalanceSearchResultConnection {
  """A list of edges."""
  edges: [FinancialAccountBalanceSearchResultEdge!]

  """Information about the current page."""
  pageInfo: PageInfo!
}

"""The possible return types of `searchFinancialAccountBalances`."""
union FinancialAccountBalanceSearchResultPayload = FinancialAccountBalanceSearchResultConnection | AccessDeniedError | UserError

"""The edge type for `FinancialAccountBalanceSearchResult`"""
type FinancialAccountBalanceSearchResultEdge {
  """The search result."""
  node: FinancialAccountBalanceSearchResult

  """The cursor for this edge for use in pagination."""
  cursor: String
}

"""The available fields that are available to search on."""
enum FinancialAccountBalanceSearchField {
  """
  The `FinancialAccount` ID pertaining the `FinancialAccount` balance.
  
  If choosing this field, the `stringFilter` must be used.
  """
  FINANCIAL_ACCOUNT_ID

  """
  The `CardProduct` ID of the `FinancialAccount`.
  
  If choosing this field, the `stringFilter` must be used.
  """
  CARD_PRODUCT_ID

  """
  The `FinancialAccount` created at date.
  
  If choosing this field, the `timestampFilter` must be used.
  """
  FINANCIAL_ACCOUNT_CREATED_AT

  """
  The available cash balance of the `FinancialAccount`.
  
  If choosing this field, the `signedBalance` can be used to search by the current balance.
  Otherwise, use `creditBalance` for positive amounts and `debitBalance` for negative amounts.
  """
  AVAILABLE_CASH_LEDGER_BALANCE

  """
  The cash balance of the `FinancialAccount`.
  
  If choosing this field, the `signedBalance` can be used to search by the current balance.
  Otherwise, use `debitBalance` for positive amounts and `creditBalance` for negative amounts.
  """
  CASH_LEDGER_BALANCE

  """
  The available credit balance of the `FinancialAccount`.
  
  If choosing this field, the `signedBalance` can be used to search by the current balance.
  Otherwise, use `creditBalance` for positive amounts and `debitBalance` for negative amounts.
  """
  AVAILABLE_CREDIT_LEDGER_BALANCE

  """
  The credit outstanding balance of the `FinancialAccount`.
  
  If choosing this field, the `signedBalance` can be used to search by the current balance.
  Otherwise, use `debitBalance` for positive amounts and `creditBalance` for negative amounts.
  """
  CREDIT_OUTSTANDING_LEDGER_BALANCE

  """
  The outstanding balance receivable of the `FinancialAccount`.
  
  If choosing this field, the `signedBalance` can be used to search by the current balance.
  Otherwise, use `debitBalance` for positive amounts and `creditBalance` for negative amounts.
  """
  OUTSTANDING_BALANCE_RECEIVABLE_LEDGER_BALANCE

  """
  The outstanding balance payable of the `FinancialAccount`.
  
  If choosing this field, the `signedBalance` can be used to search by the current balance.
  Otherwise, use `creditBalance` for positive amounts and `debitBalance` for negative amounts.
  """
  OUTSTANDING_BALANCE_PAYABLE_LEDGER_BALANCE

  """
  The ID of the `FinancialAccountOwner`.
  
  If choosing this field, the `stringFilter` must be used.
  """
  FINANCIAL_ACCOUNT_OWNER_ID
}

"""The `FinancialAccount` balance search result object."""
type FinancialAccountBalanceSearchResult {
  """The owner of the `FinancialAccount`."""
  financialAccountOwner: FinancialAccountOwner

  """The `CardProduct` of the `FinancialAccount`."""
  cardProduct: CardProduct

  """
  The date and time, in ISO 8601 format, when the `FinancialAccount` was created.
  """
  financialAccountCreatedAt: String

  """The `FinancialAccount` pertaining to the `FinancialAccount` balance."""
  financialAccount: FinancialAccount

  """The balances of the `FinancialAccount`."""
  balances: [FinancialAccountBalanceLedgerDetail!]

  """
  The date and time, in ISO 8601 format, when the `FinancialAccount` balance report was generated.
  """
  updatedAt: String
}

"""The ledger details for the `FinancialAccount` balance."""
type FinancialAccountBalanceLedgerDetail {
  """The name of the `Ledger`."""
  ledgerName: LedgerName

  """
  The expected normal balance of the `Ledger`.
  
  In most cases the corresponding `creditBalance` and `debitBalance` field will have a non-zero value. If the corresponding `creditBalance` or `debitBalance` field has a zero value and the other `creditBalance` or `debitBalance` field has a value greater than zero, that greater than zero value represents a negative balance on the ledger.
  """
  normalBalance: NormalBalance

  """
  The credit balance of the `Ledger`.
  
  When the `Ledger`'s `normalBalance` is `CREDIT` this field should change based on activity. Otherwise, the `value` will stay zero. If the balance is negative, this amount will be zero, and the `DEBIT` amount will be positive. Refer to `normalBalance` definition to see information about possible negative balances.
  """
  creditBalance: Amount

  """
  The debit balance of the `Ledger`.
  
  When the `Ledger`'s `normalBalance` is `DEBIT` this field should change based on activity. Otherwise, the `value` will stay zero. If the balance is negative, this amount will be zero, and the `CREDIT` amount will be positive. Refer to `normalBalance` definition to see information about possible negative balances.
  """
  debitBalance: Amount

  """
  The date and time, in ISO 8601 format, the `debitBalance` and `creditBalance` were last calculated.
  """
  asOf: String
}

"""Input for filtering `FinancialAccountBalanceSearchResults`."""
input FinancialAccountBalanceSearchFilterInput {
  filters: [FinancialAccountBalanceSearchFilter!]
}

"""
A filter to search for a `FinancialAccountBalanceSearchResult`.
Each `FinancialAccountBalanceSearchFilter` must define a `searchField`, along with the value filter for that
field.
stringFilter field names:
- `FINANCIAL_ACCOUNT_ID`
- `CARD_PRODUCT_ID`
- `FINANCIAL_ACCOUNT_OWNER_ID`

timestampFilter field names:
- `FINANCIAL_ACCOUNT_CREATE_DATE`

signedBalance field can be used with any `*_LEDGER_BALANCE` fields to filter by the current balance of the ledger.

creditBalance field for positive amounts:
- `AVAILABLE_CASH_LEDGER_BALANCE`
- `AVAILABLE_CREDIT_LEDGER_BALANCE`
- `OUTSTANDING_BALANCE_PAYABLE_LEDGER_BALANCE`

debitBalance field for positive amounts:
- `CASH_LEDGER_BALANCE`
- `CREDIT_OUTSTANDING_LEDGER_BALANCE`
- `OUTSTANDING_BALANCE_RECEIVABLE_LEDGER_BALANCE`

For negative balances, the creditBalance and debitBalance fields for the respective ledger's `NormalBalance` will be reversed.
"""
input FinancialAccountBalanceSearchFilter {
  """The field to search on."""
  searchField: FinancialAccountBalanceSearchField!

  """String value type"""
  stringFilter: StringFilterInput

  """Timestamp value type in ISO 8601 format"""
  timestampFilter: TimestampFilterInput

  """Input to filter by amount."""
  creditBalance: MoneyFilterInput

  """Input to filter by amount."""
  debitBalance: MoneyFilterInput

  """Input to filter by amount by the current balance of the `Ledger`."""
  signedBalance: SignedMoneyFilterInput
}

"""The type of `CheckPayment` document."""
enum CheckPaymentDocumentType {
  """A signature of the account holder."""
  ACCOUNT_HOLDER_SIGNATURE
}

"""A document upload session for `CheckPayment`."""
type CheckPaymentDocumentUploadSession implements Node & DocumentUploadSession {
  """Global ID used to reference the document upload session"""
  id: ID!

  """The current state of the document upload session"""
  status: DocumentUploadSessionStatusCode

  """
  The date and time, in ISO 8601 format, this `document upload session` was created.
  """
  createdAt: String

  """
  The date and time, in ISO 8601 format, this `document upload session` was last updated.
  """
  updatedAt: String

  """A list of documents uploaded via a secure document upload link"""
  documents: [UploadLink]

  """List of allowed document types for the `CheckPayment` upload session"""
  allowedDocumentTypes: [CheckPaymentDocumentType!]
}

"""The connection object for the `checkPayments` query."""
type CheckPaymentsConnection {
  """A list of edges."""
  edges: [CheckPaymentsEdge!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""The edge object for the `checkPayments` query."""
type CheckPaymentsEdge {
  """The cursor for use in pagination."""
  cursor: String

  """The node itself."""
  node: CheckPayment
}

"""
Input object for the `createCheckPaymentDocumentUploadSession` mutation.
"""
input CreateCheckPaymentDocumentUploadSessionInput {
  """The `FinancialAccount` ID to associate the check document with."""
  financialAccountId: ID!

  """The type of document to upload."""
  documentTypes: [CheckPaymentDocumentType!]!
}

union CreateCheckPaymentDocumentUploadSessionPayload = CheckPaymentDocumentUploadSession | UserError | AccessDeniedError

"""
The input object that defines the fields for the initiatePhysicalCheckPayment mutation.
"""
input InitiatePhysicalCheckPaymentInput {
  """The `FinancialAccount` to use to fund the check."""
  financialAccountId: ID!

  """The amount of the check."""
  amount: AmountInput!

  """The recipient of the check."""
  recipient: PhysicalCheckPaymentRecipientInput!

  """Optional memo to include on the check."""
  memo: String

  """
  The mail type for a physical check.
  
  If not provided, defaults to the standard mail type.
  """
  shippingTime: CheckPaymentShippingTime

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: IdempotencyKey
}

"""
The input object that defines the fields for the recipient input.

There are multiple ways to provide recipient information:
* One of `validatedAddressTokenId`, or `address` needs to be provided.
"""
input PhysicalCheckPaymentRecipientInput {
  """The name of recipient of the check."""
  name: String!

  """The address of the recipient of the check."""
  address: AddressInput

  """
  Externally provided ID (255 character limit) to associate this recipient with an external system.
  """
  externalIdentifier: String

  """The ID of a `ValidatedAddressToken` to associate with the recipient."""
  validatedAddressTokenId: ID
}

union InitiatePhysicalCheckPaymentPayload = CheckPayment | UserError | AccessDeniedError

union SimulateCheckPaymentEventChangePayload = CheckPayment | UserError | AccessDeniedError

"""
The input for `simulateCheckPaymentEvent`. This will trigger a webhook.
"""
input SimulateCheckPaymentEventInput {
  """The `CheckPayment` ID to simulate a `CheckPaymentEvent`."""
  checkPaymentId: ID!

  """The event to update the `CheckPayment` to."""
  checkEventType: CheckPaymentEventType!
}

"""The type of an `ExternalMoneyMovementTransaction`."""
enum ExternalMoneyMovementTransactionType {
  """Indicates a payout."""
  PAYOUT

  """Indicates a platform fee."""
  PLATFORM_FEE
}

"""A transaction for an external money movement."""
type ExternalMoneyMovementTransaction implements ElectronicFundsTransfer & Node {
  """Global ID used to reference the transfer."""
  id: ID!

  """The transfer amount."""
  amount: Amount

  """
  The date and time the transfer was created, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """
  The date and time the transfer was last updated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  updatedAt: String

  """The ledgers affected by the transfer."""
  ledgers(
    """Scope the results to specific ledgers"""
    ledgerNames: [LedgerName!]
  ): [Ledger!]

  """The type for this transfer."""
  type: ExternalMoneyMovementTransactionType

  """The status of the transfer."""
  status: ExternalMoneyMovementTransactionStatus

  """In the case of a failed `status`, returns the failed reason."""
  statusReason: ExternalMoneyMovementTransactionStatusReasonCode

  """The external ID of the transaction."""
  externalIdentifier: String

  """
  The FinancialAccount where the funds for this transfer has initiated from
  """
  financialAccount: FinancialAccount
}

"""The status of a `ExternalMoneyMovementTransaction`"""
enum ExternalMoneyMovementTransactionStatus {
  """
  The payment status is unspecified. Contact Highnote support for more information.
  """
  UNSPECIFIED

  """The payment has been initiated."""
  INITIATED

  """The payment is pending."""
  PENDING

  """The payment has been completed."""
  COMPLETED

  """The payment has been failed."""
  FAILED
}

"""The possible reasons a `ExternalMoneyMovementTransaction` could fail."""
enum ExternalMoneyMovementTransactionStatusReasonCode {
  """
  The reason for the failure is unspecified, contact Highnote support for more information.
  """
  UNSPECIFIED

  """
  The source account of the transfer did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """The source or receiving account was not found."""
  ACCOUNT_NOT_FOUND

  """Idempotency Key not provided."""
  IDEMPOTENCY_KEY_NOT_PROVIDED

  """Transfer amount is negative or zero."""
  TRANSFER_AMOUNT_IS_NEGATIVE_OR_ZERO

  """The account number provided was invalid."""
  INVALID_ACCOUNT_NUMBER
}

"""The type of an `ExternalMoneyMovementTransactionEvent`."""
enum ExternalMoneyMovementTransactionEventType {
  """Indicates a payout event."""
  PAYOUT

  """Indicates a platform fee event."""
  PLATFORM_FEE
}

"""The status of the `ExternalMoneyMovementTransactionEvent`."""
enum ExternalMoneyMovementTransactionEventStatus {
  """The `ExternalMoneyMovementTransactionEvent` has been initiated."""
  INITIATED

  """The `ExternalMoneyMovementTransactionEvent` is processing."""
  PROCESSING

  """The `ExternalMoneyMovementTransactionEvent` has been processed."""
  PROCESSED

  """
  The `ExternalMoneyMovementTransactionEvent` has failed. See `failureReason` for more information.
  """
  FAILED
}

"""The reason for a `ExternalMoneyMovementTransactionEvent` failure."""
enum ExternalMoneyMovementTransactionEventStatusFailureReason {
  """
  The reason for the failure is unspecified, contact Highnote support for more information.
  """
  UNSPECIFIED

  """
  The source account of the transfer did not have enough funds to cover the requested amount.
  """
  INSUFFICIENT_FUNDS

  """The source or receiving account was not found."""
  ACCOUNT_NOT_FOUND

  """Idempotency Key not provided."""
  IDEMPOTENCY_KEY_NOT_PROVIDED

  """Transfer amount is negative or zero."""
  TRANSFER_AMOUNT_IS_NEGATIVE_OR_ZERO

  """The account number provided was invalid."""
  INVALID_ACCOUNT_NUMBER
}

"""A transaction event for an external money movement."""
type ExternalMoneyMovementTransactionEvent implements Node {
  """
  Global ID used to reference the `ExternalMoneyMovementTransactionEvent` in operations.
  """
  id: ID!

  """The amount of the `ExternalMoneyMovementTransactionEvent`."""
  amount: Amount

  """
  The date and time the transfer was created, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  createdAt: String

  """
  The date and time the transfer was last updated, in ISO 8601 format, e.g. 2024-01-01T00:00:00.000Z.
  """
  updatedAt: String

  """The type of the `ExternalMoneyMovementTransactionEvent`."""
  eventType: ExternalMoneyMovementTransactionEventType

  """The status of the `ExternalMoneyMovementTransactionEvent`."""
  status: ExternalMoneyMovementTransactionEventStatus

  """
  The reason for the failure of the `ExternalMoneyMovementTransactionEvent`.
  """
  failureReason: ExternalMoneyMovementTransactionEventStatusFailureReason

  """The ledgers affected by the DisbursementTransferEvent."""
  ledgers: [Ledger!]
}

"""Input for `initiateUnifiedFundsTransfer`."""
input InitiateUnifiedFundsTransferInput {
  """The `id` of the `UnifiedFundsTransferQuote` to initiate."""
  id: ID!
}

"""
Input for `createUnifiedFundsTransferQuote`.

One of `source.amount` or `destination.amount` must be provided, but not both. The other amount will be calculated based on the remaining amount after the fee.
"""
input CreateUnifiedFundsTransferQuoteInput {
  """The source of the funds to transfer."""
  source: UnifiedFundsTransferSourceInput!

  """The destination of the funds to transfer."""
  destination: UnifiedFundsTransferDestinationInput!

  """
  Externally provided ID (255 character limit) to associate this request with an external system.
  """
  externalIdentifier: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: String

  """
  The reason for the transfer.
  
  **Maximum length:** 1024 alphanumeric characters.
  """
  memo: String
}

"""The source of the funds to transfer."""
input UnifiedFundsTransferSourceInput {
  """The ID of a Highnote `Node` representing the source of the funds."""
  id: ID!

  """
  The amount of funds to source the transfer.
  
  If this is provided, the `destination.amount` will be calculated based on the exchange rate.
  """
  amount: AmountInput
}

"""The destination of the funds to transfer."""
input UnifiedFundsTransferDestinationInput {
  """The ID of a Highnote `Node` representing the destination of the funds."""
  id: ID!

  """
  The amount of funds to deposit in the destination.
  
  If this is provided, the `source.amount` will be calculated based on the exchange rate.
  """
  amount: AmountInput
}

"""Detail about the transfer."""
type UnifiedFundsTransferDetail {
  """
  A human-readable estimate of the time it will take for the transfer to complete.
  """
  timeEstimate: String

  """The total fee for the transfer."""
  feeTotal: Amount
}

"""
A quote generated by `createUnifiedFundsTransferQuote`. This is the first step towards transferring funds.
Show this quote to your customer for them to accept.

Once the quote is accepted, call `initiateUnifiedFundsTransfer` with the `UnifiedFundsTransferQuote.id` to initiate the transfer.
"""
type UnifiedFundsTransferQuote {
  """
  Identifier used to reference the quote. Will need to be passed into `initiateUnifiedFundsTransfer` to start a transfer
  """
  id: ID!

  """The date and time, in ISO 8601 format, when this object was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, when this object was last updated.
  """
  updatedAt: String

  """The date and time, in ISO 8601 format, when this transfer will expire."""
  expiresAt: String

  """The reason for the transfer."""
  memo: String

  """The source of the funds to transfer."""
  source: UnifiedFundsTransferSource

  """The destination of the funds to transfer."""
  destination: UnifiedFundsTransferDestination

  """The detail of the transfer including the fee and time estimate."""
  transferDetail: UnifiedFundsTransferDetail

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: String
}

"""
`UnifiedFundsTransfer` is a common type object used to transfer money between multiple objects.

Once the transfer has started, use `UnifiedFundsTransfer.transfer` to view the actual transfer between the source and destination objects.
"""
type UnifiedFundsTransfer implements Node {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, when this object was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, when this object was last updated.
  """
  updatedAt: String

  """The date and time, in ISO 8601 format, when this transfer will expire."""
  expiresAt: String

  """The source of the funds to transfer."""
  source: UnifiedFundsTransferSource

  """The destination of the funds to transfer."""
  destination: UnifiedFundsTransferDestination

  """The current status of the transfer."""
  status: UnifiedFundsTransferStatus

  """The steps associated with this transfer."""
  steps: [UnifiedFundsTransferStep!]

  """The detail of the transfer including the fee and time estimate."""
  transferDetail: UnifiedFundsTransferDetail

  """
  Externally provided ID (255 character limit) to associate this object with an external system.
  """
  externalIdentifier: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: String

  """The reason for the transfer."""
  memo: String
}

"""The types of transfers that the `UnifiedFundsTransfer` may start."""
union UnifiedFundsTransferStepTransfer = InstantNetworkTransfer

"""The source of the funds to transfer."""
type UnifiedFundsTransferSource {
  """If the source is a Highnote `Node`, this will be the `Node`."""
  node: UnifiedFundsTransferSourceNode

  """The amount of funds to source the transfer."""
  amount: Amount
}

"""The possible sources of the `UnifiedFundsTransfer`."""
union UnifiedFundsTransferSourceNode = FinancialAccount

"""The destination of the funds being transferred."""
type UnifiedFundsTransferDestination {
  """If the source is a Highnote `Node`, this will be the `Node`."""
  node: UnifiedFundsTransferDestinationNode

  """The amount of funds to deposit at the destination."""
  amount: Amount
}

"""The possible destinations of the `UnifiedFundsTransfer`."""
union UnifiedFundsTransferDestinationNode = FinancialAccount | PaymentMethodToken

"""The status of a `UnifiedFundsTransfer`."""
enum UnifiedFundsTransferStatus {
  """
  The `UnifiedFundsTransfer` status is unknown. Contact Highnote support for more information.
  """
  UNKNOWN

  """The `UnifiedFundsTransfer` has been initiated and is being processed."""
  PROCESSING

  """The `UnifiedFundsTransfer` has been completed."""
  COMPLETED

  """The `UnifiedFundsTransfer` has failed."""
  FAILED
}

"""The possible step types that the transfer may go through."""
enum UnifiedFundsTransferStepType {
  """
  The step type is unknown. Contact Highnote support for more information.
  """
  UNKNOWN

  """The transfer is currently in the `InstantNetworkTransfer` step."""
  INSTANT_NETWORK_TRANSFER

  """The transfer is currently being initiated."""
  INITIATE_TRANSFER
}

union UnifiedFundsTransferStep = UnifiedFundsTransferTransferStep

"""
A step associated with a `UnifiedFundsTransfer` when a transfer is taking place.
"""
type UnifiedFundsTransferTransferStep {
  """The global ID of the step."""
  id: ID

  """The status of the transfer at the time of this step."""
  status: UnifiedFundsTransferStatus

  """The step type of the of this step."""
  stepType: UnifiedFundsTransferStepType

  """The date and time, in ISO 8601 format, when this step occurred."""
  createdAt: String

  """The transfer associated with this step."""
  transfer: UnifiedFundsTransferStepTransfer
}

"""The result of `createUnifiedFundsTransferQuote`."""
type CreateUnifiedFundsTransferQuoteResult {
  """
  The `UnifiedFundsTransfer`s that can be offered to the end user for them to accept, and then initiate the transfer.
  """
  quotes: [UnifiedFundsTransferQuote!]
}

"""The possible results of `createUnifiedFundsTransferQuote`"""
union CreateUnifiedFundsTransferQuotePayload = UserError | AccessDeniedError | CreateUnifiedFundsTransferQuoteResult

"""The possible results of `initiateUnifiedFundsTransfer`"""
union InitiateUnifiedFundsTransferPayload = UserError | AccessDeniedError | UnifiedFundsTransfer

"""
Allows for transferring money between a `FinancialAccount` and a `PaymentMethodToken`.
"""
type InstantNetworkTransfer implements Node {
  """Global ID used to reference this object."""
  id: ID!

  """The date and time, in ISO 8601 format, when this object was created."""
  createdAt: String

  """
  The date and time, in ISO 8601 format, when this object was last updated.
  """
  updatedAt: String

  """The source of the funds to transfer."""
  source: InstantNetworkTransferSource

  """The destination of the funds to transfer."""
  destination: InstantNetworkTransferDestination

  """The current status of the transfer."""
  status: InstantNetworkTransferStatus

  """The events associated with this transfer."""
  events: [InstantNetworkTransferEvent!]

  """The detail of the transfer including the fee and time estimate."""
  transferDetail: InstantNetworkTransferDetail

  """
  Externally provided ID (255 character limit) to associate this object with an external system.
  """
  externalIdentifier: String

  """
  The idempotency key for this request.
  
  This is a UUIDv4 string used to uniquely identify requests.
  
  If a request with the same `IdempotencyKey` is received multiple times, only the first request will be processed. Subsequent requests will return the same response as the first request.
  
  [See this link for more](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
  """
  idempotencyKey: String

  """
  When the `InstantNetworkTransfer.status` is `FAILED`, this will be populated with the reason for the failure.
  """
  failureReason: InstantNetworkTransferFailureReason
}

"""Detail about the transfer."""
type InstantNetworkTransferDetail {
  """
  A human-readable estimate of the time it will take for the transfer to complete.
  """
  timeEstimate: String

  """The total fee for the transfer."""
  feeTotal: Amount
}

"""The source of the funds to transfer."""
type InstantNetworkTransferSource {
  """If the source is a Highnote `Node`, this will be the `Node`."""
  node: InstantNetworkTransferSourceNode

  """The amount of funds to source the transfer."""
  amount: Amount
}

"""The possible sources of the `InstantNetworkTransfer`."""
union InstantNetworkTransferSourceNode = FinancialAccount

"""The destination of the funds being transferred."""
type InstantNetworkTransferDestination {
  """If the source is a Highnote `Node`, this will be the `Node`."""
  node: InstantNetworkTransferDestinationNode

  """The amount of funds to deposit at the destination."""
  amount: Amount
}

"""The possible destinations of the `InstantNetworkTransfer`."""
union InstantNetworkTransferDestinationNode = PaymentMethodToken

"""The status of a `InstantNetworkTransfer`."""
enum InstantNetworkTransferStatus {
  """
  The `InstantNetworkTransfer` status is unknown. Contact Highnote support for more information.
  """
  UNKNOWN

  """The `InstantNetworkTransfer` is pending."""
  PENDING

  """The `InstantNetworkTransfer` has completed."""
  COMPLETED

  """The `InstantNetworkTransfer` has failed."""
  FAILED
}

"""
Possible types of events that have happened on `InstantNetworkTransfer`.
"""
enum InstantNetworkTransferEventType {
  """
  The `InstantNetworkTransfer` status is unknown. Contact Highnote support for more information.
  """
  UNKNOWN

  """The `InstantNetworkTransfer` has been authorized to push the funds."""
  AUTHORIZED_PUSH_PAYMENT_FUND

  """The `InstantNetworkTransfer` has pushed the funds."""
  PUSH_PAYMENT

  """The `InstantNetworkTransfer`'s pushed funds have been cleared."""
  CLEAR_PUSH_PAYMENT_FUND

  """The `InstantNetworkTransfer`'s pushed funds have been reversed."""
  REVERSED_PUSH_PAYMENT_FUND
}

"""An event associated with a `InstantNetworkTransfer`."""
type InstantNetworkTransferEvent implements Node {
  """The global ID of the event."""
  id: ID!

  """The type of event that has happened on the `InstantNetworkTransfer`."""
  type: InstantNetworkTransferEventType

  """The date and time, in ISO 8601 format, when this event occurred."""
  createdAt: String
}

"""Reasons that the `InstantNetworkTransfer` may have failed."""
enum InstantNetworkTransferFailureReason {
  """
  The `InstantNetworkTransfer` failed for a reason unspecified. Contact Highnote support for more information.
  """
  UNKNOWN

  """The `InstantNetworkTransfer` failed because the account was closed."""
  ACCOUNT_CLOSED

  """
  The `InstantNetworkTransfer` failed because the account was not active.
  """
  ACCOUNT_NOT_ACTIVE

  """The `InstantNetworkTransfer` failed because the account was not found."""
  ACCOUNT_NOT_FOUND

  """
  The `InstantNetworkTransfer` failed because the source did not have enough funds for the transfer.
  """
  INSUFFICIENT_FUNDS

  """
  The `InstantNetworkTransfer` failed because the transfer was not supported between source and destination.
  """
  TRANSFER_NOT_SUPPORTED
}